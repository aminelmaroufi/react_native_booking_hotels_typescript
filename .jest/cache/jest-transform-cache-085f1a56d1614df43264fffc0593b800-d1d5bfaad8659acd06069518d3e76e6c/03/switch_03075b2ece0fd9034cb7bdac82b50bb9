1963bd76e0a6753883eb14458acb687b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Switch = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Switch = function Switch(_a) {
  var _b, _c, _d;
  var _a$value = _a.value,
    value = _a$value === void 0 ? false : _a$value,
    _a$disabled = _a.disabled,
    disabled = _a$disabled === void 0 ? false : _a$disabled,
    onValueChange = _a.onValueChange,
    _a$color = _a.color,
    color = _a$color === void 0 ? 'primary' : _a$color,
    style = _a.style,
    theme = _a.theme,
    rest = __rest(_a, ["value", "disabled", "onValueChange", "color", "style", "theme"]);
  var switchedOnColor = color === 'primary' ? ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.primary) ? theme.colors.primary : '' : color;
  var onTintColor = _reactNative.Platform.OS === 'ios' || !disabled ? switchedOnColor : ((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.disabled) ? theme.colors.disabled : '';
  var thumbTintColor = _reactNative.Platform.OS === 'ios' ? undefined : disabled || !value ? (_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.disabled : switchedOnColor;
  var props = _reactNative.Platform.OS === 'web' ? {
    activeTrackColor: onTintColor,
    thumbColor: thumbTintColor,
    activeThumbColor: switchedOnColor
  } : {
    thumbColor: thumbTintColor,
    trackColor: {
      true: onTintColor,
      false: ''
    }
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Switch, (0, _extends2.default)({
    value: value,
    accessibilityState: {
      checked: value,
      disabled: disabled
    },
    disabled: disabled,
    onValueChange: disabled ? undefined : onValueChange,
    style: style
  }, props, rest));
};
exports.Switch = Switch;
var _default = (0, _config.withTheme)(Switch, 'Switch');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfanN4UnVudGltZSIsIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiU3dpdGNoIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfYSR2YWx1ZSIsInZhbHVlIiwiX2EkZGlzYWJsZWQiLCJkaXNhYmxlZCIsIm9uVmFsdWVDaGFuZ2UiLCJfYSRjb2xvciIsImNvbG9yIiwic3R5bGUiLCJ0aGVtZSIsInJlc3QiLCJzd2l0Y2hlZE9uQ29sb3IiLCJjb2xvcnMiLCJwcmltYXJ5Iiwib25UaW50Q29sb3IiLCJQbGF0Zm9ybSIsIk9TIiwidGh1bWJUaW50Q29sb3IiLCJ1bmRlZmluZWQiLCJwcm9wcyIsImFjdGl2ZVRyYWNrQ29sb3IiLCJ0aHVtYkNvbG9yIiwiYWN0aXZlVGh1bWJDb2xvciIsInRyYWNrQ29sb3IiLCJ0cnVlIiwiZmFsc2UiLCJqc3giLCJfZXh0ZW5kczIiLCJkZWZhdWx0IiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwiY2hlY2tlZCIsImV4cG9ydHMiLCJfZGVmYXVsdCIsIndpdGhUaGVtZSJdLCJzb3VyY2VzIjpbInN3aXRjaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3dpdGNoIGFzIE5hdGl2ZVN3aXRjaCwgUGxhdGZvcm0sIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5jb25zdCBTd2l0Y2ggPSAoX2EpID0+IHtcbiAgICB2YXIgX2IsIF9jLCBfZDtcbiAgICB2YXIgeyB2YWx1ZSA9IGZhbHNlLCBkaXNhYmxlZCA9IGZhbHNlLCBvblZhbHVlQ2hhbmdlLCBjb2xvciA9ICdwcmltYXJ5Jywgc3R5bGUsIHRoZW1lIH0gPSBfYSwgcmVzdCA9IF9fcmVzdChfYSwgW1widmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcIm9uVmFsdWVDaGFuZ2VcIiwgXCJjb2xvclwiLCBcInN0eWxlXCIsIFwidGhlbWVcIl0pO1xuICAgIC8vIHN3aXRjaGVkT25Db2xvciBkZWFscyB3aXRoIHBpY2tpbmcgdXAgYSBjb2xvciBwcm92aWRlZCBhcyBwcm9wcyBieSB1c2VyIG9yIHBpY2tzIHVwIGRlZmF1bHQgdGhlbWVcbiAgICBjb25zdCBzd2l0Y2hlZE9uQ29sb3IgPSBjb2xvciA9PT0gJ3ByaW1hcnknXG4gICAgICAgID8gKChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5wcmltYXJ5KSA/IHRoZW1lLmNvbG9ycy5wcmltYXJ5XG4gICAgICAgICAgICA6ICcnXG4gICAgICAgIDogY29sb3I7XG4gICAgY29uc3Qgb25UaW50Q29sb3IgPSBQbGF0Zm9ybS5PUyA9PT0gJ2lvcycgfHwgIWRpc2FibGVkXG4gICAgICAgID8gc3dpdGNoZWRPbkNvbG9yXG4gICAgICAgIDogKChfYyA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5kaXNhYmxlZCkgPyB0aGVtZS5jb2xvcnMuZGlzYWJsZWRcbiAgICAgICAgICAgIDogJyc7XG4gICAgY29uc3QgdGh1bWJUaW50Q29sb3IgPSBQbGF0Zm9ybS5PUyA9PT0gJ2lvcydcbiAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgOiBkaXNhYmxlZCB8fCAhdmFsdWVcbiAgICAgICAgICAgID8gKF9kID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmRpc2FibGVkIDogc3dpdGNoZWRPbkNvbG9yO1xuICAgIGNvbnN0IHByb3BzID0gUGxhdGZvcm0uT1MgPT09ICd3ZWInXG4gICAgICAgID8ge1xuICAgICAgICAgICAgYWN0aXZlVHJhY2tDb2xvcjogb25UaW50Q29sb3IsXG4gICAgICAgICAgICB0aHVtYkNvbG9yOiB0aHVtYlRpbnRDb2xvcixcbiAgICAgICAgICAgIGFjdGl2ZVRodW1iQ29sb3I6IHN3aXRjaGVkT25Db2xvcixcbiAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIHRodW1iQ29sb3I6IHRodW1iVGludENvbG9yLFxuICAgICAgICAgICAgdHJhY2tDb2xvcjoge1xuICAgICAgICAgICAgICAgIHRydWU6IG9uVGludENvbG9yLFxuICAgICAgICAgICAgICAgIGZhbHNlOiAnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgcmV0dXJuICg8TmF0aXZlU3dpdGNoIHZhbHVlPXt2YWx1ZX0gYWNjZXNzaWJpbGl0eVN0YXRlPXt7XG4gICAgICAgIGNoZWNrZWQ6IHZhbHVlLFxuICAgICAgICBkaXNhYmxlZCxcbiAgICB9fSBkaXNhYmxlZD17ZGlzYWJsZWR9IG9uVmFsdWVDaGFuZ2U9e2Rpc2FibGVkID8gdW5kZWZpbmVkIDogb25WYWx1ZUNoYW5nZX0gc3R5bGU9e3N0eWxlfSB7Li4ucHJvcHN9IHsuLi5yZXN0fS8+KTtcbn07XG5leHBvcnQgeyBTd2l0Y2ggfTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShTd2l0Y2gsICdTd2l0Y2gnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBV0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQXNDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQWJ0QyxJQUFJSSxNQUFNLEdBQUksSUFBSSxJQUFJLElBQUksQ0FBQ0EsTUFBTSxJQUFLLFVBQVVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ2xELElBQUlDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDVixLQUFLLElBQUlDLENBQUMsSUFBSUgsQ0FBQyxFQUFFLElBQUlJLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1AsQ0FBQyxFQUFFRyxDQUFDLENBQUMsSUFBSUYsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDL0VELENBQUMsQ0FBQ0MsQ0FBQyxDQUFDLEdBQUdILENBQUMsQ0FBQ0csQ0FBQyxDQUFDO0VBQ2YsSUFBSUgsQ0FBQyxJQUFJLElBQUksSUFBSSxPQUFPSSxNQUFNLENBQUNLLHFCQUFxQixLQUFLLFVBQVUsRUFDL0QsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFUCxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0sscUJBQXFCLENBQUNULENBQUMsQ0FBQyxFQUFFVSxDQUFDLEdBQUdQLENBQUMsQ0FBQ1EsTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRTtJQUNwRSxJQUFJVCxDQUFDLENBQUNPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSU4sTUFBTSxDQUFDQyxTQUFTLENBQUNPLG9CQUFvQixDQUFDTCxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxFQUMxRVIsQ0FBQyxDQUFDQyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEdBQUdWLENBQUMsQ0FBQ0csQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQztFQUN6QjtFQUNKLE9BQU9SLENBQUM7QUFDWixDQUFDO0FBSUQsSUFBTVcsTUFBTSxHQUFHLFNBQVRBLE1BQU1BLENBQUlDLEVBQUUsRUFBSztFQUNuQixJQUFJQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRTtFQUNkLElBQUFDLFFBQUEsR0FBMEZKLEVBQUUsQ0FBdEZLLEtBQUs7SUFBTEEsS0FBSyxHQUFBRCxRQUFBLGNBQUcsS0FBSyxHQUFBQSxRQUFBO0lBQUFFLFdBQUEsR0FBdUVOLEVBQUUsQ0FBdkVPLFFBQVE7SUFBUkEsUUFBUSxHQUFBRCxXQUFBLGNBQUcsS0FBSyxHQUFBQSxXQUFBO0lBQUVFLGFBQWEsR0FBc0NSLEVBQUUsQ0FBckRRLGFBQWE7SUFBQUMsUUFBQSxHQUFzQ1QsRUFBRSxDQUF0Q1UsS0FBSztJQUFMQSxLQUFLLEdBQUFELFFBQUEsY0FBRyxTQUFTLEdBQUFBLFFBQUE7SUFBRUUsS0FBSyxHQUFZWCxFQUFFLENBQW5CVyxLQUFLO0lBQUVDLEtBQUssR0FBS1osRUFBRSxDQUFaWSxLQUFLO0lBQVNDLElBQUksR0FBRzVCLE1BQU0sQ0FBQ2UsRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztFQUVsTCxJQUFNYyxlQUFlLEdBQUdKLEtBQUssS0FBSyxTQUFTLEdBQ3JDLENBQUMsQ0FBQ1QsRUFBRSxHQUFHVyxLQUFLLEtBQUssSUFBSSxJQUFJQSxLQUFLLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEtBQUssQ0FBQ0csTUFBTSxNQUFNLElBQUksSUFBSWQsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNlLE9BQU8sSUFBSUosS0FBSyxDQUFDRyxNQUFNLENBQUNDLE9BQU8sR0FDdEksRUFBRSxHQUNOTixLQUFLO0VBQ1gsSUFBTU8sV0FBVyxHQUFHQyxxQkFBUSxDQUFDQyxFQUFFLEtBQUssS0FBSyxJQUFJLENBQUNaLFFBQVEsR0FDaERPLGVBQWUsR0FDZixDQUFDLENBQUNaLEVBQUUsR0FBR1UsS0FBSyxLQUFLLElBQUksSUFBSUEsS0FBSyxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxLQUFLLENBQUNHLE1BQU0sTUFBTSxJQUFJLElBQUliLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBR0EsRUFBRSxDQUFDSyxRQUFRLElBQUlLLEtBQUssQ0FBQ0csTUFBTSxDQUFDUixRQUFRLEdBQ3hJLEVBQUU7RUFDWixJQUFNYSxjQUFjLEdBQUdGLHFCQUFRLENBQUNDLEVBQUUsS0FBSyxLQUFLLEdBQ3RDRSxTQUFTLEdBQ1RkLFFBQVEsSUFBSSxDQUFDRixLQUFLLEdBQ2QsQ0FBQ0YsRUFBRSxHQUFHUyxLQUFLLEtBQUssSUFBSSxJQUFJQSxLQUFLLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEtBQUssQ0FBQ0csTUFBTSxNQUFNLElBQUksSUFBSVosRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNJLFFBQVEsR0FBR08sZUFBZTtFQUM5SSxJQUFNUSxLQUFLLEdBQUdKLHFCQUFRLENBQUNDLEVBQUUsS0FBSyxLQUFLLEdBQzdCO0lBQ0VJLGdCQUFnQixFQUFFTixXQUFXO0lBQzdCTyxVQUFVLEVBQUVKLGNBQWM7SUFDMUJLLGdCQUFnQixFQUFFWDtFQUN0QixDQUFDLEdBQ0M7SUFDRVUsVUFBVSxFQUFFSixjQUFjO0lBQzFCTSxVQUFVLEVBQUU7TUFDUkMsSUFBSSxFQUFFVixXQUFXO01BQ2pCVyxLQUFLLEVBQUU7SUFDWDtFQUNKLENBQUM7RUFDTCxPQUFRLElBQUE1QyxXQUFBLENBQUE2QyxHQUFBLEVBQUMvQyxZQUFBLENBQUFpQixNQUFZLE1BQUErQixTQUFBLENBQUFDLE9BQUE7SUFBQzFCLEtBQUssRUFBRUEsS0FBTTtJQUFDMkIsa0JBQWtCLEVBQUU7TUFDcERDLE9BQU8sRUFBRTVCLEtBQUs7TUFDZEUsUUFBUSxFQUFSQTtJQUNKLENBQUU7SUFBQ0EsUUFBUSxFQUFFQSxRQUFTO0lBQUNDLGFBQWEsRUFBRUQsUUFBUSxHQUFHYyxTQUFTLEdBQUdiLGFBQWM7SUFBQ0csS0FBSyxFQUFFQTtFQUFNLEdBQUtXLEtBQUssRUFBTVQsSUFBSSxFQUFHO0FBQ3BILENBQUM7QUFBQ3FCLE9BQUEsQ0FBQW5DLE1BQUEsR0FBQUEsTUFBQTtBQUFBLElBQUFvQyxRQUFBLEdBRWEsSUFBQUMsaUJBQVMsRUFBQ3JDLE1BQU0sRUFBRSxRQUFRLENBQUM7QUFBQW1DLE9BQUEsQ0FBQUgsT0FBQSxHQUFBSSxRQUFBIn0=