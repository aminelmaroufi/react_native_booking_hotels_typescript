d86d3e7bdb4a6e2cf69596c95fdf4fcf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Input = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _helpers = require("../helpers");
var _config = require("../config");
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _jsxRuntime = require("react/jsx-runtime");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var renderText = function renderText(content, defaultProps, style) {
  return (0, _helpers.renderNode)(_reactNative.Text, content, (0, _extends2.default)((0, _extends2.default)({}, defaultProps), {
    style: _reactNative.StyleSheet.flatten([style, defaultProps && defaultProps.style])
  }));
};
var Input = function (_React$Component) {
  (0, _inherits2.default)(Input, _React$Component);
  var _super = _createSuper(Input);
  function Input() {
    var _this;
    (0, _classCallCheck2.default)(this, Input);
    _this = _super.apply(this, arguments);
    _this.shakeAnimationValue = new _reactNative.Animated.Value(0);
    _this.shake = function () {
      var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),
        shakeAnimationValue = _assertThisInitialize.shakeAnimationValue;
      shakeAnimationValue.setValue(0);
      _reactNative.Animated.timing(shakeAnimationValue, {
        duration: 375,
        toValue: 3,
        easing: _reactNative.Easing.bounce,
        useNativeDriver: true
      }).start();
    };
    return _this;
  }
  (0, _createClass2.default)(Input, [{
    key: "focus",
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: "clear",
    value: function clear() {
      this.input.clear();
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this.input.isFocused();
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps(nativeProps) {
      this.input.setNativeProps(nativeProps);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _a, _b, _c, _d, _e;
      var _f = this.props,
        containerStyle = _f.containerStyle,
        disabled = _f.disabled,
        disabledInputStyle = _f.disabledInputStyle,
        inputContainerStyle = _f.inputContainerStyle,
        leftIcon = _f.leftIcon,
        leftIconContainerStyle = _f.leftIconContainerStyle,
        rightIcon = _f.rightIcon,
        rightIconContainerStyle = _f.rightIconContainerStyle,
        _f$InputComponent = _f.InputComponent,
        InputComponent = _f$InputComponent === void 0 ? _reactNative.TextInput : _f$InputComponent,
        inputStyle = _f.inputStyle,
        errorProps = _f.errorProps,
        errorStyle = _f.errorStyle,
        errorMessage = _f.errorMessage,
        label = _f.label,
        labelStyle = _f.labelStyle,
        labelProps = _f.labelProps,
        theme = _f.theme,
        _f$renderErrorMessage = _f.renderErrorMessage,
        renderErrorMessage = _f$renderErrorMessage === void 0 ? true : _f$renderErrorMessage,
        style = _f.style,
        attributes = __rest(_f, ["containerStyle", "disabled", "disabledInputStyle", "inputContainerStyle", "leftIcon", "leftIconContainerStyle", "rightIcon", "rightIconContainerStyle", "InputComponent", "inputStyle", "errorProps", "errorStyle", "errorMessage", "label", "labelStyle", "labelProps", "theme", "renderErrorMessage", "style"]);
      var translateX = this.shakeAnimationValue.interpolate({
        inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],
        outputRange: [0, -15, 0, 15, 0, -15, 0]
      });
      var hideErrorMessage = !renderErrorMessage && !errorMessage;
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, containerStyle]),
        children: [renderText(label, (0, _extends2.default)({
          style: labelStyle
        }, labelProps), (0, _extends2.default)({
          fontSize: 16,
          color: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.grey3
        }, _reactNative.Platform.select({
          android: (0, _extends2.default)({}, _config.fonts.android.bold),
          default: {
            fontWeight: 'bold'
          }
        }))), (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
          style: _reactNative.StyleSheet.flatten([{
            flexDirection: 'row',
            borderBottomWidth: 1,
            alignItems: 'center',
            borderColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey3
          }, inputContainerStyle, {
            transform: [{
              translateX: translateX
            }]
          }]),
          children: [leftIcon && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: _reactNative.StyleSheet.flatten([styles.iconContainer, leftIconContainerStyle]),
            children: (0, _helpers.renderNode)(_Icon.default, leftIcon)
          }), (0, _jsxRuntime.jsx)(InputComponent, (0, _extends2.default)({
            testID: "RNE__Input__text-input",
            underlineColorAndroid: "transparent",
            editable: !disabled,
            ref: function ref(_ref) {
              _this2.input = _ref;
            },
            style: _reactNative.StyleSheet.flatten([{
              color: (_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.black,
              fontSize: 18,
              flex: 1,
              minHeight: 40
            }, inputStyle, disabled && styles.disabledInput, disabled && disabledInputStyle, style]),
            placeholderTextColor: (_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.grey3
          }, (0, _helpers.patchWebProps)(attributes))), rightIcon && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: _reactNative.StyleSheet.flatten([styles.iconContainer, rightIconContainerStyle]),
            children: (0, _helpers.renderNode)(_Icon.default, rightIcon)
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, (0, _extends2.default)({}, errorProps, {
          style: _reactNative.StyleSheet.flatten([{
            margin: 5,
            fontSize: 12,
            color: (_e = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _e === void 0 ? void 0 : _e.error
          }, errorStyle && errorStyle, hideErrorMessage && {
            height: 0,
            margin: 0,
            padding: 0
          }]),
          children: errorMessage
        }))]
      });
    }
  }]);
  return Input;
}(_react.default.Component);
exports.Input = Input;
var styles = _reactNative.StyleSheet.create({
  container: {
    width: '100%',
    paddingHorizontal: 10
  },
  disabledInput: {
    opacity: 0.5
  },
  iconContainer: {
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    paddingRight: 4,
    marginVertical: 4
  }
});
var _default = (0, _config.withTheme)(Input, 'Input');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,