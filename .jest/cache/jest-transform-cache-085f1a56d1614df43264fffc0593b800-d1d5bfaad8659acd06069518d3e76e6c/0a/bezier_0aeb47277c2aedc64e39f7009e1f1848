f8162595c59a286fdff68f4092b05c34
'use strict';
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;
var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
var float32ArraySupported = typeof Float32Array === 'function';
function A(aA1, aA2) {
  return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}
function B(aA1, aA2) {
  return 3.0 * aA2 - 6.0 * aA1;
}
function C(aA1) {
  return 3.0 * aA1;
}
function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}
function getSlope(aT, aA1, aA2) {
  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}
function binarySubdivide(aX, _aA, _aB, mX1, mX2) {
  var currentX,
    currentT,
    i = 0,
    aA = _aA,
    aB = _aB;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}
function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
  var aGuessT = _aGuessT;
  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0.0) {
      return aGuessT;
    }
    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}
module.exports = function bezier(mX1, mY1, mX2, mY2) {
  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }
  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }
  function getTForX(aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;
    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }
  return function BezierEasing(x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJORVdUT05fSVRFUkFUSU9OUyIsIk5FV1RPTl9NSU5fU0xPUEUiLCJTVUJESVZJU0lPTl9QUkVDSVNJT04iLCJTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyIsImtTcGxpbmVUYWJsZVNpemUiLCJrU2FtcGxlU3RlcFNpemUiLCJmbG9hdDMyQXJyYXlTdXBwb3J0ZWQiLCJGbG9hdDMyQXJyYXkiLCJBIiwiYUExIiwiYUEyIiwiQiIsIkMiLCJjYWxjQmV6aWVyIiwiYVQiLCJnZXRTbG9wZSIsImJpbmFyeVN1YmRpdmlkZSIsImFYIiwiX2FBIiwiX2FCIiwibVgxIiwibVgyIiwiY3VycmVudFgiLCJjdXJyZW50VCIsImkiLCJhQSIsImFCIiwiTWF0aCIsImFicyIsIm5ld3RvblJhcGhzb25JdGVyYXRlIiwiX2FHdWVzc1QiLCJhR3Vlc3NUIiwiY3VycmVudFNsb3BlIiwibW9kdWxlIiwiZXhwb3J0cyIsImJlemllciIsIm1ZMSIsIm1ZMiIsIkVycm9yIiwic2FtcGxlVmFsdWVzIiwiQXJyYXkiLCJnZXRURm9yWCIsImludGVydmFsU3RhcnQiLCJjdXJyZW50U2FtcGxlIiwibGFzdFNhbXBsZSIsImRpc3QiLCJndWVzc0ZvclQiLCJpbml0aWFsU2xvcGUiLCJCZXppZXJFYXNpbmciLCJ4Il0sInNvdXJjZXMiOlsiYmV6aWVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUG9ydGlvbnMgQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuLyoqXG4gKiBCZXppZXJFYXNpbmcgLSB1c2UgYmV6aWVyIGN1cnZlIGZvciB0cmFuc2l0aW9uIGVhc2luZyBmdW5jdGlvblxuICogaHR0cHM6Ly9naXRodWIuY29tL2dyZS9iZXppZXItZWFzaW5nXG4gKiBAY29weXJpZ2h0IDIwMTQtMjAxNSBHYcOrdGFuIFJlbmF1ZGVhdS4gTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGVzZSB2YWx1ZXMgYXJlIGVzdGFibGlzaGVkIGJ5IGVtcGlyaWNpc20gd2l0aCB0ZXN0cyAodHJhZGVvZmY6IHBlcmZvcm1hbmNlIFZTIHByZWNpc2lvbilcbmNvbnN0IE5FV1RPTl9JVEVSQVRJT05TID0gNDtcbmNvbnN0IE5FV1RPTl9NSU5fU0xPUEUgPSAwLjAwMTtcbmNvbnN0IFNVQkRJVklTSU9OX1BSRUNJU0lPTiA9IDAuMDAwMDAwMTtcbmNvbnN0IFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TID0gMTA7XG5cbmNvbnN0IGtTcGxpbmVUYWJsZVNpemUgPSAxMTtcbmNvbnN0IGtTYW1wbGVTdGVwU2l6ZSA9IDEuMCAvIChrU3BsaW5lVGFibGVTaXplIC0gMS4wKTtcblxuY29uc3QgZmxvYXQzMkFycmF5U3VwcG9ydGVkID0gdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ2Z1bmN0aW9uJztcblxuZnVuY3Rpb24gQShhQTEsIGFBMikge1xuICByZXR1cm4gMS4wIC0gMy4wICogYUEyICsgMy4wICogYUExO1xufVxuZnVuY3Rpb24gQihhQTEsIGFBMikge1xuICByZXR1cm4gMy4wICogYUEyIC0gNi4wICogYUExO1xufVxuZnVuY3Rpb24gQyhhQTEpIHtcbiAgcmV0dXJuIDMuMCAqIGFBMTtcbn1cblxuLy8gUmV0dXJucyB4KHQpIGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIHkodCkgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cbmZ1bmN0aW9uIGNhbGNCZXppZXIoYVQsIGFBMSwgYUEyKSB7XG4gIHJldHVybiAoKEEoYUExLCBhQTIpICogYVQgKyBCKGFBMSwgYUEyKSkgKiBhVCArIEMoYUExKSkgKiBhVDtcbn1cblxuLy8gUmV0dXJucyBkeC9kdCBnaXZlbiB0LCB4MSwgYW5kIHgyLCBvciBkeS9kdCBnaXZlbiB0LCB5MSwgYW5kIHkyLlxuZnVuY3Rpb24gZ2V0U2xvcGUoYVQsIGFBMSwgYUEyKSB7XG4gIHJldHVybiAzLjAgKiBBKGFBMSwgYUEyKSAqIGFUICogYVQgKyAyLjAgKiBCKGFBMSwgYUEyKSAqIGFUICsgQyhhQTEpO1xufVxuXG5mdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUoYVgsIF9hQSwgX2FCLCBtWDEsIG1YMikge1xuICBsZXQgY3VycmVudFgsXG4gICAgY3VycmVudFQsXG4gICAgaSA9IDAsXG4gICAgYUEgPSBfYUEsXG4gICAgYUIgPSBfYUI7XG4gIGRvIHtcbiAgICBjdXJyZW50VCA9IGFBICsgKGFCIC0gYUEpIC8gMi4wO1xuICAgIGN1cnJlbnRYID0gY2FsY0JlemllcihjdXJyZW50VCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgaWYgKGN1cnJlbnRYID4gMC4wKSB7XG4gICAgICBhQiA9IGN1cnJlbnRUO1xuICAgIH0gZWxzZSB7XG4gICAgICBhQSA9IGN1cnJlbnRUO1xuICAgIH1cbiAgfSB3aGlsZSAoXG4gICAgTWF0aC5hYnMoY3VycmVudFgpID4gU1VCRElWSVNJT05fUFJFQ0lTSU9OICYmXG4gICAgKytpIDwgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlNcbiAgKTtcbiAgcmV0dXJuIGN1cnJlbnRUO1xufVxuXG5mdW5jdGlvbiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgX2FHdWVzc1QsIG1YMSwgbVgyKSB7XG4gIGxldCBhR3Vlc3NUID0gX2FHdWVzc1Q7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgTkVXVE9OX0lURVJBVElPTlM7ICsraSkge1xuICAgIGNvbnN0IGN1cnJlbnRTbG9wZSA9IGdldFNsb3BlKGFHdWVzc1QsIG1YMSwgbVgyKTtcbiAgICBpZiAoY3VycmVudFNsb3BlID09PSAwLjApIHtcbiAgICAgIHJldHVybiBhR3Vlc3NUO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgYUd1ZXNzVCAtPSBjdXJyZW50WCAvIGN1cnJlbnRTbG9wZTtcbiAgfVxuICByZXR1cm4gYUd1ZXNzVDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiZXppZXIoXG4gIG1YMTogbnVtYmVyLFxuICBtWTE6IG51bWJlcixcbiAgbVgyOiBudW1iZXIsXG4gIG1ZMjogbnVtYmVyLFxuKTogKHg6IG51bWJlcikgPT4gbnVtYmVyIHtcbiAgaWYgKCEobVgxID49IDAgJiYgbVgxIDw9IDEgJiYgbVgyID49IDAgJiYgbVgyIDw9IDEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdiZXppZXIgeCB2YWx1ZXMgbXVzdCBiZSBpbiBbMCwgMV0gcmFuZ2UnKTtcbiAgfVxuXG4gIC8vIFByZWNvbXB1dGUgc2FtcGxlcyB0YWJsZVxuICBjb25zdCBzYW1wbGVWYWx1ZXMgPSBmbG9hdDMyQXJyYXlTdXBwb3J0ZWRcbiAgICA/IG5ldyBGbG9hdDMyQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSlcbiAgICA6IG5ldyBBcnJheShrU3BsaW5lVGFibGVTaXplKTtcbiAgaWYgKG1YMSAhPT0gbVkxIHx8IG1YMiAhPT0gbVkyKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrU3BsaW5lVGFibGVTaXplOyArK2kpIHtcbiAgICAgIHNhbXBsZVZhbHVlc1tpXSA9IGNhbGNCZXppZXIoaSAqIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRGb3JYKGFYKSB7XG4gICAgbGV0IGludGVydmFsU3RhcnQgPSAwLjA7XG4gICAgbGV0IGN1cnJlbnRTYW1wbGUgPSAxO1xuICAgIGNvbnN0IGxhc3RTYW1wbGUgPSBrU3BsaW5lVGFibGVTaXplIC0gMTtcblxuICAgIGZvciAoXG4gICAgICA7XG4gICAgICBjdXJyZW50U2FtcGxlICE9PSBsYXN0U2FtcGxlICYmIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSA8PSBhWDtcbiAgICAgICsrY3VycmVudFNhbXBsZVxuICAgICkge1xuICAgICAgaW50ZXJ2YWxTdGFydCArPSBrU2FtcGxlU3RlcFNpemU7XG4gICAgfVxuICAgIC0tY3VycmVudFNhbXBsZTtcblxuICAgIC8vIEludGVycG9sYXRlIHRvIHByb3ZpZGUgYW4gaW5pdGlhbCBndWVzcyBmb3IgdFxuICAgIGNvbnN0IGRpc3QgPVxuICAgICAgKGFYIC0gc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKSAvXG4gICAgICAoc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XG4gICAgY29uc3QgZ3Vlc3NGb3JUID0gaW50ZXJ2YWxTdGFydCArIGRpc3QgKiBrU2FtcGxlU3RlcFNpemU7XG5cbiAgICBjb25zdCBpbml0aWFsU2xvcGUgPSBnZXRTbG9wZShndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICBpZiAoaW5pdGlhbFNsb3BlID49IE5FV1RPTl9NSU5fU0xPUEUpIHtcbiAgICAgIHJldHVybiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgfSBlbHNlIGlmIChpbml0aWFsU2xvcGUgPT09IDAuMCkge1xuICAgICAgcmV0dXJuIGd1ZXNzRm9yVDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJpbmFyeVN1YmRpdmlkZShcbiAgICAgICAgYVgsXG4gICAgICAgIGludGVydmFsU3RhcnQsXG4gICAgICAgIGludGVydmFsU3RhcnQgKyBrU2FtcGxlU3RlcFNpemUsXG4gICAgICAgIG1YMSxcbiAgICAgICAgbVgyLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gQmV6aWVyRWFzaW5nKHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKSB7XG4gICAgICByZXR1cm4geDsgLy8gbGluZWFyXG4gICAgfVxuICAgIC8vIEJlY2F1c2UgSmF2YVNjcmlwdCBudW1iZXIgYXJlIGltcHJlY2lzZSwgd2Ugc2hvdWxkIGd1YXJhbnRlZSB0aGUgZXh0cmVtZXMgYXJlIHJpZ2h0LlxuICAgIGlmICh4ID09PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKHggPT09IDEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gY2FsY0JlemllcihnZXRURm9yWCh4KSwgbVkxLCBtWTIpO1xuICB9O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBZ0JBLFlBQVk7QUFHWixJQUFNQSxpQkFBaUIsR0FBRyxDQUFDO0FBQzNCLElBQU1DLGdCQUFnQixHQUFHLEtBQUs7QUFDOUIsSUFBTUMscUJBQXFCLEdBQUcsU0FBUztBQUN2QyxJQUFNQywwQkFBMEIsR0FBRyxFQUFFO0FBRXJDLElBQU1DLGdCQUFnQixHQUFHLEVBQUU7QUFDM0IsSUFBTUMsZUFBZSxHQUFHLEdBQUcsSUFBSUQsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBRXRELElBQU1FLHFCQUFxQixHQUFHLE9BQU9DLFlBQVksS0FBSyxVQUFVO0FBRWhFLFNBQVNDLENBQUNBLENBQUNDLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0VBQ25CLE9BQU8sR0FBRyxHQUFHLEdBQUcsR0FBR0EsR0FBRyxHQUFHLEdBQUcsR0FBR0QsR0FBRztBQUNwQztBQUNBLFNBQVNFLENBQUNBLENBQUNGLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0VBQ25CLE9BQU8sR0FBRyxHQUFHQSxHQUFHLEdBQUcsR0FBRyxHQUFHRCxHQUFHO0FBQzlCO0FBQ0EsU0FBU0csQ0FBQ0EsQ0FBQ0gsR0FBRyxFQUFFO0VBQ2QsT0FBTyxHQUFHLEdBQUdBLEdBQUc7QUFDbEI7QUFHQSxTQUFTSSxVQUFVQSxDQUFDQyxFQUFFLEVBQUVMLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0VBQ2hDLE9BQU8sQ0FBQyxDQUFDRixDQUFDLENBQUNDLEdBQUcsRUFBRUMsR0FBRyxDQUFDLEdBQUdJ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