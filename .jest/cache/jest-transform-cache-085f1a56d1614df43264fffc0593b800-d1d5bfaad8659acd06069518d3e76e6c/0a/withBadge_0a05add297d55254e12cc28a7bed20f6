629c6b23f2f95c1eea1713551db53eb7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _Badge = _interopRequireDefault(require("./Badge"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var withBadge = function withBadge(value) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function (WrappedComponent) {
    var WithBadge = function WithBadge(props) {
      var bottom = options.bottom,
        _options$hidden = options.hidden,
        hidden = _options$hidden === void 0 ? false : _options$hidden,
        left = options.left,
        containerStyle = options.containerStyle,
        badgeProps = __rest(options, ["bottom", "hidden", "left", "containerStyle"]);
      var _options$right = options.right,
        right = _options$right === void 0 ? -16 : _options$right,
        _options$top = options.top,
        top = _options$top === void 0 ? -1 : _options$top;
      if (!value) {
        right = -3;
        top = 3;
      }
      var badgeValue = typeof value === 'function' ? value(props) : value;
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, containerStyle]),
        children: [(0, _jsxRuntime.jsx)(WrappedComponent, (0, _extends2.default)({}, props)), !hidden && (0, _jsxRuntime.jsx)(_Badge.default, (0, _extends2.default)({
          value: badgeValue,
          status: "error",
          containerStyle: _reactNative.StyleSheet.flatten([styles.badgeContainer, {
            bottom: bottom,
            left: left,
            right: right,
            top: top
          }])
        }, badgeProps))]
      });
    };
    WithBadge.displayName = "WithBadge(" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + ")";
    return WithBadge;
  };
};
var styles = _reactNative.StyleSheet.create({
  badgeContainer: {
    position: 'absolute'
  },
  container: {
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative'
  }
});
var _default = withBadge;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CYWRnZSIsIl9qc3hSdW50aW1lIiwiX19yZXN0IiwicyIsImUiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ3aXRoQmFkZ2UiLCJ2YWx1ZSIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJXcmFwcGVkQ29tcG9uZW50IiwiV2l0aEJhZGdlIiwicHJvcHMiLCJib3R0b20iLCJfb3B0aW9ucyRoaWRkZW4iLCJoaWRkZW4iLCJsZWZ0IiwiY29udGFpbmVyU3R5bGUiLCJiYWRnZVByb3BzIiwiX29wdGlvbnMkcmlnaHQiLCJyaWdodCIsIl9vcHRpb25zJHRvcCIsInRvcCIsImJhZGdlVmFsdWUiLCJqc3hzIiwiVmlldyIsInN0eWxlIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJzdHlsZXMiLCJjb250YWluZXIiLCJjaGlsZHJlbiIsImpzeCIsIl9leHRlbmRzMiIsImRlZmF1bHQiLCJzdGF0dXMiLCJiYWRnZUNvbnRhaW5lciIsImRpc3BsYXlOYW1lIiwibmFtZSIsImNyZWF0ZSIsInBvc2l0aW9uIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsid2l0aEJhZGdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBCYWRnZSBmcm9tICcuL0JhZGdlJztcbmNvbnN0IHdpdGhCYWRnZSA9ICh2YWx1ZSwgb3B0aW9ucyA9IHt9KSA9PiAoV3JhcHBlZENvbXBvbmVudCkgPT4ge1xuICAgIGNvbnN0IFdpdGhCYWRnZSA9IChwcm9wcykgPT4ge1xuICAgICAgICBjb25zdCB7IGJvdHRvbSwgaGlkZGVuID0gZmFsc2UsIGxlZnQsIGNvbnRhaW5lclN0eWxlIH0gPSBvcHRpb25zLCBiYWRnZVByb3BzID0gX19yZXN0KG9wdGlvbnMsIFtcImJvdHRvbVwiLCBcImhpZGRlblwiLCBcImxlZnRcIiwgXCJjb250YWluZXJTdHlsZVwiXSk7XG4gICAgICAgIGxldCB7IHJpZ2h0ID0gLTE2LCB0b3AgPSAtMSB9ID0gb3B0aW9ucztcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmlnaHQgPSAtMztcbiAgICAgICAgICAgIHRvcCA9IDM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmFkZ2VWYWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlKHByb3BzKSA6IHZhbHVlO1xuICAgICAgICByZXR1cm4gKDxWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW3N0eWxlcy5jb250YWluZXIsIGNvbnRhaW5lclN0eWxlXSl9PlxuICAgICAgICA8V3JhcHBlZENvbXBvbmVudCB7Li4ucHJvcHN9Lz5cblxuICAgICAgICB7IWhpZGRlbiAmJiAoPEJhZGdlIHZhbHVlPXtiYWRnZVZhbHVlfSBzdGF0dXM9XCJlcnJvclwiIGNvbnRhaW5lclN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgc3R5bGVzLmJhZGdlQ29udGFpbmVyLFxuICAgICAgICAgICAgeyBib3R0b20sIGxlZnQsIHJpZ2h0LCB0b3AgfSxcbiAgICAgICAgXSl9IHsuLi5iYWRnZVByb3BzfS8+KX1cbiAgICAgIDwvVmlldz4pO1xuICAgIH07XG4gICAgV2l0aEJhZGdlLmRpc3BsYXlOYW1lID0gYFdpdGhCYWRnZSgke1dyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnfSlgO1xuICAgIHJldHVybiBXaXRoQmFkZ2U7XG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGJhZGdlQ29udGFpbmVyOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIH0sXG4gICAgY29udGFpbmVyOiB7XG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIH0sXG59KTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhCYWRnZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBV0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBSCxz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