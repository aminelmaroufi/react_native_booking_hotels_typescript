32aa581c6ed24c13c629db3bec7cd63e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteStack = deleteStack;
exports.symbolicate = symbolicate;
var _symbolicateStackTrace = _interopRequireDefault(require("../../Core/Devtools/symbolicateStackTrace"));
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var cache = new Map();
var sanitize = function sanitize(_ref) {
  var maybeStack = _ref.stack,
    codeFrame = _ref.codeFrame;
  if (!Array.isArray(maybeStack)) {
    throw new Error('Expected stack to be an array.');
  }
  var stack = [];
  for (var _iterator = _createForOfIteratorHelperLoose(maybeStack), _step; !(_step = _iterator()).done;) {
    var maybeFrame = _step.value;
    var collapse = false;
    if ('collapse' in maybeFrame) {
      if (typeof maybeFrame.collapse !== 'boolean') {
        throw new Error('Expected stack frame `collapse` to be a boolean.');
      }
      collapse = maybeFrame.collapse;
    }
    stack.push({
      column: maybeFrame.column,
      file: maybeFrame.file,
      lineNumber: maybeFrame.lineNumber,
      methodName: maybeFrame.methodName,
      collapse: collapse
    });
  }
  return {
    stack: stack,
    codeFrame: codeFrame
  };
};
function deleteStack(stack) {
  cache.delete(stack);
}
function symbolicate(stack) {
  var promise = cache.get(stack);
  if (promise == null) {
    promise = (0, _symbolicateStackTrace.default)(stack).then(sanitize);
    cache.set(stack, promise);
  }
  return promise;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3ltYm9saWNhdGVTdGFja1RyYWNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIiwibyIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNhbGwiLCJuZXh0IiwiYmluZCIsIkFycmF5IiwiaXNBcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsImxlbmd0aCIsImkiLCJkb25lIiwidmFsdWUiLCJUeXBlRXJyb3IiLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJhcnIiLCJsZW4iLCJhcnIyIiwiY2FjaGUiLCJNYXAiLCJzYW5pdGl6ZSIsIl9yZWYiLCJtYXliZVN0YWNrIiwic3RhY2siLCJjb2RlRnJhbWUiLCJFcnJvciIsIl9pdGVyYXRvciIsIl9zdGVwIiwibWF5YmVGcmFtZSIsImNvbGxhcHNlIiwicHVzaCIsImNvbHVtbiIsImZpbGUiLCJsaW5lTnVtYmVyIiwibWV0aG9kTmFtZSIsImRlbGV0ZVN0YWNrIiwiZGVsZXRlIiwic3ltYm9saWNhdGUiLCJwcm9taXNlIiwiZ2V0Iiwic3ltYm9saWNhdGVTdGFja1RyYWNlIiwidGhlbiIsInNldCJdLCJzb3VyY2VzIjpbIkxvZ0JveFN5bWJvbGljYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgc3ltYm9saWNhdGVTdGFja1RyYWNlIGZyb20gJy4uLy4uL0NvcmUvRGV2dG9vbHMvc3ltYm9saWNhdGVTdGFja1RyYWNlJztcblxuaW1wb3J0IHR5cGUge1N0YWNrRnJhbWV9IGZyb20gJy4uLy4uL0NvcmUvTmF0aXZlRXhjZXB0aW9uc01hbmFnZXInO1xuaW1wb3J0IHR5cGUge1N5bWJvbGljYXRlZFN0YWNrVHJhY2V9IGZyb20gJy4uLy4uL0NvcmUvRGV2dG9vbHMvc3ltYm9saWNhdGVTdGFja1RyYWNlJztcblxuZXhwb3J0IHR5cGUgU3RhY2sgPSBBcnJheTxTdGFja0ZyYW1lPjtcblxuY29uc3QgY2FjaGU6IE1hcDxTdGFjaywgUHJvbWlzZTxTeW1ib2xpY2F0ZWRTdGFja1RyYWNlPj4gPSBuZXcgTWFwKCk7XG5cbi8qKlxuICogU2FuaXRpemUgYmVjYXVzZSBzb21ldGltZXMsIGBzeW1ib2xpY2F0ZVN0YWNrVHJhY2VgIGdpdmVzIHVzIGludmFsaWQgdmFsdWVzLlxuICovXG5jb25zdCBzYW5pdGl6ZSA9ICh7XG4gIHN0YWNrOiBtYXliZVN0YWNrLFxuICBjb2RlRnJhbWUsXG59OiBTeW1ib2xpY2F0ZWRTdGFja1RyYWNlKTogU3ltYm9saWNhdGVkU3RhY2tUcmFjZSA9PiB7XG4gIGlmICghQXJyYXkuaXNBcnJheShtYXliZVN0YWNrKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc3RhY2sgdG8gYmUgYW4gYXJyYXkuJyk7XG4gIH1cbiAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgZm9yIChjb25zdCBtYXliZUZyYW1lIG9mIG1heWJlU3RhY2spIHtcbiAgICBsZXQgY29sbGFwc2UgPSBmYWxzZTtcbiAgICBpZiAoJ2NvbGxhcHNlJyBpbiBtYXliZUZyYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIG1heWJlRnJhbWUuY29sbGFwc2UgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHN0YWNrIGZyYW1lIGBjb2xsYXBzZWAgdG8gYmUgYSBib29sZWFuLicpO1xuICAgICAgfVxuICAgICAgY29sbGFwc2UgPSBtYXliZUZyYW1lLmNvbGxhcHNlO1xuICAgIH1cbiAgICBzdGFjay5wdXNoKHtcbiAgICAgIGNvbHVtbjogbWF5YmVGcmFtZS5jb2x1bW4sXG4gICAgICBmaWxlOiBtYXliZUZyYW1lLmZpbGUsXG4gICAgICBsaW5lTnVtYmVyOiBtYXliZUZyYW1lLmxpbmVOdW1iZXIsXG4gICAgICBtZXRob2ROYW1lOiBtYXliZUZyYW1lLm1ldGhvZE5hbWUsXG4gICAgICBjb2xsYXBzZSxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4ge3N0YWNrLCBjb2RlRnJhbWV9O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVN0YWNrKHN0YWNrOiBTdGFjayk6IHZvaWQge1xuICBjYWNoZS5kZWxldGUoc3RhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3ltYm9saWNhdGUoc3RhY2s6IFN0YWNrKTogUHJvbWlzZTxTeW1ib2xpY2F0ZWRTdGFja1RyYWNlPiB7XG4gIGxldCBwcm9taXNlID0gY2FjaGUuZ2V0KHN0YWNrKTtcbiAgaWYgKHByb21pc2UgPT0gbnVsbCkge1xuICAgIHByb21pc2UgPSBzeW1ib2xpY2F0ZVN0YWNrVHJhY2Uoc3RhY2spLnRoZW4oc2FuaXRpemUpO1xuICAgIGNhY2hlLnNldChzdGFjaywgcHJvbWlzZSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFVQSxJQUFBQSxzQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQThFLFNBQUFDLGdDQUFBQyxDQUFBLEVBQUFDLGNBQUEsUUFBQUMsRUFBQSxVQUFBQyxNQUFBLG9CQUFBSCxDQUFBLENBQUFHLE1BQUEsQ0FBQUMsUUFBQSxLQUFBSixDQUFBLG9CQUFBRSxFQUFBLFVBQUFBLEVBQUEsR0FBQUEsRUFBQSxDQUFBRyxJQUFBLENBQUFMLENBQUEsR0FBQU0sSUFBQSxDQUFBQyxJQUFBLENBQUFMLEVBQUEsT0FBQU0sS0FBQSxDQUFBQyxPQUFBLENBQUFULENBQUEsTUFBQUUsRUFBQSxHQUFBUSwyQkFBQSxDQUFBVixDQUFBLE1BQUFDLGNBQUEsSUFBQUQsQ0FBQSxXQUFBQSxDQUFBLENBQUFXLE1BQUEscUJBQUFULEVBQUEsRUFBQUYsQ0FBQSxHQUFBRSxFQUFBLE1BQUFVLENBQUEsK0JBQUFBLENBQUEsSUFBQVosQ0FBQSxDQUFBVyxNQUFBLFdBQUFFLElBQUEsbUJBQUFBLElBQUEsU0FBQUMsS0FBQSxFQUFBZCxDQUFBLENBQUFZLENBQUEsc0JBQUFHLFNBQUE7QUFBQSxTQUFBTCw0QkFBQVYsQ0FBQSxFQUFBZ0IsTUFBQSxTQUFBaEIsQ0FBQSxxQkFBQUEsQ0FBQSxzQkFBQWlCLGlCQUFBLENBQUFqQixDQUFBLEVBQUFnQixNQUFBLE9BQUFFLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxTQUFBLENBQUFDLFFBQUEsQ0FBQWhCLElBQUEsQ0FBQUwsQ0FBQSxFQUFBc0IsS0FBQSxhQUFBSixDQUFBLGlCQUFBbEIsQ0FBQSxDQUFBdUIsV0FBQSxFQUFBTCxDQUFBLEdBQUFsQixDQUFBLENBQUF1QixXQUFBLENBQUFDLElBQUEsTUFBQU4sQ0FBQSxjQUFBQSxDQUFBLG1CQUFBVixLQUFBLENBQUFpQixJQUFBLENBQUF6QixDQUFBLE9BQUFrQixDQUFBLCtEQUFBUSxJQUFBLENBQUFSLENBQUEsVUFBQUQsaUJBQUEsQ0FBQWpCLENBQUEsRUFBQWdCLE1BQUE7QUFBQSxTQUFBQyxrQkFBQVUsR0FBQSxFQUFBQyxHQUFBLFFBQUFBLEdBQUEsWUFBQUEsR0FBQSxHQUFBRCxHQUFBLENBQUFoQixNQUFBLEVBQUFpQixHQUFBLEdBQUFELEdBQUEsQ0FBQWhCLE1BQUEsV0FBQUMsQ0FBQSxNQUFBaUIsSUFBQSxPQUFBckIsS0FBQSxDQUFBb0IsR0FBQSxHQUFBaEIsQ0FBQSxHQUFBZ0IsR0FBQSxFQUFBaEIsQ0FBQSxJQUFBaUIsSUFBQSxDQUFBakIsQ0FBQSxJQUFBZSxHQUFBLENBQUFmLENBQUEsVUFBQWlCLElBQUE7QUFPOUUsSUFBTUMsS0FBa0QsR0FBRyxJQUFJQyxHQUFHLEVBQUU7QUFLcEUsSUFBTUMsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQUFDLElBQUEsRUFHd0M7RUFBQSxJQUY3Q0MsVUFBVSxHQUFBRCxJQUFBLENBQWpCRSxLQUFLO0lBQ0xDLFNBQVMsR0FBQUgsSUFBQSxDQUFURyxTQUFTO0VBRVQsSUFBSSxDQUFDNUIsS0FBSyxDQUFDQyxPQUFPLENBQUN5QixVQUFVLENBQUMsRUFBRTtJQUM5QixNQUFNLElBQUlHLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQztFQUNuRDtFQUNBLElBQU1GLEtBQUssR0FBRyxFQUFFO0VBQ2hCLFNBQUFHLFNBQUEsR0FBQXZDLCtCQUFBLENBQXlCbUMsVUFBVSxHQUFBSyxLQUFBLElBQUFBLEtBQUEsR0FBQUQsU0FBQSxJQUFBekIsSUFBQSxHQUFFO0lBQUEsSUFBMUIyQixVQUFVLEdBQUFELEtBQUEsQ0FBQXpCLEtBQUE7SUFDbkIsSUFBSTJCLFFBQVEsR0FBRyxLQUFLO0lBQ3BCLElBQUksVUFBVSxJQUFJRCxVQUFVLEVBQUU7TUFDNUIsSUFBSSxPQUFPQSxVQUFVLENBQUNDLFFBQVEsS0FBSyxTQUFTLEVBQUU7UUFDNUMsTUFBTSxJQUFJSixLQUFLLENBQUMsa0RBQWtELENBQUM7TUFDckU7TUFDQUksUUFBUSxHQUFHRCxVQUFVLENBQUNDLFFBQVE7SUFDaEM7SUFDQU4sS0FBSyxDQUFDTyxJQUFJLENBQUM7TUFDVEMsTUFBTSxFQUFFSCxVQUFVLENBQUNHLE1BQU07TUFDekJDLElBQUksRUFBRUosVUFBVSxDQUFDSSxJQUFJO01BQ3JCQyxVQUFVLEVBQUVMLFVBQVUsQ0FBQ0ssVUFBVTtNQUNqQ0MsVUFBVSxFQUFFTixVQUFVLENBQUNNLFVBQVU7TUFDakNMLFFBQVEsRUFBUkE7SUFDRixDQUFDLENBQUM7RUFDSjtFQUNBLE9BQU87SUFBQ04sS0FBSyxFQUFMQSxLQUFLO0lBQUVDLFNBQVMsRUFBVEE7RUFBUyxDQUFDO0FBQzNCLENBQUM7QUFFTSxTQUFTVyxXQUFXQSxDQUFDWixLQUFZLEVBQVE7RUFDOUNMLEtBQUssQ0FBQ2tCLE1BQU0sQ0FBQ2IsS0FBSyxDQUFDO0FBQ3JCO0FBRU8sU0FBU2MsV0FBV0EsQ0FBQ2QsS0FBWSxFQUFtQztFQUN6RSxJQUFJZSxPQUFPLEdBQUdwQixLQUFLLENBQUNxQixHQUFHLENBQUNoQixLQUFLLENBQUM7RUFDOUIsSUFBSWUsT0FBTyxJQUFJLElBQUksRUFBRTtJQUNuQkEsT0FBTyxHQUFHLElBQUFFLDhCQUFxQixFQUFDakIsS0FBSyxDQUFDLENBQUNrQixJQUFJLENBQUNyQixRQUFRLENBQUM7SUFDckRGLEtBQUssQ0FBQ3dCLEdBQUcsQ0FBQ25CLEtBQUssRUFBRWUsT0FBTyxDQUFDO0VBQzNCO0VBRUEsT0FBT0EsT0FBTztBQUNoQiJ9