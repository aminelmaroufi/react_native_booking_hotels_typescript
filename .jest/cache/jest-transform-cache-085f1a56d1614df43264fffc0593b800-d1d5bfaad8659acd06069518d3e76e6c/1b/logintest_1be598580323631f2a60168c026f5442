859af77d231376e0b7a50557b5d6bc84
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var eva = _interopRequireWildcard(require("@eva-design/eva"));
var _components = require("@ui-kitten/components");
var _store = _interopRequireDefault(require("../../redux/store"));
var _Login = _interopRequireDefault(require("../Login"));
var _actions = require("../../redux/actions");
var _reactRedux = require("react-redux");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var store = (0, _store.default)();
var email = 'test@test.com';
var password = 'Azerty123@@';
var Wrapper = function Wrapper(_ref) {
  var children = _ref.children;
  return _react.default.createElement(_native.NavigationContainer, null, children);
};
var navigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var setup = function setup() {
  return (0, _reactNative.render)(_react.default.createElement(_components.ApplicationProvider, (0, _extends2.default)({}, eva, {
    theme: eva.light
  }), _react.default.createElement(_reactRedux.Provider, {
    store: store
  }, _react.default.createElement(_Login.default, null))), {
    wrapper: Wrapper
  });
};
describe('Test Login Component', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
  });
  afterEach(_reactNative.cleanup);
  it('should render all form element', function () {
    setup();
    expect(_reactNative.screen.getByTestId('logo')).toBeDefined();
    expect(_reactNative.screen.getByTestId('email')).toBeDefined();
    expect(_reactNative.screen.getByTestId('password')).toBeDefined();
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn).toBeDefined();
  });
  it('should enable login button after entereing valid email and password value', function () {
    setup();
    var emailInput = _reactNative.screen.getByTestId('email');
    var passwordInput = _reactNative.screen.getByTestId('password');
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', true);
    _reactNative.fireEvent.changeText(emailInput, email);
    _reactNative.fireEvent.changeText(passwordInput, password);
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', false);
    _reactNative.fireEvent.press(loginBtn);
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith((0, _actions.loginRequest)(email, password, navigation));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,