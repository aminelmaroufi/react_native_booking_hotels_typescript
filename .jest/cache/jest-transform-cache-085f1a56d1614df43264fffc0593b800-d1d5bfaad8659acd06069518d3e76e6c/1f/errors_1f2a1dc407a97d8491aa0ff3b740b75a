0f5481c0ac50fef28ed39d5eb394d28d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RootNavigation = _interopRequireWildcard(require("../../navigation/rootNavigation"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var errorInterceptor = function errorInterceptor(adapter) {
  adapter.interceptors.response.use(function (response) {
    return response;
  }, function (error) {
    if (!error.response) {
      console.log('ERROR±±±±');
      return RootNavigation.navigate('SERVER_ERROR_SCREEN', {});
    } else if (error.response && error.response.status === 401) {
      console.log('error status:', error.response.status);
      return RootNavigation.navigate('Home', {});
    } else if (error.response && error.response.status === 503) {
      return RootNavigation.navigate('SERVER_ERROR_SCREEN', {});
    } else {
      console.log('error status:', error.response.status);
      return error.response;
    }
  });
};
var _default = errorInterceptor;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb290TmF2aWdhdGlvbiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJlcnJvckludGVyY2VwdG9yIiwiYWRhcHRlciIsImludGVyY2VwdG9ycyIsInJlc3BvbnNlIiwidXNlIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwibmF2aWdhdGUiLCJzdGF0dXMiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJlcnJvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zLCB7QXhpb3NFcnJvcn0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IEFjdGlvblR5cGVzIGZyb20gJy4uL2FjdGlvblR5cGVzJztcbmltcG9ydCAqIGFzIFJvb3ROYXZpZ2F0aW9uIGZyb20gJy4uLy4uL25hdmlnYXRpb24vcm9vdE5hdmlnYXRpb24nO1xuXG5jb25zdCBlcnJvckludGVyY2VwdG9yID0gYWRhcHRlciA9PiB7XG4gIGFkYXB0ZXIuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShcbiAgICByZXNwb25zZSA9PiByZXNwb25zZSxcbiAgICBlcnJvciA9PiB7XG4gICAgICBpZiAoIWVycm9yLnJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUsKxwrHCscKxJyk7XG4gICAgICAgIHJldHVybiBSb290TmF2aWdhdGlvbi5uYXZpZ2F0ZSgnU0VSVkVSX0VSUk9SX1NDUkVFTicsIHt9KTtcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIHN0YXR1czonLCBlcnJvci5yZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAvLyBzdG9yZS5kaXNwYXRjaCh7XG4gICAgICAgIC8vICAgdHlwZTogQWN0aW9uVHlwZXMuQVBJX0NBTExfRkFJTFVSRSxcbiAgICAgICAgLy8gICBwYXlsb2FkOiB7XG4gICAgICAgIC8vICAgICBtZXNzYWdlOiBlcnJvci5yZXNwb25zZS5kYXRhLnJlc3VsdC5tZXNzYWdlLFxuICAgICAgICAvLyAgIH0sXG4gICAgICAgIC8vIH0pO1xuICAgICAgICByZXR1cm4gUm9vdE5hdmlnYXRpb24ubmF2aWdhdGUoJ0hvbWUnLCB7fSk7XG4gICAgICAgIC8vVW5hdXRob3JpemVkXG4gICAgICAgIC8vcmVkaXJlY3QgdG8gTG9naW5cbiAgICAgIH0gZWxzZSBpZiAoZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2Uuc3RhdHVzID09PSA1MDMpIHtcbiAgICAgICAgcmV0dXJuIFJvb3ROYXZpZ2F0aW9uLm5hdmlnYXRlKCdTRVJWRVJfRVJST1JfU0NSRUVOJywge30pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9kaXNwYXRjaCB5b3VyIGVycm9yIGluIGEgbW9yZSB1c2VyIGZyaWVuZGx5IG1hbm5lclxuICAgICAgICAvLyBpZiAoREVCVUcpIHtcbiAgICAgICAgLy8gICAvL2Vhc2llciBkZWJ1Z2dpbmdcbiAgICAgICAgLy8gICBjb25zb2xlLmdyb3VwKCdFcnJvcicpO1xuICAgICAgICAvLyAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgLy8gICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIHN0YXR1czonLCBlcnJvci5yZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICByZXR1cm4gZXJyb3IucmVzcG9uc2U7XG4gICAgICB9XG4gICAgfSxcbiAgKTtcbn07XG5leHBvcnQgZGVmYXVsdCBlcnJvckludGVyY2VwdG9yO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxJQUFBQSxjQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFBa0UsU0FBQUMseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFILHdCQUFBTyxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQSxTQUFBTSxNQUFBLFdBQUFDLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLEdBQUEsSUFBQVgsR0FBQSxRQUFBVyxHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFkLEdBQUEsRUFBQVcsR0FBQSxTQUFBSSxJQUFBLEdBQUFSLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQVYsR0FBQSxFQUFBVyxHQUFBLGNBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBVixHQUFBLElBQUFVLElBQUEsQ0FBQUMsR0FBQSxLQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUgsTUFBQSxFQUFBSyxHQUFBLEVBQUFJLElBQUEsWUFBQVQsTUFBQSxDQUFBSyxHQUFBLElBQUFYLEdBQUEsQ0FBQVcsR0FBQSxTQUFBTCxNQUFBLENBQUFKLE9BQUEsR0FBQUYsR0FBQSxNQUFBRyxLQUFBLElBQUFBLEtBQUEsQ0FBQWEsR0FBQSxDQUFBaEIsR0FBQSxFQUFBTSxNQUFBLFlBQUFBLE1BQUE7QUFFbEUsSUFBTVcsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFnQkEsQ0FBR0MsT0FBTyxFQUFJO0VBQ2xDQSxPQUFPLENBQUNDLFlBQVksQ0FBQ0MsUUFBUSxDQUFDQyxHQUFHLENBQy9CLFVBQUFELFFBQVE7SUFBQSxPQUFJQSxRQUFRO0VBQUEsR0FDcEIsVUFBQUUsS0FBSyxFQUFJO0lBQ1AsSUFBSSxDQUFDQSxLQUFLLENBQUNGLFFBQVEsRUFBRTtNQUNuQkcsT0FBTyxDQUFDQyxHQUFHLENBQUMsV0FBVyxDQUFDO01BQ3hCLE9BQU9oQyxjQUFjLENBQUNpQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQyxNQUFNLElBQUlILEtBQUssQ0FBQ0YsUUFBUSxJQUFJRSxLQUFLLENBQUNGLFFBQVEsQ0FBQ00sTUFBTSxLQUFLLEdBQUcsRUFBRTtNQUMxREgsT0FBTyxDQUFDQyxHQUFHLENBQUMsZUFBZSxFQUFFRixLQUFLLENBQUNGLFFBQVEsQ0FBQ00sTUFBTSxDQUFDO01BT25ELE9BQU9sQyxjQUFjLENBQUNpQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRzVDLENBQUMsTUFBTSxJQUFJSCxLQUFLLENBQUNGLFFBQVEsSUFBSUUsS0FBSyxDQUFDRixRQUFRLENBQUNNLE1BQU0sS0FBSyxHQUFHLEVBQUU7TUFDMUQsT0FBT2xDLGNBQWMsQ0FBQ2lDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDLE1BQU07TUFRTEYsT0FBTyxDQUFDQyxHQUFHLENBQUMsZUFBZSxFQUFFRixLQUFLLENBQUNGLFFBQVEsQ0FBQ00sTUFBTSxDQUFDO01BQ25ELE9BQU9KLEtBQUssQ0FBQ0YsUUFBUTtJQUN2QjtFQUNGLENBQUMsQ0FDRjtBQUNILENBQUM7QUFBQyxJQUFBTyxRQUFBLEdBQ2FWLGdCQUFnQjtBQUFBVyxPQUFBLENBQUExQixPQUFBLEdBQUF5QixRQUFBIn0=