6f7cf39ca6a1e0feace2354c04138fa0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Chip = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Button = _interopRequireDefault(require("./Button"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Chip = function Chip(props) {
  var titleStyle = props.titleStyle,
    buttonStyle = props.buttonStyle,
    rest = __rest(props, ["titleStyle", "buttonStyle"]);
  return (0, _jsxRuntime.jsx)(_Button.default, (0, _extends2.default)({
    titleStyle: _reactNative.StyleSheet.flatten([{
      fontSize: 14,
      paddingHorizontal: 2
    }, titleStyle]),
    buttonStyle: _reactNative.StyleSheet.flatten([{
      borderRadius: 30
    }, buttonStyle])
  }, props.onPress === undefined && {
    TouchableComponent: _reactNative.TouchableWithoutFeedback
  }, rest));
};
exports.Chip = Chip;
var _default = (0, _config.withTheme)(Chip, 'Chip');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfQnV0dG9uIiwiX2pzeFJ1bnRpbWUiLCJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkNoaXAiLCJwcm9wcyIsInRpdGxlU3R5bGUiLCJidXR0b25TdHlsZSIsInJlc3QiLCJqc3giLCJkZWZhdWx0IiwiX2V4dGVuZHMyIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJmb250U2l6ZSIsInBhZGRpbmdIb3Jpem9udGFsIiwiYm9yZGVyUmFkaXVzIiwib25QcmVzcyIsInVuZGVmaW5lZCIsIlRvdWNoYWJsZUNvbXBvbmVudCIsIlRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayIsImV4cG9ydHMiLCJfZGVmYXVsdCIsIndpdGhUaGVtZSJdLCJzb3VyY2VzIjpbIkNoaXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaywgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL0J1dHRvbic7XG5jb25zdCBDaGlwID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyB0aXRsZVN0eWxlLCBidXR0b25TdHlsZSB9ID0gcHJvcHMsIHJlc3QgPSBfX3Jlc3QocHJvcHMsIFtcInRpdGxlU3R5bGVcIiwgXCJidXR0b25TdHlsZVwiXSk7XG4gICAgcmV0dXJuICg8QnV0dG9uIHRpdGxlU3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgIHsgZm9udFNpemU6IDE0LCBwYWRkaW5nSG9yaXpvbnRhbDogMiB9LFxuICAgICAgICB0aXRsZVN0eWxlLFxuICAgIF0pfSBidXR0b25TdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFt7IGJvcmRlclJhZGl1czogMzAgfSwgYnV0dG9uU3R5bGVdKX0gey4uLihwcm9wcy5vblByZXNzID09PSB1bmRlZmluZWQgJiYge1xuICAgICAgICBUb3VjaGFibGVDb21wb25lbnQ6IFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayxcbiAgICB9KX0gey4uLnJlc3R9Lz4pO1xufTtcbmV4cG9ydCB7IENoaXAgfTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShDaGlwLCAnQ2hpcCcpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFXQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJ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