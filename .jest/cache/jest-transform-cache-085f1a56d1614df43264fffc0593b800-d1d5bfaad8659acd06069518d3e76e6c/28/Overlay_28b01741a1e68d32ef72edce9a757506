55b422a0e28b98ca4a5bad500357f157
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Overlay = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Overlay = function Overlay(_a) {
  var children = _a.children,
    backdropStyle = _a.backdropStyle,
    overlayStyle = _a.overlayStyle,
    onBackdropPress = _a.onBackdropPress,
    fullScreen = _a.fullScreen,
    _a$ModalComponent = _a.ModalComponent,
    ModalComponent = _a$ModalComponent === void 0 ? _reactNative.Modal : _a$ModalComponent,
    isVisible = _a.isVisible,
    rest = __rest(_a, ["children", "backdropStyle", "overlayStyle", "onBackdropPress", "fullScreen", "ModalComponent", "isVisible"]);
  return (0, _jsxRuntime.jsxs)(ModalComponent, (0, _extends2.default)({
    visible: isVisible,
    onRequestClose: onBackdropPress,
    transparent: true
  }, rest, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableWithoutFeedback, {
      onPress: onBackdropPress,
      testID: "RNE__Overlay__backdrop",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        testID: "backdrop",
        style: _reactNative.StyleSheet.flatten([styles.backdrop, backdropStyle])
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.container,
      pointerEvents: "box-none",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.overlay, fullScreen && styles.fullscreen, overlayStyle]),
        children: children
      })
    })]
  }));
};
exports.Overlay = Overlay;
Overlay.defaultProps = {
  fullScreen: false,
  onBackdropPress: function onBackdropPress() {
    return null;
  },
  ModalComponent: _reactNative.Modal
};
var styles = _reactNative.StyleSheet.create({
  backdrop: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, .4)'
  },
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  fullscreen: {
    width: '100%',
    height: '100%'
  },
  overlay: (0, _extends2.default)({
    backgroundColor: 'white',
    borderRadius: 3,
    padding: 10
  }, _reactNative.Platform.select({
    android: {
      elevation: 2
    },
    default: {
      shadowColor: 'rgba(0, 0, 0, .3)',
      shadowOffset: {
        width: 0,
        height: 1
      },
      shadowRadius: 4
    }
  }))
});
var _default = (0, _config.withTheme)(Overlay, 'Overlay');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,