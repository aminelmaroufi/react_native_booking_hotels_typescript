{"version":3,"names":["_UTFSequence","_interopRequireDefault","require","_stringifySafe","_parseErrorStack","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","minLen","_arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","BABEL_TRANSFORM_ERROR_FORMAT","BABEL_CODE_FRAME_ERROR_FORMAT","METRO_ERROR_FORMAT","SUBSTITUTION","UTFSequence","BOM","parseInterpolation","args","categoryParts","contentParts","substitutionOffsets","remaining","_toConsumableArray2","default","formatString","String","shift","formatStringParts","split","substitutionCount","substitutions","splice","categoryString","contentString","substitutionIndex","_iterator","_step","formatStringPart","substitution","stringifySafe","push","offset","remainingArgs","map","arg","apply","category","join","message","content","isComponentStack","consoleArgument","isOldComponentStackFormat","isNewComponentStackFormat","isNewJSCComponentStackFormat","parseComponentStack","stack","parseErrorStack","frame","methodName","collapse","fileName","file","location","column","row","lineNumber","s","match","_match$slice","_match$slice2","_slicedToArray2","parseInt","filter","Boolean","parseLogBoxException","error","originalMessage","metroInternalError","_metroInternalError$s","_metroInternalError$s2","codeFrame","level","type","isComponentError","componentStack","babelTransformError","_babelTransformError$","_babelTransformError$2","babelCodeFrameError","_babelCodeFrameError$","_babelCodeFrameError$2","isFatal","_extends2","parseLogBoxLog","argsWithoutComponentStack","lastArg","_iterator2","_step2","messageEndIndex","search"],"sources":["parseLogBoxLog.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport UTFSequence from '../../UTFSequence';\nimport stringifySafe from '../../Utilities/stringifySafe';\nimport type {ExceptionData} from '../../Core/NativeExceptionsManager';\nimport type {LogBoxLogData} from './LogBoxLog';\nimport parseErrorStack from '../../Core/Devtools/parseErrorStack';\n\nconst BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\nconst BABEL_CODE_FRAME_ERROR_FORMAT = /^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)/u;\nconst METRO_ERROR_FORMAT = /^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/u;\n\nexport type ExtendedExceptionData = ExceptionData & {\n  isComponentError: boolean,\n  ...\n};\nexport type Category = string;\nexport type CodeFrame = $ReadOnly<{|\n  content: string,\n  location: ?{\n    row: number,\n    column: number,\n    ...\n  },\n  fileName: string,\n\n  // TODO: When React switched to using call stack frames,\n  // we gained the ability to use the collapse flag, but\n  // it is not integrated into the LogBox UI.\n  collapse?: boolean,\n|}>;\nexport type Message = $ReadOnly<{|\n  content: string,\n  substitutions: $ReadOnlyArray<\n    $ReadOnly<{|\n      length: number,\n      offset: number,\n    |}>,\n  >,\n|}>;\n\nexport type ComponentStack = $ReadOnlyArray<CodeFrame>;\n\nconst SUBSTITUTION = UTFSequence.BOM + '%s';\n\nexport function parseInterpolation(\n  args: $ReadOnlyArray<mixed>,\n): $ReadOnly<{|\n  category: Category,\n  message: Message,\n|}> {\n  const categoryParts = [];\n  const contentParts = [];\n  const substitutionOffsets = [];\n\n  const remaining = [...args];\n  if (typeof remaining[0] === 'string') {\n    const formatString = String(remaining.shift());\n    const formatStringParts = formatString.split('%s');\n    const substitutionCount = formatStringParts.length - 1;\n    const substitutions = remaining.splice(0, substitutionCount);\n\n    let categoryString = '';\n    let contentString = '';\n\n    let substitutionIndex = 0;\n    for (const formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          // Don't stringify a string type.\n          // It adds quotation mark wrappers around the string,\n          // which causes the LogBox to look odd.\n          const substitution =\n            typeof substitutions[substitutionIndex] === 'string'\n              ? substitutions[substitutionIndex]\n              : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length,\n          });\n\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length,\n          });\n\n          categoryString += '%s';\n          contentString += '%s';\n        }\n\n        substitutionIndex++;\n      }\n    }\n\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n\n  const remainingArgs = remaining.map(arg => {\n    // Don't stringify a string type.\n    // It adds quotation mark wrappers around the string,\n    // which causes the LogBox to look odd.\n    return typeof arg === 'string' ? arg : stringifySafe(arg);\n  });\n  categoryParts.push(...remainingArgs);\n  contentParts.push(...remainingArgs);\n\n  return {\n    category: categoryParts.join(' '),\n    message: {\n      content: contentParts.join(' '),\n      substitutions: substitutionOffsets,\n    },\n  };\n}\n\nfunction isComponentStack(consoleArgument: string) {\n  const isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  const isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  const isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n\n  return (\n    isOldComponentStackFormat ||\n    isNewComponentStackFormat ||\n    isNewJSCComponentStackFormat\n  );\n}\n\nexport function parseComponentStack(message: string): ComponentStack {\n  // In newer versions of React, the component stack is formatted as a call stack frame.\n  // First try to parse the component stack as a call stack frame, and if that doesn't\n  // work then we'll fallback to the old custom component stack format parsing.\n  const stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return stack.map(frame => ({\n      content: frame.methodName,\n      collapse: frame.collapse || false,\n      fileName: frame.file == null ? 'unknown' : frame.file,\n      location: {\n        column: frame.column == null ? -1 : frame.column,\n        row: frame.lineNumber == null ? -1 : frame.lineNumber,\n      },\n    }));\n  }\n\n  return message\n    .split(/\\n {4}in /g)\n    .map(s => {\n      if (!s) {\n        return null;\n      }\n      const match = s.match(/(.*) \\(at (.*\\.js):([\\d]+)\\)/);\n      if (!match) {\n        return null;\n      }\n\n      let [content, fileName, row] = match.slice(1);\n      return {\n        content,\n        fileName,\n        location: {column: -1, row: parseInt(row, 10)},\n      };\n    })\n    .filter(Boolean);\n}\n\nexport function parseLogBoxException(\n  error: ExtendedExceptionData,\n): LogBoxLogData {\n  const message =\n    error.originalMessage != null ? error.originalMessage : 'Unknown';\n\n  const metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    const [\n      content,\n      fileName,\n      row,\n      column,\n      codeFrame,\n    ] = metroInternalError.slice(1);\n\n    return {\n      level: 'fatal',\n      type: 'Metro Error',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    // Transform errors are thrown from inside the Babel transformer.\n    const [\n      fileName,\n      content,\n      row,\n      column,\n      codeFrame,\n    ] = babelTransformError.slice(1);\n\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n\n  if (babelCodeFrameError) {\n    // Codeframe errors are thrown from any use of buildCodeFrameError.\n    const [fileName, content, codeFrame] = babelCodeFrameError.slice(1);\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: null, // We are not given the location.\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${1}-${1}`,\n    };\n  }\n\n  if (message.match(/^TransformError /)) {\n    return {\n      level: 'syntax',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: [],\n      },\n      category: message,\n    };\n  }\n\n  const componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return {\n      level: 'fatal',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack:\n        componentStack != null ? parseComponentStack(componentStack) : [],\n      ...parseInterpolation([message]),\n    };\n  }\n\n  if (componentStack != null) {\n    // It is possible that console errors have a componentStack.\n    return {\n      level: 'error',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack),\n      ...parseInterpolation([message]),\n    };\n  }\n\n  // Most `console.error` calls won't have a componentStack. We parse them like\n  // regular logs which have the component stack burried in the message.\n  return {\n    level: 'error',\n    stack: error.stack,\n    isComponentError: error.isComponentError,\n    ...parseLogBoxLog([message]),\n  };\n}\n\nexport function parseLogBoxLog(\n  args: $ReadOnlyArray<mixed>,\n): {|\n  componentStack: ComponentStack,\n  category: Category,\n  message: Message,\n|} {\n  const message = args[0];\n  let argsWithoutComponentStack = [];\n  let componentStack = [];\n\n  // Extract component stack from warnings like \"Some warning%s\".\n  if (\n    typeof message === 'string' &&\n    message.slice(-2) === '%s' &&\n    args.length > 0\n  ) {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n\n  if (componentStack.length === 0) {\n    // Try finding the component stack elsewhere.\n    for (const arg of args) {\n      if (typeof arg === 'string' && isComponentStack(arg)) {\n        // Strip out any messages before the component stack.\n        let messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          // Handle JSC component stacks.\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n\n  return {\n    ...parseInterpolation(argsWithoutComponentStack),\n    componentStack,\n  };\n}\n"],"mappings":"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"}