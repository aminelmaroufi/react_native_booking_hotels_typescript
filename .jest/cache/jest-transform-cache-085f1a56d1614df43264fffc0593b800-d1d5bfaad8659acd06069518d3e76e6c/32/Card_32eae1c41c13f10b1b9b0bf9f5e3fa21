5f7ba77fc5a235ca06f1913df78aa207
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Card = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _CardTitle = _interopRequireDefault(require("./CardTitle"));
var _CardDivider = _interopRequireDefault(require("./CardDivider"));
var _CardImage = _interopRequireDefault(require("./CardImage"));
var _CardFeaturedTitle = _interopRequireDefault(require("./CardFeaturedTitle"));
var _CardFeaturedSubtitle = _interopRequireDefault(require("./CardFeaturedSubtitle"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Card = function Card(props) {
  var _a, _b;
  var children = props.children,
    containerStyle = props.containerStyle,
    wrapperStyle = props.wrapperStyle,
    theme = props.theme,
    attributes = __rest(props, ["children", "containerStyle", "wrapperStyle", "theme"]);
  return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([(0, _extends2.default)({
      backgroundColor: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.white,
      borderWidth: 1,
      padding: 15,
      margin: 15,
      marginBottom: 0,
      borderColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey5
    }, _reactNative.Platform.select({
      android: {
        elevation: 1
      },
      default: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 0,
          width: 0
        },
        shadowOpacity: 1,
        shadowRadius: 1
      }
    })), containerStyle && containerStyle])
  }), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.wrapper, wrapperStyle && wrapperStyle])
  }, children));
};
exports.Card = Card;
var styles = _reactNative.StyleSheet.create({
  wrapper: {
    backgroundColor: 'transparent'
  }
});
var ThemedCard = (0, _extends2.default)((0, _config.withTheme)(Card, 'Card'), {
  Divider: _CardDivider.default,
  Image: _CardImage.default,
  Title: _CardTitle.default,
  FeaturedTitle: _CardFeaturedTitle.default,
  FeaturedSubtitle: _CardFeaturedSubtitle.default
});
var _default = ThemedCard;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfQ2FyZFRpdGxlIiwiX0NhcmREaXZpZGVyIiwiX0NhcmRJbWFnZSIsIl9DYXJkRmVhdHVyZWRUaXRsZSIsIl9DYXJkRmVhdHVyZWRTdWJ0aXRsZSIsIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQ2FyZCIsInByb3BzIiwiX2EiLCJfYiIsImNoaWxkcmVuIiwiY29udGFpbmVyU3R5bGUiLCJ3cmFwcGVyU3R5bGUiLCJ0aGVtZSIsImF0dHJpYnV0ZXMiLCJkZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsIlZpZXciLCJfZXh0ZW5kczIiLCJzdHlsZSIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3JzIiwid2hpdGUiLCJib3JkZXJXaWR0aCIsInBhZGRpbmciLCJtYXJnaW4iLCJtYXJnaW5Cb3R0b20iLCJib3JkZXJDb2xvciIsImdyZXk1IiwiUGxhdGZvcm0iLCJzZWxlY3QiLCJhbmRyb2lkIiwiZWxldmF0aW9uIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJoZWlnaHQiLCJ3aWR0aCIsInNoYWRvd09wYWNpdHkiLCJzaGFkb3dSYWRpdXMiLCJzdHlsZXMiLCJ3cmFwcGVyIiwiZXhwb3J0cyIsImNyZWF0ZSIsIlRoZW1lZENhcmQiLCJ3aXRoVGhlbWUiLCJEaXZpZGVyIiwiQ2FyZERpdmlkZXIiLCJJbWFnZSIsIkNhcmRJbWFnZSIsIlRpdGxlIiwiQ2FyZFRpdGxlIiwiRmVhdHVyZWRUaXRsZSIsIkNhcmRGZWF0dXJlZFRpdGxlIiwiRmVhdHVyZWRTdWJ0aXRsZSIsIkNhcmRGZWF0dXJlZFN1YnRpdGxlIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJDYXJkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBQbGF0Zm9ybSwgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IENhcmRUaXRsZSBmcm9tICcuL0NhcmRUaXRsZSc7XG5pbXBvcnQgQ2FyZERpdmlkZXIgZnJvbSAnLi9DYXJkRGl2aWRlcic7XG5pbXBvcnQgQ2FyZEltYWdlIGZyb20gJy4vQ2FyZEltYWdlJztcbmltcG9ydCBDYXJkRmVhdHVyZWRUaXRsZSBmcm9tICcuL0NhcmRGZWF0dXJlZFRpdGxlJztcbmltcG9ydCBDYXJkRmVhdHVyZWRTdWJ0aXRsZSBmcm9tICcuL0NhcmRGZWF0dXJlZFN1YnRpdGxlJztcbmNvbnN0IENhcmQgPSAocHJvcHMpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIGNvbnRhaW5lclN0eWxlLCB3cmFwcGVyU3R5bGUsIHRoZW1lIH0gPSBwcm9wcywgYXR0cmlidXRlcyA9IF9fcmVzdChwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjb250YWluZXJTdHlsZVwiLCBcIndyYXBwZXJTdHlsZVwiLCBcInRoZW1lXCJdKTtcbiAgICByZXR1cm4gKDxWaWV3IHsuLi5hdHRyaWJ1dGVzfSBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oeyBiYWNrZ3JvdW5kQ29sb3I6IChfYSA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS53aGl0ZSwgYm9yZGVyV2lkdGg6IDEsIHBhZGRpbmc6IDE1LCBtYXJnaW46IDE1LCBtYXJnaW5Cb3R0b206IDAsIGJvcmRlckNvbG9yOiAoX2IgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZ3JleTUgfSwgUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgICAgICAgICBhbmRyb2lkOiB7XG4gICAgICAgICAgICAgICAgICAgIGVsZXZhdGlvbjogMSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDAsMCwwLCAuMiknLFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgaGVpZ2h0OiAwLCB3aWR0aDogMCB9LFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dPcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dSYWRpdXM6IDEsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlICYmIGNvbnRhaW5lclN0eWxlLFxuICAgICAgICBdKX0+XG4gICAgICA8VmlldyBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgIHN0eWxlcy53cmFwcGVyLFxuICAgICAgICAgICAgd3JhcHBlclN0eWxlICYmIHdyYXBwZXJTdHlsZSxcbiAgICAgICAgXSl9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1ZpZXc+XG4gICAgPC9WaWV3Pik7XG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIHdyYXBwZXI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIH0sXG59KTtcbmV4cG9ydCB7IENhcmQgfTtcbmNvbnN0IFRoZW1lZENhcmQgPSBPYmplY3QuYXNzaWduKHdpdGhUaGVtZShDYXJkLCAnQ2FyZCcpLCB7XG4gICAgRGl2aWRlcjogQ2FyZERpdmlkZXIsXG4gICAgSW1hZ2U6IENhcmRJbWFnZSxcbiAgICBUaXRsZTogQ2FyZFRpdGxlLFxuICAgIEZlYXR1cmVkVGl0bGU6IENhcmRGZWF0dXJlZFRpdGxlLFxuICAgIEZlYXR1cmVkU3VidGl0bGU6IENhcmRGZWF0dXJlZFN1YnRpdGxlLFxufSk7XG5leHBvcnQgZGVmYXVsdCBUaGVtZWRDYXJkO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFVBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLFlBQUEsR0FBQUwsc0JBQUEs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