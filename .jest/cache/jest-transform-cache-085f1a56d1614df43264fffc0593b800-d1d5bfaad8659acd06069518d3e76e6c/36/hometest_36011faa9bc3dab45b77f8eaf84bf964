42665364c0280345f84a99005b225649
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));
var _reactNative = require("@testing-library/react-native");
var eva = _interopRequireWildcard(require("@eva-design/eva"));
var _components = require("@ui-kitten/components");
var _Home = _interopRequireDefault(require("../Home"));
var _actions = require("../../redux/actions");
var _reactRedux = require("react-redux");
var _hotels_response = _interopRequireDefault(require("./fixtures/hotels_response"));
var _native = require("@react-navigation/native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var mockStore = (0, _reduxMockStore.default)();
var navigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var store = mockStore({
  hotel: {
    hotels: _hotels_response.default.result.hotels
  }
});
var setup = function setup() {
  return (0, _reactNative.render)(_react.default.createElement(_reactRedux.Provider, {
    store: store
  }, _react.default.createElement(_components.ApplicationProvider, (0, _extends2.default)({}, eva, {
    theme: eva.light
  }), _react.default.createElement(_native.NavigationContainer, null, _react.default.createElement(_Home.default, {
    hotels: _hotels_response.default.result.hotels
  })))));
};
describe('Test homepage screen', function () {
  beforeEach(function () {
    mockStore.dispatch = jest.fn();
    setup();
  });
  afterEach(_reactNative.cleanup);
  it('should display the list of hotels', function () {
    expect(_reactNative.screen.getByTestId('search-box')).toBeDefined();
  });
  it('fetches the hotels on mount', function () {
    var expectedAction = (0, _actions.getHotels)({
      q: '',
      page: 1
    });
    expect(store.dispatch).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWR1eE1vY2tTdG9yZSIsIl9yZWFjdE5hdGl2ZSIsImV2YSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2NvbXBvbmVudHMiLCJfSG9tZSIsIl9hY3Rpb25zIiwiX3JlYWN0UmVkdXgiLCJfaG90ZWxzX3Jlc3BvbnNlIiwiX25hdGl2ZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJtb2NrU3RvcmUiLCJjb25maWd1cmVTdG9yZSIsIm5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImplc3QiLCJmbiIsImdvQmFjayIsInN0b3JlIiwiaG90ZWwiLCJob3RlbHMiLCJob3RlbHNfcmVzcG9uc2UiLCJyZXN1bHQiLCJzZXR1cCIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsIkFwcGxpY2F0aW9uUHJvdmlkZXIiLCJfZXh0ZW5kczIiLCJ0aGVtZSIsImxpZ2h0IiwiTmF2aWdhdGlvbkNvbnRhaW5lciIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImRpc3BhdGNoIiwiYWZ0ZXJFYWNoIiwiY2xlYW51cCIsIml0IiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlRGVmaW5lZCIsImV4cGVjdGVkQWN0aW9uIiwiZ2V0SG90ZWxzIiwicSIsInBhZ2UiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiXSwic291cmNlcyI6WyJob21lLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAncmVkdXgtbW9jay1zdG9yZSc7XG5pbXBvcnQge1xuICBjbGVhbnVwLFxuICBmaXJlRXZlbnQsXG4gIHJlbmRlcixcbiAgc2NyZWVuLFxufSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCAqIGFzIGV2YSBmcm9tICdAZXZhLWRlc2lnbi9ldmEnO1xuaW1wb3J0IHtBcHBsaWNhdGlvblByb3ZpZGVyfSBmcm9tICdAdWkta2l0dGVuL2NvbXBvbmVudHMnO1xuLy8gaW1wb3J0IGNvbmZpZ3VyZVN0b3JlIGZyb20gJy4uLy4uL3JlZHV4L3N0b3JlJztcbmltcG9ydCBIb21lIGZyb20gJy4uL0hvbWUnO1xuaW1wb3J0IHtnZXRIb3RlbHN9IGZyb20gJy4uLy4uL3JlZHV4L2FjdGlvbnMnO1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IGhvdGVsc19yZXNwb25zZSBmcm9tICcuL2ZpeHR1cmVzL2hvdGVsc19yZXNwb25zZSc7XG5pbXBvcnQge05hdmlnYXRpb25Db250YWluZXJ9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XG5cbmxldCBtb2NrU3RvcmUgPSBjb25maWd1cmVTdG9yZSgpO1xuXG5jb25zdCBuYXZpZ2F0aW9uID0ge1xuICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICBnb0JhY2s6IGplc3QuZm4oKSxcbn07XG5cbmNvbnN0IHN0b3JlID0gbW9ja1N0b3JlKHtcbiAgaG90ZWw6IHtcbiAgICBob3RlbHM6IGhvdGVsc19yZXNwb25zZS5yZXN1bHQuaG90ZWxzLFxuICB9LFxufSk7XG5cbmNvbnN0IHNldHVwID0gKCkgPT5cbiAgcmVuZGVyKFxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgPEFwcGxpY2F0aW9uUHJvdmlkZXIgey4uLmV2YX0gdGhlbWU9e2V2YS5saWdodH0+XG4gICAgICAgIDxOYXZpZ2F0aW9uQ29udGFpbmVyPlxuICAgICAgICAgIDxIb21lIGhvdGVscz17aG90ZWxzX3Jlc3BvbnNlLnJlc3VsdC5ob3RlbHN9IC8+XG4gICAgICAgIDwvTmF2aWdhdGlvbkNvbnRhaW5lcj5cbiAgICAgIDwvQXBwbGljYXRpb25Qcm92aWRlcj5cbiAgICA8L1Byb3ZpZGVyPixcbiAgKTtcblxuZGVzY3JpYmUoJ1Rlc3QgaG9tZXBhZ2Ugc2NyZWVuJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrU3RvcmUuZGlzcGF0Y2ggPSBqZXN0LmZuKCk7XG4gICAgc2V0dXAoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGNsZWFudXApO1xuXG4gIGl0KCdzaG91bGQgZGlzcGxheSB0aGUgbGlzdCBvZiBob3RlbHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnc2VhcmNoLWJveCcpKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcbiAgaXQoJ2ZldGNoZXMgdGhlIGhvdGVscyBvbiBtb3VudCcsICgpID0+IHtcbiAgICBjb25zdCBleHBlY3RlZEFjdGlvbiA9IGdldEhvdGVscyh7cTogJycsIHBhZ2U6IDF9KTtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICAvLyBleHBlY3Qoc3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdGVkQWN0aW9uKTtcbiAgICAvLyBleHBlY3Qoc3RvcmUuZ2V0QWN0aW9ucygpKS50b0NvbnRhaW5FcXVhbChleHBlY3RlZEFjdGlvbik7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxlQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFB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