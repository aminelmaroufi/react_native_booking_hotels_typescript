7a9b9ccdbd93fd1dcbafdd97dd44f72e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _store = _interopRequireDefault(require("../../redux/store"));
var _Login = _interopRequireDefault(require("../Login"));
var _actions = require("../../redux/actions");
var _setup = _interopRequireDefault(require("../setup"));
var store = (0, _store.default)();
var email = 'test@test.com';
var password = 'Azerty123@@';
var navigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
describe('Test Login Component', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    (0, _setup.default)(_react.default.createElement(_Login.default, null), store);
  });
  afterEach(_reactNative.cleanup);
  it('should render all form element', function () {
    setup();
    expect(_reactNative.screen.getByTestId('logo')).toBeDefined();
    expect(_reactNative.screen.getByTestId('email')).toBeDefined();
    expect(_reactNative.screen.getByTestId('password')).toBeDefined();
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn).toBeDefined();
  });
  it('should enable login button after entereing valid email and password value', function () {
    setup();
    var emailInput = _reactNative.screen.getByTestId('email');
    var passwordInput = _reactNative.screen.getByTestId('password');
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', true);
    _reactNative.fireEvent.changeText(emailInput, email);
    _reactNative.fireEvent.changeText(passwordInput, password);
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', false);
    _reactNative.fireEvent.press(loginBtn);
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith((0, _actions.loginRequest)(email, password, navigation));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9zdG9yZSIsIl9Mb2dpbiIsIl9hY3Rpb25zIiwiX3NldHVwIiwic3RvcmUiLCJjb25maWd1cmVTdG9yZSIsImVtYWlsIiwicGFzc3dvcmQiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJqZXN0IiwiZm4iLCJnb0JhY2siLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJkaXNwYXRjaCIsIlNldHVwIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJhZnRlckVhY2giLCJjbGVhbnVwIiwiaXQiLCJzZXR1cCIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGVzdElkIiwidG9CZURlZmluZWQiLCJsb2dpbkJ0biIsImVtYWlsSW5wdXQiLCJwYXNzd29yZElucHV0IiwicHJvcHMiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJ0b0hhdmVQcm9wZXJ0eSIsImZpcmVFdmVudCIsImNoYW5nZVRleHQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibG9naW5SZXF1ZXN0Il0sInNvdXJjZXMiOlsibG9naW4udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgY2xlYW51cCxcbiAgZmlyZUV2ZW50LFxuICByZW5kZXIsXG4gIHNjcmVlbixcbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHtOYXZpZ2F0aW9uQ29udGFpbmVyfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xuaW1wb3J0ICogYXMgZXZhIGZyb20gJ0BldmEtZGVzaWduL2V2YSc7XG5pbXBvcnQge0FwcGxpY2F0aW9uUHJvdmlkZXJ9IGZyb20gJ0B1aS1raXR0ZW4vY29tcG9uZW50cyc7XG5pbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAnLi4vLi4vcmVkdXgvc3RvcmUnO1xuaW1wb3J0IExvZ2luIGZyb20gJy4uL0xvZ2luJztcbmltcG9ydCB7bG9naW5SZXF1ZXN0fSBmcm9tICcuLi8uLi9yZWR1eC9hY3Rpb25zJztcbmltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBTZXR1cCBmcm9tICcuLi9zZXR1cCc7XG5cbmxldCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKCk7XG5cbmNvbnN0IGVtYWlsID0gJ3Rlc3RAdGVzdC5jb20nO1xuY29uc3QgcGFzc3dvcmQgPSAnQXplcnR5MTIzQEAnO1xuXG5jb25zdCBuYXZpZ2F0aW9uID0ge1xuICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICBnb0JhY2s6IGplc3QuZm4oKSxcbn07XG4vLyBjb25zdCBzZXR1cCA9ICgpID0+XG4vLyAgIHJlbmRlcihcbi8vICAgICA8QXBwbGljYXRpb25Qcm92aWRlciB7Li4uZXZhfSB0aGVtZT17ZXZhLmxpZ2h0fT5cbi8vICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuLy8gICAgICAgICA8TG9naW4gbmF2aWdhdGlvbj17bmF2aWdhdGlvbn0gLz5cbi8vICAgICAgIDwvUHJvdmlkZXI+XG4vLyAgICAgPC9BcHBsaWNhdGlvblByb3ZpZGVyPixcbi8vICAgKTtcblxuZGVzY3JpYmUoJ1Rlc3QgTG9naW4gQ29tcG9uZW50JywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBzdG9yZS5kaXNwYXRjaCA9IGplc3QuZm4oKTtcbiAgICBTZXR1cCg8TG9naW4gLz4sIHN0b3JlKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGNsZWFudXApO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGFsbCBmb3JtIGVsZW1lbnQnLCAoKSA9PiB7XG4gICAgc2V0dXAoKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvZ28nKSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdlbWFpbCcpKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Bhc3N3b3JkJykpLnRvQmVEZWZpbmVkKCk7XG5cbiAgICBjb25zdCBsb2dpbkJ0biA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9naW4tYnRuJyk7XG5cbiAgICBleHBlY3QobG9naW5CdG4pLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZW5hYmxlIGxvZ2luIGJ1dHRvbiBhZnRlciBlbnRlcmVpbmcgdmFsaWQgZW1haWwgYW5kIHBhc3N3b3JkIHZhbHVlJywgKCkgPT4ge1xuICAgIHNldHVwKCk7XG4gICAgY29uc3QgZW1haWxJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnZW1haWwnKTtcbiAgICBjb25zdCBwYXNzd29yZElucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdwYXNzd29yZCcpO1xuICAgIGNvbnN0IGxvZ2luQnRuID0gc2NyZWVuLmdldEJ5VGVzdElkKCdsb2dpbi1idG4nKTtcblxuICAgIGV4cGVjdChsb2dpbkJ0bi5wcm9wcy5hY2Nlc3NpYmlsaXR5U3RhdGUpLnRvSGF2ZVByb3BlcnR5KCdkaXNhYmxlZCcsIHRydWUpO1xuXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZW1haWxJbnB1dCwgZW1haWwpO1xuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KHBhc3N3b3JkSW5wdXQsIHBhc3N3b3JkKTtcblxuICAgIGV4cGVjdChsb2dpbkJ0bi5wcm9wcy5hY2Nlc3NpYmlsaXR5U3RhdGUpLnRvSGF2ZVByb3BlcnR5KCdkaXNhYmxlZCcsIGZhbHNlKTtcbiAgICBmaXJlRXZlbnQucHJlc3MobG9naW5CdG4pO1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBsb2dpblJlcXVlc3QoZW1haWwsIHBh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