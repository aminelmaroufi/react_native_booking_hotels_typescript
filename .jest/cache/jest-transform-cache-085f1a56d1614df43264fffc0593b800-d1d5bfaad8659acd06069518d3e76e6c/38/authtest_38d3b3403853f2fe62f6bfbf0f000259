7ac902e6b3e0a7c0531e43cd0d596044
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _effects = require("redux-saga/effects");
var _native = require("@react-navigation/native");
var _recordSaga = _interopRequireDefault(require("../recordSaga"));
var _auth = _interopRequireWildcard(require("../auth"));
var _actionTypes = _interopRequireDefault(require("../../..//utils/actionTypes"));
var api = _interopRequireWildcard(require("../../../api/auth"));
var _actions = require("../../../redux/actions");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var error_message = 'Error from API';
var success_message = 'SUCCESS_OPERATION';
describe('Test watchAuthRequest sagas', function () {
  afterEach(function () {
    jest.clearAllMocks();
  });
  it("should call 'all' with the correct functions", function _callee() {
    var genObject, effects;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          genObject = (0, _auth.default)();
          effects = genObject.next().value;
          expect(effects).toEqual((0, _effects.all)([(0, _effects.takeLatest)(_actionTypes.default.SAVE_ACCOUNT_REQUEST, _auth.save_account), (0, _effects.takeLatest)(_actionTypes.default.LOGIN_REQUEST, _auth.login_request), (0, _effects.takeLatest)(_actionTypes.default.CHECK_USER_REQUEST, _auth.check_user_request)]));
        case 3:
        case "end":
          return _context.stop();
      }
    }, null, null, null, Promise);
  });
  describe('Test check_user_request saga', function () {
    it('should call api and dispatch success action', function _callee2() {
      var currUser, res, checkUserRequest, dispatched, expectedDispatched;
      return _regenerator.default.async(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            currUser = {
              _id: '1',
              firstname: 'test',
              lastname: 'test',
              fullname: 'test test',
              email: 'test@test.com',
              phone: '',
              password: '',
              cards: []
            };
            res = {
              data: {
                ok: true,
                result: {
                  user: currUser
                }
              },
              status: 200,
              statusText: '',
              headers: {},
              config: {}
            };
            checkUserRequest = jest.spyOn(api, 'checkUser').mockImplementation(function () {
              return Promise.resolve(res);
            });
            _context2.next = 5;
            return _regenerator.default.awrap((0, _recordSaga.default)(_auth.check_user_request, null));
          case 5:
            dispatched = _context2.sent;
            expect(checkUserRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_SUCCESS
            }, {
              type: _actionTypes.default.CHECK_USER_SUCCESS,
              payload: {
                user: currUser
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            checkUserRequest.mockClear();
          case 10:
          case "end":
            return _context2.stop();
        }
      }, null, null, null, Promise);
    });
    it('should check_user_request saga disptach failure from the server', function _callee3() {
      var res, checkUserRequest, dispatched, expectedDispatched;
      return _regenerator.default.async(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            res = {
              data: {
                ok: false,
                result: {
                  message: error_message,
                  user: null
                }
              },
              status: 200,
              statusText: '',
              headers: {},
              config: {}
            };
            checkUserRequest = jest.spyOn(api, 'checkUser').mockImplementation(function () {
              return Promise.resolve(res);
            });
            _context3.next = 4;
            return _regenerator.default.awrap((0, _recordSaga.default)(_auth.check_user_request, null));
          case 4:
            dispatched = _context3.sent;
            expect(checkUserRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_FAILURE,
              payload: {
                message: error_message
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            checkUserRequest.mockClear();
          case 9:
          case "end":
            return _context3.stop();
        }
      }, null, null, null, Promise);
    });
    it('should check_user_request saga disptach failure', function _callee4() {
      var checkUserRequest, dispatched, expectedDispatched;
      return _regenerator.default.async(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            checkUserRequest = jest.spyOn(api, 'checkUser').mockImplementation(function () {
              return Promise.reject(new Error(error_message));
            });
            _context4.next = 3;
            return _regenerator.default.awrap((0, _recordSaga.default)(_auth.check_user_request, null));
          case 3:
            dispatched = _context4.sent;
            expect(checkUserRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_FAILURE,
              payload: {
                message: error_message
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            checkUserRequest.mockClear();
          case 8:
          case "end":
            return _context4.stop();
        }
      }, null, null, null, Promise);
    });
  });
  describe('Test login_request saga', function () {
    var action = {
      email: 'test@test.com',
      password: 'Azerty123@@'
    };
    it('should call api and dispatch success action', function _callee5() {
      var currUser, res, loginRequest, dispatched, expectedDispatched;
      return _regenerator.default.async(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            currUser = {
              _id: '1',
              firstname: 'test',
              lastname: 'test',
              fullname: 'test test',
              email: 'test@test.com',
              phone: '',
              password: '',
              cards: []
            };
            res = {
              data: {
                ok: true,
                result: {
                  user: currUser
                }
              },
              status: 200,
              statusText: '',
              headers: {},
              config: {}
            };
            loginRequest = jest.spyOn(api, 'login').mockImplementation(function () {
              return Promise.resolve(res);
            });
            _context5.next = 5;
            return _regenerator.default.awrap((0, _recordSaga.default)(_auth.login_request, action));
          case 5:
            dispatched = _context5.sent;
            expect(loginRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_SUCCESS
            }, {
              type: _actionTypes.default.LOGIN_SUCCESS,
              payload: {
                user: currUser
              }
            }, (0, _actions.navigateToScreen)('Overview', {})];
            expect(dispatched).toEqual(expectedDispatched);
            loginRequest.mockClear();
          case 10:
          case "end":
            return _context5.stop();
        }
      }, null, null, null, Promise);
    });
    it('should login_request saga disptach failure from the server', function _callee6() {
      var res, loginRequest, dispatched, expectedDispatched;
      return _regenerator.default.async(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            res = {
              data: {
                ok: false,
                result: {
                  message: error_message,
                  user: null
                }
              },
              status: 200,
              statusText: '',
              headers: {},
              config: {}
            };
            loginRequest = jest.spyOn(api, 'login').mockImplementation(function () {
              return Promise.resolve(res);
            });
            _context6.next = 4;
            return _regenerator.default.awrap((0, _recordSaga.default)(_auth.login_request, action));
          case 4:
            dispatched = _context6.sent;
            expect(loginRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_FAILURE,
              payload: {
                message: error_message
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            loginRequest.mockClear();
          case 9:
          case "end":
            return _context6.stop();
        }
      }, null, null, null, Promise);
    });
    it('should login_request saga disptach failure', function _callee7() {
      var loginRequest, dispatched, expectedDispatched;
      return _regenerator.default.async(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            loginRequest = jest.spyOn(api, 'login').mockImplementation(function () {
              return Promise.reject(new Error(error_message));
            });
            _context7.next = 3;
            return _regenerator.default.awrap((0, _recordSaga.default)(_auth.login_request, action));
          case 3:
            dispatched = _context7.sent;
            expect(loginRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_FAILURE,
              payload: {
                message: error_message
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            loginRequest.mockClear();
          case 8:
          case "end":
            return _context7.stop();
        }
      }, null, null, null, Promise);
    });
  });
  describe('Test save_account saga', function () {
    var currUser = {
      _id: '1',
      firstname: 'test',
      lastname: 'test',
      fullname: 'test test',
      email: 'test@test.com',
      phone: '',
      password: '',
      cards: []
    };
    var action = {
      account: currUser,
      navigation: {
        pop: jest.fn()
      }
    };
    it('should call api and dispatch success action', function _callee8() {
      var res, saveAccountRequest, dispatched, expectedDispatched;
      return _regenerator.default.async(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            res = {
              data: {
                ok: true,
                result: {
                  message: success_message,
                  user: currUser
                }
              },
              status: 200,
              statusText: '',
              headers: {},
              config: {}
            };
            saveAccountRequest = jest.spyOn(api, 'saveAccount').mockImplementation(function () {
              return Promise.resolve(res);
            });
            _context8.next = 4;
            return _regenerator.default.awrap((0, _recordSaga.default)(_auth.save_account, action));
          case 4:
            dispatched = _context8.sent;
            expect(saveAccountRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.SUCCESS_OPERATION,
              payload: {
                message: success_message
              }
            }, {
              type: _actionTypes.default.CREATE_ACCOUNT_SUCCESS,
              payload: {
                user: currUser
              }
            }, _native.CommonActions.goBack(), _native.CommonActions.navigate({
              name: 'Login'
            })];
            expect(dispatched).toEqual(expectedDispatched);
            saveAccountRequest.mockClear();
          case 9:
          case "end":
            return _context8.stop();
        }
      }, null, null, null, Promise);
    });
    it('should login_request saga disptach failure from the server', function _callee9() {
      var res, saveAccountRequest, dispatched, expectedDispatched;
      return _regenerator.default.async(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            res = {
              data: {
                ok: false,
                result: {
                  message: error_message,
                  user: null
                }
              },
              status: 200,
              statusText: '',
              headers: {},
              config: {}
            };
            saveAccountRequest = jest.spyOn(api, 'saveAccount').mockImplementation(function () {
              return Promise.resolve(res);
            });
            _context9.next = 4;
            return _regenerator.default.awrap((0, _recordSaga.default)(_auth.save_account, action));
          case 4:
            dispatched = _context9.sent;
            expect(saveAccountRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_FAILURE,
              payload: {
                message: error_message
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            saveAccountRequest.mockClear();
          case 9:
          case "end":
            return _context9.stop();
        }
      }, null, null, null, Promise);
    });
    it('should login_request saga disptach failure', function _callee10() {
      var saveAccountRequest, dispatched, expectedDispatched;
      return _regenerator.default.async(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            saveAccountRequest = jest.spyOn(api, 'saveAccount').mockImplementation(function () {
              return Promise.reject(new Error(error_message));
            });
            _context10.next = 3;
            return _regenerator.default.awrap((0, _recordSaga.default)(_auth.save_account, action));
          case 3:
            dispatched = _context10.sent;
            expect(saveAccountRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_FAILURE,
              payload: {
                message: error_message
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            saveAccountRequest.mockClear();
          case 8:
          case "end":
            return _context10.stop();
        }
      }, null, null, null, Promise);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,