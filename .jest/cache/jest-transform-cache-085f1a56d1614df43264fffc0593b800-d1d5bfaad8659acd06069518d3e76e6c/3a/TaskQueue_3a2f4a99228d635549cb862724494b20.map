{"version":3,"names":["_interopRequireDefault","require","_extends2","_classCallCheck2","_createClass2","infoLog","invariant","DEBUG","TaskQueue","_ref","onMoreTasks","default","_onMoreTasks","_queueStack","tasks","popable","key","value","enqueue","task","_getCurrentQueue","push","enqueueTasks","_this","forEach","cancelTasks","tasksToCancel","map","queue","filter","indexOf","idx","length","hasTasksToProcess","processNext","shift","gen","name","_genPromise","run","JSON","stringify","e","message","stackIdx","pop","queueStackSize","_this2","stackItem","then","catch","ex","done","module","exports"],"sources":["TaskQueue.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst infoLog = require('../Utilities/infoLog');\nconst invariant = require('invariant');\n\ntype SimpleTask = {\n  name: string,\n  run: () => void,\n};\ntype PromiseTask = {\n  name: string,\n  gen: () => Promise<void>,\n};\nexport type Task = SimpleTask | PromiseTask | (() => void);\n\nconst DEBUG: false = false;\n\n/**\n * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n * trees of dependent tasks based on Promises. No tasks are executed unless\n * `processNext` is called.\n *\n * `enqueue` takes a Task object with either a simple `run` callback, or a\n * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n * function is supplied, then the promise it returns will block execution of\n * tasks already in the queue until it resolves. This can be used to make sure\n * the first task is fully resolved (including asynchronous dependencies that\n * also schedule more tasks via `enqueue`) before starting on the next task.\n * The `onMoreTasks` constructor argument is used to inform the owner that an\n * async task has resolved and that the queue should be processed again.\n *\n * Note: Tasks are only actually executed with explicit calls to `processNext`.\n */\nclass TaskQueue {\n  /**\n   * TaskQueue instances are self contained and independent, so multiple tasks\n   * of varying semantics and priority can operate together.\n   *\n   * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n   * tasks to process.\n   */\n  constructor({onMoreTasks}: {onMoreTasks: () => void, ...}) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{tasks: [], popable: false}];\n  }\n\n  /**\n   * Add a task to the queue.  It is recommended to name your tasks for easier\n   * async debugging. Tasks will not be executed until `processNext` is called\n   * explicitly.\n   */\n  enqueue(task: Task): void {\n    this._getCurrentQueue().push(task);\n  }\n\n  enqueueTasks(tasks: Array<Task>): void {\n    tasks.forEach(task => this.enqueue(task));\n  }\n\n  cancelTasks(tasksToCancel: Array<Task>): void {\n    // search through all tasks and remove them.\n    this._queueStack = this._queueStack\n      .map(queue => ({\n        ...queue,\n        tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1),\n      }))\n      .filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n  }\n\n  /**\n   * Check to see if `processNext` should be called.\n   *\n   * @returns {boolean} Returns true if there are tasks that are ready to be\n   * processed with `processNext`, or returns false if there are no more tasks\n   * to be processed right now, although there may be tasks in the queue that\n   * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n   * tasks ready to run at that point.\n   */\n  hasTasksToProcess(): boolean {\n    return this._getCurrentQueue().length > 0;\n  }\n\n  /**\n   * Executes the next task in the queue.\n   */\n  processNext(): void {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (typeof task === 'object' && task.gen) {\n          DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);\n          this._genPromise(task);\n        } else if (typeof task === 'object' && task.run) {\n          DEBUG && infoLog('TaskQueue: run task ' + task.name);\n          task.run();\n        } else {\n          invariant(\n            typeof task === 'function',\n            'Expected Function, SimpleTask, or PromiseTask, but got:\\n' +\n              JSON.stringify(task, null, 2),\n          );\n          DEBUG && infoLog('TaskQueue: run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message =\n          'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n        throw e;\n      }\n    }\n  }\n\n  _queueStack: Array<{\n    tasks: Array<Task>,\n    popable: boolean,\n    ...\n  }>;\n  _onMoreTasks: () => void;\n\n  _getCurrentQueue(): Array<Task> {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (\n      queue.popable &&\n      queue.tasks.length === 0 &&\n      this._queueStack.length > 1\n    ) {\n      this._queueStack.pop();\n      DEBUG &&\n        infoLog('TaskQueue: popped queue: ', {\n          stackIdx,\n          queueStackSize: this._queueStack.length,\n        });\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n\n  _genPromise(task: PromiseTask) {\n    // Each async task pushes it's own queue onto the queue stack. This\n    // effectively defers execution of previously queued tasks until the promise\n    // resolves, at which point we allow the new queue to be popped, which\n    // happens once it is fully processed.\n    this._queueStack.push({tasks: [], popable: false});\n    const stackIdx = this._queueStack.length - 1;\n    const stackItem = this._queueStack[stackIdx];\n    DEBUG && infoLog('TaskQueue: push new queue: ', {stackIdx});\n    DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);\n    task\n      .gen()\n      .then(() => {\n        DEBUG &&\n          infoLog('TaskQueue: onThen for gen task ' + task.name, {\n            stackIdx,\n            queueStackSize: this._queueStack.length,\n          });\n        stackItem.popable = true;\n        this.hasTasksToProcess() && this._onMoreTasks();\n      })\n      .catch(ex => {\n        ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n        throw ex;\n      })\n      .done();\n  }\n}\n\nmodule.exports = TaskQueue;\n"],"mappings":"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"}