db8d891c01042f15f8a7a3f7e3bb5f29
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var React = _interopRequireWildcard(require("react"));
var _requireNativeComponent = _interopRequireDefault(require("../../../ReactNative/requireNativeComponent"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var RCTRefreshControl = (0, _requireNativeComponent.default)('RCTRefreshControl');
var RefreshControlMock = function (_React$Component) {
  (0, _inherits2.default)(RefreshControlMock, _React$Component);
  var _super = _createSuper(RefreshControlMock);
  function RefreshControlMock() {
    (0, _classCallCheck2.default)(this, RefreshControlMock);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(RefreshControlMock, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      RefreshControlMock.latestRef = this;
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(RCTRefreshControl, null);
    }
  }]);
  return RefreshControlMock;
}(React.Component);
module.exports = RefreshControlMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2luaGVyaXRzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlcXVpcmVOYXRpdmVDb21wb25lbnQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2NyZWF0ZVN1cGVySW50ZXJuYWwiLCJTdXBlciIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5Iiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwiUkNUUmVmcmVzaENvbnRyb2wiLCJyZXF1aXJlTmF0aXZlQ29tcG9uZW50IiwiUmVmcmVzaENvbnRyb2xNb2NrIiwiX1JlYWN0JENvbXBvbmVudCIsIl9zdXBlciIsInZhbHVlIiwiY29tcG9uZW50RGlkTW91bnQiLCJsYXRlc3RSZWYiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiQ29tcG9uZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlJlZnJlc2hDb250cm9sTW9jay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbid1c2Ugc3RyaWN0JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgZnJvbSAnLi4vLi4vLi4vUmVhY3ROYXRpdmUvcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCc7XG5cbmltcG9ydCB0eXBlIHtIb3N0Q29tcG9uZW50fSBmcm9tICcuLi8uLi8uLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcblxuY29uc3QgUkNUUmVmcmVzaENvbnRyb2w6IEhvc3RDb21wb25lbnQ8bWl4ZWQ+ID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudDxtaXhlZD4oXG4gICdSQ1RSZWZyZXNoQ29udHJvbCcsXG4pO1xuXG5jbGFzcyBSZWZyZXNoQ29udHJvbE1vY2sgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8ey4uLn0+IHtcbiAgc3RhdGljIGxhdGVzdFJlZjogP1JlZnJlc2hDb250cm9sTW9jaztcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgUmVmcmVzaENvbnRyb2xNb2NrLmxhdGVzdFJlZiA9IHRoaXM7XG4gIH1cbiAgcmVuZGVyKCk6IFJlYWN0LkVsZW1lbnQ8dHlwZW9mIFJDVFJlZnJlc2hDb250cm9sPiB7XG4gICAgcmV0dXJuIDxSQ1RSZWZyZXNoQ29udHJvbCAvPjtcbiAgfVxufVxu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