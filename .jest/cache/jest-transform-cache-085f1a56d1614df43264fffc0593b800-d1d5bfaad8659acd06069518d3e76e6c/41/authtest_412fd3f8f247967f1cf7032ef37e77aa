e0d1e5655dcc922e681d77be18f474c5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _effects = require("redux-saga/effects");
var _recordSaga = _interopRequireDefault(require("../recordSaga"));
var _auth = _interopRequireWildcard(require("../auth"));
var _actionTypes = _interopRequireDefault(require("../../..//utils/actionTypes"));
var api = _interopRequireWildcard(require("../../../api/auth"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _regeneratorRuntime() { "use strict"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
var error_message = 'Error from API';
var success_message = 'SUCCESS_OPERATION';
describe('Test watchAuthRequest sagas', function () {
  afterEach(function () {
    jest.clearAllMocks();
  });
  it("should call 'all' with the correct functions", function _callee() {
    var genObject, effects;
    return _regeneratorRuntime().async(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          genObject = (0, _auth.default)();
          effects = genObject.next().value;
          expect(effects).toEqual((0, _effects.all)([(0, _effects.takeLatest)(_actionTypes.default.SAVE_ACCOUNT_REQUEST, _auth.save_account), (0, _effects.takeLatest)(_actionTypes.default.LOGIN_REQUEST, _auth.login_request), (0, _effects.takeLatest)(_actionTypes.default.CHECK_USER_REQUEST, _auth.check_user_request)]));
        case 3:
        case "end":
          return _context.stop();
      }
    }, null, null, null, Promise);
  });
  describe('Test check_user_request saga', function () {
    it('should call api and dispatch success action', function _callee2() {
      var currUser, res, checkUserRequest, dispatched, expectedDispatched;
      return _regeneratorRuntime().async(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            currUser = {
              _id: '1',
              firstname: 'test',
              lastname: 'test',
              fullname: 'test test',
              email: 'test@test.com',
              phone: '',
              password: '',
              cards: []
            };
            res = {
              data: {
                ok: true,
                result: {
                  user: currUser
                }
              },
              status: 200,
              statusText: '',
              headers: {},
              config: {}
            };
            checkUserRequest = jest.spyOn(api, 'checkUser').mockImplementation(function () {
              return Promise.resolve(res);
            });
            _context2.next = 5;
            return _regeneratorRuntime().awrap((0, _recordSaga.default)(_auth.check_user_request, null));
          case 5:
            dispatched = _context2.sent;
            expect(checkUserRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_SUCCESS
            }, {
              type: _actionTypes.default.CHECK_USER_SUCCESS,
              payload: {
                user: currUser
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            checkUserRequest.mockClear();
          case 10:
          case "end":
            return _context2.stop();
        }
      }, null, null, null, Promise);
    });
    it('should check_user_request saga disptach failure from the server', function _callee3() {
      var res, checkUserRequest, dispatched, expectedDispatched;
      return _regeneratorRuntime().async(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            res = {
              data: {
                ok: false,
                result: {
                  message: error_message,
                  user: null
                }
              },
              status: 200,
              statusText: '',
              headers: {},
              config: {}
            };
            checkUserRequest = jest.spyOn(api, 'checkUser').mockImplementation(function () {
              return Promise.resolve(res);
            });
            _context3.next = 4;
            return _regeneratorRuntime().awrap((0, _recordSaga.default)(_auth.check_user_request, null));
          case 4:
            dispatched = _context3.sent;
            expect(checkUserRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_FAILURE,
              payload: {
                message: error_message
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            checkUserRequest.mockClear();
          case 9:
          case "end":
            return _context3.stop();
        }
      }, null, null, null, Promise);
    });
    it('should check_user_request saga disptach failure', function _callee4() {
      var checkUserRequest, dispatched, expectedDispatched;
      return _regeneratorRuntime().async(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            checkUserRequest = jest.spyOn(api, 'checkUser').mockImplementation(function () {
              return Promise.reject(new Error(error_message));
            });
            _context4.next = 3;
            return _regeneratorRuntime().awrap((0, _recordSaga.default)(_auth.check_user_request, null));
          case 3:
            dispatched = _context4.sent;
            expect(checkUserRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_FAILURE,
              payload: {
                message: error_message
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            checkUserRequest.mockClear();
          case 8:
          case "end":
            return _context4.stop();
        }
      }, null, null, null, Promise);
    });
  });
  describe('Test login_request saga', function () {
    var action = {
      email: 'test@test.com',
      password: 'Azerty123@@',
      navigation: {
        pop: jest.fn()
      }
    };
    it('should call api and dispatch success action', function _callee5() {
      var currUser, res, loginRequest, dispatched, expectedDispatched;
      return _regeneratorRuntime().async(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            currUser = {
              _id: '1',
              firstname: 'test',
              lastname: 'test',
              fullname: 'test test',
              email: 'test@test.com',
              phone: '',
              password: '',
              cards: []
            };
            res = {
              data: {
                ok: true,
                result: {
                  user: currUser
                }
              },
              status: 200,
              statusText: '',
              headers: {},
              config: {}
            };
            loginRequest = jest.spyOn(api, 'login').mockImplementation(function () {
              return Promise.resolve(res);
            });
            _context5.next = 5;
            return _regeneratorRuntime().awrap((0, _recordSaga.default)(_auth.login_request, action));
          case 5:
            dispatched = _context5.sent;
            expect(loginRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_SUCCESS
            }, {
              type: _actionTypes.default.LOGIN_SUCCESS,
              payload: {
                user: currUser
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            loginRequest.mockClear();
          case 10:
          case "end":
            return _context5.stop();
        }
      }, null, null, null, Promise);
    });
    it('should login_request saga disptach failure from the server', function _callee6() {
      var res, loginRequest, dispatched, expectedDispatched;
      return _regeneratorRuntime().async(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            res = {
              data: {
                ok: false,
                result: {
                  message: error_message,
                  user: null
                }
              },
              status: 200,
              statusText: '',
              headers: {},
              config: {}
            };
            loginRequest = jest.spyOn(api, 'login').mockImplementation(function () {
              return Promise.resolve(res);
            });
            _context6.next = 4;
            return _regeneratorRuntime().awrap((0, _recordSaga.default)(_auth.login_request, action));
          case 4:
            dispatched = _context6.sent;
            expect(loginRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_FAILURE,
              payload: {
                message: error_message
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            loginRequest.mockClear();
          case 9:
          case "end":
            return _context6.stop();
        }
      }, null, null, null, Promise);
    });
    it('should login_request saga disptach failure', function _callee7() {
      var loginRequest, dispatched, expectedDispatched;
      return _regeneratorRuntime().async(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            loginRequest = jest.spyOn(api, 'login').mockImplementation(function () {
              return Promise.reject(new Error(error_message));
            });
            _context7.next = 3;
            return _regeneratorRuntime().awrap((0, _recordSaga.default)(_auth.login_request, action));
          case 3:
            dispatched = _context7.sent;
            expect(loginRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_FAILURE,
              payload: {
                message: error_message
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            loginRequest.mockClear();
          case 8:
          case "end":
            return _context7.stop();
        }
      }, null, null, null, Promise);
    });
  });
  describe('Test save_account saga', function () {
    var currUser = {
      _id: '1',
      firstname: 'test',
      lastname: 'test',
      fullname: 'test test',
      email: 'test@test.com',
      phone: '',
      password: '',
      cards: []
    };
    var action = {
      account: currUser,
      navigation: {
        pop: jest.fn()
      }
    };
    it('should call api and dispatch success action', function _callee8() {
      var res, saveAccountRequest, dispatched, expectedDispatched;
      return _regeneratorRuntime().async(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            res = {
              data: {
                ok: true,
                result: {
                  message: success_message,
                  user: currUser
                }
              },
              status: 200,
              statusText: '',
              headers: {},
              config: {}
            };
            saveAccountRequest = jest.spyOn(api, 'saveAccount').mockImplementation(function () {
              return Promise.resolve(res);
            });
            _context8.next = 4;
            return _regeneratorRuntime().awrap((0, _recordSaga.default)(_auth.save_account, action));
          case 4:
            dispatched = _context8.sent;
            expect(saveAccountRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.SUCCESS_OPERATION,
              payload: {
                message: success_message
              }
            }, {
              type: _actionTypes.default.CREATE_ACCOUNT_SUCCESS,
              payload: {
                user: currUser
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            saveAccountRequest.mockClear();
          case 9:
          case "end":
            return _context8.stop();
        }
      }, null, null, null, Promise);
    });
    it('should login_request saga disptach failure from the server', function _callee9() {
      var res, saveAccountRequest, dispatched, expectedDispatched;
      return _regeneratorRuntime().async(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            res = {
              data: {
                ok: false,
                result: {
                  message: error_message,
                  user: null
                }
              },
              status: 200,
              statusText: '',
              headers: {},
              config: {}
            };
            saveAccountRequest = jest.spyOn(api, 'saveAccount').mockImplementation(function () {
              return Promise.resolve(res);
            });
            _context9.next = 4;
            return _regeneratorRuntime().awrap((0, _recordSaga.default)(_auth.save_account, action));
          case 4:
            dispatched = _context9.sent;
            expect(saveAccountRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_FAILURE,
              payload: {
                message: error_message
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            saveAccountRequest.mockClear();
          case 9:
          case "end":
            return _context9.stop();
        }
      }, null, null, null, Promise);
    });
    it('should login_request saga disptach failure', function _callee10() {
      var saveAccountRequest, dispatched, expectedDispatched;
      return _regeneratorRuntime().async(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            saveAccountRequest = jest.spyOn(api, 'saveAccount').mockImplementation(function () {
              return Promise.reject(new Error(error_message));
            });
            _context10.next = 3;
            return _regeneratorRuntime().awrap((0, _recordSaga.default)(_auth.save_account, action));
          case 3:
            dispatched = _context10.sent;
            expect(saveAccountRequest).toHaveBeenCalledTimes(1);
            expectedDispatched = [{
              type: _actionTypes.default.API_CALL_REQUEST
            }, {
              type: _actionTypes.default.API_CALL_FAILURE,
              payload: {
                message: error_message
              }
            }];
            expect(dispatched).toEqual(expectedDispatched);
            saveAccountRequest.mockClear();
          case 8:
          case "end":
            return _context10.stop();
        }
      }, null, null, null, Promise);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,