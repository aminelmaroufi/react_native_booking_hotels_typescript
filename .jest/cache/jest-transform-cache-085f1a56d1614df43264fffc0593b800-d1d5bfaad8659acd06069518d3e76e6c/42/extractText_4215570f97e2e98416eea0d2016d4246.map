{"version":3,"names":["_react","_interopRequireWildcard","require","_extractLengthList","_interopRequireDefault","_util","fontRegExp","fontFamilyPrefix","fontFamilySuffix","commaReg","cachedFontObjectsFromString","extractSingleFontFamily","fontFamilyString","split","replace","parseFontString","font","hasOwnProperty","match","exec","isBold","isItalic","fontSize","fontWeight","fontStyle","fontFamily","extractFont","props","fontData","fontVariant","fontStretch","textAnchor","textDecoration","letterSpacing","wordSpacing","kerning","fontFeatureSettings","fontVariantLigatures","fontVariationSettings","ownedFont","pickNotNil","baseFont","_objectSpread","TSpan","setTSpan","TSpanImplementation","getChild","child","default","createElement","__source","fileName","_jsxFileName","lineNumber","String","extractText","container","x","y","dx","dy","rotate","children","inlineSize","baselineShift","verticalAlign","alignmentBaseline","textChildren","Children","count","Array","isArray","map","content"],"sources":["extractText.tsx"],"sourcesContent":["import React, { Children, ComponentType } from 'react';\nimport extractLengthList from './extractLengthList';\nimport { pickNotNil } from '../util';\nimport { NumberArray, NumberProp } from './types';\n\nconst fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?(?:%|px|em|pt|pc|mm|cm|in]))*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nconst fontFamilyPrefix = /^[\\s\"']*/;\nconst fontFamilySuffix = /[\\s\"']*$/;\nconst commaReg = /\\s*,\\s*/g;\n\nconst cachedFontObjectsFromString: {\n  [font: string]: {\n    fontStyle: string;\n    fontSize: NumberProp;\n    fontWeight: NumberProp;\n    fontFamily: string | null;\n  } | null;\n} = {};\n\nfunction extractSingleFontFamily(fontFamilyString?: string) {\n  // SVG on the web allows for multiple font-families to be specified.\n  // For compatibility, we extract the first font-family, hoping\n  // we'll get a match.\n  return fontFamilyString\n    ? fontFamilyString\n        .split(commaReg)[0]\n        .replace(fontFamilyPrefix, '')\n        .replace(fontFamilySuffix, '')\n    : null;\n}\n\nfunction parseFontString(font: string) {\n  if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n    return cachedFontObjectsFromString[font];\n  }\n  const match = fontRegExp.exec(font);\n  if (!match) {\n    cachedFontObjectsFromString[font] = null;\n    return null;\n  }\n  const isBold = /bold/.exec(match[1]);\n  const isItalic = /italic/.exec(match[1]);\n  cachedFontObjectsFromString[font] = {\n    fontSize: match[2] || 12,\n    fontWeight: isBold ? 'bold' : 'normal',\n    fontStyle: isItalic ? 'italic' : 'normal',\n    fontFamily: extractSingleFontFamily(match[3]),\n  };\n  return cachedFontObjectsFromString[font];\n}\n\ninterface fontProps {\n  fontData?: unknown;\n  fontStyle?: string;\n  fontVariant?: string;\n  fontWeight?: NumberProp;\n  fontStretch?: string;\n  fontSize?: NumberProp;\n  fontFamily?: string;\n  textAnchor?: string;\n  textDecoration?: string;\n  letterSpacing?: NumberProp;\n  wordSpacing?: NumberProp;\n  kerning?: NumberProp;\n  fontFeatureSettings?: string;\n  fontVariantLigatures?: string;\n  fontVariationSettings?: string;\n  font?: string;\n}\n\nexport function extractFont(props: fontProps) {\n  const {\n    fontData,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    fontStretch,\n    fontSize,\n    fontFamily,\n    textAnchor,\n    textDecoration,\n    letterSpacing,\n    wordSpacing,\n    kerning,\n    fontFeatureSettings,\n    fontVariantLigatures,\n    fontVariationSettings,\n    font,\n  } = props;\n\n  const ownedFont = pickNotNil({\n    fontData,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    fontStretch,\n    fontSize,\n    fontFamily: extractSingleFontFamily(fontFamily),\n    textAnchor,\n    textDecoration,\n    letterSpacing,\n    wordSpacing,\n    kerning,\n    fontFeatureSettings,\n    fontVariantLigatures,\n    fontVariationSettings,\n  });\n\n  const baseFont = typeof font === 'string' ? parseFontString(font) : font;\n\n  return { ...baseFont, ...ownedFont };\n}\n\nlet TSpan: ComponentType;\n\nexport function setTSpan(TSpanImplementation: ComponentType) {\n  TSpan = TSpanImplementation;\n}\n\nfunction getChild(child: undefined | string | number | ComponentType) {\n  if (typeof child === 'string' || typeof child === 'number') {\n    return <TSpan>{String(child)}</TSpan>;\n  } else {\n    return child;\n  }\n}\n\nexport type TextProps = {\n  x?: NumberArray;\n  y?: NumberArray;\n  dx?: NumberArray;\n  dy?: NumberArray;\n  rotate?: NumberArray;\n  children?: string | number | (string | number | ComponentType)[];\n  inlineSize?: NumberProp;\n  baselineShift?: NumberProp;\n  verticalAlign?: NumberProp;\n  alignmentBaseline?: string;\n} & fontProps;\n\nexport default function extractText(props: TextProps, container: boolean) {\n  const {\n    x,\n    y,\n    dx,\n    dy,\n    rotate,\n    children,\n    inlineSize,\n    baselineShift,\n    verticalAlign,\n    alignmentBaseline,\n  } = props;\n\n  const textChildren =\n    typeof children === 'string' || typeof children === 'number' ? (\n      container ? (\n        <TSpan>{String(children)}</TSpan>\n      ) : null\n    ) : Children.count(children) > 1 || Array.isArray(children) ? (\n      Children.map(children, getChild)\n    ) : (\n      children\n    );\n\n  return {\n    content: textChildren === null ? String(children) : null,\n    children: textChildren,\n    inlineSize,\n    baselineShift,\n    verticalAlign,\n    alignmentBaseline,\n    font: extractFont(props),\n    x: extractLengthList(x),\n    y: extractLengthList(y),\n    dx: extractLengthList(dx),\n    dy: extractLengthList(dy),\n    rotate: extractLengthList(rotate),\n  };\n}\n"],"mappings":"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"}