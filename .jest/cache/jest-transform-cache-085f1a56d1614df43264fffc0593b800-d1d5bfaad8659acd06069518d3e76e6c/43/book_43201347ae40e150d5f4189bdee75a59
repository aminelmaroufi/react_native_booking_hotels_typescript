5b7081ef4eb49db2e2d2f5569511d27d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateReservation = exports.setDefaultCard = exports.selectHotel = exports.getMoreHotels = exports.getHotels = exports.getBookings = exports.createBooking = exports.addCard = void 0;
var _actionTypes = _interopRequireDefault(require("../../utils/actionTypes"));
var getHotels = function getHotels(params) {
  return {
    type: _actionTypes.default.GET_HOTELS_REQUEST,
    params: params
  };
};
exports.getHotels = getHotels;
var getMoreHotels = function getMoreHotels(params) {
  return {
    type: _actionTypes.default.GET_MORE_HOTELS_REQUEST,
    params: params
  };
};
exports.getMoreHotels = getMoreHotels;
var selectHotel = function selectHotel(hotel) {
  return {
    type: _actionTypes.default.SELECT_HOTEL,
    payload: {
      hotel: hotel
    }
  };
};
exports.selectHotel = selectHotel;
var updateReservation = function updateReservation(book) {
  return {
    type: _actionTypes.default.UPDATE_RESERVATION,
    payload: {
      book: book
    }
  };
};
exports.updateReservation = updateReservation;
var addCard = function addCard(card) {
  return {
    type: _actionTypes.default.ADD_CARD_REQUEST,
    card: card
  };
};
exports.addCard = addCard;
var setDefaultCard = function setDefaultCard(card) {
  return {
    type: _actionTypes.default.SET_DEFAULT_CARD,
    payload: {
      card: card
    }
  };
};
exports.setDefaultCard = setDefaultCard;
var createBooking = function createBooking(book, navigation) {
  return {
    type: _actionTypes.default.CREATE_BOOKING_REQUEST,
    book: book,
    navigation: navigation
  };
};
exports.createBooking = createBooking;
var getBookings = function getBookings() {
  return {
    type: _actionTypes.default.GET_BOOKINGS_REQUEST
  };
};
exports.getBookings = getBookings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYWN0aW9uVHlwZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImdldEhvdGVscyIsInBhcmFtcyIsInR5cGUiLCJBY3Rpb25UeXBlcyIsIkdFVF9IT1RFTFNfUkVRVUVTVCIsImV4cG9ydHMiLCJnZXRNb3JlSG90ZWxzIiwiR0VUX01PUkVfSE9URUxTX1JFUVVFU1QiLCJzZWxlY3RIb3RlbCIsImhvdGVsIiwiU0VMRUNUX0hPVEVMIiwicGF5bG9hZCIsInVwZGF0ZVJlc2VydmF0aW9uIiwiYm9vayIsIlVQREFURV9SRVNFUlZBVElPTiIsImFkZENhcmQiLCJjYXJkIiwiQUREX0NBUkRfUkVRVUVTVCIsInNldERlZmF1bHRDYXJkIiwiU0VUX0RFRkFVTFRfQ0FSRCIsImNyZWF0ZUJvb2tpbmciLCJuYXZpZ2F0aW9uIiwiQ1JFQVRFX0JPT0tJTkdfUkVRVUVTVCIsImdldEJvb2tpbmdzIiwiR0VUX0JPT0tJTkdTX1JFUVVFU1QiXSwic291cmNlcyI6WyJib29rLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tbW9uQWN0aW9uc30gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcbmltcG9ydCBBY3Rpb25UeXBlcyBmcm9tICcuLi8uLi91dGlscy9hY3Rpb25UeXBlcyc7XG5pbXBvcnQge0lIb3RlbCwgSUJvb2ssIElDYXJkLCBJU2VjdXJlQ2FyZH0gZnJvbSAnLi4vLi4vbW9kZWxzJztcblxuZXhwb3J0IGNvbnN0IGdldEhvdGVscyA9IChwYXJhbXM6IGFueSkgPT4gKHtcbiAgdHlwZTogQWN0aW9uVHlwZXMuR0VUX0hPVEVMU19SRVFVRVNULFxuICBwYXJhbXMsXG59KTtcblxuZXhwb3J0IGNvbnN0IGdldE1vcmVIb3RlbHMgPSAocGFyYW1zOiBhbnkpID0+ICh7XG4gIHR5cGU6IEFjdGlvblR5cGVzLkdFVF9NT1JFX0hPVEVMU19SRVFVRVNULFxuICBwYXJhbXMsXG59KTtcblxuZXhwb3J0IGNvbnN0IHNlbGVjdEhvdGVsID0gKGhvdGVsOiBJSG90ZWwpID0+ICh7XG4gIHR5cGU6IEFjdGlvblR5cGVzLlNFTEVDVF9IT1RFTCxcbiAgcGF5bG9hZDoge1xuICAgIGhvdGVsLFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVSZXNlcnZhdGlvbiA9IChib29rOiBJQm9vaykgPT4gKHtcbiAgdHlwZTogQWN0aW9uVHlwZXMuVVBEQVRFX1JFU0VSVkFUSU9OLFxuICBwYXlsb2FkOiB7XG4gICAgYm9vayxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgYWRkQ2FyZCA9IChjYXJkOiBJQ2FyZCkgPT4gKHtcbiAgdHlwZTogQWN0aW9uVHlwZXMuQUREX0NBUkRfUkVRVUVTVCxcbiAgY2FyZCxcbn0pO1xuXG5leHBvcnQgY29uc3Qgc2V0RGVmYXVsdENhcmQgPSAoY2FyZDogSVNlY3VyZUNhcmQpID0+ICh7XG4gIHR5cGU6IEFjdGlvblR5cGVzLlNFVF9ERUZBVUxUX0NBUkQsXG4gIHBheWxvYWQ6IHtcbiAgICBjYXJkLFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVCb29raW5nID0gKGJvb2s6IElCb29rLCBuYXZpZ2F0aW9uOiBhbnkpID0+ICh7XG4gIHR5cGU6IEFjdGlvblR5cGVzLkNSRUFURV9CT09LSU5HX1JFUVVFU1QsXG4gIGJvb2ssXG4gIG5hdmlnYXRpb24sXG59KTtcblxuZXhwb3J0IGNvbnN0IGdldEJvb2tpbmdzID0gKCkgPT4gKHtcbiAgdHlwZTogQWN0aW9uVHlwZXMuR0VUX0JPT0tJTkdTX1JFUVVFU1QsXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBLElBQUFBLFlBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUdPLElBQU1DLFNBQVMsR0FBRyxTQUFaQSxTQUFTQSxDQUFJQyxNQUFXO0VBQUEsT0FBTTtJQUN6Q0MsSUFBSSxFQUFFQyxvQkFBVyxDQUFDQyxrQkFBa0I7SUFDcENILE1BQU0sRUFBTkE7RUFDRixDQUFDO0FBQUEsQ0FBQztBQUFDSSxPQUFBLENBQUFMLFNBQUEsR0FBQUEsU0FBQTtBQUVJLElBQU1NLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBSUwsTUFBVztFQUFBLE9BQU07SUFDN0NDLElBQUksRUFBRUMsb0JBQVcsQ0FBQ0ksdUJBQXVCO0lBQ3pDTixNQUFNLEVBQU5BO0VBQ0YsQ0FBQztBQUFBLENBQUM7QUFBQ0ksT0FBQSxDQUFBQyxhQUFBLEdBQUFBLGFBQUE7QUFFSSxJQUFNRSxXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBSUMsS0FBYTtFQUFBLE9BQU07SUFDN0NQLElBQUksRUFBRUMsb0JBQVcsQ0FBQ08sWUFBWTtJQUM5QkMsT0FBTyxFQUFFO01BQ1BGLEtBQUssRUFBTEE7SUFDRjtFQUNGLENBQUM7QUFBQSxDQUFDO0FBQUNKLE9BQUEsQ0FBQUcsV0FBQSxHQUFBQSxXQUFBO0FBRUksSUFBTUksaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBSUMsSUFBVztFQUFBLE9BQU07SUFDakRYLElBQUksRUFBRUMsb0JBQVcsQ0FBQ1csa0JBQWtCO0lBQ3BDSCxPQUFPLEVBQUU7TUFDUEUsSUFBSSxFQUFKQTtJQUNGO0VBQ0YsQ0FBQztBQUFBLENBQUM7QUFBQ1IsT0FBQSxDQUFBTyxpQkFBQSxHQUFBQSxpQkFBQTtBQUVJLElBQU1HLE9BQU8sR0FBRyxTQUFWQSxPQUFPQSxDQUFJQyxJQUFXO0VBQUEsT0FBTTtJQUN2Q2QsSUFBSSxFQUFFQyxvQkFBVyxDQUFDYyxnQkFBZ0I7SUFDbENELElBQUksRUFBSkE7RUFDRixDQUFDO0FBQUEsQ0FBQztBQUFDWCxPQUFBLENBQUFVLE9BQUEsR0FBQUEsT0FBQTtBQUVJLElBQU1HLGNBQWMsR0FBRyxTQUFqQkEsY0FBY0EsQ0FBSUYsSUFBaUI7RUFBQSxPQUFNO0lBQ3BEZCxJQUFJLEVBQUVDLG9CQUFXLENBQUNnQixnQkFBZ0I7SUFDbENSLE9BQU8sRUFBRTtNQUNQSyxJQUFJLEVBQUpBO0lBQ0Y7RUFDRixDQUFDO0FBQUEsQ0FBQztBQUFDWCxPQUFBLENBQUFhLGNBQUEsR0FBQUEsY0FBQTtBQUVJLElBQU1FLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBSVAsSUFBVyxFQUFFUSxVQUFlO0VBQUEsT0FBTTtJQUM5RG5CLElBQUksRUFBRUMsb0JBQVcsQ0FBQ21CLHNCQUFzQjtJQUN4Q1QsSUFBSSxFQUFKQSxJQUFJO0lBQ0pRLFVBQVUsRUFBVkE7RUFDRixDQUFDO0FBQUEsQ0FBQztBQUFDaEIsT0FBQSxDQUFBZSxhQUFBLEdBQUFBLGFBQUE7QUFFSSxJQUFNRyxXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBQTtFQUFBLE9BQVU7SUFDaENyQixJQUFJLEVBQUVDLG9CQUFXLENBQUNxQjtFQUNwQixDQUFDO0FBQUEsQ0FBQztBQUFDbkIsT0FBQSxDQUFBa0IsV0FBQSxHQUFBQSxXQUFBIn0=