60411a1b36503f00b23e3d9ccdc39e78
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _extractProps = _interopRequireWildcard(require("../lib/extract/extractProps"));
var _extractTransform = _interopRequireDefault(require("../lib/extract/extractTransform"));
var _extractText = _interopRequireWildcard(require("../lib/extract/extractText"));
var _util = require("../lib/util");
var _Shape2 = _interopRequireDefault(require("./Shape"));
var _NativeComponents = require("./NativeComponents");
var _jsxFileName = "/Users/wojciechlewicki/work/another/react-native-svg/src/elements/TSpan.tsx";
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = (0, _getPrototypeOf2.default)(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return (0, _possibleConstructorReturn2.default)(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
var TSpan = function (_Shape) {
  (0, _inherits2.default)(TSpan, _Shape);
  var _super = _createSuper(TSpan);
  function TSpan() {
    var _this;
    (0, _classCallCheck2.default)(this, TSpan);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setNativeProps", function (props) {
      var matrix = !props.matrix && (0, _extractTransform.default)(props);
      if (matrix) {
        props.matrix = matrix;
      }
      var prop = (0, _extractProps.propsAndStyles)(props);
      (0, _extends3.default)(prop, (0, _util.pickNotNil)((0, _extractText.default)(prop, false)));
      _this.root && _this.root.setNativeProps(prop);
    });
    return _this;
  }
  (0, _createClass2.default)(TSpan, [{
    key: "render",
    value: function render() {
      var prop = (0, _extractProps.propsAndStyles)(this.props);
      var props = (0, _extractProps.default)((0, _extends3.default)({}, prop, {
        x: null,
        y: null
      }), this);
      (0, _extends3.default)(props, (0, _extractText.default)(prop, false));
      props.ref = this.refMethod;
      return _react.default.createElement(_NativeComponents.RNSVGTSpan, (0, _extends2.default)({}, props, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 56,
          columnNumber: 12
        }
      }));
    }
  }]);
  return TSpan;
}(_Shape2.default);
exports.default = TSpan;
(0, _defineProperty2.default)(TSpan, "displayName", 'TSpan');
(0, _extractText.setTSpan)(TSpan);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,