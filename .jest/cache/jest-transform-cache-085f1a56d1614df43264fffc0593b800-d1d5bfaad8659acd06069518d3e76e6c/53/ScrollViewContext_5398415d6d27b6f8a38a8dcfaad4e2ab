cc39eec1fe2e53ec6abb74cb783b6c57
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.VERTICAL = exports.HORIZONTAL = void 0;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var ScrollViewContext = React.createContext(null);
if (__DEV__) {
  ScrollViewContext.displayName = 'ScrollViewContext';
}
var _default = ScrollViewContext;
exports.default = _default;
var HORIZONTAL = Object.freeze({
  horizontal: true
});
exports.HORIZONTAL = HORIZONTAL;
var VERTICAL = Object.freeze({
  horizontal: false
});
exports.VERTICAL = VERTICAL;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJTY3JvbGxWaWV3Q29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJfX0RFVl9fIiwiZGlzcGxheU5hbWUiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJIT1JJWk9OVEFMIiwiZnJlZXplIiwiaG9yaXpvbnRhbCIsIlZFUlRJQ0FMIl0sInNvdXJjZXMiOlsiU2Nyb2xsVmlld0NvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3RcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgVmFsdWUgPSB7aG9yaXpvbnRhbDogYm9vbGVhbn0gfCBudWxsO1xuXG5jb25zdCBTY3JvbGxWaWV3Q29udGV4dDogUmVhY3QuQ29udGV4dDxWYWx1ZT4gPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKF9fREVWX18pIHtcbiAgU2Nyb2xsVmlld0NvbnRleHQuZGlzcGxheU5hbWUgPSAnU2Nyb2xsVmlld0NvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsVmlld0NvbnRleHQ7XG5cbmV4cG9ydCBjb25zdCBIT1JJWk9OVEFMOiBWYWx1ZSA9IE9iamVjdC5mcmVlemUoe2hvcml6b250YWw6IHRydWV9KTtcbmV4cG9ydCBjb25zdCBWRVJUSUNBTDogVmFsdWUgPSBPYmplY3QuZnJlZXplKHtob3Jpem9udGFsOiBmYWxzZX0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFVQSxJQUFBQSxLQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFBK0IsU0FBQUMseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFILHdCQUFBTyxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQSxTQUFBTSxNQUFBLFdBQUFDLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLEdBQUEsSUFBQVgsR0FBQSxRQUFBVyxHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFkLEdBQUEsRUFBQVcsR0FBQSxTQUFBSSxJQUFBLEdBQUFSLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQVYsR0FBQSxFQUFBVyxHQUFBLGNBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBVixHQUFBLElBQUFVLElBQUEsQ0FBQUMsR0FBQSxLQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUgsTUFBQSxFQUFBSyxHQUFBLEVBQUFJLElBQUEsWUFBQVQsTUFBQSxDQUFBSyxHQUFBLElBQUFYLEdBQUEsQ0FBQVcsR0FBQSxTQUFBTCxNQUFBLENBQUFKLE9BQUEsR0FBQUYsR0FBQSxNQUFBRyxLQUFBLElBQUFBLEtBQUEsQ0FBQWEsR0FBQSxDQUFBaEIsR0FBQSxFQUFBTSxNQUFBLFlBQUFBLE1BQUE7QUFJL0IsSUFBTVcsaUJBQXVDLEdBQUd6QixLQUFLLENBQUMwQixhQUFhLENBQUMsSUFBSSxDQUFDO0FBQ3pFLElBQUlDLE9BQU8sRUFBRTtFQUNYRixpQkFBaUIsQ0FBQ0csV0FBVyxHQUFHLG1CQUFtQjtBQUNyRDtBQUFDLElBQUFDLFFBQUEsR0FDY0osaUJBQWlCO0FBQUFLLE9BQUEsQ0FBQXBCLE9BQUEsR0FBQW1CLFFBQUE7QUFFekIsSUFBTUUsVUFBaUIsR0FBR2YsTUFBTSxDQUFDZ0IsTUFBTSxDQUFDO0VBQUNDLFVBQVUsRUFBRTtBQUFJLENBQUMsQ0FBQztBQUFDSCxPQUFBLENBQUFDLFVBQUEsR0FBQUEsVUFBQTtBQUM1RCxJQUFNRyxRQUFlLEdBQUdsQixNQUFNLENBQUNnQixNQUFNLENBQUM7RUFBQ0MsVUFBVSxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQUNILE9BQUEsQ0FBQUksUUFBQSxHQUFBQSxRQUFBIn0=