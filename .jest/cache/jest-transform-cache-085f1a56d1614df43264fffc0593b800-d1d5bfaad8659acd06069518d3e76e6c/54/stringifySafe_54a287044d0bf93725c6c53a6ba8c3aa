2e120b9318ed5df6b71aba099567af7e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStringifySafeWithLimits = createStringifySafeWithLimits;
exports.default = void 0;
var _invariant = _interopRequireDefault(require("invariant"));
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function createStringifySafeWithLimits(limits) {
  var _limits$maxDepth = limits.maxDepth,
    maxDepth = _limits$maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits$maxDepth,
    _limits$maxStringLimi = limits.maxStringLimit,
    maxStringLimit = _limits$maxStringLimi === void 0 ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,
    _limits$maxArrayLimit = limits.maxArrayLimit,
    maxArrayLimit = _limits$maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,
    _limits$maxObjectKeys = limits.maxObjectKeysLimit,
    maxObjectKeysLimit = _limits$maxObjectKeys === void 0 ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;
  var stack = [];
  function replacer(key, value) {
    while (stack.length && this !== stack[0]) {
      stack.shift();
    }
    if (typeof value === 'string') {
      var truncatedString = '...(truncated)...';
      if (value.length > maxStringLimit + truncatedString.length) {
        return value.substring(0, maxStringLimit) + truncatedString;
      }
      return value;
    }
    if (typeof value !== 'object' || value === null) {
      return value;
    }
    var retval = value;
    if (Array.isArray(value)) {
      if (stack.length >= maxDepth) {
        retval = "[ ... array with " + value.length + " values ... ]";
      } else if (value.length > maxArrayLimit) {
        retval = value.slice(0, maxArrayLimit).concat(["... extra " + (value.length - maxArrayLimit) + " values truncated ..."]);
      }
    } else {
      (0, _invariant.default)(typeof value === 'object', 'This was already found earlier');
      var keys = Object.keys(value);
      if (stack.length >= maxDepth) {
        retval = "{ ... object with " + keys.length + " keys ... }";
      } else if (keys.length > maxObjectKeysLimit) {
        retval = {};
        for (var _iterator = _createForOfIteratorHelperLoose(keys.slice(0, maxObjectKeysLimit)), _step; !(_step = _iterator()).done;) {
          var k = _step.value;
          retval[k] = value[k];
        }
        var truncatedKey = '...(truncated keys)...';
        retval[truncatedKey] = keys.length - maxObjectKeysLimit;
      }
    }
    stack.unshift(retval);
    return retval;
  }
  return function stringifySafe(arg) {
    if (arg === undefined) {
      return 'undefined';
    } else if (arg === null) {
      return 'null';
    } else if (typeof arg === 'function') {
      try {
        return arg.toString();
      } catch (e) {
        return '[function unknown]';
      }
    } else if (arg instanceof Error) {
      return arg.name + ': ' + arg.message;
    } else {
      try {
        var ret = JSON.stringify(arg, replacer);
        if (ret === undefined) {
          return '["' + typeof arg + '" failed to stringify]';
        }
        return ret;
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            return arg.toString();
          } catch (E) {}
        }
      }
    }
    return '["' + typeof arg + '" failed to stringify]';
  };
}
var stringifySafe = createStringifySafeWithLimits({
  maxDepth: 10,
  maxStringLimit: 100,
  maxArrayLimit: 50,
  maxObjectKeysLimit: 50
});
var _default = stringifySafe;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW52YXJpYW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIiwibyIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNhbGwiLCJuZXh0IiwiYmluZCIsIkFycmF5IiwiaXNBcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsImxlbmd0aCIsImkiLCJkb25lIiwidmFsdWUiLCJUeXBlRXJyb3IiLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJhcnIiLCJsZW4iLCJhcnIyIiwiY3JlYXRlU3RyaW5naWZ5U2FmZVdpdGhMaW1pdHMiLCJsaW1pdHMiLCJfbGltaXRzJG1heERlcHRoIiwibWF4RGVwdGgiLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsIl9saW1pdHMkbWF4U3RyaW5nTGltaSIsIm1heFN0cmluZ0xpbWl0IiwiX2xpbWl0cyRtYXhBcnJheUxpbWl0IiwibWF4QXJyYXlMaW1pdCIsIl9saW1pdHMkbWF4T2JqZWN0S2V5cyIsIm1heE9iamVjdEtleXNMaW1pdCIsInN0YWNrIiwicmVwbGFjZXIiLCJrZXkiLCJzaGlmdCIsInRydW5jYXRlZFN0cmluZyIsInN1YnN0cmluZyIsInJldHZhbCIsImNvbmNhdCIsImludmFyaWFudCIsImtleXMiLCJfaXRlcmF0b3IiLCJfc3RlcCIsImsiLCJ0cnVuY2F0ZWRLZXkiLCJ1bnNoaWZ0Iiwic3RyaW5naWZ5U2FmZSIsImFyZyIsInVuZGVmaW5lZCIsImUiLCJFcnJvciIsIm1lc3NhZ2UiLCJyZXQiLCJKU09OIiwic3RyaW5naWZ5IiwiRSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJzdHJpbmdpZnlTYWZlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRyaWVzIHRvIHN0cmluZ2lmeSB3aXRoIEpTT04uc3RyaW5naWZ5IGFuZCB0b1N0cmluZywgYnV0IGNhdGNoZXMgZXhjZXB0aW9uc1xuICogKGUuZy4gZnJvbSBjaXJjdWxhciBvYmplY3RzKSBhbmQgYWx3YXlzIHJldHVybnMgYSBzdHJpbmcgYW5kIG5ldmVyIHRocm93cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0cmluZ2lmeVNhZmVXaXRoTGltaXRzKGxpbWl0czoge3xcbiAgbWF4RGVwdGg/OiBudW1iZXIsXG4gIG1heFN0cmluZ0xpbWl0PzogbnVtYmVyLFxuICBtYXhBcnJheUxpbWl0PzogbnVtYmVyLFxuICBtYXhPYmplY3RLZXlzTGltaXQ/OiBudW1iZXIsXG58fSk6IG1peGVkID0+IHN0cmluZyB7XG4gIGNvbnN0IHtcbiAgICBtYXhEZXB0aCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICBtYXhTdHJpbmdMaW1pdCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICBtYXhBcnJheUxpbWl0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgIG1heE9iamVjdEtleXNMaW1pdCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgfSA9IGxpbWl0cztcbiAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgZnVuY3Rpb24gcmVwbGFjZXIoa2V5OiBzdHJpbmcsIHZhbHVlOiBtaXhlZCk6IG1peGVkIHtcbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoICYmIHRoaXMgIT09IHN0YWNrWzBdKSB7XG4gICAgICBzdGFjay5zaGlmdCgpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCB0cnVuY2F0ZWRTdHJpbmcgPSAnLi4uKHRydW5jYXRlZCkuLi4nO1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IG1heFN0cmluZ0xpbWl0ICsgdHJ1bmNhdGVkU3RyaW5nLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKDAsIG1heFN0cmluZ0xpbWl0KSArIHRydW5jYXRlZFN0cmluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBsZXQgcmV0dmFsID0gdmFsdWU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBpZiAoc3RhY2subGVuZ3RoID49IG1heERlcHRoKSB7XG4gICAgICAgIHJldHZhbCA9IGBbIC4uLiBhcnJheSB3aXRoICR7dmFsdWUubGVuZ3RofSB2YWx1ZXMgLi4uIF1gO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZS5sZW5ndGggPiBtYXhBcnJheUxpbWl0KSB7XG4gICAgICAgIHJldHZhbCA9IHZhbHVlXG4gICAgICAgICAgLnNsaWNlKDAsIG1heEFycmF5TGltaXQpXG4gICAgICAgICAgLmNvbmNhdChbXG4gICAgICAgICAgICBgLi4uIGV4dHJhICR7dmFsdWUubGVuZ3RoIC0gbWF4QXJyYXlMaW1pdH0gdmFsdWVzIHRydW5jYXRlZCAuLi5gLFxuICAgICAgICAgIF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBZGQgcmVmaW5lbWVudCBhZnRlciBBcnJheS5pc0FycmF5IGNhbGwuXG4gICAgICBpbnZhcmlhbnQodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JywgJ1RoaXMgd2FzIGFscmVhZHkgZm91bmQgZWFybGllcicpO1xuICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2subGVuZ3RoID49IG1heERlcHRoKSB7XG4gICAgICAgIHJldHZhbCA9IGB7IC4uLiBvYmplY3Qgd2l0aCAke2tleXMubGVuZ3RofSBrZXlzIC4uLiB9YDtcbiAgICAgIH0gZWxzZSBpZiAoa2V5cy5sZW5ndGggPiBtYXhPYmplY3RLZXlzTGltaXQpIHtcbiAgICAgICAgLy8gUmV0dXJuIGEgc2FtcGxlIG9mIHRoZSBrZXlzLlxuICAgICAgICByZXR2YWwgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgayBvZiBrZXlzLnNsaWNlKDAsIG1heE9iamVjdEtleXNMaW1pdCkpIHtcbiAgICAgICAgICByZXR2YWxba10gPSB2YWx1ZVtrXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cnVuY2F0ZWRLZXkgPSAnLi4uKHRydW5jYXRlZCBrZXlzKS4uLic7XG4gICAgICAgIHJldHZhbFt0cnVuY2F0ZWRLZXldID0ga2V5cy5sZW5ndGggLSBtYXhPYmplY3RLZXlzTGltaXQ7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YWNrLnVuc2hpZnQocmV0dmFsKTtcbiAgICByZXR1cm4gcmV0dmFsO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmluZ2lmeVNhZmUoYXJnOiBtaXhlZCk6IHN0cmluZyB7XG4gICAgaWYgKGFyZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gICAgfSBlbHNlIGlmIChhcmcgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXJnLnRvU3RyaW5nKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiAnW2Z1bmN0aW9uIHVua25vd25dJztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4gYXJnLm5hbWUgKyAnOiAnICsgYXJnLm1lc3NhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBlcmZvcm0gYSB0cnkgY2F0Y2gsIGp1c3QgaW4gY2FzZSB0aGUgb2JqZWN0IGhhcyBhIGNpcmN1bGFyXG4gICAgICAvLyByZWZlcmVuY2Ugb3Igc3RyaW5naWZ5IHRocm93cyBmb3Igc29tZSBvdGhlciByZWFzb24uXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXQgPSBKU09OLnN0cmluZ2lmeShhcmcsIHJlcGxhY2VyKTtcbiAgICAgICAgaWYgKHJldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuICdbXCInICsgdHlwZW9mIGFyZyArICdcIiBmYWlsZWQgdG8gc3RyaW5naWZ5XSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcudG9TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXSA6IHRvU3RyaW5nIHNob3VsZG4ndCB0YWtlIGFueSBhcmd1bWVudHMgaW4gZ2VuZXJhbC5cbiAgICAgICAgICAgIHJldHVybiBhcmcudG9TdHJpbmcoKTtcbiAgICAgICAgICB9IGNhdGNoIChFKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnW1wiJyArIHR5cGVvZiBhcmcgKyAnXCIgZmFpbGVkIHRvIHN0cmluZ2lmeV0nO1xuICB9O1xufVxuXG5jb25zdCBzdHJpbmdpZnlTYWZlOiBtaXhlZCA9PiBzdHJpbmcgPSBjcmVhdGVTdHJpbmdpZnlTYWZlV2l0aExpbWl0cyh7XG4gIG1heERlcHRoOiAxMCxcbiAgbWF4U3RyaW5nTGltaXQ6IDEwMCxcbiAgbWF4QXJyYXlMaW1pdDogNTAsXG4gIG1heE9iamVjdEtleXNMaW1pdDogNTAsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5U2FmZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBVUEsSUFBQUEsVUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQWtDLFNBQUFDLGdDQUFBQyxDQUFBLEVBQUFDLGNBQUEsUUFBQUMsRUFBQSxVQUFBQyxNQUFBLG9CQUFBSCxDQUFBLENBQUFHLE1BQUEsQ0FBQUMsUUFBQSxLQUFBSixDQUFBLG9CQUFBRSxFQUFBLFVBQUFBLEVBQUEsR0FBQUEsRUFBQSxDQUFBRyxJQUFBLENBQUFMLENBQUEsR0FBQU0sSUFBQSxDQUFBQyxJQUFBLENBQUFMLEVBQUEsT0FBQU0sS0FBQSxDQUFBQyxPQUFBLENBQUFULENBQUEsTUFBQUUsRUFBQSxHQUFBUSwyQkFBQSxDQUFBVixDQUFBLE1BQUFDLGNBQUEsSUFBQUQsQ0FBQSxXQUFBQSxDQUFBLENBQUFXLE1BQUEscUJBQUFULEVBQUEsRUFBQUYsQ0FBQSxHQUFBRSxFQUFBLE1BQUFVLENBQUEsK0JBQUFBLENBQUEsSUFBQVosQ0FBQSxDQUFBVyxNQUFBLFdBQUFFLElBQUEsbUJBQUFBLElBQUEsU0FBQUMsS0FBQSxFQUFBZCxDQUFBLENBQUFZLENBQUEsc0JBQUFHLFNBQUE7QUFBQSxTQUFBTCw0QkFBQVYsQ0FBQSxFQUFBZ0IsTUFBQSxTQUFBaEIsQ0FBQSxxQkFBQUEsQ0FBQSxzQkFBQWlCLGlCQUFBLENBQUFqQixDQUFBLEVBQUFnQixNQUFBLE9BQUFFLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxTQUFBLENBQUFDLFFBQUEsQ0FBQWhCLElBQUEsQ0FBQUwsQ0FBQSxFQUFBc0IsS0FBQSxhQUFBSixDQUFBLGlCQUFBbEIsQ0FBQSxDQUFBdUIsV0FBQSxF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