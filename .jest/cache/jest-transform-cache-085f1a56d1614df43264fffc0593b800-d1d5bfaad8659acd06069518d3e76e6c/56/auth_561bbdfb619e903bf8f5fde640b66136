ed0ab7005538c696901e538ee6b16643
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.check_user_request = check_user_request;
exports.default = watchAuthRequest;
exports.login_request = login_request;
exports.save_account = save_account;
var _effects = require("redux-saga/effects");
var _actionTypes = _interopRequireDefault(require("../../utils/actionTypes"));
var _api = require("../../api");
var _actions = require("../../redux/actions");
var RootNavigation = _interopRequireWildcard(require("../../navigation/rootNavigation"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _regeneratorRuntime() { "use strict"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
var _marked = _regeneratorRuntime().mark(check_user_request),
  _marked2 = _regeneratorRuntime().mark(save_account),
  _marked3 = _regeneratorRuntime().mark(login_request),
  _marked4 = _regeneratorRuntime().mark(watchAuthRequest);
function check_user_request() {
  var response, data;
  return _regeneratorRuntime().wrap(function check_user_request$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        _context.prev = 0;
        _context.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        _context.next = 5;
        return (0, _effects.call)(_api.checkUser);
      case 5:
        response = _context.sent;
        data = response.data;
        if (!data.ok) {
          _context.next = 17;
          break;
        }
        if (!data.result.user) {
          _context.next = 13;
          break;
        }
        _context.next = 11;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        }), (0, _effects.put)({
          type: _actionTypes.default.CHECK_USER_SUCCESS,
          payload: {
            user: data.result.user
          }
        })]);
      case 11:
        _context.next = 15;
        break;
      case 13:
        _context.next = 15;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        });
      case 15:
        _context.next = 19;
        break;
      case 17:
        _context.next = 19;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 19:
        _context.next = 25;
        break;
      case 21:
        _context.prev = 21;
        _context.t0 = _context["catch"](0);
        _context.next = 25;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context.t0 === 'string' ? _context.t0 : _context.t0.message
          }
        });
      case 25:
      case "end":
        return _context.stop();
    }
  }, _marked, null, [[0, 21]]);
}
function save_account(action) {
  var user, response, data;
  return _regeneratorRuntime().wrap(function save_account$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        _context2.prev = 0;
        _context2.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        user = action.account;
        delete user._id;
        _context2.next = 7;
        return (0, _effects.call)(_api.saveAccount, action.account);
      case 7:
        response = _context2.sent;
        data = response.data;
        if (!data.ok) {
          _context2.next = 16;
          break;
        }
        _context2.next = 12;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.SUCCESS_OPERATION,
          payload: {
            message: data.result.message
          }
        }), (0, _effects.put)({
          type: _actionTypes.default.CREATE_ACCOUNT_SUCCESS,
          payload: {
            user: data.result.user
          }
        })]);
      case 12:
        action.navigation.pop();
        RootNavigation.navigate('Login', {});
        _context2.next = 18;
        break;
      case 16:
        _context2.next = 18;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 18:
        _context2.next = 24;
        break;
      case 20:
        _context2.prev = 20;
        _context2.t0 = _context2["catch"](0);
        _context2.next = 24;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context2.t0 === 'string' ? _context2.t0 : _context2.t0.message
          }
        });
      case 24:
      case "end":
        return _context2.stop();
    }
  }, _marked2, null, [[0, 20]]);
}
function login_request(action) {
  var response, data;
  return _regeneratorRuntime().wrap(function login_request$(_context3) {
    while (1) switch (_context3.prev = _context3.next) {
      case 0:
        _context3.prev = 0;
        _context3.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        _context3.next = 5;
        return (0, _effects.call)(_api.login, action.email, action.password);
      case 5:
        response = _context3.sent;
        data = response.data;
        if (!data.ok) {
          _context3.next = 13;
          break;
        }
        _context3.next = 10;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        }), (0, _effects.put)({
          type: _actionTypes.default.LOGIN_SUCCESS,
          payload: {
            user: data.result.user
          }
        }), (0, _effects.put)((0, _actions.navigateToScreen)('Overview', {}))]);
      case 10:
        RootNavigation.navigate('Overview', {});
        _context3.next = 15;
        break;
      case 13:
        _context3.next = 15;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 15:
        _context3.next = 21;
        break;
      case 17:
        _context3.prev = 17;
        _context3.t0 = _context3["catch"](0);
        _context3.next = 21;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context3.t0 === 'string' ? _context3.t0 : _context3.t0.message
          }
        });
      case 21:
      case "end":
        return _context3.stop();
    }
  }, _marked3, null, [[0, 17]]);
}
function watchAuthRequest() {
  return _regeneratorRuntime().wrap(function watchAuthRequest$(_context4) {
    while (1) switch (_context4.prev = _context4.next) {
      case 0:
        _context4.next = 2;
        return (0, _effects.all)([(0, _effects.takeLatest)(_actionTypes.default.SAVE_ACCOUNT_REQUEST, save_account), (0, _effects.takeLatest)(_actionTypes.default.LOGIN_REQUEST, login_request), (0, _effects.takeLatest)(_actionTypes.default.CHECK_USER_REQUEST, check_user_request)]);
      case 2:
      case "end":
        return _context4.stop();
    }
  }, _marked4);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZWZmZWN0cyIsInJlcXVpcmUiLCJfYWN0aW9uVHlwZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2FwaSIsIl9hY3Rpb25zIiwiUm9vdE5hdmlnYXRpb24iLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwiZXhwb3J0cyIsIk9wIiwiaGFzT3duIiwidmFsdWUiLCIkU3ltYm9sIiwiU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVyciIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJmbiIsImFyZyIsInR5cGUiLCJDb250aW51ZVNlbnRpbmVsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwibWV0aG9kIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWNvcmQiLCJyZXN1bHQiLCJfX2F3YWl0IiwidGhlbiIsInVud3JhcHBlZCIsImVycm9yIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJzdGF0ZSIsIkVycm9yIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJkb25lIiwibWV0aG9kTmFtZSIsInVuZGVmaW5lZCIsInJldHVybiIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImxlbmd0aCIsImkiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwia2V5cyIsInZhbCIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJjYXRjaCIsIl9jYXRjaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJfbWFya2VkIiwiY2hlY2tfdXNlcl9yZXF1ZXN0IiwiX21hcmtlZDIiLCJzYXZlX2FjY291bnQiLCJfbWFya2VkMyIsImxvZ2luX3JlcXVlc3QiLCJfbWFya2VkNCIsIndhdGNoQXV0aFJlcXVlc3QiLCJyZXNwb25zZSIsImRhdGEiLCJjaGVja191c2VyX3JlcXVlc3QkIiwiX2NvbnRleHQiLCJwdXQiLCJBY3Rpb25UeXBlcyIsIkFQSV9DQUxMX1JFUVVFU1QiLCJjaGVja1VzZXIiLCJvayIsInVzZXIiLCJhbGwiLCJBUElfQ0FMTF9TVUNDRVNTIiwiQ0hFQ0tfVVNFUl9TVUNDRVNTIiwicGF5bG9hZCIsIkFQSV9DQUxMX0ZBSUxVUkUiLCJtZXNzYWdlIiwidDAiLCJhY3Rpb24iLCJzYXZlX2FjY291bnQkIiwiX2NvbnRleHQyIiwiYWNjb3VudCIsIl9pZCIsInNhdmVBY2NvdW50IiwiU1VDQ0VTU19PUEVSQVRJT04iLCJDUkVBVEVfQUNDT1VOVF9TVUNDRVNTIiwibmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwibG9naW5fcmVxdWVzdCQiLCJfY29udGV4dDMiLCJsb2dpbiIsImVtYWlsIiwicGFzc3dvcmQiLCJMT0dJTl9TVUNDRVNTIiwibmF2aWdhdGVUb1NjcmVlbiIsIndhdGNoQXV0aFJlcXVlc3QkIiwiX2NvbnRleHQ0IiwidGFrZUxhdGVzdCIsIlNBVkVfQUNDT1VOVF9SRVFVRVNUIiwiTE9HSU5fUkVRVUVTVCIsIkNIRUNLX1VTRVJfUkVRVUVTVCJdLCJzb3VyY2VzIjpbImF1dGgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IEFjdGlvblR5cGVzIGZyb20gJy4uL3V0aWxzL2FjdGlvblR5cGVzJztcbmltcG9ydCB7cHV0LCBjYWxsLCBhbGwsIHRha2VMYXRlc3R9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5pbXBvcnQgQWN0aW9uVHlwZXMgZnJvbSAnLi4vLi4vdXRpbHMvYWN0aW9uVHlwZXMnO1xuaW1wb3J0IHtjaGVja1VzZXIsIHNhdmVBY2NvdW50LCBsb2dpbn0gZnJvbSAnLi4vLi4vYXBpJztcbmltcG9ydCB7QXhpb3NSZXNwb25zZX0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHtuYXZpZ2F0ZVRvU2NyZWVufSBmcm9tICcuLi8uLi9yZWR1eC9hY3Rpb25zJztcbmltcG9ydCAqIGFzIFJvb3ROYXZpZ2F0aW9uIGZyb20gJy4uLy4uL25hdmlnYXRpb24vcm9vdE5hdmlnYXRpb24nO1xuXG5leHBvcnQgZnVuY3Rpb24qIGNoZWNrX3VzZXJfcmVxdWVzdCgpIHtcbiAgdHJ5IHtcbiAgICB5aWVsZCBwdXQoe3R5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX1JFUVVFU1R9KTtcbiAgICBsZXQgcmVzcG9uc2U6IEF4aW9zUmVzcG9uc2UgPSB5aWVsZCBjYWxsKGNoZWNrVXNlcik7XG4gICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG5cbiAgICBpZiAoZGF0YS5vaykge1xuICAgICAgaWYgKGRhdGEucmVzdWx0LnVzZXIpIHtcbiAgICAgICAgeWllbGQgYWxsKFtcbiAgICAgICAgICBwdXQoe1xuICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQVBJX0NBTExfU1VDQ0VTUyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBwdXQoe1xuICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQ0hFQ0tfVVNFUl9TVUNDRVNTLFxuICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICB1c2VyOiBkYXRhLnJlc3VsdC51c2VyLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5aWVsZCBwdXQoe1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX1NVQ0NFU1MsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB5aWVsZCBwdXQoe1xuICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5BUElfQ0FMTF9GQUlMVVJFLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgbWVzc2FnZTogZGF0YS5yZXN1bHQubWVzc2FnZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICB5aWVsZCBwdXQoe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQVBJX0NBTExfRkFJTFVSRSxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgbWVzc2FnZTogdHlwZW9mIGVyciA9PT0gJ3N0cmluZycgPyBlcnIgOiBlcnIubWVzc2FnZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiBzYXZlX2FjY291bnQoYWN0aW9uOiBhbnkpIHtcbiAgdHJ5IHtcbiAgICB5aWVsZCBwdXQoe3R5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX1JFUVVFU1R9KTtcbiAgICBsZXQgdXNlciA9IGFjdGlvbi5hY2NvdW50O1xuICAgIGRlbGV0ZSB1c2VyLl9pZDtcbiAgICBsZXQgcmVzcG9uc2U6IEF4aW9zUmVzcG9uc2UgPSB5aWVsZCBjYWxsKHNhdmVBY2NvdW50LCBhY3Rpb24uYWNjb3VudCk7XG4gICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG5cbiAgICBpZiAoZGF0YS5vaykge1xuICAgICAgeWllbGQgYWxsKFtcbiAgICAgICAgcHV0KHtcbiAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5TVUNDRVNTX09QRVJBVElPTixcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBtZXNzYWdlOiBkYXRhLnJlc3VsdC5tZXNzYWdlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBwdXQoe1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkNSRUFURV9BQ0NPVU5UX1NVQ0NFU1MsXG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgdXNlcjogZGF0YS5yZXN1bHQudXNlcixcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgIF0pO1xuICAgICAgYWN0aW9uLm5hdmlnYXRpb24ucG9wKCk7XG4gICAgICBSb290TmF2aWdhdGlvbi5uYXZpZ2F0ZSgnTG9naW4nLCB7fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHlpZWxkIHB1dCh7XG4gICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX0ZBSUxVUkUsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBtZXNzYWdlOiBkYXRhLnJlc3VsdC5tZXNzYWdlLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgIHlpZWxkIHB1dCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5BUElfQ0FMTF9GQUlMVVJFLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBtZXNzYWdlOiB0eXBlb2YgZXJyID09PSAnc3RyaW5nJyA/IGVyciA6IGVyci5tZXNzYWdlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24qIGxvZ2luX3JlcXVlc3QoYWN0aW9uOiBhbnkpIHtcbiAgdHJ5IHtcbiAgICB5aWVsZCBwdXQoe3R5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX1JFUVVFU1R9KTtcbiAgICBsZXQgcmVzcG9uc2U6IEF4aW9zUmVzcG9uc2UgPSB5aWVsZCBjYWxsKFxuICAgICAgbG9naW4sXG4gICAgICBhY3Rpb24uZW1haWwsXG4gICAgICBhY3Rpb24ucGFzc3dvcmQsXG4gICAgKTtcbiAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcblxuICAgIGlmIChkYXRhLm9rKSB7XG4gICAgICB5aWVsZCBhbGwoW1xuICAgICAgICBwdXQoe1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX1NVQ0NFU1MsXG4gICAgICAgIH0pLFxuICAgICAgICBwdXQoe1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkxPR0lOX1NVQ0NFU1MsXG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgdXNlcjogZGF0YS5yZXN1bHQudXNlcixcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgcHV0KG5hdmlnYXRlVG9TY3JlZW4oJ092ZXJ2aWV3Jywge30pKSxcbiAgICAgIF0pO1xuICAgICAgLy8gYWN0aW9uLm5hdmlnYXRpb24ucG9wKDIpO1xuICAgICAgUm9vdE5hdmlnYXRpb24ubmF2aWdhdGUoJ092ZXJ2aWV3Jywge30pO1xuICAgIH0gZWxzZSB7XG4gICAgICB5aWVsZCBwdXQoe1xuICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5BUElfQ0FMTF9GQUlMVVJFLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgbWVzc2FnZTogZGF0YS5yZXN1bHQubWVzc2FnZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICB5aWVsZCBwdXQoe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQVBJX0NBTExfRkFJTFVSRSxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgbWVzc2FnZTogdHlwZW9mIGVyciA9PT0gJ3N0cmluZycgPyBlcnIgOiBlcnIubWVzc2FnZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIHdhdGNoQXV0aFJlcXVlc3QoKSB7XG4gIHlpZWxkIGFsbChbXG4gICAgdGFrZUxhdGVzdChBY3Rpb25UeXBlcy5TQVZFX0FDQ09VTlRfUkVRVUVTVCwgc2F2ZV9hY2NvdW50KSxcbiAgICB0YWtlTGF0ZXN0KEFjdGlvblR5cGVzLkxPR0lOX1JFUVVFU1QsIGxvZ2luX3JlcXVlc3QpLFxuICAgIHRha2VMYXRlc3QoQWN0aW9uVHlwZXMuQ0hFQ0tfVVNFUl9SRVFVRVNULCBjaGVja191c2VyX3JlcXVlc3QpLFxuICBdKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBLElBQUFBLFFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLElBQUEsR0FBQUgsT0FBQTtBQUVBLElBQUFJLFFBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLGNBQUEsR0FBQUMsdUJBQUEsQ0FBQU4sT0FBQTtBQUFrRSxTQUFBTyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUYsd0JBQUFNLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQUUsT0FBQSxFQUFBRixHQUFBLFVBQUFHLEtBQUEsR0FBQVIsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTyxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxDQUFBSixHQUFBLFlBQUFHLEtBQUEsQ0FBQUUsR0FBQSxDQUFBTCxHQUFBLFNBQUFNLE1BQUEsV0FBQUMscUJBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsR0FBQSxJQUFBWCxHQUFBLFFBQUFXLEdBQUEsa0JBQUFILE1BQUEsQ0FBQUksU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWQsR0FBQSxFQUFBVyxHQUFBLFNBQUFJLElBQUEsR0FBQVIscUJBQUEsR0FBQUMsTUFB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