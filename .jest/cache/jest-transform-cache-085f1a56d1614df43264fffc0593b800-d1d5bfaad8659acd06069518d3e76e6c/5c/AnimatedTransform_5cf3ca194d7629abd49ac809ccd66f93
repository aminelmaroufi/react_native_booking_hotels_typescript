8ae5cd360b5463d496e3eca522d14bd2
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AnimatedNode = require('./AnimatedNode');
var AnimatedWithChildren = require('./AnimatedWithChildren');
var NativeAnimatedHelper = require('../NativeAnimatedHelper');
var AnimatedTransform = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedTransform, _AnimatedWithChildren);
  var _super = _createSuper(AnimatedTransform);
  function AnimatedTransform(transforms) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedTransform);
    _this = _super.call(this);
    _this._transforms = transforms;
    return _this;
  }
  (0, _createClass2.default)(AnimatedTransform, [{
    key: "__makeNative",
    value: function __makeNative() {
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }
      });
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedTransform.prototype), "__makeNative", this).call(this);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof AnimatedNode) {
            result[key] = value.__getValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof AnimatedNode) {
            result[key] = value.__getAnimatedValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    }
  }, {
    key: "__attach",
    value: function __attach() {
      var _this2 = this;
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof AnimatedNode) {
            value.__addChild(_this2);
          }
        }
      });
    }
  }, {
    key: "__detach",
    value: function __detach() {
      var _this3 = this;
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof AnimatedNode) {
            value.__removeChild(_this3);
          }
        }
      });
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedTransform.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var transConfigs = [];
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof AnimatedNode) {
            transConfigs.push({
              type: 'animated',
              property: key,
              nodeTag: value.__getNativeTag()
            });
          } else {
            transConfigs.push({
              type: 'static',
              property: key,
              value: NativeAnimatedHelper.transformDataType(value)
            });
          }
        }
      });
      NativeAnimatedHelper.validateTransform(transConfigs);
      return {
        type: 'transform',
        transforms: transConfigs
      };
    }
  }]);
  return AnimatedTransform;
}(AnimatedWithChildren);
module.exports = AnimatedTransform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2dldDIiLCJfaW5oZXJpdHMyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJkZWZhdWx0IiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwiQW5pbWF0ZWROb2RlIiwiQW5pbWF0ZWRXaXRoQ2hpbGRyZW4iLCJOYXRpdmVBbmltYXRlZEhlbHBlciIsIkFuaW1hdGVkVHJhbnNmb3JtIiwiX0FuaW1hdGVkV2l0aENoaWxkcmVuIiwiX3N1cGVyIiwidHJhbnNmb3JtcyIsIl90aGlzIiwiX3RyYW5zZm9ybXMiLCJrZXkiLCJ2YWx1ZSIsIl9fbWFrZU5hdGl2ZSIsImZvckVhY2giLCJ0cmFuc2Zvcm0iLCJfX2dldFZhbHVlIiwibWFwIiwiX19nZXRBbmltYXRlZFZhbHVlIiwiX19hdHRhY2giLCJfdGhpczIiLCJfX2FkZENoaWxkIiwiX19kZXRhY2giLCJfdGhpczMiLCJfX3JlbW92ZUNoaWxkIiwiX19nZXROYXRpdmVDb25maWciLCJ0cmFuc0NvbmZpZ3MiLCJwdXNoIiwidHlwZSIsInByb3BlcnR5Iiwibm9kZVRhZyIsIl9fZ2V0TmF0aXZlVGFnIiwidHJhbnNmb3JtRGF0YVR5cGUiLCJ2YWxpZGF0ZVRyYW5zZm9ybSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJBbmltYXRlZFRyYW5zZm9ybS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBbmltYXRlZE5vZGUgPSByZXF1aXJlKCcuL0FuaW1hdGVkTm9kZScpO1xuY29uc3QgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4gPSByZXF1aXJlKCcuL0FuaW1hdGVkV2l0aENoaWxkcmVuJyk7XG5jb25zdCBOYXRpdmVBbmltYXRlZEhlbHBlciA9IHJlcXVpcmUoJy4uL05hdGl2ZUFuaW1hdGVkSGVscGVyJyk7XG5cbmNsYXNzIEFuaW1hdGVkVHJhbnNmb3JtIGV4dGVuZHMgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4ge1xuICBfdHJhbnNmb3JtczogJFJlYWRPbmx5QXJyYXk8T2JqZWN0PjtcblxuICBjb25zdHJ1Y3Rvcih0cmFuc2Zvcm1zOiAkUmVhZE9ubHlBcnJheTxPYmplY3Q+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl90cmFuc2Zvcm1zID0gdHJhbnNmb3JtcztcbiAgfVxuXG4gIF9fbWFrZU5hdGl2ZSgpIHtcbiAgICB0aGlzLl90cmFuc2Zvcm1zLmZvckVhY2godHJhbnNmb3JtID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgICB2YWx1ZS5fX21ha2VOYXRpdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHN1cGVyLl9fbWFrZU5hdGl2ZSgpO1xuICB9XG5cbiAgX19nZXRWYWx1ZSgpOiAkUmVhZE9ubHlBcnJheTxPYmplY3Q+IHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNmb3Jtcy5tYXAodHJhbnNmb3JtID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdHJhbnNmb3JtW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkTm9kZSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWUuX19nZXRWYWx1ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG4gIH1cblxuICBfX2dldEFuaW1hdGVkVmFsdWUoKTogJFJlYWRPbmx5QXJyYXk8T2JqZWN0PiB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zZm9ybXMubWFwKHRyYW5zZm9ybSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlLl9fZ2V0QW5pbWF0ZWRWYWx1ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEFsbCB0cmFuc2Zvcm0gY29tcG9uZW50cyBuZWVkZWQgdG8gcmVjb21wb3NlIG1hdHJpeFxuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG4gIH1cblxuICBfX2F0dGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLl90cmFuc2Zvcm1zLmZvckVhY2godHJhbnNmb3JtID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgICB2YWx1ZS5fX2FkZENoaWxkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfX2RldGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLl90cmFuc2Zvcm1zLmZvckVhY2godHJhbnNmb3JtID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgICB2YWx1ZS5fX3JlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3VwZXIuX19kZXRhY2goKTtcbiAgfVxuXG4gIF9fZ2V0TmF0aXZlQ29uZmlnKCk6IGFueSB7XG4gICAgY29uc3QgdHJhbnNDb25maWdzID0gW107XG5cbiAgICB0aGlzLl90cmFuc2Zvcm1zLmZvckVhY2godHJhbnNmb3JtID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgICB0cmFuc0NvbmZpZ3MucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAnYW5pbWF0ZWQnLFxuICAgICAgICAgICAgcHJvcGVydHk6IGtleSxcbiAgICAgICAgICAgIG5vZGVUYWc6IHZhbHVlLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhbnNDb25maWdzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ3N0YXRpYycsXG4gICAgICAgICAgICBwcm9wZXJ0eToga2V5LFxuICAgICAgICAgICAgdmFsdWU6IE5hdGl2ZUFuaW1hdGVkSGVscGVyLnRyYW5zZm9ybURhdGFUeXBlKHZhbHVlKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIudmFsaWRhdGVUcmFuc2Zvcm0odHJhbnNDb25maWdzKTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3RyYW5zZm9ybScsXG4gICAgICB0cmFuc2Zvcm1zOiB0cmFuc0NvbmZpZ3MsXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGVkVHJhbnNmb3JtO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUcsS0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUksVUFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUssMkJBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFNLGdCQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxTQUFBTyxhQUFBQyxPQUFBLFFBQUFDLHlCQUFBLEdBQUFDLHlCQUFBLG9CQUFBQyxxQkFBQSxRQUFBQyxLQUFBLE9BQUFOLGdCQUFBLENBQUFPLE9BQUEsRUFBQUwsT0FBQSxHQUFBTSxNQUFBLE1BQUFMLHlCQUFBLFFBQUFNLFNBQUEsT0FBQVQsZ0JBQUEsQ0FBQU8sT0FBQSxRQUFB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