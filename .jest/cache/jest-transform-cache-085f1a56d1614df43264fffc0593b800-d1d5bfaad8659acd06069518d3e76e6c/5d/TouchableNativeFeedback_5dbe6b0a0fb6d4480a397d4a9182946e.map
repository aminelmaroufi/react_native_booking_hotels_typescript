{"version":3,"names":["_Pressability","_interopRequireDefault","require","_PressabilityDebug","_ViewNativeComponent","_ReactNative","_Platform","_View","_processColor","React","_interopRequireWildcard","_invariant","_jsxRuntime","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","TouchableNativeFeedback","_React$Component","_inherits2","_super","_this","_classCallCheck2","_len","length","args","Array","_key","concat","state","pressability","Pressability","_createPressabilityConfig","_createClass2","value","_this$props$accessibi","_this2","cancelable","props","rejectResponderTermination","disabled","accessibilityState","hitSlop","delayLongPress","delayPressIn","delayPressOut","minPressDuration","pressRectOffset","pressRetentionOffset","android_disableSound","touchSoundDisabled","onLongPress","onPress","onPressIn","event","Platform","OS","_dispatchHotspotUpdate","_dispatchPressedStateChange","onPressMove","onPressOut","pressed","hostComponentRef","ReactNative","findHostInstance_DEPRECATED","console","warn","Commands","setPressed","_event$nativeEvent","nativeEvent","locationX","locationY","hotspotUpdate","render","element","Children","only","children","__DEV__","type","View","push","jsx","PressabilityDebugView","color","_this$state$pressabil","getEventHandlers","onBlur","onFocus","eventHandlersWithoutBlurAndFocus","_objectWithoutProperties2","_extends2","cloneElement","getBackgroundProp","background","undefined","SelectableBackground","useForeground","accessible","accessibilityHint","accessibilityLabel","accessibilityRole","accessibilityActions","onAccessibilityAction","accessibilityValue","importantForAccessibility","accessibilityLiveRegion","accessibilityViewIsModal","accessibilityElementsHidden","hasTVPreferredFocus","focusable","nativeID","nextFocusDown","nextFocusForward","nextFocusLeft","nextFocusRight","nextFocusUp","onLayout","testID","componentDidUpdate","prevProps","prevState","configure","componentWillUnmount","reset","Component","rippleRadius","attribute","SelectableBackgroundBorderless","Ripple","borderless","processedColor","processColor","invariant","canUseNativeForeground","Version","nativeForegroundAndroid","nativeBackgroundAndroid","displayName","module","exports"],"sources":["TouchableNativeFeedback.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Pressability, {\n  type PressabilityConfig,\n} from '../../Pressability/Pressability';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport typeof TouchableWithoutFeedback from './TouchableWithoutFeedback';\nimport {Commands} from 'react-native/Libraries/Components/View/ViewNativeComponent';\nimport ReactNative from 'react-native/Libraries/Renderer/shims/ReactNative';\nimport type {PressEvent} from 'react-native/Libraries/Types/CoreEventTypes';\nimport Platform from '../../Utilities/Platform';\nimport View from '../../Components/View/View';\nimport processColor from '../../StyleSheet/processColor';\nimport * as React from 'react';\nimport invariant from 'invariant';\n\ntype Props = $ReadOnly<{|\n  ...React.ElementConfig<TouchableWithoutFeedback>,\n\n  /**\n   * Determines the type of background drawable that's going to be used to\n   * display feedback. It takes an object with `type` property and extra data\n   * depending on the `type`. It's recommended to use one of the static\n   * methods to generate that dictionary.\n   */\n  background?: ?(\n    | $ReadOnly<{|\n        type: 'ThemeAttrAndroid',\n        attribute:\n          | 'selectableItemBackground'\n          | 'selectableItemBackgroundBorderless',\n        rippleRadius: ?number,\n      |}>\n    | $ReadOnly<{|\n        type: 'RippleAndroid',\n        color: ?number,\n        borderless: boolean,\n        rippleRadius: ?number,\n      |}>\n  ),\n\n  /**\n   * TV preferred focus (see documentation for the View component).\n   */\n  hasTVPreferredFocus?: ?boolean,\n\n  /**\n   * TV next focus down (see documentation for the View component).\n   */\n  nextFocusDown?: ?number,\n\n  /**\n   * TV next focus forward (see documentation for the View component).\n   */\n  nextFocusForward?: ?number,\n\n  /**\n   * TV next focus left (see documentation for the View component).\n   */\n  nextFocusLeft?: ?number,\n\n  /**\n   * TV next focus right (see documentation for the View component).\n   */\n  nextFocusRight?: ?number,\n\n  /**\n   * TV next focus up (see documentation for the View component).\n   */\n  nextFocusUp?: ?number,\n\n  /**\n   * Set to true to add the ripple effect to the foreground of the view, instead\n   * of the background. This is useful if one of your child views has a\n   * background of its own, or you're e.g. displaying images, and you don't want\n   * the ripple to be covered by them.\n   *\n   * Check TouchableNativeFeedback.canUseNativeForeground() first, as this is\n   * only available on Android 6.0 and above. If you try to use this on older\n   * versions, this will fallback to background.\n   */\n  useForeground?: ?boolean,\n|}>;\n\ntype State = $ReadOnly<{|\n  pressability: Pressability,\n|}>;\n\nclass TouchableNativeFeedback extends React.Component<Props, State> {\n  /**\n   * Creates a value for the `background` prop that uses the Android theme's\n   * default background for selectable elements.\n   */\n  static SelectableBackground: (\n    rippleRadius: ?number,\n  ) => $ReadOnly<{|\n    attribute: 'selectableItemBackground',\n    type: 'ThemeAttrAndroid',\n    rippleRadius: ?number,\n  |}> = (rippleRadius: ?number) => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackground',\n    rippleRadius,\n  });\n\n  /**\n   * Creates a value for the `background` prop that uses the Android theme's\n   * default background for borderless selectable elements. Requires API 21+.\n   */\n  static SelectableBackgroundBorderless: (\n    rippleRadius: ?number,\n  ) => $ReadOnly<{|\n    attribute: 'selectableItemBackgroundBorderless',\n    type: 'ThemeAttrAndroid',\n    rippleRadius: ?number,\n  |}> = (rippleRadius: ?number) => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackgroundBorderless',\n    rippleRadius,\n  });\n\n  /**\n   * Creates a value for the `background` prop that uses the Android ripple with\n   * the supplied color. If `borderless` is true, the ripple will render outside\n   * of the view bounds. Requires API 21+.\n   */\n  static Ripple: (\n    color: string,\n    borderless: boolean,\n    rippleRadius: ?number,\n  ) => $ReadOnly<{|\n    borderless: boolean,\n    color: ?number,\n    rippleRadius: ?number,\n    type: 'RippleAndroid',\n  |}> = (color: string, borderless: boolean, rippleRadius: ?number) => {\n    const processedColor = processColor(color);\n    invariant(\n      processedColor == null || typeof processedColor === 'number',\n      'Unexpected color given for Ripple color',\n    );\n    return {\n      type: 'RippleAndroid',\n      color: processedColor,\n      borderless,\n      rippleRadius,\n    };\n  };\n\n  /**\n   * Whether `useForeground` is supported.\n   */\n  static canUseNativeForeground: () => boolean = () =>\n    Platform.OS === 'android' && Platform.Version >= 23;\n\n  state: State = {\n    pressability: new Pressability(this._createPressabilityConfig()),\n  };\n\n  _createPressabilityConfig(): PressabilityConfig {\n    return {\n      cancelable: !this.props.rejectResponderTermination,\n      disabled:\n        this.props.disabled != null\n          ? this.props.disabled\n          : this.props.accessibilityState?.disabled,\n      hitSlop: this.props.hitSlop,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      minPressDuration: 0,\n      pressRectOffset: this.props.pressRetentionOffset,\n      android_disableSound: this.props.touchSoundDisabled,\n      onLongPress: this.props.onLongPress,\n      onPress: this.props.onPress,\n      onPressIn: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchHotspotUpdate(event);\n          this._dispatchPressedStateChange(true);\n        }\n        if (this.props.onPressIn != null) {\n          this.props.onPressIn(event);\n        }\n      },\n      onPressMove: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchHotspotUpdate(event);\n        }\n      },\n      onPressOut: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchPressedStateChange(false);\n        }\n        if (this.props.onPressOut != null) {\n          this.props.onPressOut(event);\n        }\n      },\n    };\n  }\n\n  _dispatchPressedStateChange(pressed: boolean): void {\n    if (Platform.OS === 'android') {\n      const hostComponentRef = ReactNative.findHostInstance_DEPRECATED(this);\n      if (hostComponentRef == null) {\n        console.warn(\n          'Touchable: Unable to find HostComponent instance. ' +\n            'Has your Touchable component been unmounted?',\n        );\n      } else {\n        Commands.setPressed(hostComponentRef, pressed);\n      }\n    }\n  }\n\n  _dispatchHotspotUpdate(event: PressEvent): void {\n    if (Platform.OS === 'android') {\n      const {locationX, locationY} = event.nativeEvent;\n      const hostComponentRef = ReactNative.findHostInstance_DEPRECATED(this);\n      if (hostComponentRef == null) {\n        console.warn(\n          'Touchable: Unable to find HostComponent instance. ' +\n            'Has your Touchable component been unmounted?',\n        );\n      } else {\n        Commands.hotspotUpdate(\n          hostComponentRef,\n          locationX ?? 0,\n          locationY ?? 0,\n        );\n      }\n    }\n  }\n\n  render(): React.Node {\n    const element = React.Children.only(this.props.children);\n    const children = [element.props.children];\n    if (__DEV__) {\n      if (element.type === View) {\n        children.push(\n          <PressabilityDebugView color=\"brown\" hitSlop={this.props.hitSlop} />,\n        );\n      }\n    }\n\n    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n    // adopting `Pressability`, so preserve that behavior.\n    const {\n      onBlur,\n      onFocus,\n      ...eventHandlersWithoutBlurAndFocus\n    } = this.state.pressability.getEventHandlers();\n\n    const accessibilityState =\n      this.props.disabled != null\n        ? {\n            ...this.props.accessibilityState,\n            disabled: this.props.disabled,\n          }\n        : this.props.accessibilityState;\n\n    return React.cloneElement(\n      element,\n      {\n        ...eventHandlersWithoutBlurAndFocus,\n        ...getBackgroundProp(\n          this.props.background === undefined\n            ? TouchableNativeFeedback.SelectableBackground()\n            : this.props.background,\n          this.props.useForeground === true,\n        ),\n        accessible: this.props.accessible !== false,\n        accessibilityHint: this.props.accessibilityHint,\n        accessibilityLabel: this.props.accessibilityLabel,\n        accessibilityRole: this.props.accessibilityRole,\n        accessibilityState: accessibilityState,\n        accessibilityActions: this.props.accessibilityActions,\n        onAccessibilityAction: this.props.onAccessibilityAction,\n        accessibilityValue: this.props.accessibilityValue,\n        importantForAccessibility: this.props.importantForAccessibility,\n        accessibilityLiveRegion: this.props.accessibilityLiveRegion,\n        accessibilityViewIsModal: this.props.accessibilityViewIsModal,\n        accessibilityElementsHidden: this.props.accessibilityElementsHidden,\n        hasTVPreferredFocus: this.props.hasTVPreferredFocus,\n        hitSlop: this.props.hitSlop,\n        focusable:\n          this.props.focusable !== false &&\n          this.props.onPress !== undefined &&\n          !this.props.disabled,\n        nativeID: this.props.nativeID,\n        nextFocusDown: this.props.nextFocusDown,\n        nextFocusForward: this.props.nextFocusForward,\n        nextFocusLeft: this.props.nextFocusLeft,\n        nextFocusRight: this.props.nextFocusRight,\n        nextFocusUp: this.props.nextFocusUp,\n        onLayout: this.props.onLayout,\n        testID: this.props.testID,\n      },\n      ...children,\n    );\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    this.state.pressability.configure(this._createPressabilityConfig());\n  }\n\n  componentWillUnmount(): void {\n    this.state.pressability.reset();\n  }\n}\n\nconst getBackgroundProp =\n  Platform.OS === 'android'\n    ? (background, useForeground) =>\n        useForeground && TouchableNativeFeedback.canUseNativeForeground()\n          ? {nativeForegroundAndroid: background}\n          : {nativeBackgroundAndroid: background}\n    : (background, useForeground) => null;\n\nTouchableNativeFeedback.displayName = 'TouchableNativeFeedback';\n\nmodule.exports = TouchableNativeFeedback;\n"],"mappings":"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"}