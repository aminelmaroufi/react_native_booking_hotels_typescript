305b9beac54737fa06ee8a9d29cb1386
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _VirtualizeUtils = require("./VirtualizeUtils");
var React = _interopRequireWildcard(require("react"));
var _VirtualizedListContext = require("./VirtualizedListContext.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Batchinator = require('../Interaction/Batchinator');
var FillRateHelper = require('./FillRateHelper');
var ReactNative = require('../Renderer/shims/ReactNative');
var RefreshControl = require('../Components/RefreshControl/RefreshControl');
var ScrollView = require('../Components/ScrollView/ScrollView');
var StyleSheet = require('../StyleSheet/StyleSheet');
var View = require('../Components/View/View');
var ViewabilityHelper = require('./ViewabilityHelper');
var flattenStyle = require('../StyleSheet/flattenStyle');
var infoLog = require('../Utilities/infoLog');
var invariant = require('invariant');
var _usedIndexForKey = false;
var _keylessItemComponentName = '';
function horizontalOrDefault(horizontal) {
  return horizontal != null ? horizontal : false;
}
function initialNumToRenderOrDefault(initialNumToRender) {
  return initialNumToRender != null ? initialNumToRender : 10;
}
function maxToRenderPerBatchOrDefault(maxToRenderPerBatch) {
  return maxToRenderPerBatch != null ? maxToRenderPerBatch : 10;
}
function onEndReachedThresholdOrDefault(onEndReachedThreshold) {
  return onEndReachedThreshold != null ? onEndReachedThreshold : 2;
}
function scrollEventThrottleOrDefault(scrollEventThrottle) {
  return scrollEventThrottle != null ? scrollEventThrottle : 50;
}
function windowSizeOrDefault(windowSize) {
  return windowSize != null ? windowSize : 21;
}
var VirtualizedList = function (_React$PureComponent) {
  (0, _inherits2.default)(VirtualizedList, _React$PureComponent);
  var _super = _createSuper(VirtualizedList);
  function VirtualizedList(_props) {
    var _this$props$updateCel;
    var _this;
    (0, _classCallCheck2.default)(this, VirtualizedList);
    _this = _super.call(this, _props);
    _this._getScrollMetrics = function () {
      return _this._scrollMetrics;
    };
    _this._getOutermostParentListRef = function () {
      if (_this._isNestedWithSameOrientation()) {
        return _this.context.getOutermostParentListRef();
      } else {
        return (0, _assertThisInitialized2.default)(_this);
      }
    };
    _this._getNestedChildState = function (key) {
      var existingChildData = _this._nestedChildLists.get(key);
      return existingChildData && existingChildData.state;
    };
    _this._registerAsNestedChild = function (childList) {
      var childListsInCell = _this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
      childListsInCell.add(childList.key);
      _this._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);
      var existingChildData = _this._nestedChildLists.get(childList.key);
      if (existingChildData && existingChildData.ref !== null) {
        console.error('A VirtualizedList contains a cell which itself contains ' + 'more than one VirtualizedList of the same orientation as the parent ' + 'list. You must pass a unique listKey prop to each sibling list.\n\n' + describeNestedLists((0, _extends2.default)({}, childList, {
          horizontal: !!childList.ref.props.horizontal
        })));
      }
      _this._nestedChildLists.set(childList.key, {
        ref: childList.ref,
        state: null
      });
      if (_this._hasInteracted) {
        childList.ref.recordInteraction();
      }
    };
    _this._unregisterAsNestedChild = function (childList) {
      _this._nestedChildLists.set(childList.key, {
        ref: null,
        state: childList.state
      });
    };
    _this._onUpdateSeparators = function (keys, newProps) {
      keys.forEach(function (key) {
        var ref = key != null && _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      });
    };
    _this._getSpacerKey = function (isVertical) {
      return isVertical ? 'height' : 'width';
    };
    _this._averageCellLength = 0;
    _this._cellKeysToChildListKeys = new Map();
    _this._cellRefs = {};
    _this._frames = {};
    _this._footerLength = 0;
    _this._hasDoneInitialScroll = false;
    _this._hasInteracted = false;
    _this._hasMore = false;
    _this._hasWarned = {};
    _this._headerLength = 0;
    _this._hiPriInProgress = false;
    _this._highestMeasuredFrameIndex = 0;
    _this._indicesToKeys = new Map();
    _this._nestedChildLists = new Map();
    _this._offsetFromParentVirtualizedList = 0;
    _this._prevParentOffset = 0;
    _this._scrollMetrics = {
      contentLength: 0,
      dOffset: 0,
      dt: 10,
      offset: 0,
      timestamp: 0,
      velocity: 0,
      visibleLength: 0
    };
    _this._scrollRef = null;
    _this._sentEndForContentLength = 0;
    _this._totalCellLength = 0;
    _this._totalCellsMeasured = 0;
    _this._viewabilityTuples = [];
    _this._captureScrollRef = function (ref) {
      _this._scrollRef = ref;
    };
    _this._defaultRenderScrollComponent = function (props) {
      var onRefresh = props.onRefresh;
      if (_this._isNestedWithSameOrientation()) {
        return React.createElement(View, props);
      } else if (onRefresh) {
        var _props$refreshing;
        invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify((_props$refreshing = props.refreshing) != null ? _props$refreshing : 'undefined') + '`');
        return React.createElement(ScrollView, (0, _extends2.default)({}, props, {
          refreshControl: props.refreshControl == null ? React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: onRefresh,
            progressViewOffset: props.progressViewOffset
          }) : props.refreshControl
        }));
      } else {
        return React.createElement(ScrollView, props);
      }
    };
    _this._onCellUnmount = function (cellKey) {
      var curr = _this._frames[cellKey];
      if (curr) {
        _this._frames[cellKey] = (0, _extends2.default)({}, curr, {
          inLayout: false
        });
      }
    };
    _this._onLayout = function (e) {
      if (_this._isNestedWithSameOrientation()) {
        _this.measureLayoutRelativeToContainingList();
      } else {
        _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
      }
      _this.props.onLayout && _this.props.onLayout(e);
      _this._scheduleCellsToRenderUpdate();
      _this._maybeCallOnEndReached();
    };
    _this._onLayoutEmpty = function (e) {
      _this.props.onLayout && _this.props.onLayout(e);
    };
    _this._onLayoutFooter = function (e) {
      _this._triggerRemeasureForChildListsInCell(_this._getFooterCellKey());
      _this._footerLength = _this._selectLength(e.nativeEvent.layout);
    };
    _this._onLayoutHeader = function (e) {
      _this._headerLength = _this._selectLength(e.nativeEvent.layout);
    };
    _this._onContentSizeChange = function (width, height) {
      if (width > 0 && height > 0 && _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 && !_this._hasDoneInitialScroll) {
        if (_this.props.contentOffset == null) {
          _this.scrollToIndex({
            animated: false,
            index: _this.props.initialScrollIndex
          });
        }
        _this._hasDoneInitialScroll = true;
      }
      if (_this.props.onContentSizeChange) {
        _this.props.onContentSizeChange(width, height);
      }
      _this._scrollMetrics.contentLength = _this._selectLength({
        height: height,
        width: width
      });
      _this._scheduleCellsToRenderUpdate();
      _this._maybeCallOnEndReached();
    };
    _this._convertParentScrollMetrics = function (metrics) {
      var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
      var visibleLength = metrics.visibleLength;
      var dOffset = offset - _this._scrollMetrics.offset;
      var contentLength = _this._scrollMetrics.contentLength;
      return {
        visibleLength: visibleLength,
        contentLength: contentLength,
        offset: offset,
        dOffset: dOffset
      };
    };
    _this._onScroll = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScroll(e);
      });
      if (_this.props.onScroll) {
        _this.props.onScroll(e);
      }
      var timestamp = e.timeStamp;
      var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);
      var contentLength = _this._selectLength(e.nativeEvent.contentSize);
      var offset = _this._selectOffset(e.nativeEvent.contentOffset);
      var dOffset = offset - _this._scrollMetrics.offset;
      if (_this._isNestedWithSameOrientation()) {
        if (_this._scrollMetrics.contentLength === 0) {
          return;
        }
        var _this$_convertParentS = _this._convertParentScrollMetrics({
          visibleLength: visibleLength,
          offset: offset
        });
        visibleLength = _this$_convertParentS.visibleLength;
        contentLength = _this$_convertParentS.contentLength;
        offset = _this$_convertParentS.offset;
        dOffset = _this$_convertParentS.dOffset;
      }
      var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
      var velocity = dOffset / dt;
      if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
        infoLog('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
          dt: dt,
          prevDt: _this._scrollMetrics.dt,
          contentLength: contentLength
        });
        _this._hasWarned.perf = true;
      }
      _this._scrollMetrics = {
        contentLength: contentLength,
        dt: dt,
        dOffset: dOffset,
        offset: offset,
        timestamp: timestamp,
        velocity: velocity,
        visibleLength: visibleLength
      };
      _this._updateViewableItems(_this.props.data);
      if (!_this.props) {
        return;
      }
      _this._maybeCallOnEndReached();
      if (velocity !== 0) {
        _this._fillRateHelper.activate();
      }
      _this._computeBlankness();
      _this._scheduleCellsToRenderUpdate();
    };
    _this._onScrollBeginDrag = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScrollBeginDrag(e);
      });
      _this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.recordInteraction();
      });
      _this._hasInteracted = true;
      _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
    };
    _this._onScrollEndDrag = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScrollEndDrag(e);
      });
      var velocity = e.nativeEvent.velocity;
      if (velocity) {
        _this._scrollMetrics.velocity = _this._selectOffset(velocity);
      }
      _this._computeBlankness();
      _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
    };
    _this._onMomentumScrollBegin = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onMomentumScrollBegin(e);
      });
      _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
    };
    _this._onMomentumScrollEnd = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onMomentumScrollEnd(e);
      });
      _this._scrollMetrics.velocity = 0;
      _this._computeBlankness();
      _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
    };
    _this._updateCellsToRender = function () {
      var _this$props = _this.props,
        data = _this$props.data,
        getItemCount = _this$props.getItemCount,
        _onEndReachedThreshold = _this$props.onEndReachedThreshold;
      var onEndReachedThreshold = onEndReachedThresholdOrDefault(_onEndReachedThreshold);
      var isVirtualizationDisabled = _this._isVirtualizationDisabled();
      _this._updateViewableItems(data);
      if (!data) {
        return;
      }
      _this.setState(function (state) {
        var newState;
        var _this$_scrollMetrics = _this._scrollMetrics,
          contentLength = _this$_scrollMetrics.contentLength,
          offset = _this$_scrollMetrics.offset,
          visibleLength = _this$_scrollMetrics.visibleLength;
        if (!isVirtualizationDisabled) {
          if (visibleLength > 0 && contentLength > 0) {
            if (!_this.props.initialScrollIndex || _this._scrollMetrics.offset) {
              newState = (0, _VirtualizeUtils.computeWindowedRenderLimits)(_this.props.data, _this.props.getItemCount, maxToRenderPerBatchOrDefault(_this.props.maxToRenderPerBatch), windowSizeOrDefault(_this.props.windowSize), state, _this._getFrameMetricsApprox, _this._scrollMetrics);
            }
          }
        } else {
          var distanceFromEnd = contentLength - visibleLength - offset;
          var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? maxToRenderPerBatchOrDefault(_this.props.maxToRenderPerBatch) : 0;
          newState = {
            first: 0,
            last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
          };
        }
        if (newState && _this._nestedChildLists.size > 0) {
          var newFirst = newState.first;
          var newLast = newState.last;
          for (var ii = newFirst; ii <= newLast; ii++) {
            var cellKeyForIndex = _this._indicesToKeys.get(ii);
            var childListKeys = cellKeyForIndex && _this._cellKeysToChildListKeys.get(cellKeyForIndex);
            if (!childListKeys) {
              continue;
            }
            var someChildHasMore = false;
            for (var _iterator = _createForOfIteratorHelperLoose(childListKeys), _step; !(_step = _iterator()).done;) {
              var childKey = _step.value;
              var childList = _this._nestedChildLists.get(childKey);
              if (childList && childList.ref && childList.ref.hasMore()) {
                someChildHasMore = true;
                break;
              }
            }
            if (someChildHasMore) {
              newState.last = ii;
              break;
            }
          }
        }
        if (newState != null && newState.first === state.first && newState.last === state.last) {
          newState = null;
        }
        return newState;
      });
    };
    _this._createViewToken = function (index, isViewable) {
      var _this$props2 = _this.props,
        data = _this$props2.data,
        getItem = _this$props2.getItem;
      var item = getItem(data, index);
      return {
        index: index,
        item: item,
        key: _this._keyExtractor(item, index),
        isViewable: isViewable
      };
    };
    _this._getFrameMetricsApprox = function (index) {
      var frame = _this._getFrameMetrics(index);
      if (frame && frame.index === index) {
        return frame;
      } else {
        var getItemLayout = _this.props.getItemLayout;
        invariant(!getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
        return {
          length: _this._averageCellLength,
          offset: _this._averageCellLength * index
        };
      }
    };
    _this._getFrameMetrics = function (index) {
      var _this$props3 = _this.props,
        data = _this$props3.data,
        getItem = _this$props3.getItem,
        getItemCount = _this$props3.getItemCount,
        getItemLayout = _this$props3.getItemLayout;
      invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
      var item = getItem(data, index);
      var frame = item && _this._frames[_this._keyExtractor(item, index)];
      if (!frame || frame.index !== index) {
        if (getItemLayout) {
          frame = getItemLayout(data, index);
        }
      }
      return frame;
    };
    invariant(!_props.onScroll || !_props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
    invariant(windowSizeOrDefault(_props.windowSize) > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
    _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
    _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, (_this$props$updateCel = _this.props.updateCellsBatchingPeriod) != null ? _this$props$updateCel : 50);
    if (_this.props.viewabilityConfigCallbackPairs) {
      _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
        return {
          viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
          onViewableItemsChanged: pair.onViewableItemsChanged
        };
      });
    } else if (_this.props.onViewableItemsChanged) {
      _this._viewabilityTuples.push({
        viewabilityHelper: new ViewabilityHelper(_this.props.viewabilityConfig),
        onViewableItemsChanged: _this.props.onViewableItemsChanged
      });
    }
    var initialState = {
      first: _this.props.initialScrollIndex || 0,
      last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + initialNumToRenderOrDefault(_this.props.initialNumToRender)) - 1
    };
    if (_this._isNestedWithSameOrientation()) {
      var storedState = _this.context.getNestedChildState(_this._getListKey());
      if (storedState) {
        initialState = storedState;
        _this.state = storedState;
        _this._frames = storedState.frames;
      }
    }
    _this.state = initialState;
    return _this;
  }
  (0, _createClass2.default)(VirtualizedList, [{
    key: "scrollToEnd",
    value: function scrollToEnd(params) {
      var animated = params ? params.animated : true;
      var veryLast = this.props.getItemCount(this.props.data) - 1;
      var frame = this._getFrameMetricsApprox(veryLast);
      var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);
      if (this._scrollRef == null) {
        return;
      }
      if (this._scrollRef.scrollTo == null) {
        console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
        return;
      }
      this._scrollRef.scrollTo(horizontalOrDefault(this.props.horizontal) ? {
        x: offset,
        animated: animated
      } : {
        y: offset,
        animated: animated
      });
    }
  }, {
    key: "scrollToIndex",
    value: function scrollToIndex(params) {
      var _this$props4 = this.props,
        data = _this$props4.data,
        horizontal = _this$props4.horizontal,
        getItemCount = _this$props4.getItemCount,
        getItemLayout = _this$props4.getItemLayout,
        onScrollToIndexFailed = _this$props4.onScrollToIndexFailed;
      var animated = params.animated,
        index = params.index,
        viewOffset = params.viewOffset,
        viewPosition = params.viewPosition;
      invariant(index >= 0, "scrollToIndex out of range: requested index " + index + " but minimum is 0");
      invariant(getItemCount(data) >= 1, "scrollToIndex out of range: item length " + getItemCount(data) + " but minimum is 1");
      invariant(index < getItemCount(data), "scrollToIndex out of range: requested index " + index + " is out of 0 to " + (getItemCount(data) - 1));
      if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
        invariant(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
        onScrollToIndexFailed({
          averageItemLength: this._averageCellLength,
          highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
          index: index
        });
        return;
      }
      var frame = this._getFrameMetricsApprox(index);
      var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
      if (this._scrollRef == null) {
        return;
      }
      if (this._scrollRef.scrollTo == null) {
        console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
        return;
      }
      this._scrollRef.scrollTo(horizontal ? {
        x: offset,
        animated: animated
      } : {
        y: offset,
        animated: animated
      });
    }
  }, {
    key: "scrollToItem",
    value: function scrollToItem(params) {
      var item = params.item;
      var _this$props5 = this.props,
        data = _this$props5.data,
        getItem = _this$props5.getItem,
        getItemCount = _this$props5.getItemCount;
      var itemCount = getItemCount(data);
      for (var _index = 0; _index < itemCount; _index++) {
        if (getItem(data, _index) === item) {
          this.scrollToIndex((0, _extends2.default)({}, params, {
            index: _index
          }));
          break;
        }
      }
    }
  }, {
    key: "scrollToOffset",
    value: function scrollToOffset(params) {
      var animated = params.animated,
        offset = params.offset;
      if (this._scrollRef == null) {
        return;
      }
      if (this._scrollRef.scrollTo == null) {
        console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
        return;
      }
      this._scrollRef.scrollTo(horizontalOrDefault(this.props.horizontal) ? {
        x: offset,
        animated: animated
      } : {
        y: offset,
        animated: animated
      });
    }
  }, {
    key: "recordInteraction",
    value: function recordInteraction() {
      this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref.recordInteraction();
      });
      this._viewabilityTuples.forEach(function (t) {
        t.viewabilityHelper.recordInteraction();
      });
      this._updateViewableItems(this.props.data);
    }
  }, {
    key: "flashScrollIndicators",
    value: function flashScrollIndicators() {
      if (this._scrollRef == null) {
        return;
      }
      this._scrollRef.flashScrollIndicators();
    }
  }, {
    key: "getScrollResponder",
    value: function getScrollResponder() {
      if (this._scrollRef && this._scrollRef.getScrollResponder) {
        return this._scrollRef.getScrollResponder();
      }
    }
  }, {
    key: "getScrollableNode",
    value: function getScrollableNode() {
      if (this._scrollRef && this._scrollRef.getScrollableNode) {
        return this._scrollRef.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollRef);
      }
    }
  }, {
    key: "getScrollRef",
    value: function getScrollRef() {
      if (this._scrollRef && this._scrollRef.getScrollRef) {
        return this._scrollRef.getScrollRef();
      } else {
        return this._scrollRef;
      }
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps(props) {
      if (this._scrollRef) {
        this._scrollRef.setNativeProps(props);
      }
    }
  }, {
    key: "_getCellKey",
    value: function _getCellKey() {
      var _this$context;
      return ((_this$context = this.context) == null ? void 0 : _this$context.cellKey) || 'rootList';
    }
  }, {
    key: "_getListKey",
    value: function _getListKey() {
      return this.props.listKey || this._getCellKey();
    }
  }, {
    key: "_getDebugInfo",
    value: function _getDebugInfo() {
      var _this$context2;
      return {
        listKey: this._getListKey(),
        cellKey: this._getCellKey(),
        horizontal: horizontalOrDefault(this.props.horizontal),
        parent: (_this$context2 = this.context) == null ? void 0 : _this$context2.debugInfo
      };
    }
  }, {
    key: "hasMore",
    value: function hasMore() {
      return this._hasMore;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this._isNestedWithSameOrientation()) {
        this.context.registerAsNestedChild({
          cellKey: this._getCellKey(),
          key: this._getListKey(),
          ref: this,
          parentDebugInfo: this.context.debugInfo
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._isNestedWithSameOrientation()) {
        this.context.unregisterAsNestedChild({
          key: this._getListKey(),
          state: {
            first: this.state.first,
            last: this.state.last,
            frames: this._frames
          }
        });
      }
      this._updateViewableItems(null);
      this._updateCellsToRenderBatcher.dispose({
        abort: true
      });
      this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.dispose();
      });
      this._fillRateHelper.deactivateAndFlush();
    }
  }, {
    key: "_pushCells",
    value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
      var _this2 = this;
      var _this$props6 = this.props,
        CellRendererComponent = _this$props6.CellRendererComponent,
        ItemSeparatorComponent = _this$props6.ItemSeparatorComponent,
        data = _this$props6.data,
        getItem = _this$props6.getItem,
        getItemCount = _this$props6.getItemCount,
        horizontal = _this$props6.horizontal;
      var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
      var end = getItemCount(data) - 1;
      var prevCellKey;
      last = Math.min(end, last);
      var _loop = function _loop(ii) {
        var item = getItem(data, ii);
        var key = _this2._keyExtractor(item, ii);
        _this2._indicesToKeys.set(ii, key);
        if (stickyIndicesFromProps.has(ii + stickyOffset)) {
          stickyHeaderIndices.push(cells.length);
        }
        cells.push(React.createElement(CellRenderer, {
          CellRendererComponent: CellRendererComponent,
          ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
          cellKey: key,
          fillRateHelper: _this2._fillRateHelper,
          horizontal: horizontal,
          index: ii,
          inversionStyle: inversionStyle,
          item: item,
          key: key,
          prevCellKey: prevCellKey,
          onUpdateSeparators: _this2._onUpdateSeparators,
          onLayout: function onLayout(e) {
            return _this2._onCellLayout(e, key, ii);
          },
          onUnmount: _this2._onCellUnmount,
          parentProps: _this2.props,
          ref: function ref(_ref) {
            _this2._cellRefs[key] = _ref;
          }
        }));
        prevCellKey = key;
      };
      for (var ii = first; ii <= last; ii++) {
        _loop(ii);
      }
    }
  }, {
    key: "_isVirtualizationDisabled",
    value: function _isVirtualizationDisabled() {
      return this.props.disableVirtualization || false;
    }
  }, {
    key: "_isNestedWithSameOrientation",
    value: function _isNestedWithSameOrientation() {
      var nestedContext = this.context;
      return !!(nestedContext && !!nestedContext.horizontal === horizontalOrDefault(this.props.horizontal));
    }
  }, {
    key: "_keyExtractor",
    value: function _keyExtractor(item, index) {
      if (this.props.keyExtractor != null) {
        return this.props.keyExtractor(item, index);
      }
      var key = (0, _VirtualizeUtils.keyExtractor)(item, index);
      if (key === String(index)) {
        _usedIndexForKey = true;
        if (item.type && item.type.displayName) {
          _keylessItemComponentName = item.type.displayName;
        }
      }
      return key;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      if (__DEV__) {
        var flatStyles = flattenStyle(this.props.contentContainerStyle);
        if (flatStyles != null && flatStyles.flexWrap === 'wrap') {
          console.warn('`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
        }
      }
      var _this$props7 = this.props,
        ListEmptyComponent = _this$props7.ListEmptyComponent,
        ListFooterComponent = _this$props7.ListFooterComponent,
        ListHeaderComponent = _this$props7.ListHeaderComponent;
      var _this$props8 = this.props,
        data = _this$props8.data,
        horizontal = _this$props8.horizontal;
      var isVirtualizationDisabled = this._isVirtualizationDisabled();
      var inversionStyle = this.props.inverted ? horizontalOrDefault(this.props.horizontal) ? styles.horizontallyInverted : styles.verticallyInverted : null;
      var cells = [];
      var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
      var stickyHeaderIndices = [];
      if (ListHeaderComponent) {
        if (stickyIndicesFromProps.has(0)) {
          stickyHeaderIndices.push(0);
        }
        var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, null);
        cells.push(React.createElement(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this._getCellKey() + '-header',
          key: "$header"
        }, React.createElement(View, {
          onLayout: this._onLayoutHeader,
          style: StyleSheet.compose(inversionStyle, this.props.ListHeaderComponentStyle)
        }, element)));
      }
      var itemCount = this.props.getItemCount(data);
      if (itemCount > 0) {
        _usedIndexForKey = false;
        _keylessItemComponentName = '';
        var spacerKey = this._getSpacerKey(!horizontal);
        var lastInitialIndex = this.props.initialScrollIndex ? -1 : initialNumToRenderOrDefault(this.props.initialNumToRender) - 1;
        var _this$state = this.state,
          first = _this$state.first,
          last = _this$state.last;
        this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);
        var firstAfterInitial = Math.max(lastInitialIndex + 1, first);
        if (!isVirtualizationDisabled && first > lastInitialIndex + 1) {
          var insertedStickySpacer = false;
          if (stickyIndicesFromProps.size > 0) {
            var stickyOffset = ListHeaderComponent ? 1 : 0;
            for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
              if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                var initBlock = this._getFrameMetricsApprox(lastInitialIndex);
                var stickyBlock = this._getFrameMetricsApprox(ii);
                var leadSpace = stickyBlock.offset - initBlock.offset - (this.props.initialScrollIndex ? 0 : initBlock.length);
                cells.push(React.createElement(View, {
                  key: "$sticky_lead",
                  style: (0, _defineProperty2.default)({}, spacerKey, leadSpace)
                }));
                this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);
                var trailSpace = this._getFrameMetricsApprox(first).offset - (stickyBlock.offset + stickyBlock.length);
                cells.push(React.createElement(View, {
                  key: "$sticky_trail",
                  style: (0, _defineProperty2.default)({}, spacerKey, trailSpace)
                }));
                insertedStickySpacer = true;
                break;
              }
            }
          }
          if (!insertedStickySpacer) {
            var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);
            var firstSpace = this._getFrameMetricsApprox(first).offset - (_initBlock.offset + _initBlock.length);
            cells.push(React.createElement(View, {
              key: "$lead_spacer",
              style: (0, _defineProperty2.default)({}, spacerKey, firstSpace)
            }));
          }
        }
        this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, last, inversionStyle);
        if (!this._hasWarned.keys && _usedIndexForKey) {
          console.warn('VirtualizedList: missing keys for items, make sure to specify a key or id property on each ' + 'item or provide a custom keyExtractor.', _keylessItemComponentName);
          this._hasWarned.keys = true;
        }
        if (!isVirtualizationDisabled && last < itemCount - 1) {
          var lastFrame = this._getFrameMetricsApprox(last);
          var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);
          var endFrame = this._getFrameMetricsApprox(end);
          var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
          cells.push(React.createElement(View, {
            key: "$tail_spacer",
            style: (0, _defineProperty2.default)({}, spacerKey, tailSpacerLength)
          }));
        }
      } else if (ListEmptyComponent) {
        var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, null);
        cells.push(React.cloneElement(_element, {
          key: '$empty',
          onLayout: function onLayout(event) {
            _this3._onLayoutEmpty(event);
            if (_element.props.onLayout) {
              _element.props.onLayout(event);
            }
          },
          style: StyleSheet.compose(inversionStyle, _element.props.style)
        }));
      }
      if (ListFooterComponent) {
        var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, null);
        cells.push(React.createElement(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this._getFooterCellKey(),
          key: "$footer"
        }, React.createElement(View, {
          onLayout: this._onLayoutFooter,
          style: StyleSheet.compose(inversionStyle, this.props.ListFooterComponentStyle)
        }, _element2)));
      }
      var scrollProps = (0, _extends2.default)({}, this.props, {
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        onScroll: this._onScroll,
        onScrollBeginDrag: this._onScrollBeginDrag,
        onScrollEndDrag: this._onScrollEndDrag,
        onMomentumScrollBegin: this._onMomentumScrollBegin,
        onMomentumScrollEnd: this._onMomentumScrollEnd,
        scrollEventThrottle: scrollEventThrottleOrDefault(this.props.scrollEventThrottle),
        invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
        stickyHeaderIndices: stickyHeaderIndices,
        style: inversionStyle ? [inversionStyle, this.props.style] : this.props.style
      });
      this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
      var innerRet = React.createElement(_VirtualizedListContext.VirtualizedListContextProvider, {
        value: {
          cellKey: null,
          getScrollMetrics: this._getScrollMetrics,
          horizontal: horizontalOrDefault(this.props.horizontal),
          getOutermostParentListRef: this._getOutermostParentListRef,
          getNestedChildState: this._getNestedChildState,
          registerAsNestedChild: this._registerAsNestedChild,
          unregisterAsNestedChild: this._unregisterAsNestedChild,
          debugInfo: this._getDebugInfo()
        }
      }, React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
        ref: this._captureScrollRef
      }, cells));
      var ret = innerRet;
      if (__DEV__) {
        ret = React.createElement(ScrollView.Context.Consumer, null, function (scrollContext) {
          if (scrollContext != null && !scrollContext.horizontal === !horizontalOrDefault(_this3.props.horizontal) && !_this3._hasWarned.nesting && _this3.context == null) {
            console.error('VirtualizedLists should never be nested inside plain ScrollViews with the same ' + 'orientation because it can break windowing and other functionality - use another ' + 'VirtualizedList-backed container instead.');
            _this3._hasWarned.nesting = true;
          }
          return innerRet;
        });
      }
      if (this.props.debug) {
        return React.createElement(View, {
          style: styles.debug
        }, ret, this._renderDebugOverlay());
      } else {
        return ret;
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props9 = this.props,
        data = _this$props9.data,
        extraData = _this$props9.extraData;
      if (data !== prevProps.data || extraData !== prevProps.extraData) {
        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.resetViewableIndices();
        });
      }
      var hiPriInProgress = this._hiPriInProgress;
      this._scheduleCellsToRenderUpdate();
      if (hiPriInProgress) {
        this._hiPriInProgress = false;
      }
    }
  }, {
    key: "_computeBlankness",
    value: function _computeBlankness() {
      this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
    }
  }, {
    key: "_onCellLayout",
    value: function _onCellLayout(e, cellKey, index) {
      var layout = e.nativeEvent.layout;
      var next = {
        offset: this._selectOffset(layout),
        length: this._selectLength(layout),
        index: index,
        inLayout: true
      };
      var curr = this._frames[cellKey];
      if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
        this._totalCellLength += next.length - (curr ? curr.length : 0);
        this._totalCellsMeasured += curr ? 0 : 1;
        this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
        this._frames[cellKey] = next;
        this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);
        this._scheduleCellsToRenderUpdate();
      } else {
        this._frames[cellKey].inLayout = true;
      }
      this._triggerRemeasureForChildListsInCell(cellKey);
      this._computeBlankness();
      this._updateViewableItems(this.props.data);
    }
  }, {
    key: "_triggerRemeasureForChildListsInCell",
    value: function _triggerRemeasureForChildListsInCell(cellKey) {
      var childListKeys = this._cellKeysToChildListKeys.get(cellKey);
      if (childListKeys) {
        for (var _iterator2 = _createForOfIteratorHelperLoose(childListKeys), _step2; !(_step2 = _iterator2()).done;) {
          var childKey = _step2.value;
          var childList = this._nestedChildLists.get(childKey);
          childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
        }
      }
    }
  }, {
    key: "measureLayoutRelativeToContainingList",
    value: function measureLayoutRelativeToContainingList() {
      var _this4 = this;
      try {
        if (!this._scrollRef) {
          return;
        }
        this._scrollRef.measureLayout(this.context.getOutermostParentListRef().getScrollRef(), function (x, y, width, height) {
          _this4._offsetFromParentVirtualizedList = _this4._selectOffset({
            x: x,
            y: y
          });
          _this4._scrollMetrics.contentLength = _this4._selectLength({
            width: width,
            height: height
          });
          var scrollMetrics = _this4._convertParentScrollMetrics(_this4.context.getScrollMetrics());
          var metricsChanged = _this4._scrollMetrics.visibleLength !== scrollMetrics.visibleLength || _this4._scrollMetrics.offset !== scrollMetrics.offset;
          if (metricsChanged) {
            _this4._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
            _this4._scrollMetrics.offset = scrollMetrics.offset;
            _this4._cellKeysToChildListKeys.forEach(function (childListKeys) {
              if (childListKeys) {
                for (var _iterator3 = _createForOfIteratorHelperLoose(childListKeys), _step3; !(_step3 = _iterator3()).done;) {
                  var childKey = _step3.value;
                  var childList = _this4._nestedChildLists.get(childKey);
                  childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
                }
              }
            });
          }
        }, function (error) {
          console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
        });
      } catch (error) {
        console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
      }
    }
  }, {
    key: "_getFooterCellKey",
    value: function _getFooterCellKey() {
      return this._getCellKey() + '-footer';
    }
  }, {
    key: "_renderDebugOverlay",
    value: function _renderDebugOverlay() {
      var normalize = this._scrollMetrics.visibleLength / (this._scrollMetrics.contentLength || 1);
      var framesInLayout = [];
      var itemCount = this.props.getItemCount(this.props.data);
      for (var ii = 0; ii < itemCount; ii++) {
        var frame = this._getFrameMetricsApprox(ii);
        if (frame.inLayout) {
          framesInLayout.push(frame);
        }
      }
      var windowTop = this._getFrameMetricsApprox(this.state.first).offset;
      var frameLast = this._getFrameMetricsApprox(this.state.last);
      var windowLen = frameLast.offset + frameLast.length - windowTop;
      var visTop = this._scrollMetrics.offset;
      var visLen = this._scrollMetrics.visibleLength;
      return React.createElement(View, {
        style: [styles.debugOverlayBase, styles.debugOverlay]
      }, framesInLayout.map(function (f, ii) {
        return React.createElement(View, {
          key: 'f' + ii,
          style: [styles.debugOverlayBase, styles.debugOverlayFrame, {
            top: f.offset * normalize,
            height: f.length * normalize
          }]
        });
      }), React.createElement(View, {
        style: [styles.debugOverlayBase, styles.debugOverlayFrameLast, {
          top: windowTop * normalize,
          height: windowLen * normalize
        }]
      }), React.createElement(View, {
        style: [styles.debugOverlayBase, styles.debugOverlayFrameVis, {
          top: visTop * normalize,
          height: visLen * normalize
        }]
      }));
    }
  }, {
    key: "_selectLength",
    value: function _selectLength(metrics) {
      return !horizontalOrDefault(this.props.horizontal) ? metrics.height : metrics.width;
    }
  }, {
    key: "_selectOffset",
    value: function _selectOffset(metrics) {
      return !horizontalOrDefault(this.props.horizontal) ? metrics.y : metrics.x;
    }
  }, {
    key: "_maybeCallOnEndReached",
    value: function _maybeCallOnEndReached() {
      var _this$props10 = this.props,
        data = _this$props10.data,
        getItemCount = _this$props10.getItemCount,
        onEndReached = _this$props10.onEndReached,
        onEndReachedThreshold = _this$props10.onEndReachedThreshold;
      var _this$_scrollMetrics2 = this._scrollMetrics,
        contentLength = _this$_scrollMetrics2.contentLength,
        visibleLength = _this$_scrollMetrics2.visibleLength,
        offset = _this$_scrollMetrics2.offset;
      var distanceFromEnd = contentLength - visibleLength - offset;
      var threshold = onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : 2;
      if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < threshold && this._scrollMetrics.contentLength !== this._sentEndForContentLength) {
        this._sentEndForContentLength = this._scrollMetrics.contentLength;
        onEndReached({
          distanceFromEnd: distanceFromEnd
        });
      } else if (distanceFromEnd > threshold) {
        this._sentEndForContentLength = 0;
      }
    }
  }, {
    key: "_scheduleCellsToRenderUpdate",
    value: function _scheduleCellsToRenderUpdate() {
      var _this$state2 = this.state,
        first = _this$state2.first,
        last = _this$state2.last;
      var _this$_scrollMetrics3 = this._scrollMetrics,
        offset = _this$_scrollMetrics3.offset,
        visibleLength = _this$_scrollMetrics3.visibleLength,
        velocity = _this$_scrollMetrics3.velocity;
      var itemCount = this.props.getItemCount(this.props.data);
      var hiPri = false;
      var onEndReachedThreshold = onEndReachedThresholdOrDefault(this.props.onEndReachedThreshold);
      var scrollingThreshold = onEndReachedThreshold * visibleLength / 2;
      if (first > 0) {
        var distTop = offset - this._getFrameMetricsApprox(first).offset;
        hiPri = hiPri || distTop < 0 || velocity < -2 && distTop < scrollingThreshold;
      }
      if (last < itemCount - 1) {
        var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
        hiPri = hiPri || distBottom < 0 || velocity > 2 && distBottom < scrollingThreshold;
      }
      if (hiPri && (this._averageCellLength || this.props.getItemLayout) && !this._hiPriInProgress) {
        this._hiPriInProgress = true;
        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });
        this._updateCellsToRender();
        return;
      } else {
        this._updateCellsToRenderBatcher.schedule();
      }
    }
  }, {
    key: "_updateViewableItems",
    value: function _updateViewableItems(data) {
      var _this5 = this;
      var getItemCount = this.props.getItemCount;
      this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.onUpdate(getItemCount(data), _this5._scrollMetrics.offset, _this5._scrollMetrics.visibleLength, _this5._getFrameMetrics, _this5._createViewToken, tuple.onViewableItemsChanged, _this5.state);
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(newProps, prevState) {
      var data = newProps.data,
        getItemCount = newProps.getItemCount;
      var maxToRenderPerBatch = maxToRenderPerBatchOrDefault(newProps.maxToRenderPerBatch);
      return {
        first: Math.max(0, Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
        last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1))
      };
    }
  }]);
  return VirtualizedList;
}(React.PureComponent);
VirtualizedList.contextType = _VirtualizedListContext.VirtualizedListContext;
var CellRenderer = function (_React$Component) {
  (0, _inherits2.default)(CellRenderer, _React$Component);
  var _super2 = _createSuper(CellRenderer);
  function CellRenderer() {
    var _this6;
    (0, _classCallCheck2.default)(this, CellRenderer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this6 = _super2.call.apply(_super2, [this].concat(args));
    _this6.state = {
      separatorProps: {
        highlighted: false,
        leadingItem: _this6.props.item
      }
    };
    _this6._separators = {
      highlight: function highlight() {
        var _this6$props = _this6.props,
          cellKey = _this6$props.cellKey,
          prevCellKey = _this6$props.prevCellKey;
        _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: true
        });
      },
      unhighlight: function unhighlight() {
        var _this6$props2 = _this6.props,
          cellKey = _this6$props2.cellKey,
          prevCellKey = _this6$props2.prevCellKey;
        _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: false
        });
      },
      updateProps: function updateProps(select, newProps) {
        var _this6$props3 = _this6.props,
          cellKey = _this6$props3.cellKey,
          prevCellKey = _this6$props3.prevCellKey;
        _this6.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
      }
    };
    return _this6;
  }
  (0, _createClass2.default)(CellRenderer, [{
    key: "updateSeparatorProps",
    value: function updateSeparatorProps(newProps) {
      this.setState(function (state) {
        return {
          separatorProps: (0, _extends2.default)({}, state.separatorProps, newProps)
        };
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.onUnmount(this.props.cellKey);
    }
  }, {
    key: "_renderElement",
    value: function _renderElement(renderItem, ListItemComponent, item, index) {
      if (renderItem && ListItemComponent) {
        console.warn('VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' + ' precedence over renderItem.');
      }
      if (ListItemComponent) {
        return React.createElement(ListItemComponent, {
          item: item,
          index: index,
          separators: this._separators
        });
      }
      if (renderItem) {
        return renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
      }
      invariant(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props11 = this.props,
        CellRendererComponent = _this$props11.CellRendererComponent,
        ItemSeparatorComponent = _this$props11.ItemSeparatorComponent,
        fillRateHelper = _this$props11.fillRateHelper,
        horizontal = _this$props11.horizontal,
        item = _this$props11.item,
        index = _this$props11.index,
        inversionStyle = _this$props11.inversionStyle,
        parentProps = _this$props11.parentProps;
      var renderItem = parentProps.renderItem,
        getItemLayout = parentProps.getItemLayout,
        ListItemComponent = parentProps.ListItemComponent;
      var element = this._renderElement(renderItem, ListItemComponent, item, index);
      var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;
      var itemSeparator = ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, this.state.separatorProps);
      var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;
      var result = !CellRendererComponent ? React.createElement(View, {
        style: cellStyle,
        onLayout: onLayout
      }, element, itemSeparator) : React.createElement(CellRendererComponent, (0, _extends2.default)({}, this.props, {
        style: cellStyle,
        onLayout: onLayout
      }), element, itemSeparator);
      return React.createElement(_VirtualizedListContext.VirtualizedListCellContextProvider, {
        cellKey: this.props.cellKey
      }, result);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, prevState) {
      return {
        separatorProps: (0, _extends2.default)({}, prevState.separatorProps, {
          leadingItem: props.item
        })
      };
    }
  }]);
  return CellRenderer;
}(React.Component);
function describeNestedLists(childList) {
  var trace = 'VirtualizedList trace:\n' + ("  Child (" + (childList.horizontal ? 'horizontal' : 'vertical') + "):\n") + ("    listKey: " + childList.key + "\n") + ("    cellKey: " + childList.cellKey);
  var debugInfo = childList.parentDebugInfo;
  while (debugInfo) {
    trace += "\n  Parent (" + (debugInfo.horizontal ? 'horizontal' : 'vertical') + "):\n" + ("    listKey: " + debugInfo.listKey + "\n") + ("    cellKey: " + debugInfo.cellKey);
    debugInfo = debugInfo.parent;
  }
  return trace;
}
var styles = StyleSheet.create({
  verticallyInverted: {
    transform: [{
      scaleY: -1
    }]
  },
  horizontallyInverted: {
    transform: [{
      scaleX: -1
    }]
  },
  row: {
    flexDirection: 'row'
  },
  rowReverse: {
    flexDirection: 'row-reverse'
  },
  columnReverse: {
    flexDirection: 'column-reverse'
  },
  debug: {
    flex: 1
  },
  debugOverlayBase: {
    position: 'absolute',
    top: 0,
    right: 0
  },
  debugOverlay: {
    bottom: 0,
    width: 20,
    borderColor: 'blue',
    borderWidth: 1
  },
  debugOverlayFrame: {
    left: 0,
    backgroundColor: 'orange'
  },
  debugOverlayFrameLast: {
    left: 0,
    borderColor: 'green',
    borderWidth: 2
  },
  debugOverlayFrameVis: {
    left: 0,
    borderColor: 'red',
    borderWidth: 2
  }
});
module.exports = VirtualizedList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlydHVhbGl6ZVV0aWxzIiwicmVxdWlyZSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfVmlydHVhbGl6ZWRMaXN0Q29udGV4dCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIiwibyIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm5leHQiLCJiaW5kIiwiQXJyYXkiLCJpc0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibGVuZ3RoIiwiaSIsImRvbmUiLCJ2YWx1ZSIsIlR5cGVFcnJvciIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwibiIsInRvU3RyaW5nIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsImFyciIsImxlbiIsImFycjIiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mMiIsInJlc3VsdCIsIk5ld1RhcmdldCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwiZSIsIkJhdGNoaW5hdG9yIiwiRmlsbFJhdGVIZWxwZXIiLCJSZWFjdE5hdGl2ZSIsIlJlZnJlc2hDb250cm9sIiwiU2Nyb2xsVmlldyIsIlN0eWxlU2hlZXQiLCJWaWV3IiwiVmlld2FiaWxpdHlIZWxwZXIiLCJmbGF0dGVuU3R5bGUiLCJpbmZvTG9nIiwiaW52YXJpYW50IiwiX3VzZWRJbmRleEZvcktleSIsIl9rZXlsZXNzSXRlbUNvbXBvbmVudE5hbWUiLCJob3Jpem9udGFsT3JEZWZhdWx0IiwiaG9yaXpvbnRhbCIsImluaXRpYWxOdW1Ub1JlbmRlck9yRGVmYXVsdCIsImluaXRpYWxOdW1Ub1JlbmRlciIsIm1heFRvUmVuZGVyUGVyQmF0Y2hPckRlZmF1bHQiLCJtYXhUb1JlbmRlclBlckJhdGNoIiwib25FbmRSZWFjaGVkVGhyZXNob2xkT3JEZWZhdWx0Iiwib25FbmRSZWFjaGVkVGhyZXNob2xkIiwic2Nyb2xsRXZlbnRUaHJvdHRsZU9yRGVmYXVsdCIsInNjcm9sbEV2ZW50VGhyb3R0bGUiLCJ3aW5kb3dTaXplT3JEZWZhdWx0Iiwid2luZG93U2l6ZSIsIlZpcnR1YWxpemVkTGlzdCIsIl9SZWFjdCRQdXJlQ29tcG9uZW50IiwiX2luaGVyaXRzMiIsIl9zdXBlciIsInByb3BzIiwiX3RoaXMkcHJvcHMkdXBkYXRlQ2VsIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2dldFNjcm9sbE1ldHJpY3MiLCJfc2Nyb2xsTWV0cmljcyIsIl9nZXRPdXRlcm1vc3RQYXJlbnRMaXN0UmVmIiwiX2lzTmVzdGVkV2l0aFNhbWVPcmllbnRhdGlvbiIsImNvbnRleHQiLCJnZXRPdXRlcm1vc3RQYXJlbnRMaXN0UmVmIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZDIiLCJfZ2V0TmVzdGVkQ2hpbGRTdGF0ZSIsImV4aXN0aW5nQ2hpbGREYXRhIiwiX25lc3RlZENoaWxkTGlzdHMiLCJzdGF0ZSIsIl9yZWdpc3RlckFzTmVzdGVkQ2hpbGQiLCJjaGlsZExpc3QiLCJjaGlsZExpc3RzSW5DZWxsIiwiX2NlbGxLZXlzVG9DaGlsZExpc3RLZXlzIiwiY2VsbEtleSIsIlNldCIsImFkZCIsInJlZiIsImNvbnNvbGUiLCJlcnJvciIsImRlc2NyaWJlTmVzdGVkTGlzdHMiLCJfZXh0ZW5kczIiLCJfaGFzSW50ZXJhY3RlZCIsInJlY29yZEludGVyYWN0aW9uIiwiX3VucmVnaXN0ZXJBc05lc3RlZENoaWxkIiwiX29uVXBkYXRlU2VwYXJhdG9ycyIsImtleXMiLCJuZXdQcm9wcyIsImZvckVhY2giLCJfY2VsbFJlZnMiLCJ1cGRhdGVTZXBhcmF0b3JQcm9wcyIsIl9nZXRTcGFjZXJLZXkiLCJpc1ZlcnRpY2FsIiwiX2F2ZXJhZ2VDZWxsTGVuZ3RoIiwiTWFwIiwiX2ZyYW1lcyIsIl9mb290ZXJMZW5ndGgiLCJfaGFzRG9uZUluaXRpYWxTY3JvbGwiLCJfaGFzTW9yZSIsIl9oYXNXYXJuZWQiLCJfaGVhZGVyTGVuZ3RoIiwiX2hpUHJpSW5Qcm9ncmVzcyIsIl9oaWdoZXN0TWVhc3VyZWRGcmFtZUluZGV4IiwiX2luZGljZXNUb0tleXMiLCJfb2Zmc2V0RnJvbVBhcmVudFZpcnR1YWxpemVkTGlzdCIsIl9wcmV2UGFyZW50T2Zmc2V0IiwiY29udGVudExlbmd0aCIsImRPZmZzZXQiLCJkdCIsIm9mZnNldCIsInRpbWVzdGFtcCIsInZlbG9jaXR5IiwidmlzaWJsZUxlbmd0aCIsIl9zY3JvbGxSZWYiLCJfc2VudEVuZEZvckNvbnRlbnRMZW5ndGgiLCJfdG90YWxDZWxsTGVuZ3RoIiwiX3RvdGFsQ2VsbHNNZWFzdXJlZCIsIl92aWV3YWJpbGl0eVR1cGxlcyIsIl9jYXB0dXJlU2Nyb2xsUmVmIiwiX2RlZmF1bHRSZW5kZXJTY3JvbGxDb21wb25lbnQiLCJvblJlZnJlc2giLCJjcmVhdGVFbGVtZW50IiwiX3Byb3BzJHJlZnJlc2hpbmciLCJyZWZyZXNoaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlZnJlc2hDb250cm9sIiwicHJvZ3Jlc3NWaWV3T2Zmc2V0IiwiX29uQ2VsbFVubW91bnQiLCJjdXJyIiwiaW5MYXlvdXQiLCJfb25MYXlvdXQiLCJtZWFzdXJlTGF5b3V0UmVsYXRpdmVUb0NvbnRhaW5pbmdMaXN0IiwiX3NlbGVjdExlbmd0aCIsIm5hdGl2ZUV2ZW50IiwibGF5b3V0Iiwib25MYXlvdXQiLCJfc2NoZWR1bGVDZWxsc1RvUmVuZGVyVXBkYXRlIiwiX21heWJlQ2FsbE9uRW5kUmVhY2hlZCIsIl9vbkxheW91dEVtcHR5IiwiX29uTGF5b3V0Rm9vdGVyIiwiX3RyaWdnZXJSZW1lYXN1cmVGb3JDaGlsZExpc3RzSW5DZWxsIiwiX2dldEZvb3RlckNlbGxLZXkiLCJfb25MYXlvdXRIZWFkZXIiLCJfb25Db250ZW50U2l6ZUNoYW5nZSIsIndpZHRoIiwiaGVpZ2h0IiwiaW5pdGlhbFNjcm9sbEluZGV4IiwiY29udGVudE9mZnNldCIsInNjcm9sbFRvSW5kZXgiLCJhbmltYXRlZCIsImluZGV4Iiwib25Db250ZW50U2l6ZUNoYW5nZSIsIl9jb252ZXJ0UGFyZW50U2Nyb2xsTWV0cmljcyIsIm1ldHJpY3MiLCJfb25TY3JvbGwiLCJvblNjcm9sbCIsInRpbWVTdGFtcCIsImxheW91dE1lYXN1cmVtZW50IiwiY29udGVudFNpemUiLCJfc2VsZWN0T2Zmc2V0IiwiX3RoaXMkX2NvbnZlcnRQYXJlbnRTIiwiTWF0aCIsIm1heCIsInBlcmYiLCJwcmV2RHQiLCJfdXBkYXRlVmlld2FibGVJdGVtcyIsImRhdGEiLCJfZmlsbFJhdGVIZWxwZXIiLCJhY3RpdmF0ZSIsIl9jb21wdXRlQmxhbmtuZXNzIiwiX29uU2Nyb2xsQmVnaW5EcmFnIiwidHVwbGUiLCJ2aWV3YWJpbGl0eUhlbHBlciIsIm9uU2Nyb2xsQmVnaW5EcmFnIiwiX29uU2Nyb2xsRW5kRHJhZyIsIm9uU2Nyb2xsRW5kRHJhZyIsIl9vbk1vbWVudHVtU2Nyb2xsQmVnaW4iLCJvbk1vbWVudHVtU2Nyb2xsQmVnaW4iLCJfb25Nb21lbnR1bVNjcm9sbEVuZCIsIm9uTW9tZW50dW1TY3JvbGxFbmQiLCJfdXBkYXRlQ2VsbHNUb1JlbmRlciIsIl90aGlzJHByb3BzIiwiZ2V0SXRlbUNvdW50IiwiX29uRW5kUmVhY2hlZFRocmVzaG9sZCIsImlzVmlydHVhbGl6YXRpb25EaXNhYmxlZCIsIl9pc1ZpcnR1YWxpemF0aW9uRGlzYWJsZWQiLCJzZXRTdGF0ZSIsIm5ld1N0YXRlIiwiX3RoaXMkX3Njcm9sbE1ldHJpY3MiLCJjb21wdXRlV2luZG93ZWRSZW5kZXJMaW1pdHMiLCJfZ2V0RnJhbWVNZXRyaWNzQXBwcm94IiwiZGlzdGFuY2VGcm9tRW5kIiwicmVuZGVyQWhlYWQiLCJmaXJzdCIsImxhc3QiLCJtaW4iLCJzaXplIiwibmV3Rmlyc3QiLCJuZXdMYXN0IiwiaWkiLCJjZWxsS2V5Rm9ySW5kZXgiLCJjaGlsZExpc3RLZXlzIiwic29tZUNoaWxkSGFzTW9yZSIsIl9pdGVyYXRvciIsIl9zdGVwIiwiY2hpbGRLZXkiLCJoYXNNb3JlIiwiX2NyZWF0ZVZpZXdUb2tlbiIsImlzVmlld2FibGUiLCJfdGhpcyRwcm9wczIiLCJnZXRJdGVtIiwiaXRlbSIsIl9rZXlFeHRyYWN0b3IiLCJmcmFtZSIsIl9nZXRGcmFtZU1ldHJpY3MiLCJnZXRJdGVtTGF5b3V0IiwiX3RoaXMkcHJvcHMzIiwiX19pc05hdGl2ZSIsIl91cGRhdGVDZWxsc1RvUmVuZGVyQmF0Y2hlciIsInVwZGF0ZUNlbGxzQmF0Y2hpbmdQZXJpb2QiLCJ2aWV3YWJpbGl0eUNvbmZpZ0NhbGxiYWNrUGFpcnMiLCJtYXAiLCJwYWlyIiwidmlld2FiaWxpdHlDb25maWciLCJvblZpZXdhYmxlSXRlbXNDaGFuZ2VkIiwicHVzaCIsImluaXRpYWxTdGF0ZSIsInN0b3JlZFN0YXRlIiwiZ2V0TmVzdGVkQ2hpbGRTdGF0ZSIsIl9nZXRMaXN0S2V5IiwiZnJhbWVzIiwiX2NyZWF0ZUNsYXNzMiIsInNjcm9sbFRvRW5kIiwicGFyYW1zIiwidmVyeUxhc3QiLCJzY3JvbGxUbyIsIndhcm4iLCJ4IiwieSIsIl90aGlzJHByb3BzNCIsIm9uU2Nyb2xsVG9JbmRleEZhaWxlZCIsInZpZXdPZmZzZXQiLCJ2aWV3UG9zaXRpb24iLCJhdmVyYWdlSXRlbUxlbmd0aCIsImhpZ2hlc3RNZWFzdXJlZEZyYW1lSW5kZXgiLCJzY3JvbGxUb0l0ZW0iLCJfdGhpcyRwcm9wczUiLCJpdGVtQ291bnQiLCJzY3JvbGxUb09mZnNldCIsInQiLCJmbGFzaFNjcm9sbEluZGljYXRvcnMiLCJnZXRTY3JvbGxSZXNwb25kZXIiLCJnZXRTY3JvbGxhYmxlTm9kZSIsImZpbmROb2RlSGFuZGxlIiwiZ2V0U2Nyb2xsUmVmIiwic2V0TmF0aXZlUHJvcHMiLCJfZ2V0Q2VsbEtleSIsIl90aGlzJGNvbnRleHQiLCJsaXN0S2V5IiwiX2dldERlYnVnSW5mbyIsIl90aGlzJGNvbnRleHQyIiwicGFyZW50IiwiZGVidWdJbmZvIiwiY29tcG9uZW50RGlkTW91bnQiLCJyZWdpc3RlckFzTmVzdGVkQ2hpbGQiLCJwYXJlbnREZWJ1Z0luZm8iLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInVucmVnaXN0ZXJBc05lc3RlZENoaWxkIiwiZGlzcG9zZSIsImFib3J0IiwiZGVhY3RpdmF0ZUFuZEZsdXNoIiwiX3B1c2hDZWxscyIsImNlbGxzIiwic3RpY2t5SGVhZGVySW5kaWNlcyIsInN0aWNreUluZGljZXNGcm9tUHJvcHMiLCJpbnZlcnNpb25TdHlsZSIsIl90aGlzMiIsIl90aGlzJHByb3BzNiIsIkNlbGxSZW5kZXJlckNvbXBvbmVudCIsIkl0ZW1TZXBhcmF0b3JDb21wb25lbnQiLCJzdGlja3lPZmZzZXQiLCJMaXN0SGVhZGVyQ29tcG9uZW50IiwiZW5kIiwicHJldkNlbGxLZXkiLCJfbG9vcCIsIkNlbGxSZW5kZXJlciIsInVuZGVmaW5lZCIsImZpbGxSYXRlSGVscGVyIiwib25VcGRhdGVTZXBhcmF0b3JzIiwiX29uQ2VsbExheW91dCIsIm9uVW5tb3VudCIsInBhcmVudFByb3BzIiwiZGlzYWJsZVZpcnR1YWxpemF0aW9uIiwibmVzdGVkQ29udGV4dCIsImtleUV4dHJhY3RvciIsImRlZmF1bHRLZXlFeHRyYWN0b3IiLCJTdHJpbmciLCJ0eXBlIiwiZGlzcGxheU5hbWUiLCJyZW5kZXIiLCJfdGhpczMiLCJfX0RFVl9fIiwiZmxhdFN0eWxlcyIsImNvbnRlbnRDb250YWluZXJTdHlsZSIsImZsZXhXcmFwIiwiX3RoaXMkcHJvcHM3IiwiTGlzdEVtcHR5Q29tcG9uZW50IiwiTGlzdEZvb3RlckNvbXBvbmVudCIsIl90aGlzJHByb3BzOCIsImludmVydGVkIiwic3R5bGVzIiwiaG9yaXpvbnRhbGx5SW52ZXJ0ZWQiLCJ2ZXJ0aWNhbGx5SW52ZXJ0ZWQiLCJlbGVtZW50IiwiaXNWYWxpZEVsZW1lbnQiLCJWaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyIiwic3R5bGUiLCJjb21wb3NlIiwiTGlzdEhlYWRlckNvbXBvbmVudFN0eWxlIiwic3BhY2VyS2V5IiwibGFzdEluaXRpYWxJbmRleCIsIl90aGlzJHN0YXRlIiwiZmlyc3RBZnRlckluaXRpYWwiLCJpbnNlcnRlZFN0aWNreVNwYWNlciIsImluaXRCbG9jayIsInN0aWNreUJsb2NrIiwibGVhZFNwYWNlIiwiX2RlZmluZVByb3BlcnR5MiIsInRyYWlsU3BhY2UiLCJmaXJzdFNwYWNlIiwibGFzdEZyYW1lIiwiZW5kRnJhbWUiLCJ0YWlsU3BhY2VyTGVuZ3RoIiwiY2xvbmVFbGVtZW50IiwiZXZlbnQiLCJMaXN0Rm9vdGVyQ29tcG9uZW50U3R5bGUiLCJzY3JvbGxQcm9wcyIsImludmVydFN0aWNreUhlYWRlcnMiLCJpbm5lclJldCIsIlZpcnR1YWxpemVkTGlzdENvbnRleHRQcm92aWRlciIsImdldFNjcm9sbE1ldHJpY3MiLCJyZW5kZXJTY3JvbGxDb21wb25lbnQiLCJyZXQiLCJDb250ZXh0IiwiQ29uc3VtZXIiLCJzY3JvbGxDb250ZXh0IiwibmVzdGluZyIsImRlYnVnIiwiX3JlbmRlckRlYnVnT3ZlcmxheSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsIl90aGlzJHByb3BzOSIsImV4dHJhRGF0YSIsInJlc2V0Vmlld2FibGVJbmRpY2VzIiwiaGlQcmlJblByb2dyZXNzIiwiY29tcHV0ZUJsYW5rbmVzcyIsIl9pdGVyYXRvcjIiLCJfc3RlcDIiLCJfdGhpczQiLCJtZWFzdXJlTGF5b3V0Iiwic2Nyb2xsTWV0cmljcyIsIm1ldHJpY3NDaGFuZ2VkIiwiX2l0ZXJhdG9yMyIsIl9zdGVwMyIsInN0YWNrIiwibm9ybWFsaXplIiwiZnJhbWVzSW5MYXlvdXQiLCJ3aW5kb3dUb3AiLCJmcmFtZUxhc3QiLCJ3aW5kb3dMZW4iLCJ2aXNUb3AiLCJ2aXNMZW4iLCJkZWJ1Z092ZXJsYXlCYXNlIiwiZGVidWdPdmVybGF5IiwiZiIsImRlYnVnT3ZlcmxheUZyYW1lIiwidG9wIiwiZGVidWdPdmVybGF5RnJhbWVMYXN0IiwiZGVidWdPdmVybGF5RnJhbWVWaXMiLCJfdGhpcyRwcm9wczEwIiwib25FbmRSZWFjaGVkIiwiX3RoaXMkX3Njcm9sbE1ldHJpY3MyIiwidGhyZXNob2xkIiwiX3RoaXMkc3RhdGUyIiwiX3RoaXMkX3Njcm9sbE1ldHJpY3MzIiwiaGlQcmkiLCJzY3JvbGxpbmdUaHJlc2hvbGQiLCJkaXN0VG9wIiwiZGlzdEJvdHRvbSIsInNjaGVkdWxlIiwiX3RoaXM1Iiwib25VcGRhdGUiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJwcmV2U3RhdGUiLCJQdXJlQ29tcG9uZW50IiwiY29udGV4dFR5cGUiLCJWaXJ0dWFsaXplZExpc3RDb250ZXh0IiwiX1JlYWN0JENvbXBvbmVudCIsIl9zdXBlcjIiLCJfdGhpczYiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJjb25jYXQiLCJzZXBhcmF0b3JQcm9wcyIsImhpZ2hsaWdodGVkIiwibGVhZGluZ0l0ZW0iLCJfc2VwYXJhdG9ycyIsImhpZ2hsaWdodCIsIl90aGlzNiRwcm9wcyIsInVuaGlnaGxpZ2h0IiwiX3RoaXM2JHByb3BzMiIsInVwZGF0ZVByb3BzIiwic2VsZWN0IiwiX3RoaXM2JHByb3BzMyIsIl9yZW5kZXJFbGVtZW50IiwicmVuZGVySXRlbSIsIkxpc3RJdGVtQ29tcG9uZW50Iiwic2VwYXJhdG9ycyIsIl90aGlzJHByb3BzMTEiLCJlbmFibGVkIiwiaXRlbVNlcGFyYXRvciIsImNlbGxTdHlsZSIsInJvd1JldmVyc2UiLCJjb2x1bW5SZXZlcnNlIiwicm93IiwiQ29tcG9uZW50IiwidHJhY2UiLCJjcmVhdGUiLCJ0cmFuc2Zvcm0iLCJzY2FsZVkiLCJzY2FsZVgiLCJmbGV4RGlyZWN0aW9uIiwiZmxleCIsInBvc2l0aW9uIiwicmlnaHQiLCJib3R0b20iLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwibGVmdCIsImJhY2tncm91bmRDb2xvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJWaXJ0dWFsaXplZExpc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbmNvbnN0IEJhdGNoaW5hdG9yID0gcmVxdWlyZSgnLi4vSW50ZXJhY3Rpb24vQmF0Y2hpbmF0b3InKTtcbmNvbnN0IEZpbGxSYXRlSGVscGVyID0gcmVxdWlyZSgnLi9GaWxsUmF0ZUhlbHBlcicpO1xuY29uc3QgUmVhY3ROYXRpdmUgPSByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpO1xuY29uc3QgUmVmcmVzaENvbnRyb2wgPSByZXF1aXJlKCcuLi9Db21wb25lbnRzL1JlZnJlc2hDb250cm9sL1JlZnJlc2hDb250cm9sJyk7XG5jb25zdCBTY3JvbGxWaWV3ID0gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9TY3JvbGxWaWV3L1Njcm9sbFZpZXcnKTtcbmNvbnN0IFN0eWxlU2hlZXQgPSByZXF1aXJlKCcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnKTtcbmNvbnN0IFZpZXcgPSByZXF1aXJlKCcuLi9Db21wb25lbnRzL1ZpZXcvVmlldycpO1xuY29uc3QgVmlld2FiaWxpdHlIZWxwZXIgPSByZXF1aXJlKCcuL1ZpZXdhYmlsaXR5SGVscGVyJyk7XG5cbmNvbnN0IGZsYXR0ZW5TdHlsZSA9IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvZmxhdHRlblN0eWxlJyk7XG5jb25zdCBpbmZvTG9nID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL2luZm9Mb2cnKTtcbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG5pbXBvcnQge1xuICBrZXlFeHRyYWN0b3IgYXMgZGVmYXVsdEtleUV4dHJhY3RvcixcbiAgY29tcHV0ZVdpbmRvd2VkUmVuZGVyTGltaXRzLFxufSBmcm9tICcuL1ZpcnR1YWxpemVVdGlscyc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHtTY3JvbGxSZXNwb25kZXJUeXBlfSBmcm9tICcuLi9Db21wb25lbnRzL1Njcm9sbFZpZXcvU2Nyb2xsVmlldyc7XG5pbXBvcnQgdHlwZSB7Vmlld1N0eWxlUHJvcH0gZnJvbSAnLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCB0eXBlIHtcbiAgVmlld2FiaWxpdHlDb25maWcsXG4gIFZpZXdUb2tlbixcbiAgVmlld2FiaWxpdHlDb25maWdDYWxsYmFja1BhaXIsXG59IGZyb20gJy4vVmlld2FiaWxpdHlIZWxwZXInO1xuaW1wb3J0IHtcbiAgVmlydHVhbGl6ZWRMaXN0Q2VsbENvbnRleHRQcm92aWRlcixcbiAgVmlydHVhbGl6ZWRMaXN0Q29udGV4dCxcbiAgVmlydHVhbGl6ZWRMaXN0Q29udGV4dFByb3ZpZGVyLFxuICB0eXBlIENoaWxkTGlzdFN0YXRlLFxuICB0eXBlIExpc3REZWJ1Z0luZm8sXG59IGZyb20gJy4vVmlydHVhbGl6ZWRMaXN0Q29udGV4dC5qcyc7XG5cbnR5cGUgSXRlbSA9IGFueTtcblxuZXhwb3J0IHR5cGUgU2VwYXJhdG9ycyA9IHtcbiAgaGlnaGxpZ2h0OiAoKSA9PiB2b2lkLFxuICB1bmhpZ2hsaWdodDogKCkgPT4gdm9pZCxcbiAgdXBkYXRlUHJvcHM6IChzZWxlY3Q6ICdsZWFkaW5nJyB8ICd0cmFpbGluZycsIG5ld1Byb3BzOiBPYmplY3QpID0+IHZvaWQsXG4gIC4uLlxufTtcblxuZXhwb3J0IHR5cGUgUmVuZGVySXRlbVByb3BzPEl0ZW1UPiA9IHtcbiAgaXRlbTogSXRlbVQsXG4gIGluZGV4OiBudW1iZXIsXG4gIHNlcGFyYXRvcnM6IFNlcGFyYXRvcnMsXG4gIC4uLlxufTtcblxuZXhwb3J0IHR5cGUgUmVuZGVySXRlbVR5cGU8SXRlbVQ+ID0gKFxuICBpbmZvOiBSZW5kZXJJdGVtUHJvcHM8SXRlbVQ+LFxuKSA9PiBSZWFjdC5Ob2RlO1xuXG50eXBlIFZpZXdhYmlsaXR5SGVscGVyQ2FsbGJhY2tUdXBsZSA9IHtcbiAgdmlld2FiaWxpdHlIZWxwZXI6IFZpZXdhYmlsaXR5SGVscGVyLFxuICBvblZpZXdhYmxlSXRlbXNDaGFuZ2VkOiAoaW5mbzoge1xuICAgIHZpZXdhYmxlSXRlbXM6IEFycmF5PFZpZXdUb2tlbj4sXG4gICAgY2hhbmdlZDogQXJyYXk8Vmlld1Rva2VuPixcbiAgICAuLi5cbiAgfSkgPT4gdm9pZCxcbiAgLi4uXG59O1xuXG50eXBlIFJlcXVpcmVkUHJvcHMgPSB7fFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgYWNjZXNzb3IgZnVuY3Rpb25zIGFzc3VtZSB0aGlzIGlzIGFuIEFycmF5PHtrZXk6IHN0cmluZ30gfCB7aWQ6IHN0cmluZ30+IGJ1dCB5b3UgY2FuIG92ZXJyaWRlXG4gICAqIGdldEl0ZW0sIGdldEl0ZW1Db3VudCwgYW5kIGtleUV4dHJhY3RvciB0byBoYW5kbGUgYW55IHR5cGUgb2YgaW5kZXgtYmFzZWQgZGF0YS5cbiAgICovXG4gIGRhdGE/OiBhbnksXG4gIC8qKlxuICAgKiBBIGdlbmVyaWMgYWNjZXNzb3IgZm9yIGV4dHJhY3RpbmcgYW4gaXRlbSBmcm9tIGFueSBzb3J0IG9mIGRhdGEgYmxvYi5cbiAgICovXG4gIGdldEl0ZW06IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpID0+ID9JdGVtLFxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBob3cgbWFueSBpdGVtcyBhcmUgaW4gdGhlIGRhdGEgYmxvYi5cbiAgICovXG4gIGdldEl0ZW1Db3VudDogKGRhdGE6IGFueSkgPT4gbnVtYmVyLFxufH07XG50eXBlIE9wdGlvbmFsUHJvcHMgPSB7fFxuICByZW5kZXJJdGVtPzogP1JlbmRlckl0ZW1UeXBlPEl0ZW0+LFxuICAvKipcbiAgICogYGRlYnVnYCB3aWxsIHR1cm4gb24gZXh0cmEgbG9nZ2luZyBhbmQgdmlzdWFsIG92ZXJsYXlzIHRvIGFpZCB3aXRoIGRlYnVnZ2luZyBib3RoIHVzYWdlIGFuZFxuICAgKiBpbXBsZW1lbnRhdGlvbiwgYnV0IHdpdGggYSBzaWduaWZpY2FudCBwZXJmIGhpdC5cbiAgICovXG4gIGRlYnVnPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBERVBSRUNBVEVEOiBWaXJ0dWFsaXphdGlvbiBwcm92aWRlcyBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBhbmQgbWVtb3J5IG9wdGltaXphdGlvbnMsIGJ1dCBmdWxseVxuICAgKiB1bm1vdW50cyByZWFjdCBpbnN0YW5jZXMgdGhhdCBhcmUgb3V0c2lkZSBvZiB0aGUgcmVuZGVyIHdpbmRvdy4gWW91IHNob3VsZCBvbmx5IG5lZWQgdG8gZGlzYWJsZVxuICAgKiB0aGlzIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgKi9cbiAgZGlzYWJsZVZpcnR1YWxpemF0aW9uPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBBIG1hcmtlciBwcm9wZXJ0eSBmb3IgdGVsbGluZyB0aGUgbGlzdCB0byByZS1yZW5kZXIgKHNpbmNlIGl0IGltcGxlbWVudHMgYFB1cmVDb21wb25lbnRgKS4gSWZcbiAgICogYW55IG9mIHlvdXIgYHJlbmRlckl0ZW1gLCBIZWFkZXIsIEZvb3RlciwgZXRjLiBmdW5jdGlvbnMgZGVwZW5kIG9uIGFueXRoaW5nIG91dHNpZGUgb2YgdGhlXG4gICAqIGBkYXRhYCBwcm9wLCBzdGljayBpdCBoZXJlIGFuZCB0cmVhdCBpdCBpbW11dGFibHkuXG4gICAqL1xuICBleHRyYURhdGE/OiBhbnksXG4gIC8vIGUuZy4gaGVpZ2h0LCB5XG4gIGdldEl0ZW1MYXlvdXQ/OiAoXG4gICAgZGF0YTogYW55LFxuICAgIGluZGV4OiBudW1iZXIsXG4gICkgPT4ge1xuICAgIGxlbmd0aDogbnVtYmVyLFxuICAgIG9mZnNldDogbnVtYmVyLFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgLi4uXG4gIH0sXG4gIGhvcml6b250YWw/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIEhvdyBtYW55IGl0ZW1zIHRvIHJlbmRlciBpbiB0aGUgaW5pdGlhbCBiYXRjaC4gVGhpcyBzaG91bGQgYmUgZW5vdWdoIHRvIGZpbGwgdGhlIHNjcmVlbiBidXQgbm90XG4gICAqIG11Y2ggbW9yZS4gTm90ZSB0aGVzZSBpdGVtcyB3aWxsIG5ldmVyIGJlIHVubW91bnRlZCBhcyBwYXJ0IG9mIHRoZSB3aW5kb3dlZCByZW5kZXJpbmcgaW4gb3JkZXJcbiAgICogdG8gaW1wcm92ZSBwZXJjZWl2ZWQgcGVyZm9ybWFuY2Ugb2Ygc2Nyb2xsLXRvLXRvcCBhY3Rpb25zLlxuICAgKi9cbiAgaW5pdGlhbE51bVRvUmVuZGVyPzogP251bWJlcixcbiAgLyoqXG4gICAqIEluc3RlYWQgb2Ygc3RhcnRpbmcgYXQgdGhlIHRvcCB3aXRoIHRoZSBmaXJzdCBpdGVtLCBzdGFydCBhdCBgaW5pdGlhbFNjcm9sbEluZGV4YC4gVGhpc1xuICAgKiBkaXNhYmxlcyB0aGUgXCJzY3JvbGwgdG8gdG9wXCIgb3B0aW1pemF0aW9uIHRoYXQga2VlcHMgdGhlIGZpcnN0IGBpbml0aWFsTnVtVG9SZW5kZXJgIGl0ZW1zXG4gICAqIGFsd2F5cyByZW5kZXJlZCBhbmQgaW1tZWRpYXRlbHkgcmVuZGVycyB0aGUgaXRlbXMgc3RhcnRpbmcgYXQgdGhpcyBpbml0aWFsIGluZGV4LiBSZXF1aXJlc1xuICAgKiBgZ2V0SXRlbUxheW91dGAgdG8gYmUgaW1wbGVtZW50ZWQuXG4gICAqL1xuICBpbml0aWFsU2Nyb2xsSW5kZXg/OiA/bnVtYmVyLFxuICAvKipcbiAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBzY3JvbGwuIFVzZXMgc2NhbGUgdHJhbnNmb3JtcyBvZiAtMS5cbiAgICovXG4gIGludmVydGVkPzogP2Jvb2xlYW4sXG4gIGtleUV4dHJhY3Rvcj86ID8oaXRlbTogSXRlbSwgaW5kZXg6IG51bWJlcikgPT4gc3RyaW5nLFxuICAvKipcbiAgICogRWFjaCBjZWxsIGlzIHJlbmRlcmVkIHVzaW5nIHRoaXMgZWxlbWVudC4gQ2FuIGJlIGEgUmVhY3QgQ29tcG9uZW50IENsYXNzLFxuICAgKiBvciBhIHJlbmRlciBmdW5jdGlvbi4gRGVmYXVsdHMgdG8gdXNpbmcgVmlldy5cbiAgICovXG4gIENlbGxSZW5kZXJlckNvbXBvbmVudD86ID9SZWFjdC5Db21wb25lbnRUeXBlPGFueT4sXG4gIC8qKlxuICAgKiBSZW5kZXJlZCBpbiBiZXR3ZWVuIGVhY2ggaXRlbSwgYnV0IG5vdCBhdCB0aGUgdG9wIG9yIGJvdHRvbS4gQnkgZGVmYXVsdCwgYGhpZ2hsaWdodGVkYCBhbmRcbiAgICogYGxlYWRpbmdJdGVtYCBwcm9wcyBhcmUgcHJvdmlkZWQuIGByZW5kZXJJdGVtYCBwcm92aWRlcyBgc2VwYXJhdG9ycy5oaWdobGlnaHRgL2B1bmhpZ2hsaWdodGBcbiAgICogd2hpY2ggd2lsbCB1cGRhdGUgdGhlIGBoaWdobGlnaHRlZGAgcHJvcCwgYnV0IHlvdSBjYW4gYWxzbyBhZGQgY3VzdG9tIHByb3BzIHdpdGhcbiAgICogYHNlcGFyYXRvcnMudXBkYXRlUHJvcHNgLlxuICAgKi9cbiAgSXRlbVNlcGFyYXRvckNvbXBvbmVudD86ID9SZWFjdC5Db21wb25lbnRUeXBlPGFueT4sXG4gIC8qKlxuICAgKiBUYWtlcyBhbiBpdGVtIGZyb20gYGRhdGFgIGFuZCByZW5kZXJzIGl0IGludG8gdGhlIGxpc3QuIEV4YW1wbGUgdXNhZ2U6XG4gICAqXG4gICAqICAgICA8RmxhdExpc3RcbiAgICogICAgICAgSXRlbVNlcGFyYXRvckNvbXBvbmVudD17UGxhdGZvcm0uT1MgIT09ICdhbmRyb2lkJyAmJiAoe2hpZ2hsaWdodGVkfSkgPT4gKFxuICAgKiAgICAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGUuc2VwYXJhdG9yLCBoaWdobGlnaHRlZCAmJiB7bWFyZ2luTGVmdDogMH1dfSAvPlxuICAgKiAgICAgICApfVxuICAgKiAgICAgICBkYXRhPXtbe3RpdGxlOiAnVGl0bGUgVGV4dCcsIGtleTogJ2l0ZW0xJ31dfVxuICAgKiAgICAgICBMaXN0SXRlbUNvbXBvbmVudD17KHtpdGVtLCBzZXBhcmF0b3JzfSkgPT4gKFxuICAgKiAgICAgICAgIDxUb3VjaGFibGVIaWdobGlnaHRcbiAgICogICAgICAgICAgIG9uUHJlc3M9eygpID0+IHRoaXMuX29uUHJlc3MoaXRlbSl9XG4gICAqICAgICAgICAgICBvblNob3dVbmRlcmxheT17c2VwYXJhdG9ycy5oaWdobGlnaHR9XG4gICAqICAgICAgICAgICBvbkhpZGVVbmRlcmxheT17c2VwYXJhdG9ycy51bmhpZ2hsaWdodH0+XG4gICAqICAgICAgICAgICA8VmlldyBzdHlsZT17e2JhY2tncm91bmRDb2xvcjogJ3doaXRlJ319PlxuICAgKiAgICAgICAgICAgICA8VGV4dD57aXRlbS50aXRsZX08L1RleHQ+XG4gICAqICAgICAgICAgICA8L1ZpZXc+XG4gICAqICAgICAgICAgPC9Ub3VjaGFibGVIaWdobGlnaHQ+XG4gICAqICAgICAgICl9XG4gICAqICAgICAvPlxuICAgKlxuICAgKiBQcm92aWRlcyBhZGRpdGlvbmFsIG1ldGFkYXRhIGxpa2UgYGluZGV4YCBpZiB5b3UgbmVlZCBpdCwgYXMgd2VsbCBhcyBhIG1vcmUgZ2VuZXJpY1xuICAgKiBgc2VwYXJhdG9ycy51cGRhdGVQcm9wc2AgZnVuY3Rpb24gd2hpY2ggbGV0J3MgeW91IHNldCB3aGF0ZXZlciBwcm9wcyB5b3Ugd2FudCB0byBjaGFuZ2UgdGhlXG4gICAqIHJlbmRlcmluZyBvZiBlaXRoZXIgdGhlIGxlYWRpbmcgc2VwYXJhdG9yIG9yIHRyYWlsaW5nIHNlcGFyYXRvciBpbiBjYXNlIHRoZSBtb3JlIGNvbW1vblxuICAgKiBgaGlnaGxpZ2h0YCBhbmQgYHVuaGlnaGxpZ2h0YCAod2hpY2ggc2V0IHRoZSBgaGlnaGxpZ2h0ZWQ6IGJvb2xlYW5gIHByb3ApIGFyZSBpbnN1ZmZpY2llbnQgZm9yXG4gICAqIHlvdXIgdXNlLWNhc2UuXG4gICAqL1xuICBMaXN0SXRlbUNvbXBvbmVudD86ID8oUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+IHwgUmVhY3QuRWxlbWVudDxhbnk+KSxcbiAgLyoqXG4gICAqIFJlbmRlcmVkIHdoZW4gdGhlIGxpc3QgaXMgZW1wdHkuIENhbiBiZSBhIFJlYWN0IENvbXBvbmVudCBDbGFzcywgYSByZW5kZXIgZnVuY3Rpb24sIG9yXG4gICAqIGEgcmVuZGVyZWQgZWxlbWVudC5cbiAgICovXG4gIExpc3RFbXB0eUNvbXBvbmVudD86ID8oUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+IHwgUmVhY3QuRWxlbWVudDxhbnk+KSxcbiAgLyoqXG4gICAqIFJlbmRlcmVkIGF0IHRoZSBib3R0b20gb2YgYWxsIHRoZSBpdGVtcy4gQ2FuIGJlIGEgUmVhY3QgQ29tcG9uZW50IENsYXNzLCBhIHJlbmRlciBmdW5jdGlvbiwgb3JcbiAgICogYSByZW5kZXJlZCBlbGVtZW50LlxuICAgKi9cbiAgTGlzdEZvb3RlckNvbXBvbmVudD86ID8oUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+IHwgUmVhY3QuRWxlbWVudDxhbnk+KSxcbiAgLyoqXG4gICAqIFN0eWxpbmcgZm9yIGludGVybmFsIFZpZXcgZm9yIExpc3RGb290ZXJDb21wb25lbnRcbiAgICovXG4gIExpc3RGb290ZXJDb21wb25lbnRTdHlsZT86IFZpZXdTdHlsZVByb3AsXG4gIC8qKlxuICAgKiBSZW5kZXJlZCBhdCB0aGUgdG9wIG9mIGFsbCB0aGUgaXRlbXMuIENhbiBiZSBhIFJlYWN0IENvbXBvbmVudCBDbGFzcywgYSByZW5kZXIgZnVuY3Rpb24sIG9yXG4gICAqIGEgcmVuZGVyZWQgZWxlbWVudC5cbiAgICovXG4gIExpc3RIZWFkZXJDb21wb25lbnQ/OiA/KFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PiB8IFJlYWN0LkVsZW1lbnQ8YW55PiksXG4gIC8qKlxuICAgKiBTdHlsaW5nIGZvciBpbnRlcm5hbCBWaWV3IGZvciBMaXN0SGVhZGVyQ29tcG9uZW50XG4gICAqL1xuICBMaXN0SGVhZGVyQ29tcG9uZW50U3R5bGU/OiBWaWV3U3R5bGVQcm9wLFxuICAvKipcbiAgICogQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBsaXN0LiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgVmlydHVhbGl6ZWRMaXN0cyBhdCB0aGUgc2FtZSBsZXZlbCBvZlxuICAgKiBuZXN0aW5nIHdpdGhpbiBhbm90aGVyIFZpcnR1YWxpemVkTGlzdCwgdGhpcyBrZXkgaXMgbmVjZXNzYXJ5IGZvciB2aXJ0dWFsaXphdGlvbiB0b1xuICAgKiB3b3JrIHByb3Blcmx5LlxuICAgKi9cbiAgbGlzdEtleT86IHN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpdGVtcyB0byByZW5kZXIgaW4gZWFjaCBpbmNyZW1lbnRhbCByZW5kZXIgYmF0Y2guIFRoZSBtb3JlIHJlbmRlcmVkIGF0XG4gICAqIG9uY2UsIHRoZSBiZXR0ZXIgdGhlIGZpbGwgcmF0ZSwgYnV0IHJlc3BvbnNpdmVuZXNzIG1heSBzdWZmZXIgYmVjYXVzZSByZW5kZXJpbmcgY29udGVudCBtYXlcbiAgICogaW50ZXJmZXJlIHdpdGggcmVzcG9uZGluZyB0byBidXR0b24gdGFwcyBvciBvdGhlciBpbnRlcmFjdGlvbnMuXG4gICAqL1xuICBtYXhUb1JlbmRlclBlckJhdGNoPzogP251bWJlcixcbiAgLyoqXG4gICAqIENhbGxlZCBvbmNlIHdoZW4gdGhlIHNjcm9sbCBwb3NpdGlvbiBnZXRzIHdpdGhpbiBgb25FbmRSZWFjaGVkVGhyZXNob2xkYCBvZiB0aGUgcmVuZGVyZWRcbiAgICogY29udGVudC5cbiAgICovXG4gIG9uRW5kUmVhY2hlZD86ID8oaW5mbzoge2Rpc3RhbmNlRnJvbUVuZDogbnVtYmVyLCAuLi59KSA9PiB2b2lkLFxuICAvKipcbiAgICogSG93IGZhciBmcm9tIHRoZSBlbmQgKGluIHVuaXRzIG9mIHZpc2libGUgbGVuZ3RoIG9mIHRoZSBsaXN0KSB0aGUgYm90dG9tIGVkZ2Ugb2YgdGhlXG4gICAqIGxpc3QgbXVzdCBiZSBmcm9tIHRoZSBlbmQgb2YgdGhlIGNvbnRlbnQgdG8gdHJpZ2dlciB0aGUgYG9uRW5kUmVhY2hlZGAgY2FsbGJhY2suXG4gICAqIFRodXMgYSB2YWx1ZSBvZiAwLjUgd2lsbCB0cmlnZ2VyIGBvbkVuZFJlYWNoZWRgIHdoZW4gdGhlIGVuZCBvZiB0aGUgY29udGVudCBpc1xuICAgKiB3aXRoaW4gaGFsZiB0aGUgdmlzaWJsZSBsZW5ndGggb2YgdGhlIGxpc3QuXG4gICAqL1xuICBvbkVuZFJlYWNoZWRUaHJlc2hvbGQ/OiA/bnVtYmVyLFxuICAvKipcbiAgICogSWYgcHJvdmlkZWQsIGEgc3RhbmRhcmQgUmVmcmVzaENvbnRyb2wgd2lsbCBiZSBhZGRlZCBmb3IgXCJQdWxsIHRvIFJlZnJlc2hcIiBmdW5jdGlvbmFsaXR5LiBNYWtlXG4gICAqIHN1cmUgdG8gYWxzbyBzZXQgdGhlIGByZWZyZXNoaW5nYCBwcm9wIGNvcnJlY3RseS5cbiAgICovXG4gIG9uUmVmcmVzaD86ID8oKSA9PiB2b2lkLFxuICAvKipcbiAgICogVXNlZCB0byBoYW5kbGUgZmFpbHVyZXMgd2hlbiBzY3JvbGxpbmcgdG8gYW4gaW5kZXggdGhhdCBoYXMgbm90IGJlZW4gbWVhc3VyZWQgeWV0LiBSZWNvbW1lbmRlZFxuICAgKiBhY3Rpb24gaXMgdG8gZWl0aGVyIGNvbXB1dGUgeW91ciBvd24gb2Zmc2V0IGFuZCBgc2Nyb2xsVG9gIGl0LCBvciBzY3JvbGwgYXMgZmFyIGFzIHBvc3NpYmxlIGFuZFxuICAgKiB0aGVuIHRyeSBhZ2FpbiBhZnRlciBtb3JlIGl0ZW1zIGhhdmUgYmVlbiByZW5kZXJlZC5cbiAgICovXG4gIG9uU2Nyb2xsVG9JbmRleEZhaWxlZD86ID8oaW5mbzoge1xuICAgIGluZGV4OiBudW1iZXIsXG4gICAgaGlnaGVzdE1lYXN1cmVkRnJhbWVJbmRleDogbnVtYmVyLFxuICAgIGF2ZXJhZ2VJdGVtTGVuZ3RoOiBudW1iZXIsXG4gICAgLi4uXG4gIH0pID0+IHZvaWQsXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdmlld2FiaWxpdHkgb2Ygcm93cyBjaGFuZ2VzLCBhcyBkZWZpbmVkIGJ5IHRoZVxuICAgKiBgdmlld2FiaWxpdHlDb25maWdgIHByb3AuXG4gICAqL1xuICBvblZpZXdhYmxlSXRlbXNDaGFuZ2VkPzogPyhpbmZvOiB7XG4gICAgdmlld2FibGVJdGVtczogQXJyYXk8Vmlld1Rva2VuPixcbiAgICBjaGFuZ2VkOiBBcnJheTxWaWV3VG9rZW4+LFxuICAgIC4uLlxuICB9KSA9PiB2b2lkLFxuICBwZXJzaXN0ZW50U2Nyb2xsYmFyPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB3aGVuIG9mZnNldCBpcyBuZWVkZWQgZm9yIHRoZSBsb2FkaW5nIGluZGljYXRvciB0byBzaG93IGNvcnJlY3RseS5cbiAgICovXG4gIHByb2dyZXNzVmlld09mZnNldD86IG51bWJlcixcbiAgLyoqXG4gICAqIEEgY3VzdG9tIHJlZnJlc2ggY29udHJvbCBlbGVtZW50LiBXaGVuIHNldCwgaXQgb3ZlcnJpZGVzIHRoZSBkZWZhdWx0XG4gICAqIDxSZWZyZXNoQ29udHJvbD4gY29tcG9uZW50IGJ1aWx0IGludGVybmFsbHkuIFRoZSBvblJlZnJlc2ggYW5kIHJlZnJlc2hpbmdcbiAgICogcHJvcHMgYXJlIGFsc28gaWdub3JlZC4gT25seSB3b3JrcyBmb3IgdmVydGljYWwgVmlydHVhbGl6ZWRMaXN0LlxuICAgKi9cbiAgcmVmcmVzaENvbnRyb2w/OiA/UmVhY3QuRWxlbWVudDxhbnk+LFxuICAvKipcbiAgICogU2V0IHRoaXMgdHJ1ZSB3aGlsZSB3YWl0aW5nIGZvciBuZXcgZGF0YSBmcm9tIGEgcmVmcmVzaC5cbiAgICovXG4gIHJlZnJlc2hpbmc/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIE5vdGU6IG1heSBoYXZlIGJ1Z3MgKG1pc3NpbmcgY29udGVudCkgaW4gc29tZSBjaXJjdW1zdGFuY2VzIC0gdXNlIGF0IHlvdXIgb3duIHJpc2suXG4gICAqXG4gICAqIFRoaXMgbWF5IGltcHJvdmUgc2Nyb2xsIHBlcmZvcm1hbmNlIGZvciBsYXJnZSBsaXN0cy5cbiAgICovXG4gIHJlbW92ZUNsaXBwZWRTdWJ2aWV3cz86IGJvb2xlYW4sXG4gIC8qKlxuICAgKiBSZW5kZXIgYSBjdXN0b20gc2Nyb2xsIGNvbXBvbmVudCwgZS5nLiB3aXRoIGEgZGlmZmVyZW50bHkgc3R5bGVkIGBSZWZyZXNoQ29udHJvbGAuXG4gICAqL1xuICByZW5kZXJTY3JvbGxDb21wb25lbnQ/OiAocHJvcHM6IE9iamVjdCkgPT4gUmVhY3QuRWxlbWVudDxhbnk+LFxuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgYmV0d2VlbiBsb3ctcHJpIGl0ZW0gcmVuZGVyIGJhdGNoZXMsIGUuZy4gZm9yIHJlbmRlcmluZyBpdGVtcyBxdWl0ZSBhIHdheXMgb2ZmXG4gICAqIHNjcmVlbi4gU2ltaWxhciBmaWxsIHJhdGUvcmVzcG9uc2l2ZW5lc3MgdHJhZGVvZmYgYXMgYG1heFRvUmVuZGVyUGVyQmF0Y2hgLlxuICAgKi9cbiAgdXBkYXRlQ2VsbHNCYXRjaGluZ1BlcmlvZD86ID9udW1iZXIsXG4gIC8qKlxuICAgKiBTZWUgYFZpZXdhYmlsaXR5SGVscGVyYCBmb3IgZmxvdyB0eXBlIGFuZCBmdXJ0aGVyIGRvY3VtZW50YXRpb24uXG4gICAqL1xuICB2aWV3YWJpbGl0eUNvbmZpZz86IFZpZXdhYmlsaXR5Q29uZmlnLFxuICAvKipcbiAgICogTGlzdCBvZiBWaWV3YWJpbGl0eUNvbmZpZy9vblZpZXdhYmxlSXRlbXNDaGFuZ2VkIHBhaXJzLiBBIHNwZWNpZmljIG9uVmlld2FibGVJdGVtc0NoYW5nZWRcbiAgICogd2lsbCBiZSBjYWxsZWQgd2hlbiBpdHMgY29ycmVzcG9uZGluZyBWaWV3YWJpbGl0eUNvbmZpZydzIGNvbmRpdGlvbnMgYXJlIG1ldC5cbiAgICovXG4gIHZpZXdhYmlsaXR5Q29uZmlnQ2FsbGJhY2tQYWlycz86IEFycmF5PFZpZXdhYmlsaXR5Q29uZmlnQ2FsbGJhY2tQYWlyPixcbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHJlbmRlcmVkIG91dHNpZGUgb2YgdGhlIHZpc2libGUgYXJlYSwgaW4gdW5pdHMgb2ZcbiAgICogdmlzaWJsZSBsZW5ndGhzLiBTbyBpZiB5b3VyIGxpc3QgZmlsbHMgdGhlIHNjcmVlbiwgdGhlbiBgd2luZG93U2l6ZT17MjF9YCAodGhlIGRlZmF1bHQpIHdpbGxcbiAgICogcmVuZGVyIHRoZSB2aXNpYmxlIHNjcmVlbiBhcmVhIHBsdXMgdXAgdG8gMTAgc2NyZWVucyBhYm92ZSBhbmQgMTAgYmVsb3cgdGhlIHZpZXdwb3J0LiBSZWR1Y2luZ1xuICAgKiB0aGlzIG51bWJlciB3aWxsIHJlZHVjZSBtZW1vcnkgY29uc3VtcHRpb24gYW5kIG1heSBpbXByb3ZlIHBlcmZvcm1hbmNlLCBidXQgd2lsbCBpbmNyZWFzZSB0aGVcbiAgICogY2hhbmNlIHRoYXQgZmFzdCBzY3JvbGxpbmcgbWF5IHJldmVhbCBtb21lbnRhcnkgYmxhbmsgYXJlYXMgb2YgdW5yZW5kZXJlZCBjb250ZW50LlxuICAgKi9cbiAgd2luZG93U2l6ZT86ID9udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgbGVnYWN5IGltcGxlbWVudGF0aW9uIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuXG4gICAqL1xuICBsZWdhY3lJbXBsZW1lbnRhdGlvbj86IGVtcHR5LFxufH07XG5cbnR5cGUgUHJvcHMgPSB7fFxuICAuLi5SZWFjdC5FbGVtZW50Q29uZmlnPHR5cGVvZiBTY3JvbGxWaWV3PixcbiAgLi4uUmVxdWlyZWRQcm9wcyxcbiAgLi4uT3B0aW9uYWxQcm9wcyxcbnx9O1xuXG5sZXQgX3VzZWRJbmRleEZvcktleSA9IGZhbHNlO1xubGV0IF9rZXlsZXNzSXRlbUNvbXBvbmVudE5hbWU6IHN0cmluZyA9ICcnO1xuXG50eXBlIFN0YXRlID0ge1xuICBmaXJzdDogbnVtYmVyLFxuICBsYXN0OiBudW1iZXIsXG59O1xuXG4vKipcbiAqIERlZmF1bHQgUHJvcHMgSGVscGVyIEZ1bmN0aW9uc1xuICogVXNlIHRoZSBmb2xsb3dpbmcgaGVscGVyIGZ1bmN0aW9ucyBmb3IgZGVmYXVsdCB2YWx1ZXNcbiAqL1xuXG4vLyBob3Jpem9udGFsT3JEZWZhdWx0KHRoaXMucHJvcHMuaG9yaXpvbnRhbClcbmZ1bmN0aW9uIGhvcml6b250YWxPckRlZmF1bHQoaG9yaXpvbnRhbDogP2Jvb2xlYW4pIHtcbiAgcmV0dXJuIGhvcml6b250YWwgPz8gZmFsc2U7XG59XG5cbi8vIGluaXRpYWxOdW1Ub1JlbmRlck9yRGVmYXVsdCh0aGlzLnByb3BzLmluaXRpYWxOdW1Ub1JlbmRlck9yRGVmYXVsdClcbmZ1bmN0aW9uIGluaXRpYWxOdW1Ub1JlbmRlck9yRGVmYXVsdChpbml0aWFsTnVtVG9SZW5kZXI6ID9udW1iZXIpIHtcbiAgcmV0dXJuIGluaXRpYWxOdW1Ub1JlbmRlciA/PyAxMDtcbn1cblxuLy8gbWF4VG9SZW5kZXJQZXJCYXRjaE9yRGVmYXVsdCh0aGlzLnByb3BzLm1heFRvUmVuZGVyUGVyQmF0Y2gpXG5mdW5jdGlvbiBtYXhUb1JlbmRlclBlckJhdGNoT3JEZWZhdWx0KG1heFRvUmVuZGVyUGVyQmF0Y2g6ID9udW1iZXIpIHtcbiAgcmV0dXJuIG1heFRvUmVuZGVyUGVyQmF0Y2ggPz8gMTA7XG59XG5cbi8vIG9uRW5kUmVhY2hlZFRocmVzaG9sZE9yRGVmYXVsdCh0aGlzLnByb3BzLm9uRW5kUmVhY2hlZFRocmVzaG9sZClcbmZ1bmN0aW9uIG9uRW5kUmVhY2hlZFRocmVzaG9sZE9yRGVmYXVsdChvbkVuZFJlYWNoZWRUaHJlc2hvbGQ6ID9udW1iZXIpIHtcbiAgcmV0dXJuIG9uRW5kUmVhY2hlZFRocmVzaG9sZCA/PyAyO1xufVxuXG4vLyBzY3JvbGxFdmVudFRocm90dGxlT3JEZWZhdWx0KHRoaXMucHJvcHMuc2Nyb2xsRXZlbnRUaHJvdHRsZSlcbmZ1bmN0aW9uIHNjcm9sbEV2ZW50VGhyb3R0bGVPckRlZmF1bHQoc2Nyb2xsRXZlbnRUaHJvdHRsZTogP251bWJlcikge1xuICByZXR1cm4gc2Nyb2xsRXZlbnRUaHJvdHRsZSA/PyA1MDtcbn1cblxuLy8gd2luZG93U2l6ZU9yRGVmYXVsdCh0aGlzLnByb3BzLndpbmRvd1NpemUpXG5mdW5jdGlvbiB3aW5kb3dTaXplT3JEZWZhdWx0KHdpbmRvd1NpemU6ID9udW1iZXIpIHtcbiAgcmV0dXJuIHdpbmRvd1NpemUgPz8gMjE7XG59XG5cbi8qKlxuICogQmFzZSBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIG1vcmUgY29udmVuaWVudCBbYDxGbGF0TGlzdD5gXShodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2ZsYXRsaXN0Lmh0bWwpXG4gKiBhbmQgW2A8U2VjdGlvbkxpc3Q+YF0oaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9zZWN0aW9ubGlzdC5odG1sKSBjb21wb25lbnRzLCB3aGljaCBhcmUgYWxzbyBiZXR0ZXJcbiAqIGRvY3VtZW50ZWQuIEluIGdlbmVyYWwsIHRoaXMgc2hvdWxkIG9ubHkgcmVhbGx5IGJlIHVzZWQgaWYgeW91IG5lZWQgbW9yZSBmbGV4aWJpbGl0eSB0aGFuXG4gKiBgRmxhdExpc3RgIHByb3ZpZGVzLCBlLmcuIGZvciB1c2Ugd2l0aCBpbW11dGFibGUgZGF0YSBpbnN0ZWFkIG9mIHBsYWluIGFycmF5cy5cbiAqXG4gKiBWaXJ0dWFsaXphdGlvbiBtYXNzaXZlbHkgaW1wcm92ZXMgbWVtb3J5IGNvbnN1bXB0aW9uIGFuZCBwZXJmb3JtYW5jZSBvZiBsYXJnZSBsaXN0cyBieVxuICogbWFpbnRhaW5pbmcgYSBmaW5pdGUgcmVuZGVyIHdpbmRvdyBvZiBhY3RpdmUgaXRlbXMgYW5kIHJlcGxhY2luZyBhbGwgaXRlbXMgb3V0c2lkZSBvZiB0aGUgcmVuZGVyXG4gKiB3aW5kb3cgd2l0aCBhcHByb3ByaWF0ZWx5IHNpemVkIGJsYW5rIHNwYWNlLiBUaGUgd2luZG93IGFkYXB0cyB0byBzY3JvbGxpbmcgYmVoYXZpb3IsIGFuZCBpdGVtc1xuICogYXJlIHJlbmRlcmVkIGluY3JlbWVudGFsbHkgd2l0aCBsb3ctcHJpIChhZnRlciBhbnkgcnVubmluZyBpbnRlcmFjdGlvbnMpIGlmIHRoZXkgYXJlIGZhciBmcm9tIHRoZVxuICogdmlzaWJsZSBhcmVhLCBvciB3aXRoIGhpLXByaSBvdGhlcndpc2UgdG8gbWluaW1pemUgdGhlIHBvdGVudGlhbCBvZiBzZWVpbmcgYmxhbmsgc3BhY2UuXG4gKlxuICogU29tZSBjYXZlYXRzOlxuICpcbiAqIC0gSW50ZXJuYWwgc3RhdGUgaXMgbm90IHByZXNlcnZlZCB3aGVuIGNvbnRlbnQgc2Nyb2xscyBvdXQgb2YgdGhlIHJlbmRlciB3aW5kb3cuIE1ha2Ugc3VyZSBhbGxcbiAqICAgeW91ciBkYXRhIGlzIGNhcHR1cmVkIGluIHRoZSBpdGVtIGRhdGEgb3IgZXh0ZXJuYWwgc3RvcmVzIGxpa2UgRmx1eCwgUmVkdXgsIG9yIFJlbGF5LlxuICogLSBUaGlzIGlzIGEgYFB1cmVDb21wb25lbnRgIHdoaWNoIG1lYW5zIHRoYXQgaXQgd2lsbCBub3QgcmUtcmVuZGVyIGlmIGBwcm9wc2AgcmVtYWluIHNoYWxsb3ctXG4gKiAgIGVxdWFsLiBNYWtlIHN1cmUgdGhhdCBldmVyeXRoaW5nIHlvdXIgYHJlbmRlckl0ZW1gIGZ1bmN0aW9uIGRlcGVuZHMgb24gaXMgcGFzc2VkIGFzIGEgcHJvcFxuICogICAoZS5nLiBgZXh0cmFEYXRhYCkgdGhhdCBpcyBub3QgYD09PWAgYWZ0ZXIgdXBkYXRlcywgb3RoZXJ3aXNlIHlvdXIgVUkgbWF5IG5vdCB1cGRhdGUgb25cbiAqICAgY2hhbmdlcy4gVGhpcyBpbmNsdWRlcyB0aGUgYGRhdGFgIHByb3AgYW5kIHBhcmVudCBjb21wb25lbnQgc3RhdGUuXG4gKiAtIEluIG9yZGVyIHRvIGNvbnN0cmFpbiBtZW1vcnkgYW5kIGVuYWJsZSBzbW9vdGggc2Nyb2xsaW5nLCBjb250ZW50IGlzIHJlbmRlcmVkIGFzeW5jaHJvbm91c2x5XG4gKiAgIG9mZnNjcmVlbi4gVGhpcyBtZWFucyBpdCdzIHBvc3NpYmxlIHRvIHNjcm9sbCBmYXN0ZXIgdGhhbiB0aGUgZmlsbCByYXRlIGFuZHMgbW9tZW50YXJpbHkgc2VlXG4gKiAgIGJsYW5rIGNvbnRlbnQuIFRoaXMgaXMgYSB0cmFkZW9mZiB0aGF0IGNhbiBiZSBhZGp1c3RlZCB0byBzdWl0IHRoZSBuZWVkcyBvZiBlYWNoIGFwcGxpY2F0aW9uLFxuICogICBhbmQgd2UgYXJlIHdvcmtpbmcgb24gaW1wcm92aW5nIGl0IGJlaGluZCB0aGUgc2NlbmVzLlxuICogLSBCeSBkZWZhdWx0LCB0aGUgbGlzdCBsb29rcyBmb3IgYSBga2V5YCBvciBgaWRgIHByb3Agb24gZWFjaCBpdGVtIGFuZCB1c2VzIHRoYXQgZm9yIHRoZSBSZWFjdCBrZXkuXG4gKiAgIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gcHJvdmlkZSBhIGN1c3RvbSBga2V5RXh0cmFjdG9yYCBwcm9wLlxuICogLSBBcyBhbiBlZmZvcnQgdG8gcmVtb3ZlIGRlZmF1bHRQcm9wcywgdXNlIGhlbHBlciBmdW5jdGlvbnMgd2hlbiByZWZlcmVuY2luZyBjZXJ0YWluIHByb3BzXG4gKlxuICovXG5jbGFzcyBWaXJ0dWFsaXplZExpc3QgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBzdGF0aWMgY29udGV4dFR5cGU6IHR5cGVvZiBWaXJ0dWFsaXplZExpc3RDb250ZXh0ID0gVmlydHVhbGl6ZWRMaXN0Q29udGV4dDtcblxuICAvLyBzY3JvbGxUb0VuZCBtYXkgYmUgamFua3kgd2l0aG91dCBnZXRJdGVtTGF5b3V0IHByb3BcbiAgc2Nyb2xsVG9FbmQocGFyYW1zPzogP3thbmltYXRlZD86ID9ib29sZWFuLCAuLi59KSB7XG4gICAgY29uc3QgYW5pbWF0ZWQgPSBwYXJhbXMgPyBwYXJhbXMuYW5pbWF0ZWQgOiB0cnVlO1xuICAgIGNvbnN0IHZlcnlMYXN0ID0gdGhpcy5wcm9wcy5nZXRJdGVtQ291bnQodGhpcy5wcm9wcy5kYXRhKSAtIDE7XG4gICAgY29uc3QgZnJhbWUgPSB0aGlzLl9nZXRGcmFtZU1ldHJpY3NBcHByb3godmVyeUxhc3QpO1xuICAgIGNvbnN0IG9mZnNldCA9IE1hdGgubWF4KFxuICAgICAgMCxcbiAgICAgIGZyYW1lLm9mZnNldCArXG4gICAgICAgIGZyYW1lLmxlbmd0aCArXG4gICAgICAgIHRoaXMuX2Zvb3Rlckxlbmd0aCAtXG4gICAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aCxcbiAgICApO1xuXG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZiA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZi5zY3JvbGxUbyA9PSBudWxsKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdObyBzY3JvbGxUbyBtZXRob2QgcHJvdmlkZWQuIFRoaXMgbWF5IGJlIGJlY2F1c2UgeW91IGhhdmUgdHdvIG5lc3RlZCAnICtcbiAgICAgICAgICAnVmlydHVhbGl6ZWRMaXN0cyB3aXRoIHRoZSBzYW1lIG9yaWVudGF0aW9uLCBvciBiZWNhdXNlIHlvdSBhcmUgJyArXG4gICAgICAgICAgJ3VzaW5nIGEgY3VzdG9tIGNvbXBvbmVudCB0aGF0IGRvZXMgbm90IGltcGxlbWVudCBzY3JvbGxUby4nLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9zY3JvbGxSZWYuc2Nyb2xsVG8oXG4gICAgICBob3Jpem9udGFsT3JEZWZhdWx0KHRoaXMucHJvcHMuaG9yaXpvbnRhbClcbiAgICAgICAgPyB7eDogb2Zmc2V0LCBhbmltYXRlZH1cbiAgICAgICAgOiB7eTogb2Zmc2V0LCBhbmltYXRlZH0sXG4gICAgKTtcbiAgfVxuXG4gIC8vIHNjcm9sbFRvSW5kZXggbWF5IGJlIGphbmt5IHdpdGhvdXQgZ2V0SXRlbUxheW91dCBwcm9wXG4gIHNjcm9sbFRvSW5kZXgocGFyYW1zOiB7XG4gICAgYW5pbWF0ZWQ/OiA/Ym9vbGVhbixcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIHZpZXdPZmZzZXQ/OiBudW1iZXIsXG4gICAgdmlld1Bvc2l0aW9uPzogbnVtYmVyLFxuICAgIC4uLlxuICB9KSB7XG4gICAgY29uc3Qge1xuICAgICAgZGF0YSxcbiAgICAgIGhvcml6b250YWwsXG4gICAgICBnZXRJdGVtQ291bnQsXG4gICAgICBnZXRJdGVtTGF5b3V0LFxuICAgICAgb25TY3JvbGxUb0luZGV4RmFpbGVkLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHthbmltYXRlZCwgaW5kZXgsIHZpZXdPZmZzZXQsIHZpZXdQb3NpdGlvbn0gPSBwYXJhbXM7XG4gICAgaW52YXJpYW50KFxuICAgICAgaW5kZXggPj0gMCxcbiAgICAgIGBzY3JvbGxUb0luZGV4IG91dCBvZiByYW5nZTogcmVxdWVzdGVkIGluZGV4ICR7aW5kZXh9IGJ1dCBtaW5pbXVtIGlzIDBgLFxuICAgICk7XG4gICAgaW52YXJpYW50KFxuICAgICAgZ2V0SXRlbUNvdW50KGRhdGEpID49IDEsXG4gICAgICBgc2Nyb2xsVG9JbmRleCBvdXQgb2YgcmFuZ2U6IGl0ZW0gbGVuZ3RoICR7Z2V0SXRlbUNvdW50KFxuICAgICAgICBkYXRhLFxuICAgICAgKX0gYnV0IG1pbmltdW0gaXMgMWAsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBpbmRleCA8IGdldEl0ZW1Db3VudChkYXRhKSxcbiAgICAgIGBzY3JvbGxUb0luZGV4IG91dCBvZiByYW5nZTogcmVxdWVzdGVkIGluZGV4ICR7aW5kZXh9IGlzIG91dCBvZiAwIHRvICR7Z2V0SXRlbUNvdW50KFxuICAgICAgICBkYXRhLFxuICAgICAgKSAtIDF9YCxcbiAgICApO1xuICAgIGlmICghZ2V0SXRlbUxheW91dCAmJiBpbmRleCA+IHRoaXMuX2hpZ2hlc3RNZWFzdXJlZEZyYW1lSW5kZXgpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgISFvblNjcm9sbFRvSW5kZXhGYWlsZWQsXG4gICAgICAgICdzY3JvbGxUb0luZGV4IHNob3VsZCBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggZ2V0SXRlbUxheW91dCBvciBvblNjcm9sbFRvSW5kZXhGYWlsZWQsICcgK1xuICAgICAgICAgICdvdGhlcndpc2UgdGhlcmUgaXMgbm8gd2F5IHRvIGtub3cgdGhlIGxvY2F0aW9uIG9mIG9mZnNjcmVlbiBpbmRpY2VzIG9yIGhhbmRsZSBmYWlsdXJlcy4nLFxuICAgICAgKTtcbiAgICAgIG9uU2Nyb2xsVG9JbmRleEZhaWxlZCh7XG4gICAgICAgIGF2ZXJhZ2VJdGVtTGVuZ3RoOiB0aGlzLl9hdmVyYWdlQ2VsbExlbmd0aCxcbiAgICAgICAgaGlnaGVzdE1lYXN1cmVkRnJhbWVJbmRleDogdGhpcy5faGlnaGVzdE1lYXN1cmVkRnJhbWVJbmRleCxcbiAgICAgICAgaW5kZXgsXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZnJhbWUgPSB0aGlzLl9nZXRGcmFtZU1ldHJpY3NBcHByb3goaW5kZXgpO1xuICAgIGNvbnN0IG9mZnNldCA9XG4gICAgICBNYXRoLm1heChcbiAgICAgICAgMCxcbiAgICAgICAgZnJhbWUub2Zmc2V0IC1cbiAgICAgICAgICAodmlld1Bvc2l0aW9uIHx8IDApICpcbiAgICAgICAgICAgICh0aGlzLl9zY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGggLSBmcmFtZS5sZW5ndGgpLFxuICAgICAgKSAtICh2aWV3T2Zmc2V0IHx8IDApO1xuXG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZiA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZi5zY3JvbGxUbyA9PSBudWxsKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdObyBzY3JvbGxUbyBtZXRob2QgcHJvdmlkZWQuIFRoaXMgbWF5IGJlIGJlY2F1c2UgeW91IGhhdmUgdHdvIG5lc3RlZCAnICtcbiAgICAgICAgICAnVmlydHVhbGl6ZWRMaXN0cyB3aXRoIHRoZSBzYW1lIG9yaWVudGF0aW9uLCBvciBiZWNhdXNlIHlvdSBhcmUgJyArXG4gICAgICAgICAgJ3VzaW5nIGEgY3VzdG9tIGNvbXBvbmVudCB0aGF0IGRvZXMgbm90IGltcGxlbWVudCBzY3JvbGxUby4nLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9zY3JvbGxSZWYuc2Nyb2xsVG8oXG4gICAgICBob3Jpem9udGFsID8ge3g6IG9mZnNldCwgYW5pbWF0ZWR9IDoge3k6IG9mZnNldCwgYW5pbWF0ZWR9LFxuICAgICk7XG4gIH1cblxuICAvLyBzY3JvbGxUb0l0ZW0gbWF5IGJlIGphbmt5IHdpdGhvdXQgZ2V0SXRlbUxheW91dCBwcm9wLiBSZXF1aXJlZCBsaW5lYXIgc2NhbiB0aHJvdWdoIGl0ZW1zIC1cbiAgLy8gdXNlIHNjcm9sbFRvSW5kZXggaW5zdGVhZCBpZiBwb3NzaWJsZS5cbiAgc2Nyb2xsVG9JdGVtKHBhcmFtczoge1xuICAgIGFuaW1hdGVkPzogP2Jvb2xlYW4sXG4gICAgaXRlbTogSXRlbSxcbiAgICB2aWV3UG9zaXRpb24/OiBudW1iZXIsXG4gICAgLi4uXG4gIH0pIHtcbiAgICBjb25zdCB7aXRlbX0gPSBwYXJhbXM7XG4gICAgY29uc3Qge2RhdGEsIGdldEl0ZW0sIGdldEl0ZW1Db3VudH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGl0ZW1Db3VudCA9IGdldEl0ZW1Db3VudChkYXRhKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaXRlbUNvdW50OyBpbmRleCsrKSB7XG4gICAgICBpZiAoZ2V0SXRlbShkYXRhLCBpbmRleCkgPT09IGl0ZW0pIHtcbiAgICAgICAgdGhpcy5zY3JvbGxUb0luZGV4KHsuLi5wYXJhbXMsIGluZGV4fSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGwgdG8gYSBzcGVjaWZpYyBjb250ZW50IHBpeGVsIG9mZnNldCBpbiB0aGUgbGlzdC5cbiAgICpcbiAgICogUGFyYW0gYG9mZnNldGAgZXhwZWN0cyB0aGUgb2Zmc2V0IHRvIHNjcm9sbCB0by5cbiAgICogSW4gY2FzZSBvZiBgaG9yaXpvbnRhbGAgaXMgdHJ1ZSwgdGhlIG9mZnNldCBpcyB0aGUgeC12YWx1ZSxcbiAgICogaW4gYW55IG90aGVyIGNhc2UgdGhlIG9mZnNldCBpcyB0aGUgeS12YWx1ZS5cbiAgICpcbiAgICogUGFyYW0gYGFuaW1hdGVkYCAoYHRydWVgIGJ5IGRlZmF1bHQpIGRlZmluZXMgd2hldGhlciB0aGUgbGlzdFxuICAgKiBzaG91bGQgZG8gYW4gYW5pbWF0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICovXG4gIHNjcm9sbFRvT2Zmc2V0KHBhcmFtczoge2FuaW1hdGVkPzogP2Jvb2xlYW4sIG9mZnNldDogbnVtYmVyLCAuLi59KSB7XG4gICAgY29uc3Qge2FuaW1hdGVkLCBvZmZzZXR9ID0gcGFyYW1zO1xuXG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZiA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZi5zY3JvbGxUbyA9PSBudWxsKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdObyBzY3JvbGxUbyBtZXRob2QgcHJvdmlkZWQuIFRoaXMgbWF5IGJlIGJlY2F1c2UgeW91IGhhdmUgdHdvIG5lc3RlZCAnICtcbiAgICAgICAgICAnVmlydHVhbGl6ZWRMaXN0cyB3aXRoIHRoZSBzYW1lIG9yaWVudGF0aW9uLCBvciBiZWNhdXNlIHlvdSBhcmUgJyArXG4gICAgICAgICAgJ3VzaW5nIGEgY3VzdG9tIGNvbXBvbmVudCB0aGF0IGRvZXMgbm90IGltcGxlbWVudCBzY3JvbGxUby4nLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9zY3JvbGxSZWYuc2Nyb2xsVG8oXG4gICAgICBob3Jpem9udGFsT3JEZWZhdWx0KHRoaXMucHJvcHMuaG9yaXpvbnRhbClcbiAgICAgICAgPyB7eDogb2Zmc2V0LCBhbmltYXRlZH1cbiAgICAgICAgOiB7eTogb2Zmc2V0LCBhbmltYXRlZH0sXG4gICAgKTtcbiAgfVxuXG4gIHJlY29yZEludGVyYWN0aW9uKCkge1xuICAgIHRoaXMuX25lc3RlZENoaWxkTGlzdHMuZm9yRWFjaChjaGlsZExpc3QgPT4ge1xuICAgICAgY2hpbGRMaXN0LnJlZiAmJiBjaGlsZExpc3QucmVmLnJlY29yZEludGVyYWN0aW9uKCk7XG4gICAgfSk7XG4gICAgdGhpcy5fdmlld2FiaWxpdHlUdXBsZXMuZm9yRWFjaCh0ID0+IHtcbiAgICAgIHQudmlld2FiaWxpdHlIZWxwZXIucmVjb3JkSW50ZXJhY3Rpb24oKTtcbiAgICB9KTtcbiAgICB0aGlzLl91cGRhdGVWaWV3YWJsZUl0ZW1zKHRoaXMucHJvcHMuZGF0YSk7XG4gIH1cblxuICBmbGFzaFNjcm9sbEluZGljYXRvcnMoKSB7XG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZiA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fc2Nyb2xsUmVmLmZsYXNoU2Nyb2xsSW5kaWNhdG9ycygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaGFuZGxlIHRvIHRoZSB1bmRlcmx5aW5nIHNjcm9sbCByZXNwb25kZXIuXG4gICAqIE5vdGUgdGhhdCBgdGhpcy5fc2Nyb2xsUmVmYCBtaWdodCBub3QgYmUgYSBgU2Nyb2xsVmlld2AsIHNvIHdlXG4gICAqIG5lZWQgdG8gY2hlY2sgdGhhdCBpdCByZXNwb25kcyB0byBgZ2V0U2Nyb2xsUmVzcG9uZGVyYCBiZWZvcmUgY2FsbGluZyBpdC5cbiAgICovXG4gIGdldFNjcm9sbFJlc3BvbmRlcigpOiA/U2Nyb2xsUmVzcG9uZGVyVHlwZSB7XG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZiAmJiB0aGlzLl9zY3JvbGxSZWYuZ2V0U2Nyb2xsUmVzcG9uZGVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsUmVmLmdldFNjcm9sbFJlc3BvbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIGdldFNjcm9sbGFibGVOb2RlKCk6ID9udW1iZXIge1xuICAgIGlmICh0aGlzLl9zY3JvbGxSZWYgJiYgdGhpcy5fc2Nyb2xsUmVmLmdldFNjcm9sbGFibGVOb2RlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsUmVmLmdldFNjcm9sbGFibGVOb2RlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBSZWFjdE5hdGl2ZS5maW5kTm9kZUhhbmRsZSh0aGlzLl9zY3JvbGxSZWYpO1xuICAgIH1cbiAgfVxuXG4gIGdldFNjcm9sbFJlZigpOlxuICAgIHwgP1JlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFNjcm9sbFZpZXc+XG4gICAgfCA/UmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgVmlldz4ge1xuICAgIGlmICh0aGlzLl9zY3JvbGxSZWYgJiYgdGhpcy5fc2Nyb2xsUmVmLmdldFNjcm9sbFJlZikge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbFJlZi5nZXRTY3JvbGxSZWYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbFJlZjtcbiAgICB9XG4gIH1cblxuICBzZXROYXRpdmVQcm9wcyhwcm9wczogT2JqZWN0KSB7XG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZikge1xuICAgICAgdGhpcy5fc2Nyb2xsUmVmLnNldE5hdGl2ZVByb3BzKHByb3BzKTtcbiAgICB9XG4gIH1cblxuICBfZ2V0Q2VsbEtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQ/LmNlbGxLZXkgfHwgJ3Jvb3RMaXN0JztcbiAgfVxuXG4gIF9nZXRMaXN0S2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMubGlzdEtleSB8fCB0aGlzLl9nZXRDZWxsS2V5KCk7XG4gIH1cblxuICBfZ2V0RGVidWdJbmZvKCk6IExpc3REZWJ1Z0luZm8ge1xuICAgIHJldHVybiB7XG4gICAgICBsaXN0S2V5OiB0aGlzLl9nZXRMaXN0S2V5KCksXG4gICAgICBjZWxsS2V5OiB0aGlzLl9nZXRDZWxsS2V5KCksXG4gICAgICBob3Jpem9udGFsOiBob3Jpem9udGFsT3JEZWZhdWx0KHRoaXMucHJvcHMuaG9yaXpvbnRhbCksXG4gICAgICBwYXJlbnQ6IHRoaXMuY29udGV4dD8uZGVidWdJbmZvLFxuICAgIH07XG4gIH1cblxuICBfZ2V0U2Nyb2xsTWV0cmljcyA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsTWV0cmljcztcbiAgfTtcblxuICBoYXNNb3JlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9oYXNNb3JlO1xuICB9XG5cbiAgX2dldE91dGVybW9zdFBhcmVudExpc3RSZWYgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuX2lzTmVzdGVkV2l0aFNhbWVPcmllbnRhdGlvbigpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmdldE91dGVybW9zdFBhcmVudExpc3RSZWYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuXG4gIF9nZXROZXN0ZWRDaGlsZFN0YXRlID0gKGtleTogc3RyaW5nKTogP0NoaWxkTGlzdFN0YXRlID0+IHtcbiAgICBjb25zdCBleGlzdGluZ0NoaWxkRGF0YSA9IHRoaXMuX25lc3RlZENoaWxkTGlzdHMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGV4aXN0aW5nQ2hpbGREYXRhICYmIGV4aXN0aW5nQ2hpbGREYXRhLnN0YXRlO1xuICB9O1xuXG4gIF9yZWdpc3RlckFzTmVzdGVkQ2hpbGQgPSAoY2hpbGRMaXN0OiB7XG4gICAgY2VsbEtleTogc3RyaW5nLFxuICAgIGtleTogc3RyaW5nLFxuICAgIHJlZjogVmlydHVhbGl6ZWRMaXN0LFxuICAgIHBhcmVudERlYnVnSW5mbzogTGlzdERlYnVnSW5mbyxcbiAgICAuLi5cbiAgfSk6ID9DaGlsZExpc3RTdGF0ZSA9PiB7XG4gICAgLy8gUmVnaXN0ZXIgdGhlIG1hcHBpbmcgYmV0d2VlbiB0aGlzIGNoaWxkIGtleSBhbmQgdGhlIGNlbGxLZXkgZm9yIGl0cyBjZWxsXG4gICAgY29uc3QgY2hpbGRMaXN0c0luQ2VsbCA9XG4gICAgICB0aGlzLl9jZWxsS2V5c1RvQ2hpbGRMaXN0S2V5cy5nZXQoY2hpbGRMaXN0LmNlbGxLZXkpIHx8IG5ldyBTZXQoKTtcbiAgICBjaGlsZExpc3RzSW5DZWxsLmFkZChjaGlsZExpc3Qua2V5KTtcbiAgICB0aGlzLl9jZWxsS2V5c1RvQ2hpbGRMaXN0S2V5cy5zZXQoY2hpbGRMaXN0LmNlbGxLZXksIGNoaWxkTGlzdHNJbkNlbGwpO1xuICAgIGNvbnN0IGV4aXN0aW5nQ2hpbGREYXRhID0gdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5nZXQoY2hpbGRMaXN0LmtleSk7XG4gICAgaWYgKGV4aXN0aW5nQ2hpbGREYXRhICYmIGV4aXN0aW5nQ2hpbGREYXRhLnJlZiAhPT0gbnVsbCkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ0EgVmlydHVhbGl6ZWRMaXN0IGNvbnRhaW5zIGEgY2VsbCB3aGljaCBpdHNlbGYgY29udGFpbnMgJyArXG4gICAgICAgICAgJ21vcmUgdGhhbiBvbmUgVmlydHVhbGl6ZWRMaXN0IG9mIHRoZSBzYW1lIG9yaWVudGF0aW9uIGFzIHRoZSBwYXJlbnQgJyArXG4gICAgICAgICAgJ2xpc3QuIFlvdSBtdXN0IHBhc3MgYSB1bmlxdWUgbGlzdEtleSBwcm9wIHRvIGVhY2ggc2libGluZyBsaXN0LlxcblxcbicgK1xuICAgICAgICAgIGRlc2NyaWJlTmVzdGVkTGlzdHMoe1xuICAgICAgICAgICAgLi4uY2hpbGRMaXN0LFxuICAgICAgICAgICAgLy8gV2UncmUgY2FsbGVkIGZyb20gdGhlIGNoaWxkJ3MgY29tcG9uZW50RGlkTW91bnQsIHNvIGl0J3Mgc2FmZSB0b1xuICAgICAgICAgICAgLy8gcmVhZCB0aGUgY2hpbGQncyBwcm9wcyBoZXJlIChhbGJlaXQgd2VpcmQpLlxuICAgICAgICAgICAgaG9yaXpvbnRhbDogISFjaGlsZExpc3QucmVmLnByb3BzLmhvcml6b250YWwsXG4gICAgICAgICAgfSksXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLl9uZXN0ZWRDaGlsZExpc3RzLnNldChjaGlsZExpc3Qua2V5LCB7XG4gICAgICByZWY6IGNoaWxkTGlzdC5yZWYsXG4gICAgICBzdGF0ZTogbnVsbCxcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLl9oYXNJbnRlcmFjdGVkKSB7XG4gICAgICBjaGlsZExpc3QucmVmLnJlY29yZEludGVyYWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF91bnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCA9IChjaGlsZExpc3Q6IHtcbiAgICBrZXk6IHN0cmluZyxcbiAgICBzdGF0ZTogQ2hpbGRMaXN0U3RhdGUsXG4gICAgLi4uXG4gIH0pOiB2b2lkID0+IHtcbiAgICB0aGlzLl9uZXN0ZWRDaGlsZExpc3RzLnNldChjaGlsZExpc3Qua2V5LCB7XG4gICAgICByZWY6IG51bGwsXG4gICAgICBzdGF0ZTogY2hpbGRMaXN0LnN0YXRlLFxuICAgIH0pO1xuICB9O1xuXG4gIHN0YXRlOiBTdGF0ZTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgaW52YXJpYW50KFxuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICAhcHJvcHMub25TY3JvbGwgfHwgIXByb3BzLm9uU2Nyb2xsLl9faXNOYXRpdmUsXG4gICAgICAnQ29tcG9uZW50cyBiYXNlZCBvbiBWaXJ0dWFsaXplZExpc3QgbXVzdCBiZSB3cmFwcGVkIHdpdGggQW5pbWF0ZWQuY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQgJyArXG4gICAgICAgICd0byBzdXBwb3J0IG5hdGl2ZSBvblNjcm9sbCBldmVudHMgd2l0aCB1c2VOYXRpdmVEcml2ZXInLFxuICAgICk7XG4gICAgaW52YXJpYW50KFxuICAgICAgd2luZG93U2l6ZU9yRGVmYXVsdChwcm9wcy53aW5kb3dTaXplKSA+IDAsXG4gICAgICAnVmlydHVhbGl6ZWRMaXN0OiBUaGUgd2luZG93U2l6ZSBwcm9wIG11c3QgYmUgcHJlc2VudCBhbmQgc2V0IHRvIGEgdmFsdWUgZ3JlYXRlciB0aGFuIDAuJyxcbiAgICApO1xuXG4gICAgdGhpcy5fZmlsbFJhdGVIZWxwZXIgPSBuZXcgRmlsbFJhdGVIZWxwZXIodGhpcy5fZ2V0RnJhbWVNZXRyaWNzKTtcbiAgICB0aGlzLl91cGRhdGVDZWxsc1RvUmVuZGVyQmF0Y2hlciA9IG5ldyBCYXRjaGluYXRvcihcbiAgICAgIHRoaXMuX3VwZGF0ZUNlbGxzVG9SZW5kZXIsXG4gICAgICB0aGlzLnByb3BzLnVwZGF0ZUNlbGxzQmF0Y2hpbmdQZXJpb2QgPz8gNTAsXG4gICAgKTtcblxuICAgIGlmICh0aGlzLnByb3BzLnZpZXdhYmlsaXR5Q29uZmlnQ2FsbGJhY2tQYWlycykge1xuICAgICAgdGhpcy5fdmlld2FiaWxpdHlUdXBsZXMgPSB0aGlzLnByb3BzLnZpZXdhYmlsaXR5Q29uZmlnQ2FsbGJhY2tQYWlycy5tYXAoXG4gICAgICAgIHBhaXIgPT4gKHtcbiAgICAgICAgICB2aWV3YWJpbGl0eUhlbHBlcjogbmV3IFZpZXdhYmlsaXR5SGVscGVyKHBhaXIudmlld2FiaWxpdHlDb25maWcpLFxuICAgICAgICAgIG9uVmlld2FibGVJdGVtc0NoYW5nZWQ6IHBhaXIub25WaWV3YWJsZUl0ZW1zQ2hhbmdlZCxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5vblZpZXdhYmxlSXRlbXNDaGFuZ2VkKSB7XG4gICAgICB0aGlzLl92aWV3YWJpbGl0eVR1cGxlcy5wdXNoKHtcbiAgICAgICAgdmlld2FiaWxpdHlIZWxwZXI6IG5ldyBWaWV3YWJpbGl0eUhlbHBlcih0aGlzLnByb3BzLnZpZXdhYmlsaXR5Q29uZmlnKSxcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgICAgb25WaWV3YWJsZUl0ZW1zQ2hhbmdlZDogdGhpcy5wcm9wcy5vblZpZXdhYmxlSXRlbXNDaGFuZ2VkLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IGluaXRpYWxTdGF0ZSA9IHtcbiAgICAgIGZpcnN0OiB0aGlzLnByb3BzLmluaXRpYWxTY3JvbGxJbmRleCB8fCAwLFxuICAgICAgbGFzdDpcbiAgICAgICAgTWF0aC5taW4oXG4gICAgICAgICAgdGhpcy5wcm9wcy5nZXRJdGVtQ291bnQodGhpcy5wcm9wcy5kYXRhKSxcbiAgICAgICAgICAodGhpcy5wcm9wcy5pbml0aWFsU2Nyb2xsSW5kZXggfHwgMCkgK1xuICAgICAgICAgICAgaW5pdGlhbE51bVRvUmVuZGVyT3JEZWZhdWx0KHRoaXMucHJvcHMuaW5pdGlhbE51bVRvUmVuZGVyKSxcbiAgICAgICAgKSAtIDEsXG4gICAgfTtcblxuICAgIGlmICh0aGlzLl9pc05lc3RlZFdpdGhTYW1lT3JpZW50YXRpb24oKSkge1xuICAgICAgY29uc3Qgc3RvcmVkU3RhdGUgPSB0aGlzLmNvbnRleHQuZ2V0TmVzdGVkQ2hpbGRTdGF0ZSh0aGlzLl9nZXRMaXN0S2V5KCkpO1xuICAgICAgaWYgKHN0b3JlZFN0YXRlKSB7XG4gICAgICAgIGluaXRpYWxTdGF0ZSA9IHN0b3JlZFN0YXRlO1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RvcmVkU3RhdGU7XG4gICAgICAgIHRoaXMuX2ZyYW1lcyA9IHN0b3JlZFN0YXRlLmZyYW1lcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMuX2lzTmVzdGVkV2l0aFNhbWVPcmllbnRhdGlvbigpKSB7XG4gICAgICB0aGlzLmNvbnRleHQucmVnaXN0ZXJBc05lc3RlZENoaWxkKHtcbiAgICAgICAgY2VsbEtleTogdGhpcy5fZ2V0Q2VsbEtleSgpLFxuICAgICAgICBrZXk6IHRoaXMuX2dldExpc3RLZXkoKSxcbiAgICAgICAgcmVmOiB0aGlzLFxuICAgICAgICAvLyBOT1RFOiBXaGVuIHRoZSBjaGlsZCBtb3VudHMgKGhlcmUpIGl0J3Mgbm90IG5lY2Vzc2FyaWx5IHNhZmUgdG8gcmVhZFxuICAgICAgICAvLyB0aGUgcGFyZW50J3MgcHJvcHMuIFRoaXMgaXMgd2h5IHdlIGV4cGxpY2l0bHkgcHJvcGFnYXRlIGRlYnVnSW5mb1xuICAgICAgICAvLyBcImRvd25cIiB2aWEgY29udGV4dCBhbmQgXCJ1cFwiIGFnYWluIHZpYSB0aGlzIG1ldGhvZCBjYWxsIG9uIHRoZVxuICAgICAgICAvLyBwYXJlbnQuXG4gICAgICAgIHBhcmVudERlYnVnSW5mbzogdGhpcy5jb250ZXh0LmRlYnVnSW5mbyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLl9pc05lc3RlZFdpdGhTYW1lT3JpZW50YXRpb24oKSkge1xuICAgICAgdGhpcy5jb250ZXh0LnVucmVnaXN0ZXJBc05lc3RlZENoaWxkKHtcbiAgICAgICAga2V5OiB0aGlzLl9nZXRMaXN0S2V5KCksXG4gICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgZmlyc3Q6IHRoaXMuc3RhdGUuZmlyc3QsXG4gICAgICAgICAgbGFzdDogdGhpcy5zdGF0ZS5sYXN0LFxuICAgICAgICAgIGZyYW1lczogdGhpcy5fZnJhbWVzLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZVZpZXdhYmxlSXRlbXMobnVsbCk7XG4gICAgdGhpcy5fdXBkYXRlQ2VsbHNUb1JlbmRlckJhdGNoZXIuZGlzcG9zZSh7YWJvcnQ6IHRydWV9KTtcbiAgICB0aGlzLl92aWV3YWJpbGl0eVR1cGxlcy5mb3JFYWNoKHR1cGxlID0+IHtcbiAgICAgIHR1cGxlLnZpZXdhYmlsaXR5SGVscGVyLmRpc3Bvc2UoKTtcbiAgICB9KTtcbiAgICB0aGlzLl9maWxsUmF0ZUhlbHBlci5kZWFjdGl2YXRlQW5kRmx1c2goKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV3UHJvcHM6IFByb3BzLCBwcmV2U3RhdGU6IFN0YXRlKTogU3RhdGUge1xuICAgIGNvbnN0IHtkYXRhLCBnZXRJdGVtQ291bnR9ID0gbmV3UHJvcHM7XG4gICAgY29uc3QgbWF4VG9SZW5kZXJQZXJCYXRjaCA9IG1heFRvUmVuZGVyUGVyQmF0Y2hPckRlZmF1bHQoXG4gICAgICBuZXdQcm9wcy5tYXhUb1JlbmRlclBlckJhdGNoLFxuICAgICk7XG4gICAgLy8gZmlyc3QgYW5kIGxhc3QgY291bGQgYmUgc3RhbGUgKGUuZy4gaWYgYSBuZXcsIHNob3J0ZXIgaXRlbXMgcHJvcHMgaXMgcGFzc2VkIGluKSwgc28gd2UgbWFrZVxuICAgIC8vIHN1cmUgd2UncmUgcmVuZGVyaW5nIGEgcmVhc29uYWJsZSByYW5nZSBoZXJlLlxuICAgIHJldHVybiB7XG4gICAgICBmaXJzdDogTWF0aC5tYXgoXG4gICAgICAgIDAsXG4gICAgICAgIE1hdGgubWluKHByZXZTdGF0ZS5maXJzdCwgZ2V0SXRlbUNvdW50KGRhdGEpIC0gMSAtIG1heFRvUmVuZGVyUGVyQmF0Y2gpLFxuICAgICAgKSxcbiAgICAgIGxhc3Q6IE1hdGgubWF4KDAsIE1hdGgubWluKHByZXZTdGF0ZS5sYXN0LCBnZXRJdGVtQ291bnQoZGF0YSkgLSAxKSksXG4gICAgfTtcbiAgfVxuXG4gIF9wdXNoQ2VsbHMoXG4gICAgY2VsbHM6IEFycmF5PE9iamVjdD4sXG4gICAgc3RpY2t5SGVhZGVySW5kaWNlczogQXJyYXk8bnVtYmVyPixcbiAgICBzdGlja3lJbmRpY2VzRnJvbVByb3BzOiBTZXQ8bnVtYmVyPixcbiAgICBmaXJzdDogbnVtYmVyLFxuICAgIGxhc3Q6IG51bWJlcixcbiAgICBpbnZlcnNpb25TdHlsZTogVmlld1N0eWxlUHJvcCxcbiAgKSB7XG4gICAgY29uc3Qge1xuICAgICAgQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgICAgSXRlbVNlcGFyYXRvckNvbXBvbmVudCxcbiAgICAgIGRhdGEsXG4gICAgICBnZXRJdGVtLFxuICAgICAgZ2V0SXRlbUNvdW50LFxuICAgICAgaG9yaXpvbnRhbCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzdGlja3lPZmZzZXQgPSB0aGlzLnByb3BzLkxpc3RIZWFkZXJDb21wb25lbnQgPyAxIDogMDtcbiAgICBjb25zdCBlbmQgPSBnZXRJdGVtQ291bnQoZGF0YSkgLSAxO1xuICAgIGxldCBwcmV2Q2VsbEtleTtcbiAgICBsYXN0ID0gTWF0aC5taW4oZW5kLCBsYXN0KTtcbiAgICBmb3IgKGxldCBpaSA9IGZpcnN0OyBpaSA8PSBsYXN0OyBpaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gZ2V0SXRlbShkYXRhLCBpaSk7XG4gICAgICBjb25zdCBrZXkgPSB0aGlzLl9rZXlFeHRyYWN0b3IoaXRlbSwgaWkpO1xuICAgICAgdGhpcy5faW5kaWNlc1RvS2V5cy5zZXQoaWksIGtleSk7XG4gICAgICBpZiAoc3RpY2t5SW5kaWNlc0Zyb21Qcm9wcy5oYXMoaWkgKyBzdGlja3lPZmZzZXQpKSB7XG4gICAgICAgIHN0aWNreUhlYWRlckluZGljZXMucHVzaChjZWxscy5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgY2VsbHMucHVzaChcbiAgICAgICAgPENlbGxSZW5kZXJlclxuICAgICAgICAgIENlbGxSZW5kZXJlckNvbXBvbmVudD17Q2VsbFJlbmRlcmVyQ29tcG9uZW50fVxuICAgICAgICAgIEl0ZW1TZXBhcmF0b3JDb21wb25lbnQ9e2lpIDwgZW5kID8gSXRlbVNlcGFyYXRvckNvbXBvbmVudCA6IHVuZGVmaW5lZH1cbiAgICAgICAgICBjZWxsS2V5PXtrZXl9XG4gICAgICAgICAgZmlsbFJhdGVIZWxwZXI9e3RoaXMuX2ZpbGxSYXRlSGVscGVyfVxuICAgICAgICAgIGhvcml6b250YWw9e2hvcml6b250YWx9XG4gICAgICAgICAgaW5kZXg9e2lpfVxuICAgICAgICAgIGludmVyc2lvblN0eWxlPXtpbnZlcnNpb25TdHlsZX1cbiAgICAgICAgICBpdGVtPXtpdGVtfVxuICAgICAgICAgIGtleT17a2V5fVxuICAgICAgICAgIHByZXZDZWxsS2V5PXtwcmV2Q2VsbEtleX1cbiAgICAgICAgICBvblVwZGF0ZVNlcGFyYXRvcnM9e3RoaXMuX29uVXBkYXRlU2VwYXJhdG9yc31cbiAgICAgICAgICBvbkxheW91dD17ZSA9PiB0aGlzLl9vbkNlbGxMYXlvdXQoZSwga2V5LCBpaSl9XG4gICAgICAgICAgb25Vbm1vdW50PXt0aGlzLl9vbkNlbGxVbm1vdW50fVxuICAgICAgICAgIHBhcmVudFByb3BzPXt0aGlzLnByb3BzfVxuICAgICAgICAgIHJlZj17cmVmID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NlbGxSZWZzW2tleV0gPSByZWY7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz4sXG4gICAgICApO1xuICAgICAgcHJldkNlbGxLZXkgPSBrZXk7XG4gICAgfVxuICB9XG5cbiAgX29uVXBkYXRlU2VwYXJhdG9ycyA9IChrZXlzOiBBcnJheTw/c3RyaW5nPiwgbmV3UHJvcHM6IE9iamVjdCkgPT4ge1xuICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29uc3QgcmVmID0ga2V5ICE9IG51bGwgJiYgdGhpcy5fY2VsbFJlZnNba2V5XTtcbiAgICAgIHJlZiAmJiByZWYudXBkYXRlU2VwYXJhdG9yUHJvcHMobmV3UHJvcHMpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9pc1ZpcnR1YWxpemF0aW9uRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGlzYWJsZVZpcnR1YWxpemF0aW9uIHx8IGZhbHNlO1xuICB9XG5cbiAgX2lzTmVzdGVkV2l0aFNhbWVPcmllbnRhdGlvbigpOiBib29sZWFuIHtcbiAgICBjb25zdCBuZXN0ZWRDb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgIHJldHVybiAhIShcbiAgICAgIG5lc3RlZENvbnRleHQgJiZcbiAgICAgICEhbmVzdGVkQ29udGV4dC5ob3Jpem9udGFsID09PSBob3Jpem9udGFsT3JEZWZhdWx0KHRoaXMucHJvcHMuaG9yaXpvbnRhbClcbiAgICApO1xuICB9XG5cbiAgX2dldFNwYWNlcktleSA9IChpc1ZlcnRpY2FsOiBib29sZWFuKTogc3RyaW5nID0+XG4gICAgaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBfa2V5RXh0cmFjdG9yKGl0ZW06IEl0ZW0sIGluZGV4OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5rZXlFeHRyYWN0b3IgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMua2V5RXh0cmFjdG9yKGl0ZW0sIGluZGV4KTtcbiAgICB9XG5cbiAgICBjb25zdCBrZXkgPSBkZWZhdWx0S2V5RXh0cmFjdG9yKGl0ZW0sIGluZGV4KTtcbiAgICBpZiAoa2V5ID09PSBTdHJpbmcoaW5kZXgpKSB7XG4gICAgICBfdXNlZEluZGV4Rm9yS2V5ID0gdHJ1ZTtcbiAgICAgIGlmIChpdGVtLnR5cGUgJiYgaXRlbS50eXBlLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgIF9rZXlsZXNzSXRlbUNvbXBvbmVudE5hbWUgPSBpdGVtLnR5cGUuZGlzcGxheU5hbWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH1cblxuICByZW5kZXIoKTogUmVhY3QuTm9kZSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGNvbnN0IGZsYXRTdHlsZXMgPSBmbGF0dGVuU3R5bGUodGhpcy5wcm9wcy5jb250ZW50Q29udGFpbmVyU3R5bGUpO1xuICAgICAgaWYgKGZsYXRTdHlsZXMgIT0gbnVsbCAmJiBmbGF0U3R5bGVzLmZsZXhXcmFwID09PSAnd3JhcCcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdgZmxleFdyYXA6IGB3cmFwYGAgaXMgbm90IHN1cHBvcnRlZCB3aXRoIHRoZSBgVmlydHVhbGl6ZWRMaXN0YCBjb21wb25lbnRzLicgK1xuICAgICAgICAgICAgJ0NvbnNpZGVyIHVzaW5nIGBudW1Db2x1bW5zYCB3aXRoIGBGbGF0TGlzdGAgaW5zdGVhZC4nLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBMaXN0RW1wdHlDb21wb25lbnQsXG4gICAgICBMaXN0Rm9vdGVyQ29tcG9uZW50LFxuICAgICAgTGlzdEhlYWRlckNvbXBvbmVudCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7ZGF0YSwgaG9yaXpvbnRhbH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGlzVmlydHVhbGl6YXRpb25EaXNhYmxlZCA9IHRoaXMuX2lzVmlydHVhbGl6YXRpb25EaXNhYmxlZCgpO1xuICAgIGNvbnN0IGludmVyc2lvblN0eWxlID0gdGhpcy5wcm9wcy5pbnZlcnRlZFxuICAgICAgPyBob3Jpem9udGFsT3JEZWZhdWx0KHRoaXMucHJvcHMuaG9yaXpvbnRhbClcbiAgICAgICAgPyBzdHlsZXMuaG9yaXpvbnRhbGx5SW52ZXJ0ZWRcbiAgICAgICAgOiBzdHlsZXMudmVydGljYWxseUludmVydGVkXG4gICAgICA6IG51bGw7XG4gICAgY29uc3QgY2VsbHMgPSBbXTtcbiAgICBjb25zdCBzdGlja3lJbmRpY2VzRnJvbVByb3BzID0gbmV3IFNldCh0aGlzLnByb3BzLnN0aWNreUhlYWRlckluZGljZXMpO1xuICAgIGNvbnN0IHN0aWNreUhlYWRlckluZGljZXMgPSBbXTtcbiAgICBpZiAoTGlzdEhlYWRlckNvbXBvbmVudCkge1xuICAgICAgaWYgKHN0aWNreUluZGljZXNGcm9tUHJvcHMuaGFzKDApKSB7XG4gICAgICAgIHN0aWNreUhlYWRlckluZGljZXMucHVzaCgwKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBSZWFjdC5pc1ZhbGlkRWxlbWVudChMaXN0SGVhZGVyQ29tcG9uZW50KSA/IChcbiAgICAgICAgTGlzdEhlYWRlckNvbXBvbmVudFxuICAgICAgKSA6IChcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtub3QtYS1jb21wb25lbnRdXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGUtYXJnXVxuICAgICAgICA8TGlzdEhlYWRlckNvbXBvbmVudCAvPlxuICAgICAgKTtcbiAgICAgIGNlbGxzLnB1c2goXG4gICAgICAgIDxWaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyXG4gICAgICAgICAgY2VsbEtleT17dGhpcy5fZ2V0Q2VsbEtleSgpICsgJy1oZWFkZXInfVxuICAgICAgICAgIGtleT1cIiRoZWFkZXJcIj5cbiAgICAgICAgICA8Vmlld1xuICAgICAgICAgICAgb25MYXlvdXQ9e3RoaXMuX29uTGF5b3V0SGVhZGVyfVxuICAgICAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuY29tcG9zZShcbiAgICAgICAgICAgICAgaW52ZXJzaW9uU3R5bGUsXG4gICAgICAgICAgICAgIHRoaXMucHJvcHMuTGlzdEhlYWRlckNvbXBvbmVudFN0eWxlLFxuICAgICAgICAgICAgKX0+XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdIC0gVHlwaW5nIFJlYWN0TmF0aXZlQ29tcG9uZW50IHJldmVhbGVkIGVycm9yc1xuICAgICAgICAgICAgICBlbGVtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC9WaWV3PlxuICAgICAgICA8L1ZpcnR1YWxpemVkTGlzdENlbGxDb250ZXh0UHJvdmlkZXI+LFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgaXRlbUNvdW50ID0gdGhpcy5wcm9wcy5nZXRJdGVtQ291bnQoZGF0YSk7XG4gICAgaWYgKGl0ZW1Db3VudCA+IDApIHtcbiAgICAgIF91c2VkSW5kZXhGb3JLZXkgPSBmYWxzZTtcbiAgICAgIF9rZXlsZXNzSXRlbUNvbXBvbmVudE5hbWUgPSAnJztcbiAgICAgIGNvbnN0IHNwYWNlcktleSA9IHRoaXMuX2dldFNwYWNlcktleSghaG9yaXpvbnRhbCk7XG4gICAgICBjb25zdCBsYXN0SW5pdGlhbEluZGV4ID0gdGhpcy5wcm9wcy5pbml0aWFsU2Nyb2xsSW5kZXhcbiAgICAgICAgPyAtMVxuICAgICAgICA6IGluaXRpYWxOdW1Ub1JlbmRlck9yRGVmYXVsdCh0aGlzLnByb3BzLmluaXRpYWxOdW1Ub1JlbmRlcikgLSAxO1xuICAgICAgY29uc3Qge2ZpcnN0LCBsYXN0fSA9IHRoaXMuc3RhdGU7XG4gICAgICB0aGlzLl9wdXNoQ2VsbHMoXG4gICAgICAgIGNlbGxzLFxuICAgICAgICBzdGlja3lIZWFkZXJJbmRpY2VzLFxuICAgICAgICBzdGlja3lJbmRpY2VzRnJvbVByb3BzLFxuICAgICAgICAwLFxuICAgICAgICBsYXN0SW5pdGlhbEluZGV4LFxuICAgICAgICBpbnZlcnNpb25TdHlsZSxcbiAgICAgICk7XG4gICAgICBjb25zdCBmaXJzdEFmdGVySW5pdGlhbCA9IE1hdGgubWF4KGxhc3RJbml0aWFsSW5kZXggKyAxLCBmaXJzdCk7XG4gICAgICBpZiAoIWlzVmlydHVhbGl6YXRpb25EaXNhYmxlZCAmJiBmaXJzdCA+IGxhc3RJbml0aWFsSW5kZXggKyAxKSB7XG4gICAgICAgIGxldCBpbnNlcnRlZFN0aWNreVNwYWNlciA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RpY2t5SW5kaWNlc0Zyb21Qcm9wcy5zaXplID4gMCkge1xuICAgICAgICAgIGNvbnN0IHN0aWNreU9mZnNldCA9IExpc3RIZWFkZXJDb21wb25lbnQgPyAxIDogMDtcbiAgICAgICAgICAvLyBTZWUgaWYgdGhlcmUgYXJlIGFueSBzdGlja3kgaGVhZGVycyBpbiB0aGUgdmlydHVhbGl6ZWQgc3BhY2UgdGhhdCB3ZSBuZWVkIHRvIHJlbmRlci5cbiAgICAgICAgICBmb3IgKGxldCBpaSA9IGZpcnN0QWZ0ZXJJbml0aWFsIC0gMTsgaWkgPiBsYXN0SW5pdGlhbEluZGV4OyBpaS0tKSB7XG4gICAgICAgICAgICBpZiAoc3RpY2t5SW5kaWNlc0Zyb21Qcm9wcy5oYXMoaWkgKyBzdGlja3lPZmZzZXQpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGluaXRCbG9jayA9IHRoaXMuX2dldEZyYW1lTWV0cmljc0FwcHJveChsYXN0SW5pdGlhbEluZGV4KTtcbiAgICAgICAgICAgICAgY29uc3Qgc3RpY2t5QmxvY2sgPSB0aGlzLl9nZXRGcmFtZU1ldHJpY3NBcHByb3goaWkpO1xuICAgICAgICAgICAgICBjb25zdCBsZWFkU3BhY2UgPVxuICAgICAgICAgICAgICAgIHN0aWNreUJsb2NrLm9mZnNldCAtXG4gICAgICAgICAgICAgICAgaW5pdEJsb2NrLm9mZnNldCAtXG4gICAgICAgICAgICAgICAgKHRoaXMucHJvcHMuaW5pdGlhbFNjcm9sbEluZGV4ID8gMCA6IGluaXRCbG9jay5sZW5ndGgpO1xuICAgICAgICAgICAgICBjZWxscy5wdXNoKFxuICAgICAgICAgICAgICAgIDxWaWV3IGtleT1cIiRzdGlja3lfbGVhZFwiIHN0eWxlPXt7W3NwYWNlcktleV06IGxlYWRTcGFjZX19IC8+LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0aGlzLl9wdXNoQ2VsbHMoXG4gICAgICAgICAgICAgICAgY2VsbHMsXG4gICAgICAgICAgICAgICAgc3RpY2t5SGVhZGVySW5kaWNlcyxcbiAgICAgICAgICAgICAgICBzdGlja3lJbmRpY2VzRnJvbVByb3BzLFxuICAgICAgICAgICAgICAgIGlpLFxuICAgICAgICAgICAgICAgIGlpLFxuICAgICAgICAgICAgICAgIGludmVyc2lvblN0eWxlLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBjb25zdCB0cmFpbFNwYWNlID1cbiAgICAgICAgICAgICAgICB0aGlzLl9nZXRGcmFtZU1ldHJpY3NBcHByb3goZmlyc3QpLm9mZnNldCAtXG4gICAgICAgICAgICAgICAgKHN0aWNreUJsb2NrLm9mZnNldCArIHN0aWNreUJsb2NrLmxlbmd0aCk7XG4gICAgICAgICAgICAgIGNlbGxzLnB1c2goXG4gICAgICAgICAgICAgICAgPFZpZXcga2V5PVwiJHN0aWNreV90cmFpbFwiIHN0eWxlPXt7W3NwYWNlcktleV06IHRyYWlsU3BhY2V9fSAvPixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaW5zZXJ0ZWRTdGlja3lTcGFjZXIgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbnNlcnRlZFN0aWNreVNwYWNlcikge1xuICAgICAgICAgIGNvbnN0IGluaXRCbG9jayA9IHRoaXMuX2dldEZyYW1lTWV0cmljc0FwcHJveChsYXN0SW5pdGlhbEluZGV4KTtcbiAgICAgICAgICBjb25zdCBmaXJzdFNwYWNlID1cbiAgICAgICAgICAgIHRoaXMuX2dldEZyYW1lTWV0cmljc0FwcHJveChmaXJzdCkub2Zmc2V0IC1cbiAgICAgICAgICAgIChpbml0QmxvY2sub2Zmc2V0ICsgaW5pdEJsb2NrLmxlbmd0aCk7XG4gICAgICAgICAgY2VsbHMucHVzaChcbiAgICAgICAgICAgIDxWaWV3IGtleT1cIiRsZWFkX3NwYWNlclwiIHN0eWxlPXt7W3NwYWNlcktleV06IGZpcnN0U3BhY2V9fSAvPixcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9wdXNoQ2VsbHMoXG4gICAgICAgIGNlbGxzLFxuICAgICAgICBzdGlja3lIZWFkZXJJbmRpY2VzLFxuICAgICAgICBzdGlja3lJbmRpY2VzRnJvbVByb3BzLFxuICAgICAgICBmaXJzdEFmdGVySW5pdGlhbCxcbiAgICAgICAgbGFzdCxcbiAgICAgICAgaW52ZXJzaW9uU3R5bGUsXG4gICAgICApO1xuICAgICAgaWYgKCF0aGlzLl9oYXNXYXJuZWQua2V5cyAmJiBfdXNlZEluZGV4Rm9yS2V5KSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnVmlydHVhbGl6ZWRMaXN0OiBtaXNzaW5nIGtleXMgZm9yIGl0ZW1zLCBtYWtlIHN1cmUgdG8gc3BlY2lmeSBhIGtleSBvciBpZCBwcm9wZXJ0eSBvbiBlYWNoICcgK1xuICAgICAgICAgICAgJ2l0ZW0gb3IgcHJvdmlkZSBhIGN1c3RvbSBrZXlFeHRyYWN0b3IuJyxcbiAgICAgICAgICBfa2V5bGVzc0l0ZW1Db21wb25lbnROYW1lLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9oYXNXYXJuZWQua2V5cyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIWlzVmlydHVhbGl6YXRpb25EaXNhYmxlZCAmJiBsYXN0IDwgaXRlbUNvdW50IC0gMSkge1xuICAgICAgICBjb25zdCBsYXN0RnJhbWUgPSB0aGlzLl9nZXRGcmFtZU1ldHJpY3NBcHByb3gobGFzdCk7XG4gICAgICAgIC8vIFdpdGhvdXQgZ2V0SXRlbUxheW91dCwgd2UgbGltaXQgb3VyIHRhaWwgc3BhY2VyIHRvIHRoZSBfaGlnaGVzdE1lYXN1cmVkRnJhbWVJbmRleCB0b1xuICAgICAgICAvLyBwcmV2ZW50IHRoZSB1c2VyIGZvciBoeXBlcnNjcm9sbGluZyBpbnRvIHVuLW1lYXN1cmVkIGFyZWEgYmVjYXVzZSBvdGhlcndpc2UgY29udGVudCB3aWxsXG4gICAgICAgIC8vIGxpa2VseSBqdW1wIGFyb3VuZCBhcyBpdCByZW5kZXJzIGluIGFib3ZlIHRoZSB2aWV3cG9ydC5cbiAgICAgICAgY29uc3QgZW5kID0gdGhpcy5wcm9wcy5nZXRJdGVtTGF5b3V0XG4gICAgICAgICAgPyBpdGVtQ291bnQgLSAxXG4gICAgICAgICAgOiBNYXRoLm1pbihpdGVtQ291bnQgLSAxLCB0aGlzLl9oaWdoZXN0TWVhc3VyZWRGcmFtZUluZGV4KTtcbiAgICAgICAgY29uc3QgZW5kRnJhbWUgPSB0aGlzLl9nZXRGcmFtZU1ldHJpY3NBcHByb3goZW5kKTtcbiAgICAgICAgY29uc3QgdGFpbFNwYWNlckxlbmd0aCA9XG4gICAgICAgICAgZW5kRnJhbWUub2Zmc2V0ICtcbiAgICAgICAgICBlbmRGcmFtZS5sZW5ndGggLVxuICAgICAgICAgIChsYXN0RnJhbWUub2Zmc2V0ICsgbGFzdEZyYW1lLmxlbmd0aCk7XG4gICAgICAgIGNlbGxzLnB1c2goXG4gICAgICAgICAgPFZpZXcga2V5PVwiJHRhaWxfc3BhY2VyXCIgc3R5bGU9e3tbc3BhY2VyS2V5XTogdGFpbFNwYWNlckxlbmd0aH19IC8+LFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoTGlzdEVtcHR5Q29tcG9uZW50KSB7XG4gICAgICBjb25zdCBlbGVtZW50OiBSZWFjdC5FbGVtZW50PGFueT4gPSAoKFJlYWN0LmlzVmFsaWRFbGVtZW50KFxuICAgICAgICBMaXN0RW1wdHlDb21wb25lbnQsXG4gICAgICApID8gKFxuICAgICAgICBMaXN0RW1wdHlDb21wb25lbnRcbiAgICAgICkgOiAoXG4gICAgICAgIC8vICRGbG93Rml4TWVbbm90LWEtY29tcG9uZW50XVxuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlLWFyZ11cbiAgICAgICAgPExpc3RFbXB0eUNvbXBvbmVudCAvPlxuICAgICAgKSk6IGFueSk7XG4gICAgICBjZWxscy5wdXNoKFxuICAgICAgICBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICAgIGtleTogJyRlbXB0eScsXG4gICAgICAgICAgb25MYXlvdXQ6IGV2ZW50ID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uTGF5b3V0RW1wdHkoZXZlbnQpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQucHJvcHMub25MYXlvdXQpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5wcm9wcy5vbkxheW91dChldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdHlsZTogU3R5bGVTaGVldC5jb21wb3NlKGludmVyc2lvblN0eWxlLCBlbGVtZW50LnByb3BzLnN0eWxlKSxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoTGlzdEZvb3RlckNvbXBvbmVudCkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IFJlYWN0LmlzVmFsaWRFbGVtZW50KExpc3RGb290ZXJDb21wb25lbnQpID8gKFxuICAgICAgICBMaXN0Rm9vdGVyQ29tcG9uZW50XG4gICAgICApIDogKFxuICAgICAgICAvLyAkRmxvd0ZpeE1lW25vdC1hLWNvbXBvbmVudF1cbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZS1hcmddXG4gICAgICAgIDxMaXN0Rm9vdGVyQ29tcG9uZW50IC8+XG4gICAgICApO1xuICAgICAgY2VsbHMucHVzaChcbiAgICAgICAgPFZpcnR1YWxpemVkTGlzdENlbGxDb250ZXh0UHJvdmlkZXJcbiAgICAgICAgICBjZWxsS2V5PXt0aGlzLl9nZXRGb290ZXJDZWxsS2V5KCl9XG4gICAgICAgICAga2V5PVwiJGZvb3RlclwiPlxuICAgICAgICAgIDxWaWV3XG4gICAgICAgICAgICBvbkxheW91dD17dGhpcy5fb25MYXlvdXRGb290ZXJ9XG4gICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5jb21wb3NlKFxuICAgICAgICAgICAgICBpbnZlcnNpb25TdHlsZSxcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5MaXN0Rm9vdGVyQ29tcG9uZW50U3R5bGUsXG4gICAgICAgICAgICApfT5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV0gLSBUeXBpbmcgUmVhY3ROYXRpdmVDb21wb25lbnQgcmV2ZWFsZWQgZXJyb3JzXG4gICAgICAgICAgICAgIGVsZW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgIDwvVmlydHVhbGl6ZWRMaXN0Q2VsbENvbnRleHRQcm92aWRlcj4sXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBzY3JvbGxQcm9wcyA9IHtcbiAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICBvbkNvbnRlbnRTaXplQ2hhbmdlOiB0aGlzLl9vbkNvbnRlbnRTaXplQ2hhbmdlLFxuICAgICAgb25MYXlvdXQ6IHRoaXMuX29uTGF5b3V0LFxuICAgICAgb25TY3JvbGw6IHRoaXMuX29uU2Nyb2xsLFxuICAgICAgb25TY3JvbGxCZWdpbkRyYWc6IHRoaXMuX29uU2Nyb2xsQmVnaW5EcmFnLFxuICAgICAgb25TY3JvbGxFbmREcmFnOiB0aGlzLl9vblNjcm9sbEVuZERyYWcsXG4gICAgICBvbk1vbWVudHVtU2Nyb2xsQmVnaW46IHRoaXMuX29uTW9tZW50dW1TY3JvbGxCZWdpbixcbiAgICAgIG9uTW9tZW50dW1TY3JvbGxFbmQ6IHRoaXMuX29uTW9tZW50dW1TY3JvbGxFbmQsXG4gICAgICBzY3JvbGxFdmVudFRocm90dGxlOiBzY3JvbGxFdmVudFRocm90dGxlT3JEZWZhdWx0KFxuICAgICAgICB0aGlzLnByb3BzLnNjcm9sbEV2ZW50VGhyb3R0bGUsXG4gICAgICApLCAvLyBUT0RPOiBBbmRyb2lkIHN1cHBvcnRcbiAgICAgIGludmVydFN0aWNreUhlYWRlcnM6XG4gICAgICAgIHRoaXMucHJvcHMuaW52ZXJ0U3RpY2t5SGVhZGVycyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyB0aGlzLnByb3BzLmludmVydFN0aWNreUhlYWRlcnNcbiAgICAgICAgICA6IHRoaXMucHJvcHMuaW52ZXJ0ZWQsXG4gICAgICBzdGlja3lIZWFkZXJJbmRpY2VzLFxuICAgICAgc3R5bGU6IGludmVyc2lvblN0eWxlXG4gICAgICAgID8gW2ludmVyc2lvblN0eWxlLCB0aGlzLnByb3BzLnN0eWxlXVxuICAgICAgICA6IHRoaXMucHJvcHMuc3R5bGUsXG4gICAgfTtcblxuICAgIHRoaXMuX2hhc01vcmUgPVxuICAgICAgdGhpcy5zdGF0ZS5sYXN0IDwgdGhpcy5wcm9wcy5nZXRJdGVtQ291bnQodGhpcy5wcm9wcy5kYXRhKSAtIDE7XG5cbiAgICBjb25zdCBpbm5lclJldCA9IChcbiAgICAgIDxWaXJ0dWFsaXplZExpc3RDb250ZXh0UHJvdmlkZXJcbiAgICAgICAgdmFsdWU9e3tcbiAgICAgICAgICBjZWxsS2V5OiBudWxsLFxuICAgICAgICAgIGdldFNjcm9sbE1ldHJpY3M6IHRoaXMuX2dldFNjcm9sbE1ldHJpY3MsXG4gICAgICAgICAgaG9yaXpvbnRhbDogaG9yaXpvbnRhbE9yRGVmYXVsdCh0aGlzLnByb3BzLmhvcml6b250YWwpLFxuICAgICAgICAgIGdldE91dGVybW9zdFBhcmVudExpc3RSZWY6IHRoaXMuX2dldE91dGVybW9zdFBhcmVudExpc3RSZWYsXG4gICAgICAgICAgZ2V0TmVzdGVkQ2hpbGRTdGF0ZTogdGhpcy5fZ2V0TmVzdGVkQ2hpbGRTdGF0ZSxcbiAgICAgICAgICByZWdpc3RlckFzTmVzdGVkQ2hpbGQ6IHRoaXMuX3JlZ2lzdGVyQXNOZXN0ZWRDaGlsZCxcbiAgICAgICAgICB1bnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZDogdGhpcy5fdW5yZWdpc3RlckFzTmVzdGVkQ2hpbGQsXG4gICAgICAgICAgZGVidWdJbmZvOiB0aGlzLl9nZXREZWJ1Z0luZm8oKSxcbiAgICAgICAgfX0+XG4gICAgICAgIHtSZWFjdC5jbG9uZUVsZW1lbnQoXG4gICAgICAgICAgKFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5yZW5kZXJTY3JvbGxDb21wb25lbnQgfHxcbiAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRSZW5kZXJTY3JvbGxDb21wb25lbnRcbiAgICAgICAgICApKHNjcm9sbFByb3BzKSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZWY6IHRoaXMuX2NhcHR1cmVTY3JvbGxSZWYsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjZWxscyxcbiAgICAgICAgKX1cbiAgICAgIDwvVmlydHVhbGl6ZWRMaXN0Q29udGV4dFByb3ZpZGVyPlxuICAgICk7XG4gICAgbGV0IHJldCA9IGlubmVyUmV0O1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICByZXQgPSAoXG4gICAgICAgIDxTY3JvbGxWaWV3LkNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgICAge3Njcm9sbENvbnRleHQgPT4ge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBzY3JvbGxDb250ZXh0ICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgIXNjcm9sbENvbnRleHQuaG9yaXpvbnRhbCA9PT1cbiAgICAgICAgICAgICAgICAhaG9yaXpvbnRhbE9yRGVmYXVsdCh0aGlzLnByb3BzLmhvcml6b250YWwpICYmXG4gICAgICAgICAgICAgICF0aGlzLl9oYXNXYXJuZWQubmVzdGluZyAmJlxuICAgICAgICAgICAgICB0aGlzLmNvbnRleHQgPT0gbnVsbFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8vIFRPRE8gKFQ0NjU0NzA0NCk6IHVzZSBSZWFjdC53YXJuIG9uY2UgMTYuOSBpcyBzeW5jJ2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzE1MTcwXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgJ1ZpcnR1YWxpemVkTGlzdHMgc2hvdWxkIG5ldmVyIGJlIG5lc3RlZCBpbnNpZGUgcGxhaW4gU2Nyb2xsVmlld3Mgd2l0aCB0aGUgc2FtZSAnICtcbiAgICAgICAgICAgICAgICAgICdvcmllbnRhdGlvbiBiZWNhdXNlIGl0IGNhbiBicmVhayB3aW5kb3dpbmcgYW5kIG90aGVyIGZ1bmN0aW9uYWxpdHkgLSB1c2UgYW5vdGhlciAnICtcbiAgICAgICAgICAgICAgICAgICdWaXJ0dWFsaXplZExpc3QtYmFja2VkIGNvbnRhaW5lciBpbnN0ZWFkLicsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRoaXMuX2hhc1dhcm5lZC5uZXN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbm5lclJldDtcbiAgICAgICAgICB9fVxuICAgICAgICA8L1Njcm9sbFZpZXcuQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLmRlYnVnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmRlYnVnfT5cbiAgICAgICAgICB7cmV0fVxuICAgICAgICAgIHt0aGlzLl9yZW5kZXJEZWJ1Z092ZXJsYXkoKX1cbiAgICAgICAgPC9WaWV3PlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzOiBQcm9wcykge1xuICAgIGNvbnN0IHtkYXRhLCBleHRyYURhdGF9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoZGF0YSAhPT0gcHJldlByb3BzLmRhdGEgfHwgZXh0cmFEYXRhICE9PSBwcmV2UHJvcHMuZXh0cmFEYXRhKSB7XG4gICAgICAvLyBjbGVhciB0aGUgdmlld2FibGVJbmRpY2VzIGNhY2hlIHRvIGFsc28gdHJpZ2dlclxuICAgICAgLy8gdGhlIG9uVmlld2FibGVJdGVtc0NoYW5nZWQgY2FsbGJhY2sgd2l0aCB0aGUgbmV3IGRhdGFcbiAgICAgIHRoaXMuX3ZpZXdhYmlsaXR5VHVwbGVzLmZvckVhY2godHVwbGUgPT4ge1xuICAgICAgICB0dXBsZS52aWV3YWJpbGl0eUhlbHBlci5yZXNldFZpZXdhYmxlSW5kaWNlcygpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFRoZSBgdGhpcy5faGlQcmlJblByb2dyZXNzYCBpcyBndWFyYW50ZWVpbmcgYSBoaVByaSBjZWxsIHVwZGF0ZSB3aWxsIG9ubHkgaGFwcGVuXG4gICAgLy8gb25jZSBwZXIgZmliZXIgdXBkYXRlLiBUaGUgYF9zY2hlZHVsZUNlbGxzVG9SZW5kZXJVcGRhdGVgIHdpbGwgc2V0IGl0IHRvIHRydWVcbiAgICAvLyBpZiBhIGhpUHJpIHVwZGF0ZSBuZWVkcyB0byBwZXJmb3JtLiBJZiBgY29tcG9uZW50RGlkVXBkYXRlYCBpcyB0cmlnZ2VyZWQgd2l0aFxuICAgIC8vIGB0aGlzLl9oaVByaUluUHJvZ3Jlc3M9dHJ1ZWAsIG1lYW5zIGl0J3MgdHJpZ2dlcmVkIGJ5IHRoZSBoaVByaSB1cGRhdGUuIFRoZVxuICAgIC8vIGBfc2NoZWR1bGVDZWxsc1RvUmVuZGVyVXBkYXRlYCB3aWxsIGNoZWNrIHRoaXMgY29uZGl0aW9uIGFuZCBub3QgcGVyZm9ybVxuICAgIC8vIGFub3RoZXIgaGlQcmkgdXBkYXRlLlxuICAgIGNvbnN0IGhpUHJpSW5Qcm9ncmVzcyA9IHRoaXMuX2hpUHJpSW5Qcm9ncmVzcztcbiAgICB0aGlzLl9zY2hlZHVsZUNlbGxzVG9SZW5kZXJVcGRhdGUoKTtcbiAgICAvLyBNYWtlIHN1cmUgc2V0dGluZyBgdGhpcy5faGlQcmlJblByb2dyZXNzYCBiYWNrIHRvIGZhbHNlIGFmdGVyIGBjb21wb25lbnREaWRVcGRhdGVgXG4gICAgLy8gaXMgdHJpZ2dlcmVkIHdpdGggYHRoaXMuX2hpUHJpSW5Qcm9ncmVzcyA9IHRydWVgXG4gICAgaWYgKGhpUHJpSW5Qcm9ncmVzcykge1xuICAgICAgdGhpcy5faGlQcmlJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgX2F2ZXJhZ2VDZWxsTGVuZ3RoID0gMDtcbiAgLy8gTWFwcyBhIGNlbGwga2V5IHRvIHRoZSBzZXQgb2Yga2V5cyBmb3IgYWxsIG91dGVybW9zdCBjaGlsZCBsaXN0cyB3aXRoaW4gdGhhdCBjZWxsXG4gIF9jZWxsS2V5c1RvQ2hpbGRMaXN0S2V5czogTWFwPHN0cmluZywgU2V0PHN0cmluZz4+ID0gbmV3IE1hcCgpO1xuICBfY2VsbFJlZnMgPSB7fTtcbiAgX2ZpbGxSYXRlSGVscGVyOiBGaWxsUmF0ZUhlbHBlcjtcbiAgX2ZyYW1lcyA9IHt9O1xuICBfZm9vdGVyTGVuZ3RoID0gMDtcbiAgX2hhc0RvbmVJbml0aWFsU2Nyb2xsID0gZmFsc2U7XG4gIF9oYXNJbnRlcmFjdGVkID0gZmFsc2U7XG4gIF9oYXNNb3JlID0gZmFsc2U7XG4gIF9oYXNXYXJuZWQgPSB7fTtcbiAgX2hlYWRlckxlbmd0aCA9IDA7XG4gIF9oaVByaUluUHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZTsgLy8gZmxhZyB0byBwcmV2ZW50IGluZmluaXRlIGhpUHJpIGNlbGwgbGltaXQgdXBkYXRlXG4gIF9oaWdoZXN0TWVhc3VyZWRGcmFtZUluZGV4ID0gMDtcbiAgX2luZGljZXNUb0tleXM6IE1hcDxudW1iZXIsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG4gIF9uZXN0ZWRDaGlsZExpc3RzOiBNYXA8XG4gICAgc3RyaW5nLFxuICAgIHtcbiAgICAgIHJlZjogP1ZpcnR1YWxpemVkTGlzdCxcbiAgICAgIHN0YXRlOiA/Q2hpbGRMaXN0U3RhdGUsXG4gICAgICAuLi5cbiAgICB9LFxuICA+ID0gbmV3IE1hcCgpO1xuICBfb2Zmc2V0RnJvbVBhcmVudFZpcnR1YWxpemVkTGlzdDogbnVtYmVyID0gMDtcbiAgX3ByZXZQYXJlbnRPZmZzZXQ6IG51bWJlciA9IDA7XG4gIF9zY3JvbGxNZXRyaWNzID0ge1xuICAgIGNvbnRlbnRMZW5ndGg6IDAsXG4gICAgZE9mZnNldDogMCxcbiAgICBkdDogMTAsXG4gICAgb2Zmc2V0OiAwLFxuICAgIHRpbWVzdGFtcDogMCxcbiAgICB2ZWxvY2l0eTogMCxcbiAgICB2aXNpYmxlTGVuZ3RoOiAwLFxuICB9O1xuICBfc2Nyb2xsUmVmOiA/UmVhY3QuRWxlbWVudFJlZjxhbnk+ID0gbnVsbDtcbiAgX3NlbnRFbmRGb3JDb250ZW50TGVuZ3RoID0gMDtcbiAgX3RvdGFsQ2VsbExlbmd0aCA9IDA7XG4gIF90b3RhbENlbGxzTWVhc3VyZWQgPSAwO1xuICBfdXBkYXRlQ2VsbHNUb1JlbmRlckJhdGNoZXI6IEJhdGNoaW5hdG9yO1xuICBfdmlld2FiaWxpdHlUdXBsZXM6IEFycmF5PFZpZXdhYmlsaXR5SGVscGVyQ2FsbGJhY2tUdXBsZT4gPSBbXTtcblxuICBfY2FwdHVyZVNjcm9sbFJlZiA9IHJlZiA9PiB7XG4gICAgdGhpcy5fc2Nyb2xsUmVmID0gcmVmO1xuICB9O1xuXG4gIF9jb21wdXRlQmxhbmtuZXNzKCkge1xuICAgIHRoaXMuX2ZpbGxSYXRlSGVscGVyLmNvbXB1dGVCbGFua25lc3MoXG4gICAgICB0aGlzLnByb3BzLFxuICAgICAgdGhpcy5zdGF0ZSxcbiAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MsXG4gICAgKTtcbiAgfVxuXG4gIF9kZWZhdWx0UmVuZGVyU2Nyb2xsQ29tcG9uZW50ID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IG9uUmVmcmVzaCA9IHByb3BzLm9uUmVmcmVzaDtcbiAgICBpZiAodGhpcy5faXNOZXN0ZWRXaXRoU2FtZU9yaWVudGF0aW9uKCkpIHtcbiAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSAtIFR5cGluZyBSZWFjdE5hdGl2ZUNvbXBvbmVudCByZXZlYWxlZCBlcnJvcnNcbiAgICAgIHJldHVybiA8VmlldyB7Li4ucHJvcHN9IC8+O1xuICAgIH0gZWxzZSBpZiAob25SZWZyZXNoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHR5cGVvZiBwcm9wcy5yZWZyZXNoaW5nID09PSAnYm9vbGVhbicsXG4gICAgICAgICdgcmVmcmVzaGluZ2AgcHJvcCBtdXN0IGJlIHNldCBhcyBhIGJvb2xlYW4gaW4gb3JkZXIgdG8gdXNlIGBvblJlZnJlc2hgLCBidXQgZ290IGAnICtcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeShwcm9wcy5yZWZyZXNoaW5nID8/ICd1bmRlZmluZWQnKSArXG4gICAgICAgICAgJ2AnLFxuICAgICAgKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBJbnZhbGlkIHByb3AgdXNhZ2VcbiAgICAgICAgPFNjcm9sbFZpZXdcbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgcmVmcmVzaENvbnRyb2w9e1xuICAgICAgICAgICAgcHJvcHMucmVmcmVzaENvbnRyb2wgPT0gbnVsbCA/IChcbiAgICAgICAgICAgICAgPFJlZnJlc2hDb250cm9sXG4gICAgICAgICAgICAgICAgcmVmcmVzaGluZz17cHJvcHMucmVmcmVzaGluZ31cbiAgICAgICAgICAgICAgICBvblJlZnJlc2g9e29uUmVmcmVzaH1cbiAgICAgICAgICAgICAgICBwcm9ncmVzc1ZpZXdPZmZzZXQ9e3Byb3BzLnByb2dyZXNzVmlld09mZnNldH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIHByb3BzLnJlZnJlc2hDb250cm9sXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIEludmFsaWQgcHJvcCB1c2FnZVxuICAgICAgcmV0dXJuIDxTY3JvbGxWaWV3IHsuLi5wcm9wc30gLz47XG4gICAgfVxuICB9O1xuXG4gIF9vbkNlbGxMYXlvdXQoZSwgY2VsbEtleSwgaW5kZXgpIHtcbiAgICBjb25zdCBsYXlvdXQgPSBlLm5hdGl2ZUV2ZW50LmxheW91dDtcbiAgICBjb25zdCBuZXh0ID0ge1xuICAgICAgb2Zmc2V0OiB0aGlzLl9zZWxlY3RPZmZzZXQobGF5b3V0KSxcbiAgICAgIGxlbmd0aDogdGhpcy5fc2VsZWN0TGVuZ3RoKGxheW91dCksXG4gICAgICBpbmRleCxcbiAgICAgIGluTGF5b3V0OiB0cnVlLFxuICAgIH07XG4gICAgY29uc3QgY3VyciA9IHRoaXMuX2ZyYW1lc1tjZWxsS2V5XTtcbiAgICBpZiAoXG4gICAgICAhY3VyciB8fFxuICAgICAgbmV4dC5vZmZzZXQgIT09IGN1cnIub2Zmc2V0IHx8XG4gICAgICBuZXh0Lmxlbmd0aCAhPT0gY3Vyci5sZW5ndGggfHxcbiAgICAgIGluZGV4ICE9PSBjdXJyLmluZGV4XG4gICAgKSB7XG4gICAgICB0aGlzLl90b3RhbENlbGxMZW5ndGggKz0gbmV4dC5sZW5ndGggLSAoY3VyciA/IGN1cnIubGVuZ3RoIDogMCk7XG4gICAgICB0aGlzLl90b3RhbENlbGxzTWVhc3VyZWQgKz0gY3VyciA/IDAgOiAxO1xuICAgICAgdGhpcy5fYXZlcmFnZUNlbGxMZW5ndGggPVxuICAgICAgICB0aGlzLl90b3RhbENlbGxMZW5ndGggLyB0aGlzLl90b3RhbENlbGxzTWVhc3VyZWQ7XG4gICAgICB0aGlzLl9mcmFtZXNbY2VsbEtleV0gPSBuZXh0O1xuICAgICAgdGhpcy5faGlnaGVzdE1lYXN1cmVkRnJhbWVJbmRleCA9IE1hdGgubWF4KFxuICAgICAgICB0aGlzLl9oaWdoZXN0TWVhc3VyZWRGcmFtZUluZGV4LFxuICAgICAgICBpbmRleCxcbiAgICAgICk7XG4gICAgICB0aGlzLl9zY2hlZHVsZUNlbGxzVG9SZW5kZXJVcGRhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZnJhbWVzW2NlbGxLZXldLmluTGF5b3V0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl90cmlnZ2VyUmVtZWFzdXJlRm9yQ2hpbGRMaXN0c0luQ2VsbChjZWxsS2V5KTtcblxuICAgIHRoaXMuX2NvbXB1dGVCbGFua25lc3MoKTtcbiAgICB0aGlzLl91cGRhdGVWaWV3YWJsZUl0ZW1zKHRoaXMucHJvcHMuZGF0YSk7XG4gIH1cblxuICBfb25DZWxsVW5tb3VudCA9IChjZWxsS2V5OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBjdXJyID0gdGhpcy5fZnJhbWVzW2NlbGxLZXldO1xuICAgIGlmIChjdXJyKSB7XG4gICAgICB0aGlzLl9mcmFtZXNbY2VsbEtleV0gPSB7Li4uY3VyciwgaW5MYXlvdXQ6IGZhbHNlfTtcbiAgICB9XG4gIH07XG5cbiAgX3RyaWdnZXJSZW1lYXN1cmVGb3JDaGlsZExpc3RzSW5DZWxsKGNlbGxLZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGNoaWxkTGlzdEtleXMgPSB0aGlzLl9jZWxsS2V5c1RvQ2hpbGRMaXN0S2V5cy5nZXQoY2VsbEtleSk7XG4gICAgaWYgKGNoaWxkTGlzdEtleXMpIHtcbiAgICAgIGZvciAobGV0IGNoaWxkS2V5IG9mIGNoaWxkTGlzdEtleXMpIHtcbiAgICAgICAgY29uc3QgY2hpbGRMaXN0ID0gdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5nZXQoY2hpbGRLZXkpO1xuICAgICAgICBjaGlsZExpc3QgJiZcbiAgICAgICAgICBjaGlsZExpc3QucmVmICYmXG4gICAgICAgICAgY2hpbGRMaXN0LnJlZi5tZWFzdXJlTGF5b3V0UmVsYXRpdmVUb0NvbnRhaW5pbmdMaXN0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbWVhc3VyZUxheW91dFJlbGF0aXZlVG9Db250YWluaW5nTGlzdCgpOiB2b2lkIHtcbiAgICAvLyBUT0RPIChUMzU1NzQ1MzgpOiBmaW5kTm9kZUhhbmRsZSBzb21ldGltZXMgY3Jhc2hlcyB3aXRoIFwiVW5hYmxlIHRvIGZpbmRcbiAgICAvLyBub2RlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnRcIiBkdXJpbmcgc2Nyb2xsaW5nXG4gICAgdHJ5IHtcbiAgICAgIGlmICghdGhpcy5fc2Nyb2xsUmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGFyZSBhc3N1bWluZyB0aGF0IGdldE91dGVybW9zdFBhcmVudExpc3RSZWYoKS5nZXRTY3JvbGxSZWYoKVxuICAgICAgLy8gaXMgYSBub24tbnVsbCByZWZlcmVuY2UgdG8gYSBTY3JvbGxWaWV3XG4gICAgICB0aGlzLl9zY3JvbGxSZWYubWVhc3VyZUxheW91dChcbiAgICAgICAgdGhpcy5jb250ZXh0LmdldE91dGVybW9zdFBhcmVudExpc3RSZWYoKS5nZXRTY3JvbGxSZWYoKSxcbiAgICAgICAgKHgsIHksIHdpZHRoLCBoZWlnaHQpID0+IHtcbiAgICAgICAgICB0aGlzLl9vZmZzZXRGcm9tUGFyZW50VmlydHVhbGl6ZWRMaXN0ID0gdGhpcy5fc2VsZWN0T2Zmc2V0KHt4LCB5fSk7XG4gICAgICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcy5jb250ZW50TGVuZ3RoID0gdGhpcy5fc2VsZWN0TGVuZ3RoKHtcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnN0IHNjcm9sbE1ldHJpY3MgPSB0aGlzLl9jb252ZXJ0UGFyZW50U2Nyb2xsTWV0cmljcyhcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5nZXRTY3JvbGxNZXRyaWNzKCksXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGNvbnN0IG1ldHJpY3NDaGFuZ2VkID1cbiAgICAgICAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aCAhPT0gc2Nyb2xsTWV0cmljcy52aXNpYmxlTGVuZ3RoIHx8XG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLm9mZnNldCAhPT0gc2Nyb2xsTWV0cmljcy5vZmZzZXQ7XG5cbiAgICAgICAgICBpZiAobWV0cmljc0NoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aCA9IHNjcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3Mub2Zmc2V0ID0gc2Nyb2xsTWV0cmljcy5vZmZzZXQ7XG5cbiAgICAgICAgICAgIC8vIElmIG1ldHJpY3Mgb2YgdGhlIHNjcm9sbFZpZXcgY2hhbmdlZCwgdGhlbiB3ZSB0cmlnZ2VyZWQgcmVtZWFzdXJlIGZvciBjaGlsZCBsaXN0XG4gICAgICAgICAgICAvLyB0byBlbnN1cmUgVmlydHVhbGl6ZWRMaXN0IGhhcyB0aGUgcmlnaHQgaW5mb3JtYXRpb24uXG4gICAgICAgICAgICB0aGlzLl9jZWxsS2V5c1RvQ2hpbGRMaXN0S2V5cy5mb3JFYWNoKGNoaWxkTGlzdEtleXMgPT4ge1xuICAgICAgICAgICAgICBpZiAoY2hpbGRMaXN0S2V5cykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoaWxkS2V5IG9mIGNoaWxkTGlzdEtleXMpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTGlzdCA9IHRoaXMuX25lc3RlZENoaWxkTGlzdHMuZ2V0KGNoaWxkS2V5KTtcbiAgICAgICAgICAgICAgICAgIGNoaWxkTGlzdCAmJlxuICAgICAgICAgICAgICAgICAgICBjaGlsZExpc3QucmVmICYmXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkTGlzdC5yZWYubWVhc3VyZUxheW91dFJlbGF0aXZlVG9Db250YWluaW5nTGlzdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgXCJWaXJ0dWFsaXplZExpc3Q6IEVuY291bnRlcmVkIGFuIGVycm9yIHdoaWxlIG1lYXN1cmluZyBhIGxpc3Qnc1wiICtcbiAgICAgICAgICAgICAgJyBvZmZzZXQgZnJvbSBpdHMgY29udGFpbmluZyBWaXJ0dWFsaXplZExpc3QuJyxcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnbWVhc3VyZUxheW91dFJlbGF0aXZlVG9Db250YWluaW5nTGlzdCB0aHJldyBhbiBlcnJvcicsXG4gICAgICAgIGVycm9yLnN0YWNrLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBfb25MYXlvdXQgPSAoZTogT2JqZWN0KSA9PiB7XG4gICAgaWYgKHRoaXMuX2lzTmVzdGVkV2l0aFNhbWVPcmllbnRhdGlvbigpKSB7XG4gICAgICAvLyBOZWVkIHRvIGFkanVzdCBvdXIgc2Nyb2xsIG1ldHJpY3MgdG8gYmUgcmVsYXRpdmUgdG8gb3VyIGNvbnRhaW5pbmdcbiAgICAgIC8vIFZpcnR1YWxpemVkTGlzdCBiZWZvcmUgd2UgY2FuIG1ha2UgY2xhaW1zIGFib3V0IGxpc3QgaXRlbSB2aWV3YWJpbGl0eVxuICAgICAgdGhpcy5tZWFzdXJlTGF5b3V0UmVsYXRpdmVUb0NvbnRhaW5pbmdMaXN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aCA9IHRoaXMuX3NlbGVjdExlbmd0aChcbiAgICAgICAgZS5uYXRpdmVFdmVudC5sYXlvdXQsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLm9uTGF5b3V0ICYmIHRoaXMucHJvcHMub25MYXlvdXQoZSk7XG4gICAgdGhpcy5fc2NoZWR1bGVDZWxsc1RvUmVuZGVyVXBkYXRlKCk7XG4gICAgdGhpcy5fbWF5YmVDYWxsT25FbmRSZWFjaGVkKCk7XG4gIH07XG5cbiAgX29uTGF5b3V0RW1wdHkgPSBlID0+IHtcbiAgICB0aGlzLnByb3BzLm9uTGF5b3V0ICYmIHRoaXMucHJvcHMub25MYXlvdXQoZSk7XG4gIH07XG5cbiAgX2dldEZvb3RlckNlbGxLZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0Q2VsbEtleSgpICsgJy1mb290ZXInO1xuICB9XG5cbiAgX29uTGF5b3V0Rm9vdGVyID0gZSA9PiB7XG4gICAgdGhpcy5fdHJpZ2dlclJlbWVhc3VyZUZvckNoaWxkTGlzdHNJbkNlbGwodGhpcy5fZ2V0Rm9vdGVyQ2VsbEtleSgpKTtcbiAgICB0aGlzLl9mb290ZXJMZW5ndGggPSB0aGlzLl9zZWxlY3RMZW5ndGgoZS5uYXRpdmVFdmVudC5sYXlvdXQpO1xuICB9O1xuXG4gIF9vbkxheW91dEhlYWRlciA9IGUgPT4ge1xuICAgIHRoaXMuX2hlYWRlckxlbmd0aCA9IHRoaXMuX3NlbGVjdExlbmd0aChlLm5hdGl2ZUV2ZW50LmxheW91dCk7XG4gIH07XG5cbiAgX3JlbmRlckRlYnVnT3ZlcmxheSgpIHtcbiAgICBjb25zdCBub3JtYWxpemUgPVxuICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcy52aXNpYmxlTGVuZ3RoIC9cbiAgICAgICh0aGlzLl9zY3JvbGxNZXRyaWNzLmNvbnRlbnRMZW5ndGggfHwgMSk7XG4gICAgY29uc3QgZnJhbWVzSW5MYXlvdXQgPSBbXTtcbiAgICBjb25zdCBpdGVtQ291bnQgPSB0aGlzLnByb3BzLmdldEl0ZW1Db3VudCh0aGlzLnByb3BzLmRhdGEpO1xuICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBpdGVtQ291bnQ7IGlpKyspIHtcbiAgICAgIGNvbnN0IGZyYW1lID0gdGhpcy5fZ2V0RnJhbWVNZXRyaWNzQXBwcm94KGlpKTtcbiAgICAgIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSAoPj0wLjY4LjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIpIFRoaXMgY29tbWVudFxuICAgICAgICogc3VwcHJlc3NlcyBhbiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuNjggd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlXG4gICAgICAgKiBlcnJvciBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbiAgICAgIGlmIChmcmFtZS5pbkxheW91dCkge1xuICAgICAgICBmcmFtZXNJbkxheW91dC5wdXNoKGZyYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgd2luZG93VG9wID0gdGhpcy5fZ2V0RnJhbWVNZXRyaWNzQXBwcm94KHRoaXMuc3RhdGUuZmlyc3QpLm9mZnNldDtcbiAgICBjb25zdCBmcmFtZUxhc3QgPSB0aGlzLl9nZXRGcmFtZU1ldHJpY3NBcHByb3godGhpcy5zdGF0ZS5sYXN0KTtcbiAgICBjb25zdCB3aW5kb3dMZW4gPSBmcmFtZUxhc3Qub2Zmc2V0ICsgZnJhbWVMYXN0Lmxlbmd0aCAtIHdpbmRvd1RvcDtcbiAgICBjb25zdCB2aXNUb3AgPSB0aGlzLl9zY3JvbGxNZXRyaWNzLm9mZnNldDtcbiAgICBjb25zdCB2aXNMZW4gPSB0aGlzLl9zY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGg7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMuZGVidWdPdmVybGF5QmFzZSwgc3R5bGVzLmRlYnVnT3ZlcmxheV19PlxuICAgICAgICB7ZnJhbWVzSW5MYXlvdXQubWFwKChmLCBpaSkgPT4gKFxuICAgICAgICAgIDxWaWV3XG4gICAgICAgICAgICBrZXk9eydmJyArIGlpfVxuICAgICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgICAgc3R5bGVzLmRlYnVnT3ZlcmxheUJhc2UsXG4gICAgICAgICAgICAgIHN0eWxlcy5kZWJ1Z092ZXJsYXlGcmFtZSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRvcDogZi5vZmZzZXQgKiBub3JtYWxpemUsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBmLmxlbmd0aCAqIG5vcm1hbGl6ZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF19XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICAgIDxWaWV3XG4gICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgIHN0eWxlcy5kZWJ1Z092ZXJsYXlCYXNlLFxuICAgICAgICAgICAgc3R5bGVzLmRlYnVnT3ZlcmxheUZyYW1lTGFzdCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdG9wOiB3aW5kb3dUb3AgKiBub3JtYWxpemUsXG4gICAgICAgICAgICAgIGhlaWdodDogd2luZG93TGVuICogbm9ybWFsaXplLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdfVxuICAgICAgICAvPlxuICAgICAgICA8Vmlld1xuICAgICAgICAgIHN0eWxlPXtbXG4gICAgICAgICAgICBzdHlsZXMuZGVidWdPdmVybGF5QmFzZSxcbiAgICAgICAgICAgIHN0eWxlcy5kZWJ1Z092ZXJsYXlGcmFtZVZpcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdG9wOiB2aXNUb3AgKiBub3JtYWxpemUsXG4gICAgICAgICAgICAgIGhlaWdodDogdmlzTGVuICogbm9ybWFsaXplLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdfVxuICAgICAgICAvPlxuICAgICAgPC9WaWV3PlxuICAgICk7XG4gIH1cblxuICBfc2VsZWN0TGVuZ3RoKFxuICAgIG1ldHJpY3M6ICRSZWFkT25seTx7XG4gICAgICBoZWlnaHQ6IG51bWJlcixcbiAgICAgIHdpZHRoOiBudW1iZXIsXG4gICAgICAuLi5cbiAgICB9PixcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gIWhvcml6b250YWxPckRlZmF1bHQodGhpcy5wcm9wcy5ob3Jpem9udGFsKVxuICAgICAgPyBtZXRyaWNzLmhlaWdodFxuICAgICAgOiBtZXRyaWNzLndpZHRoO1xuICB9XG5cbiAgX3NlbGVjdE9mZnNldChcbiAgICBtZXRyaWNzOiAkUmVhZE9ubHk8e1xuICAgICAgeDogbnVtYmVyLFxuICAgICAgeTogbnVtYmVyLFxuICAgICAgLi4uXG4gICAgfT4sXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuICFob3Jpem9udGFsT3JEZWZhdWx0KHRoaXMucHJvcHMuaG9yaXpvbnRhbCkgPyBtZXRyaWNzLnkgOiBtZXRyaWNzLng7XG4gIH1cblxuICBfbWF5YmVDYWxsT25FbmRSZWFjaGVkKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGRhdGEsXG4gICAgICBnZXRJdGVtQ291bnQsXG4gICAgICBvbkVuZFJlYWNoZWQsXG4gICAgICBvbkVuZFJlYWNoZWRUaHJlc2hvbGQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge2NvbnRlbnRMZW5ndGgsIHZpc2libGVMZW5ndGgsIG9mZnNldH0gPSB0aGlzLl9zY3JvbGxNZXRyaWNzO1xuICAgIGNvbnN0IGRpc3RhbmNlRnJvbUVuZCA9IGNvbnRlbnRMZW5ndGggLSB2aXNpYmxlTGVuZ3RoIC0gb2Zmc2V0O1xuICAgIGNvbnN0IHRocmVzaG9sZCA9XG4gICAgICBvbkVuZFJlYWNoZWRUaHJlc2hvbGQgIT0gbnVsbCA/IG9uRW5kUmVhY2hlZFRocmVzaG9sZCAqIHZpc2libGVMZW5ndGggOiAyO1xuICAgIGlmIChcbiAgICAgIG9uRW5kUmVhY2hlZCAmJlxuICAgICAgdGhpcy5zdGF0ZS5sYXN0ID09PSBnZXRJdGVtQ291bnQoZGF0YSkgLSAxICYmXG4gICAgICBkaXN0YW5jZUZyb21FbmQgPCB0aHJlc2hvbGQgJiZcbiAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MuY29udGVudExlbmd0aCAhPT0gdGhpcy5fc2VudEVuZEZvckNvbnRlbnRMZW5ndGhcbiAgICApIHtcbiAgICAgIC8vIE9ubHkgY2FsbCBvbkVuZFJlYWNoZWQgb25jZSBmb3IgYSBnaXZlbiBjb250ZW50IGxlbmd0aFxuICAgICAgdGhpcy5fc2VudEVuZEZvckNvbnRlbnRMZW5ndGggPSB0aGlzLl9zY3JvbGxNZXRyaWNzLmNvbnRlbnRMZW5ndGg7XG4gICAgICBvbkVuZFJlYWNoZWQoe2Rpc3RhbmNlRnJvbUVuZH0pO1xuICAgIH0gZWxzZSBpZiAoZGlzdGFuY2VGcm9tRW5kID4gdGhyZXNob2xkKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciBzY3JvbGxzIGF3YXkgZnJvbSB0aGUgZW5kIGFuZCBiYWNrIGFnYWluIGNhdXNlXG4gICAgICAvLyBhbiBvbkVuZFJlYWNoZWQgdG8gYmUgdHJpZ2dlcmVkIGFnYWluXG4gICAgICB0aGlzLl9zZW50RW5kRm9yQ29udGVudExlbmd0aCA9IDA7XG4gICAgfVxuICB9XG5cbiAgX29uQ29udGVudFNpemVDaGFuZ2UgPSAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHtcbiAgICBpZiAoXG4gICAgICB3aWR0aCA+IDAgJiZcbiAgICAgIGhlaWdodCA+IDAgJiZcbiAgICAgIHRoaXMucHJvcHMuaW5pdGlhbFNjcm9sbEluZGV4ICE9IG51bGwgJiZcbiAgICAgIHRoaXMucHJvcHMuaW5pdGlhbFNjcm9sbEluZGV4ID4gMCAmJlxuICAgICAgIXRoaXMuX2hhc0RvbmVJbml0aWFsU2Nyb2xsXG4gICAgKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5jb250ZW50T2Zmc2V0ID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxUb0luZGV4KHtcbiAgICAgICAgICBhbmltYXRlZDogZmFsc2UsXG4gICAgICAgICAgaW5kZXg6IHRoaXMucHJvcHMuaW5pdGlhbFNjcm9sbEluZGV4LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2hhc0RvbmVJbml0aWFsU2Nyb2xsID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMub25Db250ZW50U2l6ZUNoYW5nZSkge1xuICAgICAgdGhpcy5wcm9wcy5vbkNvbnRlbnRTaXplQ2hhbmdlKHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbiAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLmNvbnRlbnRMZW5ndGggPSB0aGlzLl9zZWxlY3RMZW5ndGgoe2hlaWdodCwgd2lkdGh9KTtcbiAgICB0aGlzLl9zY2hlZHVsZUNlbGxzVG9SZW5kZXJVcGRhdGUoKTtcbiAgICB0aGlzLl9tYXliZUNhbGxPbkVuZFJlYWNoZWQoKTtcbiAgfTtcblxuICAvKiBUcmFuc2xhdGVzIG1ldHJpY3MgZnJvbSBhIHNjcm9sbCBldmVudCBpbiBhIHBhcmVudCBWaXJ0dWFsaXplZExpc3QgaW50b1xuICAgKiBjb29yZGluYXRlcyByZWxhdGl2ZSB0byB0aGUgY2hpbGQgbGlzdC5cbiAgICovXG4gIF9jb252ZXJ0UGFyZW50U2Nyb2xsTWV0cmljcyA9IChtZXRyaWNzOiB7XG4gICAgdmlzaWJsZUxlbmd0aDogbnVtYmVyLFxuICAgIG9mZnNldDogbnVtYmVyLFxuICAgIC4uLlxuICB9KSA9PiB7XG4gICAgLy8gT2Zmc2V0IG9mIHRoZSB0b3Agb2YgdGhlIG5lc3RlZCBsaXN0IHJlbGF0aXZlIHRvIHRoZSB0b3Agb2YgaXRzIHBhcmVudCdzIHZpZXdwb3J0XG4gICAgY29uc3Qgb2Zmc2V0ID0gbWV0cmljcy5vZmZzZXQgLSB0aGlzLl9vZmZzZXRGcm9tUGFyZW50VmlydHVhbGl6ZWRMaXN0O1xuICAgIC8vIENoaWxkJ3MgdmlzaWJsZSBsZW5ndGggaXMgdGhlIHNhbWUgYXMgaXRzIHBhcmVudCdzXG4gICAgY29uc3QgdmlzaWJsZUxlbmd0aCA9IG1ldHJpY3MudmlzaWJsZUxlbmd0aDtcbiAgICBjb25zdCBkT2Zmc2V0ID0gb2Zmc2V0IC0gdGhpcy5fc2Nyb2xsTWV0cmljcy5vZmZzZXQ7XG4gICAgY29uc3QgY29udGVudExlbmd0aCA9IHRoaXMuX3Njcm9sbE1ldHJpY3MuY29udGVudExlbmd0aDtcblxuICAgIHJldHVybiB7XG4gICAgICB2aXNpYmxlTGVuZ3RoLFxuICAgICAgY29udGVudExlbmd0aCxcbiAgICAgIG9mZnNldCxcbiAgICAgIGRPZmZzZXQsXG4gICAgfTtcbiAgfTtcblxuICBfb25TY3JvbGwgPSAoZTogT2JqZWN0KSA9PiB7XG4gICAgdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5mb3JFYWNoKGNoaWxkTGlzdCA9PiB7XG4gICAgICBjaGlsZExpc3QucmVmICYmIGNoaWxkTGlzdC5yZWYuX29uU2Nyb2xsKGUpO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uU2Nyb2xsKSB7XG4gICAgICB0aGlzLnByb3BzLm9uU2Nyb2xsKGUpO1xuICAgIH1cbiAgICBjb25zdCB0aW1lc3RhbXAgPSBlLnRpbWVTdGFtcDtcbiAgICBsZXQgdmlzaWJsZUxlbmd0aCA9IHRoaXMuX3NlbGVjdExlbmd0aChlLm5hdGl2ZUV2ZW50LmxheW91dE1lYXN1cmVtZW50KTtcbiAgICBsZXQgY29udGVudExlbmd0aCA9IHRoaXMuX3NlbGVjdExlbmd0aChlLm5hdGl2ZUV2ZW50LmNvbnRlbnRTaXplKTtcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5fc2VsZWN0T2Zmc2V0KGUubmF0aXZlRXZlbnQuY29udGVudE9mZnNldCk7XG4gICAgbGV0IGRPZmZzZXQgPSBvZmZzZXQgLSB0aGlzLl9zY3JvbGxNZXRyaWNzLm9mZnNldDtcblxuICAgIGlmICh0aGlzLl9pc05lc3RlZFdpdGhTYW1lT3JpZW50YXRpb24oKSkge1xuICAgICAgaWYgKHRoaXMuX3Njcm9sbE1ldHJpY3MuY29udGVudExlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBJZ25vcmUgc2Nyb2xsIGV2ZW50cyB1bnRpbCBvbkxheW91dCBoYXMgYmVlbiBjYWxsZWQgYW5kIHdlXG4gICAgICAgIC8vIGtub3cgb3VyIG9mZnNldCBmcm9tIG91ciBvZmZzZXQgZnJvbSBvdXIgcGFyZW50XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICh7XG4gICAgICAgIHZpc2libGVMZW5ndGgsXG4gICAgICAgIGNvbnRlbnRMZW5ndGgsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgZE9mZnNldCxcbiAgICAgIH0gPSB0aGlzLl9jb252ZXJ0UGFyZW50U2Nyb2xsTWV0cmljcyh7XG4gICAgICAgIHZpc2libGVMZW5ndGgsXG4gICAgICAgIG9mZnNldCxcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBjb25zdCBkdCA9IHRoaXMuX3Njcm9sbE1ldHJpY3MudGltZXN0YW1wXG4gICAgICA/IE1hdGgubWF4KDEsIHRpbWVzdGFtcCAtIHRoaXMuX3Njcm9sbE1ldHJpY3MudGltZXN0YW1wKVxuICAgICAgOiAxO1xuICAgIGNvbnN0IHZlbG9jaXR5ID0gZE9mZnNldCAvIGR0O1xuXG4gICAgaWYgKFxuICAgICAgZHQgPiA1MDAgJiZcbiAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MuZHQgPiA1MDAgJiZcbiAgICAgIGNvbnRlbnRMZW5ndGggPiA1ICogdmlzaWJsZUxlbmd0aCAmJlxuICAgICAgIXRoaXMuX2hhc1dhcm5lZC5wZXJmXG4gICAgKSB7XG4gICAgICBpbmZvTG9nKFxuICAgICAgICAnVmlydHVhbGl6ZWRMaXN0OiBZb3UgaGF2ZSBhIGxhcmdlIGxpc3QgdGhhdCBpcyBzbG93IHRvIHVwZGF0ZSAtIG1ha2Ugc3VyZSB5b3VyICcgK1xuICAgICAgICAgICdyZW5kZXJJdGVtIGZ1bmN0aW9uIHJlbmRlcnMgY29tcG9uZW50cyB0aGF0IGZvbGxvdyBSZWFjdCBwZXJmb3JtYW5jZSBiZXN0IHByYWN0aWNlcyAnICtcbiAgICAgICAgICAnbGlrZSBQdXJlQ29tcG9uZW50LCBzaG91bGRDb21wb25lbnRVcGRhdGUsIGV0Yy4nLFxuICAgICAgICB7ZHQsIHByZXZEdDogdGhpcy5fc2Nyb2xsTWV0cmljcy5kdCwgY29udGVudExlbmd0aH0sXG4gICAgICApO1xuICAgICAgdGhpcy5faGFzV2FybmVkLnBlcmYgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLl9zY3JvbGxNZXRyaWNzID0ge1xuICAgICAgY29udGVudExlbmd0aCxcbiAgICAgIGR0LFxuICAgICAgZE9mZnNldCxcbiAgICAgIG9mZnNldCxcbiAgICAgIHRpbWVzdGFtcCxcbiAgICAgIHZlbG9jaXR5LFxuICAgICAgdmlzaWJsZUxlbmd0aCxcbiAgICB9O1xuICAgIHRoaXMuX3VwZGF0ZVZpZXdhYmxlSXRlbXModGhpcy5wcm9wcy5kYXRhKTtcbiAgICBpZiAoIXRoaXMucHJvcHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbWF5YmVDYWxsT25FbmRSZWFjaGVkKCk7XG4gICAgaWYgKHZlbG9jaXR5ICE9PSAwKSB7XG4gICAgICB0aGlzLl9maWxsUmF0ZUhlbHBlci5hY3RpdmF0ZSgpO1xuICAgIH1cbiAgICB0aGlzLl9jb21wdXRlQmxhbmtuZXNzKCk7XG4gICAgdGhpcy5fc2NoZWR1bGVDZWxsc1RvUmVuZGVyVXBkYXRlKCk7XG4gIH07XG5cbiAgX3NjaGVkdWxlQ2VsbHNUb1JlbmRlclVwZGF0ZSgpIHtcbiAgICBjb25zdCB7Zmlyc3QsIGxhc3R9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7b2Zmc2V0LCB2aXNpYmxlTGVuZ3RoLCB2ZWxvY2l0eX0gPSB0aGlzLl9zY3JvbGxNZXRyaWNzO1xuICAgIGNvbnN0IGl0ZW1Db3VudCA9IHRoaXMucHJvcHMuZ2V0SXRlbUNvdW50KHRoaXMucHJvcHMuZGF0YSk7XG4gICAgbGV0IGhpUHJpID0gZmFsc2U7XG4gICAgY29uc3Qgb25FbmRSZWFjaGVkVGhyZXNob2xkID0gb25FbmRSZWFjaGVkVGhyZXNob2xkT3JEZWZhdWx0KFxuICAgICAgdGhpcy5wcm9wcy5vbkVuZFJlYWNoZWRUaHJlc2hvbGQsXG4gICAgKTtcbiAgICBjb25zdCBzY3JvbGxpbmdUaHJlc2hvbGQgPSAob25FbmRSZWFjaGVkVGhyZXNob2xkICogdmlzaWJsZUxlbmd0aCkgLyAyO1xuICAgIC8vIE1hcmsgYXMgaGlnaCBwcmlvcml0eSBpZiB3ZSdyZSBjbG9zZSB0byB0aGUgc3RhcnQgb2YgdGhlIGZpcnN0IGl0ZW1cbiAgICAvLyBCdXQgb25seSBpZiB0aGVyZSBhcmUgaXRlbXMgYmVmb3JlIHRoZSBmaXJzdCByZW5kZXJlZCBpdGVtXG4gICAgaWYgKGZpcnN0ID4gMCkge1xuICAgICAgY29uc3QgZGlzdFRvcCA9IG9mZnNldCAtIHRoaXMuX2dldEZyYW1lTWV0cmljc0FwcHJveChmaXJzdCkub2Zmc2V0O1xuICAgICAgaGlQcmkgPVxuICAgICAgICBoaVByaSB8fCBkaXN0VG9wIDwgMCB8fCAodmVsb2NpdHkgPCAtMiAmJiBkaXN0VG9wIDwgc2Nyb2xsaW5nVGhyZXNob2xkKTtcbiAgICB9XG4gICAgLy8gTWFyayBhcyBoaWdoIHByaW9yaXR5IGlmIHdlJ3JlIGNsb3NlIHRvIHRoZSBlbmQgb2YgdGhlIGxhc3QgaXRlbVxuICAgIC8vIEJ1dCBvbmx5IGlmIHRoZXJlIGFyZSBpdGVtcyBhZnRlciB0aGUgbGFzdCByZW5kZXJlZCBpdGVtXG4gICAgaWYgKGxhc3QgPCBpdGVtQ291bnQgLSAxKSB7XG4gICAgICBjb25zdCBkaXN0Qm90dG9tID1cbiAgICAgICAgdGhpcy5fZ2V0RnJhbWVNZXRyaWNzQXBwcm94KGxhc3QpLm9mZnNldCAtIChvZmZzZXQgKyB2aXNpYmxlTGVuZ3RoKTtcbiAgICAgIGhpUHJpID1cbiAgICAgICAgaGlQcmkgfHxcbiAgICAgICAgZGlzdEJvdHRvbSA8IDAgfHxcbiAgICAgICAgKHZlbG9jaXR5ID4gMiAmJiBkaXN0Qm90dG9tIDwgc2Nyb2xsaW5nVGhyZXNob2xkKTtcbiAgICB9XG4gICAgLy8gT25seSB0cmlnZ2VyIGhpZ2gtcHJpb3JpdHkgdXBkYXRlcyBpZiB3ZSd2ZSBhY3R1YWxseSByZW5kZXJlZCBjZWxscyxcbiAgICAvLyBhbmQgd2l0aCB0aGF0IHNpemUgZXN0aW1hdGUsIGFjY3VyYXRlbHkgY29tcHV0ZSBob3cgbWFueSBjZWxscyB3ZSBzaG91bGQgcmVuZGVyLlxuICAgIC8vIE90aGVyd2lzZSwgaXQgd291bGQganVzdCByZW5kZXIgYXMgbWFueSBjZWxscyBhcyBpdCBjYW4gKG9mIHplcm8gZGltZW5zaW9uKSxcbiAgICAvLyBlYWNoIHRpbWUgdGhyb3VnaCBhdHRlbXB0aW5nIHRvIHJlbmRlciBtb3JlIChsaW1pdGVkIGJ5IG1heFRvUmVuZGVyUGVyQmF0Y2gpLFxuICAgIC8vIHN0YXJ2aW5nIHRoZSByZW5kZXJlciBmcm9tIGFjdHVhbGx5IGxheWluZyBvdXQgdGhlIG9iamVjdHMgYW5kIGNvbXB1dGluZyBfYXZlcmFnZUNlbGxMZW5ndGguXG4gICAgLy8gSWYgdGhpcyBpcyB0cmlnZ2VyZWQgaW4gYW4gYGNvbXBvbmVudERpZFVwZGF0ZWAgZm9sbG93ZWQgYnkgYSBoaVByaSBjZWxsVG9SZW5kZXJVcGRhdGVcbiAgICAvLyBXZSBzaG91bGRuJ3QgZG8gYW5vdGhlciBoaXByaSBjZWxsVG9SZW5kZXJVcGRhdGVcbiAgICBpZiAoXG4gICAgICBoaVByaSAmJlxuICAgICAgKHRoaXMuX2F2ZXJhZ2VDZWxsTGVuZ3RoIHx8IHRoaXMucHJvcHMuZ2V0SXRlbUxheW91dCkgJiZcbiAgICAgICF0aGlzLl9oaVByaUluUHJvZ3Jlc3NcbiAgICApIHtcbiAgICAgIHRoaXMuX2hpUHJpSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAvLyBEb24ndCB3b3JyeSBhYm91dCBpbnRlcmFjdGlvbnMgd2hlbiBzY3JvbGxpbmcgcXVpY2tseTsgZm9jdXMgb24gZmlsbGluZyBjb250ZW50IGFzIGZhc3RcbiAgICAgIC8vIGFzIHBvc3NpYmxlLlxuICAgICAgdGhpcy5fdXBkYXRlQ2VsbHNUb1JlbmRlckJhdGNoZXIuZGlzcG9zZSh7YWJvcnQ6IHRydWV9KTtcbiAgICAgIHRoaXMuX3VwZGF0ZUNlbGxzVG9SZW5kZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdXBkYXRlQ2VsbHNUb1JlbmRlckJhdGNoZXIuc2NoZWR1bGUoKTtcbiAgICB9XG4gIH1cblxuICBfb25TY3JvbGxCZWdpbkRyYWcgPSAoZSk6IHZvaWQgPT4ge1xuICAgIHRoaXMuX25lc3RlZENoaWxkTGlzdHMuZm9yRWFjaChjaGlsZExpc3QgPT4ge1xuICAgICAgY2hpbGRMaXN0LnJlZiAmJiBjaGlsZExpc3QucmVmLl9vblNjcm9sbEJlZ2luRHJhZyhlKTtcbiAgICB9KTtcbiAgICB0aGlzLl92aWV3YWJpbGl0eVR1cGxlcy5mb3JFYWNoKHR1cGxlID0+IHtcbiAgICAgIHR1cGxlLnZpZXdhYmlsaXR5SGVscGVyLnJlY29yZEludGVyYWN0aW9uKCk7XG4gICAgfSk7XG4gICAgdGhpcy5faGFzSW50ZXJhY3RlZCA9IHRydWU7XG4gICAgdGhpcy5wcm9wcy5vblNjcm9sbEJlZ2luRHJhZyAmJiB0aGlzLnByb3BzLm9uU2Nyb2xsQmVnaW5EcmFnKGUpO1xuICB9O1xuXG4gIF9vblNjcm9sbEVuZERyYWcgPSAoZSk6IHZvaWQgPT4ge1xuICAgIHRoaXMuX25lc3RlZENoaWxkTGlzdHMuZm9yRWFjaChjaGlsZExpc3QgPT4ge1xuICAgICAgY2hpbGRMaXN0LnJlZiAmJiBjaGlsZExpc3QucmVmLl9vblNjcm9sbEVuZERyYWcoZSk7XG4gICAgfSk7XG4gICAgY29uc3Qge3ZlbG9jaXR5fSA9IGUubmF0aXZlRXZlbnQ7XG4gICAgaWYgKHZlbG9jaXR5KSB7XG4gICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLnZlbG9jaXR5ID0gdGhpcy5fc2VsZWN0T2Zmc2V0KHZlbG9jaXR5KTtcbiAgICB9XG4gICAgdGhpcy5fY29tcHV0ZUJsYW5rbmVzcygpO1xuICAgIHRoaXMucHJvcHMub25TY3JvbGxFbmREcmFnICYmIHRoaXMucHJvcHMub25TY3JvbGxFbmREcmFnKGUpO1xuICB9O1xuXG4gIF9vbk1vbWVudHVtU2Nyb2xsQmVnaW4gPSAoZSk6IHZvaWQgPT4ge1xuICAgIHRoaXMuX25lc3RlZENoaWxkTGlzdHMuZm9yRWFjaChjaGlsZExpc3QgPT4ge1xuICAgICAgY2hpbGRMaXN0LnJlZiAmJiBjaGlsZExpc3QucmVmLl9vbk1vbWVudHVtU2Nyb2xsQmVnaW4oZSk7XG4gICAgfSk7XG4gICAgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsQmVnaW4gJiYgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsQmVnaW4oZSk7XG4gIH07XG5cbiAgX29uTW9tZW50dW1TY3JvbGxFbmQgPSAoZSk6IHZvaWQgPT4ge1xuICAgIHRoaXMuX25lc3RlZENoaWxkTGlzdHMuZm9yRWFjaChjaGlsZExpc3QgPT4ge1xuICAgICAgY2hpbGRMaXN0LnJlZiAmJiBjaGlsZExpc3QucmVmLl9vbk1vbWVudHVtU2Nyb2xsRW5kKGUpO1xuICAgIH0pO1xuICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MudmVsb2NpdHkgPSAwO1xuICAgIHRoaXMuX2NvbXB1dGVCbGFua25lc3MoKTtcbiAgICB0aGlzLnByb3BzLm9uTW9tZW50dW1TY3JvbGxFbmQgJiYgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsRW5kKGUpO1xuICB9O1xuXG4gIF91cGRhdGVDZWxsc1RvUmVuZGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGRhdGEsXG4gICAgICBnZXRJdGVtQ291bnQsXG4gICAgICBvbkVuZFJlYWNoZWRUaHJlc2hvbGQ6IF9vbkVuZFJlYWNoZWRUaHJlc2hvbGQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgb25FbmRSZWFjaGVkVGhyZXNob2xkID0gb25FbmRSZWFjaGVkVGhyZXNob2xkT3JEZWZhdWx0KFxuICAgICAgX29uRW5kUmVhY2hlZFRocmVzaG9sZCxcbiAgICApO1xuICAgIGNvbnN0IGlzVmlydHVhbGl6YXRpb25EaXNhYmxlZCA9IHRoaXMuX2lzVmlydHVhbGl6YXRpb25EaXNhYmxlZCgpO1xuICAgIHRoaXMuX3VwZGF0ZVZpZXdhYmxlSXRlbXMoZGF0YSk7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4ge1xuICAgICAgbGV0IG5ld1N0YXRlO1xuICAgICAgY29uc3Qge2NvbnRlbnRMZW5ndGgsIG9mZnNldCwgdmlzaWJsZUxlbmd0aH0gPSB0aGlzLl9zY3JvbGxNZXRyaWNzO1xuICAgICAgaWYgKCFpc1ZpcnR1YWxpemF0aW9uRGlzYWJsZWQpIHtcbiAgICAgICAgLy8gSWYgd2UgcnVuIHRoaXMgd2l0aCBib2d1cyBkYXRhLCB3ZSdsbCBmb3JjZS1yZW5kZXIgd2luZG93IHtmaXJzdDogMCwgbGFzdDogMH0sXG4gICAgICAgIC8vIGFuZCB3aXBlIG91dCB0aGUgaW5pdGlhbE51bVRvUmVuZGVyIHJlbmRlcmVkIGVsZW1lbnRzLlxuICAgICAgICAvLyBTbyBsZXQncyB3YWl0IHVudGlsIHRoZSBzY3JvbGwgdmlldyBtZXRyaWNzIGhhdmUgYmVlbiBzZXQgdXAuIEFuZCB1bnRpbCB0aGVuLFxuICAgICAgICAvLyB3ZSB3aWxsIHRydXN0IHRoZSBpbml0aWFsTnVtVG9SZW5kZXIgc3VnZ2VzdGlvblxuICAgICAgICBpZiAodmlzaWJsZUxlbmd0aCA+IDAgJiYgY29udGVudExlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbm9uLXplcm8gaW5pdGlhbFNjcm9sbEluZGV4IGFuZCBydW4gdGhpcyBiZWZvcmUgd2UndmUgc2Nyb2xsZWQsXG4gICAgICAgICAgLy8gd2UnbGwgd2lwZSBvdXQgdGhlIGluaXRpYWxOdW1Ub1JlbmRlciByZW5kZXJlZCBlbGVtZW50cyBzdGFydGluZyBhdCBpbml0aWFsU2Nyb2xsSW5kZXguXG4gICAgICAgICAgLy8gU28gbGV0J3Mgd2FpdCB1bnRpbCB3ZSd2ZSBzY3JvbGxlZCB0aGUgdmlldyB0byB0aGUgcmlnaHQgcGxhY2UuIEFuZCB1bnRpbCB0aGVuLFxuICAgICAgICAgIC8vIHdlIHdpbGwgdHJ1c3QgdGhlIGluaXRpYWxTY3JvbGxJbmRleCBzdWdnZXN0aW9uLlxuICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5pbml0aWFsU2Nyb2xsSW5kZXggfHwgdGhpcy5fc2Nyb2xsTWV0cmljcy5vZmZzZXQpIHtcbiAgICAgICAgICAgIG5ld1N0YXRlID0gY29tcHV0ZVdpbmRvd2VkUmVuZGVyTGltaXRzKFxuICAgICAgICAgICAgICB0aGlzLnByb3BzLmRhdGEsXG4gICAgICAgICAgICAgIHRoaXMucHJvcHMuZ2V0SXRlbUNvdW50LFxuICAgICAgICAgICAgICBtYXhUb1JlbmRlclBlckJhdGNoT3JEZWZhdWx0KHRoaXMucHJvcHMubWF4VG9SZW5kZXJQZXJCYXRjaCksXG4gICAgICAgICAgICAgIHdpbmRvd1NpemVPckRlZmF1bHQodGhpcy5wcm9wcy53aW5kb3dTaXplKSxcbiAgICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICAgIHRoaXMuX2dldEZyYW1lTWV0cmljc0FwcHJveCxcbiAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBkaXN0YW5jZUZyb21FbmQgPSBjb250ZW50TGVuZ3RoIC0gdmlzaWJsZUxlbmd0aCAtIG9mZnNldDtcbiAgICAgICAgY29uc3QgcmVuZGVyQWhlYWQgPVxuICAgICAgICAgIGRpc3RhbmNlRnJvbUVuZCA8IG9uRW5kUmVhY2hlZFRocmVzaG9sZCAqIHZpc2libGVMZW5ndGhcbiAgICAgICAgICAgID8gbWF4VG9SZW5kZXJQZXJCYXRjaE9yRGVmYXVsdCh0aGlzLnByb3BzLm1heFRvUmVuZGVyUGVyQmF0Y2gpXG4gICAgICAgICAgICA6IDA7XG4gICAgICAgIG5ld1N0YXRlID0ge1xuICAgICAgICAgIGZpcnN0OiAwLFxuICAgICAgICAgIGxhc3Q6IE1hdGgubWluKHN0YXRlLmxhc3QgKyByZW5kZXJBaGVhZCwgZ2V0SXRlbUNvdW50KGRhdGEpIC0gMSksXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAobmV3U3RhdGUgJiYgdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5zaXplID4gMCkge1xuICAgICAgICBjb25zdCBuZXdGaXJzdCA9IG5ld1N0YXRlLmZpcnN0O1xuICAgICAgICBjb25zdCBuZXdMYXN0ID0gbmV3U3RhdGUubGFzdDtcbiAgICAgICAgLy8gSWYgc29tZSBjZWxsIGluIHRoZSBuZXcgc3RhdGUgaGFzIGEgY2hpbGQgbGlzdCBpbiBpdCwgd2Ugc2hvdWxkIG9ubHkgcmVuZGVyXG4gICAgICAgIC8vIHVwIHRocm91Z2ggdGhhdCBpdGVtLCBzbyB0aGF0IHdlIGdpdmUgdGhhdCBsaXN0IGEgY2hhbmNlIHRvIHJlbmRlci5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIHRoZXJlJ3MgY2h1cm4gZnJvbSBtdWx0aXBsZSBjaGlsZCBsaXN0cyBtb3VudGluZyBhbmQgdW4tbW91bnRpbmdcbiAgICAgICAgLy8gdGhlaXIgaXRlbXMuXG4gICAgICAgIGZvciAobGV0IGlpID0gbmV3Rmlyc3Q7IGlpIDw9IG5ld0xhc3Q7IGlpKyspIHtcbiAgICAgICAgICBjb25zdCBjZWxsS2V5Rm9ySW5kZXggPSB0aGlzLl9pbmRpY2VzVG9LZXlzLmdldChpaSk7XG4gICAgICAgICAgY29uc3QgY2hpbGRMaXN0S2V5cyA9XG4gICAgICAgICAgICBjZWxsS2V5Rm9ySW5kZXggJiZcbiAgICAgICAgICAgIHRoaXMuX2NlbGxLZXlzVG9DaGlsZExpc3RLZXlzLmdldChjZWxsS2V5Rm9ySW5kZXgpO1xuICAgICAgICAgIGlmICghY2hpbGRMaXN0S2V5cykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBzb21lQ2hpbGRIYXNNb3JlID0gZmFsc2U7XG4gICAgICAgICAgLy8gRm9yIGVhY2ggY2VsbCwgbmVlZCB0byBjaGVjayB3aGV0aGVyIGFueSBjaGlsZCBsaXN0IGluIGl0IGhhcyBtb3JlIGVsZW1lbnRzIHRvIHJlbmRlclxuICAgICAgICAgIGZvciAobGV0IGNoaWxkS2V5IG9mIGNoaWxkTGlzdEtleXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkTGlzdCA9IHRoaXMuX25lc3RlZENoaWxkTGlzdHMuZ2V0KGNoaWxkS2V5KTtcbiAgICAgICAgICAgIGlmIChjaGlsZExpc3QgJiYgY2hpbGRMaXN0LnJlZiAmJiBjaGlsZExpc3QucmVmLmhhc01vcmUoKSkge1xuICAgICAgICAgICAgICBzb21lQ2hpbGRIYXNNb3JlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzb21lQ2hpbGRIYXNNb3JlKSB7XG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gICAgICAgICAgICBuZXdTdGF0ZS5sYXN0ID0gaWk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgbmV3U3RhdGUgIT0gbnVsbCAmJlxuICAgICAgICBuZXdTdGF0ZS5maXJzdCA9PT0gc3RhdGUuZmlyc3QgJiZcbiAgICAgICAgbmV3U3RhdGUubGFzdCA9PT0gc3RhdGUubGFzdFxuICAgICAgKSB7XG4gICAgICAgIG5ld1N0YXRlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9KTtcbiAgfTtcblxuICBfY3JlYXRlVmlld1Rva2VuID0gKGluZGV4OiBudW1iZXIsIGlzVmlld2FibGU6IGJvb2xlYW4pID0+IHtcbiAgICBjb25zdCB7ZGF0YSwgZ2V0SXRlbX0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGl0ZW0gPSBnZXRJdGVtKGRhdGEsIGluZGV4KTtcbiAgICByZXR1cm4ge2luZGV4LCBpdGVtLCBrZXk6IHRoaXMuX2tleUV4dHJhY3RvcihpdGVtLCBpbmRleCksIGlzVmlld2FibGV9O1xuICB9O1xuXG4gIF9nZXRGcmFtZU1ldHJpY3NBcHByb3ggPSAoXG4gICAgaW5kZXg6IG51bWJlcixcbiAgKToge1xuICAgIGxlbmd0aDogbnVtYmVyLFxuICAgIG9mZnNldDogbnVtYmVyLFxuICAgIC4uLlxuICB9ID0+IHtcbiAgICBjb25zdCBmcmFtZSA9IHRoaXMuX2dldEZyYW1lTWV0cmljcyhpbmRleCk7XG4gICAgaWYgKGZyYW1lICYmIGZyYW1lLmluZGV4ID09PSBpbmRleCkge1xuICAgICAgLy8gY2hlY2sgZm9yIGludmFsaWQgZnJhbWVzIGR1ZSB0byByb3cgcmUtb3JkZXJpbmdcbiAgICAgIHJldHVybiBmcmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qge2dldEl0ZW1MYXlvdXR9ID0gdGhpcy5wcm9wcztcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgIWdldEl0ZW1MYXlvdXQsXG4gICAgICAgICdTaG91bGQgbm90IGhhdmUgdG8gZXN0aW1hdGUgZnJhbWVzIHdoZW4gYSBtZWFzdXJlbWVudCBtZXRyaWNzIGZ1bmN0aW9uIGlzIHByb3ZpZGVkJyxcbiAgICAgICk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZW5ndGg6IHRoaXMuX2F2ZXJhZ2VDZWxsTGVuZ3RoLFxuICAgICAgICBvZmZzZXQ6IHRoaXMuX2F2ZXJhZ2VDZWxsTGVuZ3RoICogaW5kZXgsXG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICBfZ2V0RnJhbWVNZXRyaWNzID0gKFxuICAgIGluZGV4OiBudW1iZXIsXG4gICk6ID97XG4gICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBpbkxheW91dD86IGJvb2xlYW4sXG4gICAgLi4uXG4gIH0gPT4ge1xuICAgIGNvbnN0IHtkYXRhLCBnZXRJdGVtLCBnZXRJdGVtQ291bnQsIGdldEl0ZW1MYXlvdXR9ID0gdGhpcy5wcm9wcztcbiAgICBpbnZhcmlhbnQoXG4gICAgICBnZXRJdGVtQ291bnQoZGF0YSkgPiBpbmRleCxcbiAgICAgICdUcmllZCB0byBnZXQgZnJhbWUgZm9yIG91dCBvZiByYW5nZSBpbmRleCAnICsgaW5kZXgsXG4gICAgKTtcbiAgICBjb25zdCBpdGVtID0gZ2V0SXRlbShkYXRhLCBpbmRleCk7XG4gICAgbGV0IGZyYW1lID0gaXRlbSAmJiB0aGlzLl9mcmFtZXNbdGhpcy5fa2V5RXh0cmFjdG9yKGl0ZW0sIGluZGV4KV07XG4gICAgaWYgKCFmcmFtZSB8fCBmcmFtZS5pbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgIGlmIChnZXRJdGVtTGF5b3V0KSB7XG4gICAgICAgIGZyYW1lID0gZ2V0SXRlbUxheW91dChkYXRhLCBpbmRleCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSAoPj0wLjYzLjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIpIFRoaXMgY29tbWVudFxuICAgICAqIHN1cHByZXNzZXMgYW4gZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjYzIHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvclxuICAgICAqIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgIHJldHVybiBmcmFtZTtcbiAgfTtcblxuICBfdXBkYXRlVmlld2FibGVJdGVtcyhkYXRhOiBhbnkpIHtcbiAgICBjb25zdCB7Z2V0SXRlbUNvdW50fSA9IHRoaXMucHJvcHM7XG5cbiAgICB0aGlzLl92aWV3YWJpbGl0eVR1cGxlcy5mb3JFYWNoKHR1cGxlID0+IHtcbiAgICAgIHR1cGxlLnZpZXdhYmlsaXR5SGVscGVyLm9uVXBkYXRlKFxuICAgICAgICBnZXRJdGVtQ291bnQoZGF0YSksXG4gICAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3Mub2Zmc2V0LFxuICAgICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGgsXG4gICAgICAgIHRoaXMuX2dldEZyYW1lTWV0cmljcyxcbiAgICAgICAgdGhpcy5fY3JlYXRlVmlld1Rva2VuLFxuICAgICAgICB0dXBsZS5vblZpZXdhYmxlSXRlbXNDaGFuZ2VkLFxuICAgICAgICB0aGlzLnN0YXRlLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuXG50eXBlIENlbGxSZW5kZXJlclByb3BzID0ge1xuICBDZWxsUmVuZGVyZXJDb21wb25lbnQ/OiA/UmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+LFxuICBJdGVtU2VwYXJhdG9yQ29tcG9uZW50OiA/UmVhY3QuQ29tcG9uZW50VHlwZTxcbiAgICBhbnkgfCB7aGlnaGxpZ2h0ZWQ6IGJvb2xlYW4sIGxlYWRpbmdJdGVtOiA/SXRlbX0sXG4gID4sXG4gIGNlbGxLZXk6IHN0cmluZyxcbiAgZmlsbFJhdGVIZWxwZXI6IEZpbGxSYXRlSGVscGVyLFxuICBob3Jpem9udGFsOiA/Ym9vbGVhbixcbiAgaW5kZXg6IG51bWJlcixcbiAgaW52ZXJzaW9uU3R5bGU6IFZpZXdTdHlsZVByb3AsXG4gIGl0ZW06IEl0ZW0sXG4gIC8vIFRoaXMgaXMgZXh0cmFjdGVkIGJ5IFNjcm9sbFZpZXdTdGlja3lIZWFkZXJcbiAgb25MYXlvdXQ6IChldmVudDogT2JqZWN0KSA9PiB2b2lkLFxuICBvblVubW91bnQ6IChjZWxsS2V5OiBzdHJpbmcpID0+IHZvaWQsXG4gIG9uVXBkYXRlU2VwYXJhdG9yczogKGNlbGxLZXlzOiBBcnJheTw/c3RyaW5nPiwgcHJvcHM6IE9iamVjdCkgPT4gdm9pZCxcbiAgcGFyZW50UHJvcHM6IHtcbiAgICAvLyBlLmcuIGhlaWdodCwgeSxcbiAgICBnZXRJdGVtTGF5b3V0PzogKFxuICAgICAgZGF0YTogYW55LFxuICAgICAgaW5kZXg6IG51bWJlcixcbiAgICApID0+IHtcbiAgICAgIGxlbmd0aDogbnVtYmVyLFxuICAgICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgICBpbmRleDogbnVtYmVyLFxuICAgICAgLi4uXG4gICAgfSxcbiAgICByZW5kZXJJdGVtPzogP1JlbmRlckl0ZW1UeXBlPEl0ZW0+LFxuICAgIExpc3RJdGVtQ29tcG9uZW50PzogPyhSZWFjdC5Db21wb25lbnRUeXBlPGFueT4gfCBSZWFjdC5FbGVtZW50PGFueT4pLFxuICAgIC4uLlxuICB9LFxuICBwcmV2Q2VsbEtleTogP3N0cmluZyxcbiAgLi4uXG59O1xuXG50eXBlIENlbGxSZW5kZXJlclN0YXRlID0ge1xuICBzZXBhcmF0b3JQcm9wczogJFJlYWRPbmx5PHt8XG4gICAgaGlnaGxpZ2h0ZWQ6IGJvb2xlYW4sXG4gICAgbGVhZGluZ0l0ZW06ID9JdGVtLFxuICB8fT4sXG4gIC4uLlxufTtcblxuY2xhc3MgQ2VsbFJlbmRlcmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFxuICBDZWxsUmVuZGVyZXJQcm9wcyxcbiAgQ2VsbFJlbmRlcmVyU3RhdGUsXG4+IHtcbiAgc3RhdGUgPSB7XG4gICAgc2VwYXJhdG9yUHJvcHM6IHtcbiAgICAgIGhpZ2hsaWdodGVkOiBmYWxzZSxcbiAgICAgIGxlYWRpbmdJdGVtOiB0aGlzLnByb3BzLml0ZW0sXG4gICAgfSxcbiAgfTtcblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgIHByb3BzOiBDZWxsUmVuZGVyZXJQcm9wcyxcbiAgICBwcmV2U3RhdGU6IENlbGxSZW5kZXJlclN0YXRlLFxuICApOiA/Q2VsbFJlbmRlcmVyU3RhdGUge1xuICAgIHJldHVybiB7XG4gICAgICBzZXBhcmF0b3JQcm9wczoge1xuICAgICAgICAuLi5wcmV2U3RhdGUuc2VwYXJhdG9yUHJvcHMsXG4gICAgICAgIGxlYWRpbmdJdGVtOiBwcm9wcy5pdGVtLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgLy8gVE9ETzogY29uc2lkZXIgZmFjdG9yaW5nIHNlcGFyYXRvciBzdHVmZiBvdXQgb2YgVmlydHVhbGl6ZWRMaXN0IGludG8gRmxhdExpc3Qgc2luY2UgaXQncyBub3RcbiAgLy8gcmV1c2VkIGJ5IFNlY3Rpb25MaXN0IGFuZCB3ZSBjYW4ga2VlcCBWaXJ0dWFsaXplZExpc3Qgc2ltcGxlci5cbiAgX3NlcGFyYXRvcnMgPSB7XG4gICAgaGlnaGxpZ2h0OiAoKSA9PiB7XG4gICAgICBjb25zdCB7Y2VsbEtleSwgcHJldkNlbGxLZXl9ID0gdGhpcy5wcm9wcztcbiAgICAgIHRoaXMucHJvcHMub25VcGRhdGVTZXBhcmF0b3JzKFtjZWxsS2V5LCBwcmV2Q2VsbEtleV0sIHtcbiAgICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVuaGlnaGxpZ2h0OiAoKSA9PiB7XG4gICAgICBjb25zdCB7Y2VsbEtleSwgcHJldkNlbGxLZXl9ID0gdGhpcy5wcm9wcztcbiAgICAgIHRoaXMucHJvcHMub25VcGRhdGVTZXBhcmF0b3JzKFtjZWxsS2V5LCBwcmV2Q2VsbEtleV0sIHtcbiAgICAgICAgaGlnaGxpZ2h0ZWQ6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICB1cGRhdGVQcm9wczogKHNlbGVjdDogJ2xlYWRpbmcnIHwgJ3RyYWlsaW5nJywgbmV3UHJvcHM6IE9iamVjdCkgPT4ge1xuICAgICAgY29uc3Qge2NlbGxLZXksIHByZXZDZWxsS2V5fSA9IHRoaXMucHJvcHM7XG4gICAgICB0aGlzLnByb3BzLm9uVXBkYXRlU2VwYXJhdG9ycyhcbiAgICAgICAgW3NlbGVjdCA9PT0gJ2xlYWRpbmcnID8gcHJldkNlbGxLZXkgOiBjZWxsS2V5XSxcbiAgICAgICAgbmV3UHJvcHMsXG4gICAgICApO1xuICAgIH0sXG4gIH07XG5cbiAgdXBkYXRlU2VwYXJhdG9yUHJvcHMobmV3UHJvcHM6IE9iamVjdCkge1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4gKHtcbiAgICAgIHNlcGFyYXRvclByb3BzOiB7Li4uc3RhdGUuc2VwYXJhdG9yUHJvcHMsIC4uLm5ld1Byb3BzfSxcbiAgICB9KSk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLm9uVW5tb3VudCh0aGlzLnByb3BzLmNlbGxLZXkpO1xuICB9XG5cbiAgX3JlbmRlckVsZW1lbnQocmVuZGVySXRlbSwgTGlzdEl0ZW1Db21wb25lbnQsIGl0ZW0sIGluZGV4KSB7XG4gICAgaWYgKHJlbmRlckl0ZW0gJiYgTGlzdEl0ZW1Db21wb25lbnQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1ZpcnR1YWxpemVkTGlzdDogQm90aCBMaXN0SXRlbUNvbXBvbmVudCBhbmQgcmVuZGVySXRlbSBwcm9wcyBhcmUgcHJlc2VudC4gTGlzdEl0ZW1Db21wb25lbnQgd2lsbCB0YWtlJyArXG4gICAgICAgICAgJyBwcmVjZWRlbmNlIG92ZXIgcmVuZGVySXRlbS4nLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoTGlzdEl0ZW1Db21wb25lbnQpIHtcbiAgICAgIC8qICRGbG93Rml4TWVbbm90LWEtY29tcG9uZW50XSAoPj0wLjEwOC4wIHNpdGU9cmVhY3RfbmF0aXZlX2ZiKSBUaGlzXG4gICAgICAgKiBjb21tZW50IHN1cHByZXNzZXMgYW4gZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjEwOCB3YXMgZGVwbG95ZWQuIFRvXG4gICAgICAgKiBzZWUgdGhlIGVycm9yLCBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbiAgICAgIC8qICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGUtYXJnXSAoPj0wLjEwOC4wIHNpdGU9cmVhY3RfbmF0aXZlX2ZiKVxuICAgICAgICogVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW4gZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjEwOCB3YXMgZGVwbG95ZWQuXG4gICAgICAgKiBUbyBzZWUgdGhlIGVycm9yLCBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpc3RJdGVtQ29tcG9uZW50LCB7XG4gICAgICAgIGl0ZW0sXG4gICAgICAgIGluZGV4LFxuICAgICAgICBzZXBhcmF0b3JzOiB0aGlzLl9zZXBhcmF0b3JzLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlbmRlckl0ZW0pIHtcbiAgICAgIHJldHVybiByZW5kZXJJdGVtKHtcbiAgICAgICAgaXRlbSxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHNlcGFyYXRvcnM6IHRoaXMuX3NlcGFyYXRvcnMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdWaXJ0dWFsaXplZExpc3Q6IEVpdGhlciBMaXN0SXRlbUNvbXBvbmVudCBvciByZW5kZXJJdGVtIHByb3BzIGFyZSByZXF1aXJlZCBidXQgbm9uZSB3ZXJlIGZvdW5kLicsXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgICBJdGVtU2VwYXJhdG9yQ29tcG9uZW50LFxuICAgICAgZmlsbFJhdGVIZWxwZXIsXG4gICAgICBob3Jpem9udGFsLFxuICAgICAgaXRlbSxcbiAgICAgIGluZGV4LFxuICAgICAgaW52ZXJzaW9uU3R5bGUsXG4gICAgICBwYXJlbnRQcm9wcyxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7cmVuZGVySXRlbSwgZ2V0SXRlbUxheW91dCwgTGlzdEl0ZW1Db21wb25lbnR9ID0gcGFyZW50UHJvcHM7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX3JlbmRlckVsZW1lbnQoXG4gICAgICByZW5kZXJJdGVtLFxuICAgICAgTGlzdEl0ZW1Db21wb25lbnQsXG4gICAgICBpdGVtLFxuICAgICAgaW5kZXgsXG4gICAgKTtcblxuICAgIGNvbnN0IG9uTGF5b3V0ID1cbiAgICAgIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSAoPj0wLjY4LjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIpIFRoaXMgY29tbWVudFxuICAgICAgICogc3VwcHJlc3NlcyBhbiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuNjggd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlXG4gICAgICAgKiBlcnJvciBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbiAgICAgIGdldEl0ZW1MYXlvdXQgJiYgIXBhcmVudFByb3BzLmRlYnVnICYmICFmaWxsUmF0ZUhlbHBlci5lbmFibGVkKClcbiAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgOiB0aGlzLnByb3BzLm9uTGF5b3V0O1xuICAgIC8vIE5PVEU6IHRoYXQgd2hlbiB0aGlzIGlzIGEgc3RpY2t5IGhlYWRlciwgYG9uTGF5b3V0YCB3aWxsIGdldCBhdXRvbWF0aWNhbGx5IGV4dHJhY3RlZCBhbmRcbiAgICAvLyBjYWxsZWQgZXhwbGljaXRseSBieSBgU2Nyb2xsVmlld1N0aWNreUhlYWRlcmAuXG4gICAgY29uc3QgaXRlbVNlcGFyYXRvciA9IEl0ZW1TZXBhcmF0b3JDb21wb25lbnQgJiYgKFxuICAgICAgPEl0ZW1TZXBhcmF0b3JDb21wb25lbnQgey4uLnRoaXMuc3RhdGUuc2VwYXJhdG9yUHJvcHN9IC8+XG4gICAgKTtcbiAgICBjb25zdCBjZWxsU3R5bGUgPSBpbnZlcnNpb25TdHlsZVxuICAgICAgPyBob3Jpem9udGFsXG4gICAgICAgID8gW3N0eWxlcy5yb3dSZXZlcnNlLCBpbnZlcnNpb25TdHlsZV1cbiAgICAgICAgOiBbc3R5bGVzLmNvbHVtblJldmVyc2UsIGludmVyc2lvblN0eWxlXVxuICAgICAgOiBob3Jpem9udGFsXG4gICAgICA/IFtzdHlsZXMucm93LCBpbnZlcnNpb25TdHlsZV1cbiAgICAgIDogaW52ZXJzaW9uU3R5bGU7XG4gICAgY29uc3QgcmVzdWx0ID0gIUNlbGxSZW5kZXJlckNvbXBvbmVudCA/IChcbiAgICAgIC8qICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGUtYXJnXSAoPj0wLjg5LjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIpICpcbiAgICAgICAgVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW4gZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjg5IHdhcyBkZXBsb3llZC4gKlxuICAgICAgICBUbyBzZWUgdGhlIGVycm9yLCBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbiAgICAgIDxWaWV3IHN0eWxlPXtjZWxsU3R5bGV9IG9uTGF5b3V0PXtvbkxheW91dH0+XG4gICAgICAgIHtlbGVtZW50fVxuICAgICAgICB7aXRlbVNlcGFyYXRvcn1cbiAgICAgIDwvVmlldz5cbiAgICApIDogKFxuICAgICAgPENlbGxSZW5kZXJlckNvbXBvbmVudFxuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgc3R5bGU9e2NlbGxTdHlsZX1cbiAgICAgICAgb25MYXlvdXQ9e29uTGF5b3V0fT5cbiAgICAgICAge2VsZW1lbnR9XG4gICAgICAgIHtpdGVtU2VwYXJhdG9yfVxuICAgICAgPC9DZWxsUmVuZGVyZXJDb21wb25lbnQ+XG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8VmlydHVhbGl6ZWRMaXN0Q2VsbENvbnRleHRQcm92aWRlciBjZWxsS2V5PXt0aGlzLnByb3BzLmNlbGxLZXl9PlxuICAgICAgICB7cmVzdWx0fVxuICAgICAgPC9WaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyPlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVzY3JpYmVOZXN0ZWRMaXN0cyhjaGlsZExpc3Q6IHtcbiAgK2NlbGxLZXk6IHN0cmluZyxcbiAgK2tleTogc3RyaW5nLFxuICArcmVmOiBWaXJ0dWFsaXplZExpc3QsXG4gICtwYXJlbnREZWJ1Z0luZm86IExpc3REZWJ1Z0luZm8sXG4gICtob3Jpem9udGFsOiBib29sZWFuLFxuICAuLi5cbn0pIHtcbiAgbGV0IHRyYWNlID1cbiAgICAnVmlydHVhbGl6ZWRMaXN0IHRyYWNlOlxcbicgK1xuICAgIGAgIENoaWxkICgke2NoaWxkTGlzdC5ob3Jpem9udGFsID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJ30pOlxcbmAgK1xuICAgIGAgICAgbGlzdEtleTogJHtjaGlsZExpc3Qua2V5fVxcbmAgK1xuICAgIGAgICAgY2VsbEtleTogJHtjaGlsZExpc3QuY2VsbEtleX1gO1xuXG4gIGxldCBkZWJ1Z0luZm8gPSBjaGlsZExpc3QucGFyZW50RGVidWdJbmZvO1xuICB3aGlsZSAoZGVidWdJbmZvKSB7XG4gICAgdHJhY2UgKz1cbiAgICAgIGBcXG4gIFBhcmVudCAoJHtkZWJ1Z0luZm8uaG9yaXpvbnRhbCA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCd9KTpcXG5gICtcbiAgICAgIGAgICAgbGlzdEtleTogJHtkZWJ1Z0luZm8ubGlzdEtleX1cXG5gICtcbiAgICAgIGAgICAgY2VsbEtleTogJHtkZWJ1Z0luZm8uY2VsbEtleX1gO1xuICAgIGRlYnVnSW5mbyA9IGRlYnVnSW5mby5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIHRyYWNlO1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIHZlcnRpY2FsbHlJbnZlcnRlZDoge1xuICAgIHRyYW5zZm9ybTogW3tzY2FsZVk6IC0xfV0sXG4gIH0sXG4gIGhvcml6b250YWxseUludmVydGVkOiB7XG4gICAgdHJhbnNmb3JtOiBbe3NjYWxlWDogLTF9XSxcbiAgfSxcbiAgcm93OiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gIH0sXG4gIHJvd1JldmVyc2U6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnLFxuICB9LFxuICBjb2x1bW5SZXZlcnNlOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJyxcbiAgfSxcbiAgZGVidWc6IHtcbiAgICBmbGV4OiAxLFxuICB9LFxuICBkZWJ1Z092ZXJsYXlCYXNlOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICB9LFxuICBkZWJ1Z092ZXJsYXk6IHtcbiAgICBib3R0b206IDAsXG4gICAgd2lkdGg6IDIwLFxuICAgIGJvcmRlckNvbG9yOiAnYmx1ZScsXG4gICAgYm9yZGVyV2lkdGg6IDEsXG4gIH0sXG4gIGRlYnVnT3ZlcmxheUZyYW1lOiB7XG4gICAgbGVmdDogMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdvcmFuZ2UnLFxuICB9LFxuICBkZWJ1Z092ZXJsYXlGcmFtZUxhc3Q6IHtcbiAgICBsZWZ0OiAwLFxuICAgIGJvcmRlckNvbG9yOiAnZ3JlZW4nLFxuICAgIGJvcmRlcldpZHRoOiAyLFxuICB9LFxuICBkZWJ1Z092ZXJsYXlGcmFtZVZpczoge1xuICAgIGxlZnQ6IDAsXG4gICAgYm9yZGVyQ29sb3I6ICdyZWQnLFxuICAgIGJvcmRlcldpZHRoOiAyLFxuICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVmlydHVhbGl6ZWRMaXN0O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQXVCQSxJQUFBQSxnQkFBQSxHQUFBQyxPQUFBO0FBS0EsSUFBQUMsS0FBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBUUEsSUFBQUcsdUJBQUEsR0FBQUgsT0FBQTtBQU1xQyxTQUFBSSx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUgsd0JBQUFPLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQUUsT0FBQSxFQUFBRixHQUFB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