27329432ee2c366bd31fe044a762e6c4
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RootNavigation = _interopRequireWildcard(require("../../navigation/rootNavigation"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var errorInterceptor = function errorInterceptor(axiosInstance) {
  axiosInstance.interceptors.response.use(function (response) {}, function (error) {
    console.log('===error status:', error.response.status);
    if (error.response && error.response.status === 401) {
      return RootNavigation.navigate('Home', {});
    } else if (error.response && error.response.status === 503) {
      return RootNavigation.navigate('SERVER_ERROR_SCREEN', {});
    } else {
      return Promise.reject(error);
    }
  });
};
var _default = errorInterceptor;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb290TmF2aWdhdGlvbiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJlcnJvckludGVyY2VwdG9yIiwiYXhpb3NJbnN0YW5jZSIsImludGVyY2VwdG9ycyIsInJlc3BvbnNlIiwidXNlIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwic3RhdHVzIiwibmF2aWdhdGUiLCJQcm9taXNlIiwicmVqZWN0IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiZXJyb3JzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcywge0F4aW9zRXJyb3J9IGZyb20gJ2F4aW9zJztcbmltcG9ydCAqIGFzIFJvb3ROYXZpZ2F0aW9uIGZyb20gJy4uLy4uL25hdmlnYXRpb24vcm9vdE5hdmlnYXRpb24nO1xuXG5jb25zdCBlcnJvckludGVyY2VwdG9yID0gYXhpb3NJbnN0YW5jZSA9PiB7XG4gIGF4aW9zSW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShcbiAgICByZXNwb25zZSA9PiB7XG4gICAgICAvL1Jlc3BvbnNlIFN1Y2Nlc3NmdWxcbiAgICB9LFxuICAgIGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCc9PT1lcnJvciBzdGF0dXM6JywgZXJyb3IucmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICByZXR1cm4gUm9vdE5hdmlnYXRpb24ubmF2aWdhdGUoJ0hvbWUnLCB7fSk7XG4gICAgICAgIC8vVW5hdXRob3JpemVkXG4gICAgICAgIC8vcmVkaXJlY3QgdG8gTG9naW5cbiAgICAgIH0gZWxzZSBpZiAoZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2Uuc3RhdHVzID09PSA1MDMpIHtcbiAgICAgICAgcmV0dXJuIFJvb3ROYXZpZ2F0aW9uLm5hdmlnYXRlKCdTRVJWRVJfRVJST1JfU0NSRUVOJywge30pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9kaXNwYXRjaCB5b3VyIGVycm9yIGluIGEgbW9yZSB1c2VyIGZyaWVuZGx5IG1hbm5lclxuICAgICAgICAvLyBpZiAoREVCVUcpIHtcbiAgICAgICAgLy8gICAvL2Vhc2llciBkZWJ1Z2dpbmdcbiAgICAgICAgLy8gICBjb25zb2xlLmdyb3VwKCdFcnJvcicpO1xuICAgICAgICAvLyAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgLy8gICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH0sXG4gICk7XG59O1xuZXhwb3J0IGRlZmF1bHQgZXJyb3JJbnRlcmNlcHRvcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsY0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQWtFLFNBQUFDLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBSCx3QkFBQU8sR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBLDRCQUFBRSxPQUFBLEVBQUFGLEdBQUEsVUFBQUcsS0FBQSxHQUFBUix3QkFBQSxDQUFBQyxXQUFBLE9BQUFPLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFKLEdBQUEsWUFBQUcsS0FBQSxDQUFBRSxHQUFBLENBQUFMLEdBQUEsU0FBQU0sTUFBQSxXQUFBQyxxQkFBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxHQUFBLElBQUFYLEdBQUEsUUFBQVcsR0FBQSxrQkFBQUgsTUFBQSxDQUFBSSxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBZCxHQUFBLEVBQUFXLEdBQUEsU0FBQUksSUFBQSxHQUFBUixxQkFBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFWLEdBQUEsRUFBQVcsR0FBQSxjQUFBSSxJQUFBLEtBQUFBLElBQUEsQ0FBQVYsR0FBQSxJQUFBVSxJQUFBLENBQUFDLEdBQUEsS0FBQVIsTUFBQSxDQUFBQyxjQUFBLENBQUFILE1BQUEsRUFBQUssR0FBQSxFQUFBSSxJQUFBLFlBQUFULE1BQUEsQ0FBQUssR0FBQSxJQUFBWCxHQUFBLENBQUFXLEdBQUEsU0FBQUwsTUFBQSxDQUFBSixPQUFBLEdBQUFGLEdBQUEsTUFBQUcsS0FBQSxJQUFBQSxLQUFBLENBQUFhLEdBQUEsQ0FBQWhCLEdBQUEsRUFBQU0sTUFBQSxZQUFBQSxNQUFBO0FBRWxFLElBQU1XLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0JBLENBQUdDLGFBQWEsRUFBSTtFQUN4Q0EsYUFBYSxDQUFDQyxZQUFZLENBQUNDLFFBQVEsQ0FBQ0MsR0FBRyxDQUNyQyxVQUFBRCxRQUFRLEVBQUksQ0FFWixDQUFDLEVBQ0QsVUFBQUUsS0FBSyxFQUFJO0lBQ1BDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGtCQUFrQixFQUFFRixLQUFLLENBQUNGLFFBQVEsQ0FBQ0ssTUFBTSxDQUFDO0lBQ3RELElBQUlILEtBQUssQ0FBQ0YsUUFBUSxJQUFJRSxLQUFLLENBQUNGLFFBQVEsQ0FBQ0ssTUFBTSxLQUFLLEdBQUcsRUFBRTtNQUNuRCxPQUFPakMsY0FBYyxDQUFDa0MsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUc1QyxDQUFDLE1BQU0sSUFBSUosS0FBSyxDQUFDRixRQUFRLElBQUlFLEtBQUssQ0FBQ0YsUUFBUSxDQUFDSyxNQUFNLEtBQUssR0FBRyxFQUFFO01BQzFELE9BQU9qQyxjQUFjLENBQUNrQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQyxNQUFNO01BU0wsT0FBT0MsT0FBTyxDQUFDQyxNQUFNLENBQUNOLEtBQUssQ0FBQztJQUM5QjtFQUNGLENBQUMsQ0FDRjtBQUNILENBQUM7QUFBQyxJQUFBTyxRQUFBLEdBQ2FaLGdCQUFnQjtBQUFBYSxPQUFBLENBQUE1QixPQUFBLEdBQUEyQixRQUFBIn0=