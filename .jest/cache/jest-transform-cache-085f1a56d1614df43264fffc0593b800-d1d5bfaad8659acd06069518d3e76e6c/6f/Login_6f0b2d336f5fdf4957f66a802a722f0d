a1ebf8552c7a5e1db613170dd20bc7b1
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _components = require("@ui-kitten/components");
var _reactNativeElements = require("react-native-elements");
var _FontAwesome = _interopRequireDefault(require("react-native-vector-icons/FontAwesome"));
var _reactRedux = require("react-redux");
var _actions = require("../redux/actions");
var _actionTypes = require("../utils/actionTypes");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var Login = function Login(props) {
  var passwordRef = null;
  var dispatch = (0, _reactRedux.useDispatch)();
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    email = _useState2[0],
    setEmail = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    password = _useState4[0],
    setPassword = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    selectedField = _useState6[0],
    setSelectedField = _useState6[1];
  var _useState7 = (0, _react.useState)(true),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    secureTextEntry = _useState8[0],
    setSecureTextEntry = _useState8[1];
  var _useState9 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    isValid = _useState10[0],
    setIsValid = _useState10[1];
  var _useState11 = (0, _react.useState)(null),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    emailIsValid = _useState12[0],
    setEmailIsValid = _useState12[1];
  var _useState13 = (0, _react.useState)(null),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    emailValueIsValid = _useState14[0],
    setEmailValueIsValid = _useState14[1];
  var _useState15 = (0, _react.useState)(null),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    pwdIsValid = _useState16[0],
    setPwdIsValid = _useState16[1];
  var renderPasswordIcon = function renderPasswordIcon() {
    return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
      onPress: toggleSecureEntry
    }, _react.default.createElement(_FontAwesome.default, {
      name: secureTextEntry ? 'eye-slash' : 'eye',
      size: 20
    }));
  };
  var renderValidInputIcon = function renderValidInputIcon() {
    return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
      onPress: toggleSecureEntry
    }, _react.default.createElement(_FontAwesome.default, {
      name: 'check-circle',
      size: 20,
      color: 'green'
    }));
  };
  var renderInvalidInputIcon = function renderInvalidInputIcon() {
    return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
      onPress: toggleSecureEntry
    }, _react.default.createElement(_FontAwesome.default, {
      name: 'exclamation-circle',
      size: 20,
      color: '#ff375d'
    }));
  };
  var toggleSecureEntry = function toggleSecureEntry() {
    setSecureTextEntry(!secureTextEntry);
  };
  var updateFields = function updateFields(field, value) {
    if (field === 'email') {
      setEmail(value);
    } else {
      setPassword(value);
    }
    setSelectedField(field);
  };
  var validateFields = function validateFields() {
    switch (selectedField) {
      case 'email':
        {
          var emailValid = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email);
          if (email) {
            setEmailIsValid(true);
            if (email && !emailValid) {
              setEmailValueIsValid(false);
            } else if (emailValid) {
              setEmailValueIsValid(true);
            }
          } else {
            setEmailValueIsValid(null);
            setEmailIsValid(false);
          }
          break;
        }
      case 'password':
        {
          if (password) {
            setPwdIsValid(true);
          } else {
            setPwdIsValid(false);
          }
          break;
        }
      default:
        break;
    }
  };
  (0, _react.useEffect)(function () {
    validateFields();
  }, [email, password]);
  var login = function login() {
    dispatch((0, _actions.loginRequest)(email, password, props.navigation));
  };
  (0, _react.useEffect)(function () {
    var validateForm = function validateForm() {
      if (pwdIsValid && emailIsValid && emailValueIsValid) {
        setIsValid(true);
      } else {
        setIsValid(false);
      }
    };
    validateForm();
  }, [emailIsValid, emailValueIsValid, pwdIsValid]);
  return _react.default.createElement(_components.Layout, {
    style: styles.container
  }, _react.default.createElement(_reactNative.Image, {
    source: require('../assets/logo.png'),
    style: styles.logo
  }), _react.default.createElement(_reactNative.View, {
    style: styles.form
  }, _react.default.createElement(_reactNative.View, {
    style: styles.inputContainer
  }, _react.default.createElement(_components.Input, {
    autoFocus: true,
    label: "Email Address",
    placeholder: "Place your email address",
    placeholderTextColor: "#000",
    keyboardType: "email-address",
    status: emailIsValid && emailValueIsValid ? 'success' : emailIsValid === false || emailValueIsValid === false ? 'danger' : 'basic',
    accessoryRight: emailIsValid && emailValueIsValid ? renderValidInputIcon : emailIsValid === false || emailValueIsValid === false ? renderInvalidInputIcon : null,
    value: email,
    onChangeText: function onChangeText(text) {
      return updateFields('email', text);
    },
    onSubmitEditing: function onSubmitEditing() {
      return passwordRef.focus();
    }
  }), emailIsValid === false && _react.default.createElement(_reactNative.View, {
    style: styles.errorContainer
  }, _react.default.createElement(_FontAwesome.default, {
    name: "exclamation-triangle",
    color: '#ff375d',
    size: 8,
    style: styles.errorIcon
  }), _react.default.createElement(_reactNative.Text, {
    style: styles.errorStyle
  }, _actionTypes.LoginFormMessages.email)), emailValueIsValid === false && _react.default.createElement(_reactNative.View, {
    style: styles.errorContainer
  }, _react.default.createElement(_FontAwesome.default, {
    name: "exclamation-triangle",
    color: '#ff375d',
    size: 8,
    style: styles.errorIcon
  }), _react.default.createElement(_reactNative.Text, {
    style: styles.errorStyle
  }, _actionTypes.LoginFormMessages.emailNotValid))), _react.default.createElement(_reactNative.View, {
    style: styles.inputContainer
  }, _react.default.createElement(_components.Input, {
    ref: function ref(_ref) {
      return passwordRef = _ref;
    },
    label: "Password",
    placeholder: "Place your password",
    placeholderTextColor: "#000",
    secureTextEntry: secureTextEntry,
    accessoryRight: renderPasswordIcon,
    value: password,
    status: pwdIsValid ? 'success' : pwdIsValid === false ? 'danger' : 'basic',
    onChangeText: function onChangeText(text) {
      return updateFields('password', text);
    },
    onSubmitEditing: function onSubmitEditing() {
      return login();
    }
  }), pwdIsValid === false && _react.default.createElement(_reactNative.View, {
    style: styles.errorContainer
  }, _react.default.createElement(_FontAwesome.default, {
    name: "exclamation-triangle",
    color: '#ff375d',
    size: 8,
    style: styles.errorIcon
  }), _react.default.createElement(_reactNative.Text, {
    style: styles.errorStyle
  }, _actionTypes.LoginFormMessages.password))), _react.default.createElement(_reactNative.View, {
    style: styles.buttonContainer
  }, _react.default.createElement(_reactNativeElements.Button, {
    title: 'Login',
    containerStyle: {
      width: 'auto'
    },
    buttonStyle: styles.button,
    titleStyle: styles.textButton,
    type: "solid",
    disabled: !isValid,
    onPress: function onPress() {
      return login();
    }
  }))));
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    alignContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
    paddingTop: 40
  },
  logo: {
    height: 200,
    width: 400,
    marginBottom: 100
  },
  form: {
    flex: 1
  },
  row: {
    flexDirection: 'row',
    padding: 10
  },
  inputContainer: {
    width: 300,
    marginBottom: 25
  },
  textInput: {
    fontSize: 16
  },
  buttonContainer: {
    marginTop: 10
  },
  button: {
    backgroundColor: '#2756a1',
    borderRadius: 10,
    width: '100%',
    height: 50
  },
  textButton: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center'
  },
  errorContainer: {
    flexDirection: 'row',
    marginTop: 5,
    paddingLeft: 10
  },
  errorIcon: {
    paddingTop: 4
  },
  errorStyle: {
    fontSize: 12,
    marginLeft: 3,
    color: '#ff375d'
  }
});
var _default = Login;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,