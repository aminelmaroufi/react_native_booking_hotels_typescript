30d2d1105c754ce559c08ab28ad92d3b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _VirtualizeUtils = require("./VirtualizeUtils");
var React = _interopRequireWildcard(require("react"));
var _VirtualizedListContext = require("./VirtualizedListContext.js");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Batchinator = require('../Interaction/Batchinator');
var FillRateHelper = require('./FillRateHelper');
var ReactNative = require('../Renderer/shims/ReactNative');
var RefreshControl = require('../Components/RefreshControl/RefreshControl');
var ScrollView = require('../Components/ScrollView/ScrollView');
var StyleSheet = require('../StyleSheet/StyleSheet');
var View = require('../Components/View/View');
var ViewabilityHelper = require('./ViewabilityHelper');
var flattenStyle = require('../StyleSheet/flattenStyle');
var infoLog = require('../Utilities/infoLog');
var invariant = require('invariant');
var _usedIndexForKey = false;
var _keylessItemComponentName = '';
function horizontalOrDefault(horizontal) {
  return horizontal != null ? horizontal : false;
}
function initialNumToRenderOrDefault(initialNumToRender) {
  return initialNumToRender != null ? initialNumToRender : 10;
}
function maxToRenderPerBatchOrDefault(maxToRenderPerBatch) {
  return maxToRenderPerBatch != null ? maxToRenderPerBatch : 10;
}
function onEndReachedThresholdOrDefault(onEndReachedThreshold) {
  return onEndReachedThreshold != null ? onEndReachedThreshold : 2;
}
function scrollEventThrottleOrDefault(scrollEventThrottle) {
  return scrollEventThrottle != null ? scrollEventThrottle : 50;
}
function windowSizeOrDefault(windowSize) {
  return windowSize != null ? windowSize : 21;
}
var VirtualizedList = function (_React$PureComponent) {
  (0, _inherits2.default)(VirtualizedList, _React$PureComponent);
  var _super = _createSuper(VirtualizedList);
  function VirtualizedList(_props) {
    var _this$props$updateCel;
    var _this;
    (0, _classCallCheck2.default)(this, VirtualizedList);
    _this = _super.call(this, _props);
    _this._getScrollMetrics = function () {
      return _this._scrollMetrics;
    };
    _this._getOutermostParentListRef = function () {
      if (_this._isNestedWithSameOrientation()) {
        return _this.context.getOutermostParentListRef();
      } else {
        return (0, _assertThisInitialized2.default)(_this);
      }
    };
    _this._getNestedChildState = function (key) {
      var existingChildData = _this._nestedChildLists.get(key);
      return existingChildData && existingChildData.state;
    };
    _this._registerAsNestedChild = function (childList) {
      var childListsInCell = _this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
      childListsInCell.add(childList.key);
      _this._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);
      var existingChildData = _this._nestedChildLists.get(childList.key);
      if (existingChildData && existingChildData.ref !== null) {
        console.error('A VirtualizedList contains a cell which itself contains ' + 'more than one VirtualizedList of the same orientation as the parent ' + 'list. You must pass a unique listKey prop to each sibling list.\n\n' + describeNestedLists((0, _extends2.default)({}, childList, {
          horizontal: !!childList.ref.props.horizontal
        })));
      }
      _this._nestedChildLists.set(childList.key, {
        ref: childList.ref,
        state: null
      });
      if (_this._hasInteracted) {
        childList.ref.recordInteraction();
      }
    };
    _this._unregisterAsNestedChild = function (childList) {
      _this._nestedChildLists.set(childList.key, {
        ref: null,
        state: childList.state
      });
    };
    _this._onUpdateSeparators = function (keys, newProps) {
      keys.forEach(function (key) {
        var ref = key != null && _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      });
    };
    _this._getSpacerKey = function (isVertical) {
      return isVertical ? 'height' : 'width';
    };
    _this._averageCellLength = 0;
    _this._cellKeysToChildListKeys = new Map();
    _this._cellRefs = {};
    _this._frames = {};
    _this._footerLength = 0;
    _this._hasDoneInitialScroll = false;
    _this._hasInteracted = false;
    _this._hasMore = false;
    _this._hasWarned = {};
    _this._headerLength = 0;
    _this._hiPriInProgress = false;
    _this._highestMeasuredFrameIndex = 0;
    _this._indicesToKeys = new Map();
    _this._nestedChildLists = new Map();
    _this._offsetFromParentVirtualizedList = 0;
    _this._prevParentOffset = 0;
    _this._scrollMetrics = {
      contentLength: 0,
      dOffset: 0,
      dt: 10,
      offset: 0,
      timestamp: 0,
      velocity: 0,
      visibleLength: 0
    };
    _this._scrollRef = null;
    _this._sentEndForContentLength = 0;
    _this._totalCellLength = 0;
    _this._totalCellsMeasured = 0;
    _this._viewabilityTuples = [];
    _this._captureScrollRef = function (ref) {
      _this._scrollRef = ref;
    };
    _this._defaultRenderScrollComponent = function (props) {
      var onRefresh = props.onRefresh;
      if (_this._isNestedWithSameOrientation()) {
        return (0, _jsxRuntime.jsx)(View, (0, _extends2.default)({}, props));
      } else if (onRefresh) {
        var _props$refreshing;
        invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify((_props$refreshing = props.refreshing) != null ? _props$refreshing : 'undefined') + '`');
        return (0, _jsxRuntime.jsx)(ScrollView, (0, _extends2.default)({}, props, {
          refreshControl: props.refreshControl == null ? (0, _jsxRuntime.jsx)(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: onRefresh,
            progressViewOffset: props.progressViewOffset
          }) : props.refreshControl
        }));
      } else {
        return (0, _jsxRuntime.jsx)(ScrollView, (0, _extends2.default)({}, props));
      }
    };
    _this._onCellUnmount = function (cellKey) {
      var curr = _this._frames[cellKey];
      if (curr) {
        _this._frames[cellKey] = (0, _extends2.default)({}, curr, {
          inLayout: false
        });
      }
    };
    _this._onLayout = function (e) {
      if (_this._isNestedWithSameOrientation()) {
        _this.measureLayoutRelativeToContainingList();
      } else {
        _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
      }
      _this.props.onLayout && _this.props.onLayout(e);
      _this._scheduleCellsToRenderUpdate();
      _this._maybeCallOnEndReached();
    };
    _this._onLayoutEmpty = function (e) {
      _this.props.onLayout && _this.props.onLayout(e);
    };
    _this._onLayoutFooter = function (e) {
      _this._triggerRemeasureForChildListsInCell(_this._getFooterCellKey());
      _this._footerLength = _this._selectLength(e.nativeEvent.layout);
    };
    _this._onLayoutHeader = function (e) {
      _this._headerLength = _this._selectLength(e.nativeEvent.layout);
    };
    _this._onContentSizeChange = function (width, height) {
      if (width > 0 && height > 0 && _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 && !_this._hasDoneInitialScroll) {
        if (_this.props.contentOffset == null) {
          _this.scrollToIndex({
            animated: false,
            index: _this.props.initialScrollIndex
          });
        }
        _this._hasDoneInitialScroll = true;
      }
      if (_this.props.onContentSizeChange) {
        _this.props.onContentSizeChange(width, height);
      }
      _this._scrollMetrics.contentLength = _this._selectLength({
        height: height,
        width: width
      });
      _this._scheduleCellsToRenderUpdate();
      _this._maybeCallOnEndReached();
    };
    _this._convertParentScrollMetrics = function (metrics) {
      var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
      var visibleLength = metrics.visibleLength;
      var dOffset = offset - _this._scrollMetrics.offset;
      var contentLength = _this._scrollMetrics.contentLength;
      return {
        visibleLength: visibleLength,
        contentLength: contentLength,
        offset: offset,
        dOffset: dOffset
      };
    };
    _this._onScroll = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScroll(e);
      });
      if (_this.props.onScroll) {
        _this.props.onScroll(e);
      }
      var timestamp = e.timeStamp;
      var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);
      var contentLength = _this._selectLength(e.nativeEvent.contentSize);
      var offset = _this._selectOffset(e.nativeEvent.contentOffset);
      var dOffset = offset - _this._scrollMetrics.offset;
      if (_this._isNestedWithSameOrientation()) {
        if (_this._scrollMetrics.contentLength === 0) {
          return;
        }
        var _this$_convertParentS = _this._convertParentScrollMetrics({
          visibleLength: visibleLength,
          offset: offset
        });
        visibleLength = _this$_convertParentS.visibleLength;
        contentLength = _this$_convertParentS.contentLength;
        offset = _this$_convertParentS.offset;
        dOffset = _this$_convertParentS.dOffset;
      }
      var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
      var velocity = dOffset / dt;
      if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
        infoLog('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
          dt: dt,
          prevDt: _this._scrollMetrics.dt,
          contentLength: contentLength
        });
        _this._hasWarned.perf = true;
      }
      _this._scrollMetrics = {
        contentLength: contentLength,
        dt: dt,
        dOffset: dOffset,
        offset: offset,
        timestamp: timestamp,
        velocity: velocity,
        visibleLength: visibleLength
      };
      _this._updateViewableItems(_this.props.data);
      if (!_this.props) {
        return;
      }
      _this._maybeCallOnEndReached();
      if (velocity !== 0) {
        _this._fillRateHelper.activate();
      }
      _this._computeBlankness();
      _this._scheduleCellsToRenderUpdate();
    };
    _this._onScrollBeginDrag = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScrollBeginDrag(e);
      });
      _this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.recordInteraction();
      });
      _this._hasInteracted = true;
      _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
    };
    _this._onScrollEndDrag = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScrollEndDrag(e);
      });
      var velocity = e.nativeEvent.velocity;
      if (velocity) {
        _this._scrollMetrics.velocity = _this._selectOffset(velocity);
      }
      _this._computeBlankness();
      _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
    };
    _this._onMomentumScrollBegin = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onMomentumScrollBegin(e);
      });
      _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
    };
    _this._onMomentumScrollEnd = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onMomentumScrollEnd(e);
      });
      _this._scrollMetrics.velocity = 0;
      _this._computeBlankness();
      _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
    };
    _this._updateCellsToRender = function () {
      var _this$props = _this.props,
        data = _this$props.data,
        getItemCount = _this$props.getItemCount,
        _onEndReachedThreshold = _this$props.onEndReachedThreshold;
      var onEndReachedThreshold = onEndReachedThresholdOrDefault(_onEndReachedThreshold);
      var isVirtualizationDisabled = _this._isVirtualizationDisabled();
      _this._updateViewableItems(data);
      if (!data) {
        return;
      }
      _this.setState(function (state) {
        var newState;
        var _this$_scrollMetrics = _this._scrollMetrics,
          contentLength = _this$_scrollMetrics.contentLength,
          offset = _this$_scrollMetrics.offset,
          visibleLength = _this$_scrollMetrics.visibleLength;
        if (!isVirtualizationDisabled) {
          if (visibleLength > 0 && contentLength > 0) {
            if (!_this.props.initialScrollIndex || _this._scrollMetrics.offset) {
              newState = (0, _VirtualizeUtils.computeWindowedRenderLimits)(_this.props.data, _this.props.getItemCount, maxToRenderPerBatchOrDefault(_this.props.maxToRenderPerBatch), windowSizeOrDefault(_this.props.windowSize), state, _this._getFrameMetricsApprox, _this._scrollMetrics);
            }
          }
        } else {
          var distanceFromEnd = contentLength - visibleLength - offset;
          var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? maxToRenderPerBatchOrDefault(_this.props.maxToRenderPerBatch) : 0;
          newState = {
            first: 0,
            last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
          };
        }
        if (newState && _this._nestedChildLists.size > 0) {
          var newFirst = newState.first;
          var newLast = newState.last;
          for (var ii = newFirst; ii <= newLast; ii++) {
            var cellKeyForIndex = _this._indicesToKeys.get(ii);
            var childListKeys = cellKeyForIndex && _this._cellKeysToChildListKeys.get(cellKeyForIndex);
            if (!childListKeys) {
              continue;
            }
            var someChildHasMore = false;
            for (var _iterator = _createForOfIteratorHelperLoose(childListKeys), _step; !(_step = _iterator()).done;) {
              var childKey = _step.value;
              var childList = _this._nestedChildLists.get(childKey);
              if (childList && childList.ref && childList.ref.hasMore()) {
                someChildHasMore = true;
                break;
              }
            }
            if (someChildHasMore) {
              newState.last = ii;
              break;
            }
          }
        }
        if (newState != null && newState.first === state.first && newState.last === state.last) {
          newState = null;
        }
        return newState;
      });
    };
    _this._createViewToken = function (index, isViewable) {
      var _this$props2 = _this.props,
        data = _this$props2.data,
        getItem = _this$props2.getItem;
      var item = getItem(data, index);
      return {
        index: index,
        item: item,
        key: _this._keyExtractor(item, index),
        isViewable: isViewable
      };
    };
    _this._getFrameMetricsApprox = function (index) {
      var frame = _this._getFrameMetrics(index);
      if (frame && frame.index === index) {
        return frame;
      } else {
        var getItemLayout = _this.props.getItemLayout;
        invariant(!getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
        return {
          length: _this._averageCellLength,
          offset: _this._averageCellLength * index
        };
      }
    };
    _this._getFrameMetrics = function (index) {
      var _this$props3 = _this.props,
        data = _this$props3.data,
        getItem = _this$props3.getItem,
        getItemCount = _this$props3.getItemCount,
        getItemLayout = _this$props3.getItemLayout;
      invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
      var item = getItem(data, index);
      var frame = item && _this._frames[_this._keyExtractor(item, index)];
      if (!frame || frame.index !== index) {
        if (getItemLayout) {
          frame = getItemLayout(data, index);
        }
      }
      return frame;
    };
    invariant(!_props.onScroll || !_props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
    invariant(windowSizeOrDefault(_props.windowSize) > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
    _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
    _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, (_this$props$updateCel = _this.props.updateCellsBatchingPeriod) != null ? _this$props$updateCel : 50);
    if (_this.props.viewabilityConfigCallbackPairs) {
      _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
        return {
          viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
          onViewableItemsChanged: pair.onViewableItemsChanged
        };
      });
    } else if (_this.props.onViewableItemsChanged) {
      _this._viewabilityTuples.push({
        viewabilityHelper: new ViewabilityHelper(_this.props.viewabilityConfig),
        onViewableItemsChanged: _this.props.onViewableItemsChanged
      });
    }
    var initialState = {
      first: _this.props.initialScrollIndex || 0,
      last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + initialNumToRenderOrDefault(_this.props.initialNumToRender)) - 1
    };
    if (_this._isNestedWithSameOrientation()) {
      var storedState = _this.context.getNestedChildState(_this._getListKey());
      if (storedState) {
        initialState = storedState;
        _this.state = storedState;
        _this._frames = storedState.frames;
      }
    }
    _this.state = initialState;
    return _this;
  }
  (0, _createClass2.default)(VirtualizedList, [{
    key: "scrollToEnd",
    value: function scrollToEnd(params) {
      var animated = params ? params.animated : true;
      var veryLast = this.props.getItemCount(this.props.data) - 1;
      var frame = this._getFrameMetricsApprox(veryLast);
      var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);
      if (this._scrollRef == null) {
        return;
      }
      if (this._scrollRef.scrollTo == null) {
        console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
        return;
      }
      this._scrollRef.scrollTo(horizontalOrDefault(this.props.horizontal) ? {
        x: offset,
        animated: animated
      } : {
        y: offset,
        animated: animated
      });
    }
  }, {
    key: "scrollToIndex",
    value: function scrollToIndex(params) {
      var _this$props4 = this.props,
        data = _this$props4.data,
        horizontal = _this$props4.horizontal,
        getItemCount = _this$props4.getItemCount,
        getItemLayout = _this$props4.getItemLayout,
        onScrollToIndexFailed = _this$props4.onScrollToIndexFailed;
      var animated = params.animated,
        index = params.index,
        viewOffset = params.viewOffset,
        viewPosition = params.viewPosition;
      invariant(index >= 0, "scrollToIndex out of range: requested index " + index + " but minimum is 0");
      invariant(getItemCount(data) >= 1, "scrollToIndex out of range: item length " + getItemCount(data) + " but minimum is 1");
      invariant(index < getItemCount(data), "scrollToIndex out of range: requested index " + index + " is out of 0 to " + (getItemCount(data) - 1));
      if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
        invariant(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
        onScrollToIndexFailed({
          averageItemLength: this._averageCellLength,
          highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
          index: index
        });
        return;
      }
      var frame = this._getFrameMetricsApprox(index);
      var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
      if (this._scrollRef == null) {
        return;
      }
      if (this._scrollRef.scrollTo == null) {
        console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
        return;
      }
      this._scrollRef.scrollTo(horizontal ? {
        x: offset,
        animated: animated
      } : {
        y: offset,
        animated: animated
      });
    }
  }, {
    key: "scrollToItem",
    value: function scrollToItem(params) {
      var item = params.item;
      var _this$props5 = this.props,
        data = _this$props5.data,
        getItem = _this$props5.getItem,
        getItemCount = _this$props5.getItemCount;
      var itemCount = getItemCount(data);
      for (var _index = 0; _index < itemCount; _index++) {
        if (getItem(data, _index) === item) {
          this.scrollToIndex((0, _extends2.default)({}, params, {
            index: _index
          }));
          break;
        }
      }
    }
  }, {
    key: "scrollToOffset",
    value: function scrollToOffset(params) {
      var animated = params.animated,
        offset = params.offset;
      if (this._scrollRef == null) {
        return;
      }
      if (this._scrollRef.scrollTo == null) {
        console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
        return;
      }
      this._scrollRef.scrollTo(horizontalOrDefault(this.props.horizontal) ? {
        x: offset,
        animated: animated
      } : {
        y: offset,
        animated: animated
      });
    }
  }, {
    key: "recordInteraction",
    value: function recordInteraction() {
      this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref.recordInteraction();
      });
      this._viewabilityTuples.forEach(function (t) {
        t.viewabilityHelper.recordInteraction();
      });
      this._updateViewableItems(this.props.data);
    }
  }, {
    key: "flashScrollIndicators",
    value: function flashScrollIndicators() {
      if (this._scrollRef == null) {
        return;
      }
      this._scrollRef.flashScrollIndicators();
    }
  }, {
    key: "getScrollResponder",
    value: function getScrollResponder() {
      if (this._scrollRef && this._scrollRef.getScrollResponder) {
        return this._scrollRef.getScrollResponder();
      }
    }
  }, {
    key: "getScrollableNode",
    value: function getScrollableNode() {
      if (this._scrollRef && this._scrollRef.getScrollableNode) {
        return this._scrollRef.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollRef);
      }
    }
  }, {
    key: "getScrollRef",
    value: function getScrollRef() {
      if (this._scrollRef && this._scrollRef.getScrollRef) {
        return this._scrollRef.getScrollRef();
      } else {
        return this._scrollRef;
      }
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps(props) {
      if (this._scrollRef) {
        this._scrollRef.setNativeProps(props);
      }
    }
  }, {
    key: "_getCellKey",
    value: function _getCellKey() {
      var _this$context;
      return ((_this$context = this.context) == null ? void 0 : _this$context.cellKey) || 'rootList';
    }
  }, {
    key: "_getListKey",
    value: function _getListKey() {
      return this.props.listKey || this._getCellKey();
    }
  }, {
    key: "_getDebugInfo",
    value: function _getDebugInfo() {
      var _this$context2;
      return {
        listKey: this._getListKey(),
        cellKey: this._getCellKey(),
        horizontal: horizontalOrDefault(this.props.horizontal),
        parent: (_this$context2 = this.context) == null ? void 0 : _this$context2.debugInfo
      };
    }
  }, {
    key: "hasMore",
    value: function hasMore() {
      return this._hasMore;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this._isNestedWithSameOrientation()) {
        this.context.registerAsNestedChild({
          cellKey: this._getCellKey(),
          key: this._getListKey(),
          ref: this,
          parentDebugInfo: this.context.debugInfo
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._isNestedWithSameOrientation()) {
        this.context.unregisterAsNestedChild({
          key: this._getListKey(),
          state: {
            first: this.state.first,
            last: this.state.last,
            frames: this._frames
          }
        });
      }
      this._updateViewableItems(null);
      this._updateCellsToRenderBatcher.dispose({
        abort: true
      });
      this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.dispose();
      });
      this._fillRateHelper.deactivateAndFlush();
    }
  }, {
    key: "_pushCells",
    value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
      var _this2 = this;
      var _this$props6 = this.props,
        CellRendererComponent = _this$props6.CellRendererComponent,
        ItemSeparatorComponent = _this$props6.ItemSeparatorComponent,
        data = _this$props6.data,
        getItem = _this$props6.getItem,
        getItemCount = _this$props6.getItemCount,
        horizontal = _this$props6.horizontal;
      var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
      var end = getItemCount(data) - 1;
      var prevCellKey;
      last = Math.min(end, last);
      var _loop = function _loop(ii) {
        var item = getItem(data, ii);
        var key = _this2._keyExtractor(item, ii);
        _this2._indicesToKeys.set(ii, key);
        if (stickyIndicesFromProps.has(ii + stickyOffset)) {
          stickyHeaderIndices.push(cells.length);
        }
        cells.push((0, _jsxRuntime.jsx)(CellRenderer, {
          CellRendererComponent: CellRendererComponent,
          ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
          cellKey: key,
          fillRateHelper: _this2._fillRateHelper,
          horizontal: horizontal,
          index: ii,
          inversionStyle: inversionStyle,
          item: item,
          prevCellKey: prevCellKey,
          onUpdateSeparators: _this2._onUpdateSeparators,
          onLayout: function onLayout(e) {
            return _this2._onCellLayout(e, key, ii);
          },
          onUnmount: _this2._onCellUnmount,
          parentProps: _this2.props,
          ref: function ref(_ref) {
            _this2._cellRefs[key] = _ref;
          }
        }, key));
        prevCellKey = key;
      };
      for (var ii = first; ii <= last; ii++) {
        _loop(ii);
      }
    }
  }, {
    key: "_isVirtualizationDisabled",
    value: function _isVirtualizationDisabled() {
      return this.props.disableVirtualization || false;
    }
  }, {
    key: "_isNestedWithSameOrientation",
    value: function _isNestedWithSameOrientation() {
      var nestedContext = this.context;
      return !!(nestedContext && !!nestedContext.horizontal === horizontalOrDefault(this.props.horizontal));
    }
  }, {
    key: "_keyExtractor",
    value: function _keyExtractor(item, index) {
      if (this.props.keyExtractor != null) {
        return this.props.keyExtractor(item, index);
      }
      var key = (0, _VirtualizeUtils.keyExtractor)(item, index);
      if (key === String(index)) {
        _usedIndexForKey = true;
        if (item.type && item.type.displayName) {
          _keylessItemComponentName = item.type.displayName;
        }
      }
      return key;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      if (__DEV__) {
        var flatStyles = flattenStyle(this.props.contentContainerStyle);
        if (flatStyles != null && flatStyles.flexWrap === 'wrap') {
          console.warn('`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
        }
      }
      var _this$props7 = this.props,
        ListEmptyComponent = _this$props7.ListEmptyComponent,
        ListFooterComponent = _this$props7.ListFooterComponent,
        ListHeaderComponent = _this$props7.ListHeaderComponent;
      var _this$props8 = this.props,
        data = _this$props8.data,
        horizontal = _this$props8.horizontal;
      var isVirtualizationDisabled = this._isVirtualizationDisabled();
      var inversionStyle = this.props.inverted ? horizontalOrDefault(this.props.horizontal) ? styles.horizontallyInverted : styles.verticallyInverted : null;
      var cells = [];
      var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
      var stickyHeaderIndices = [];
      if (ListHeaderComponent) {
        if (stickyIndicesFromProps.has(0)) {
          stickyHeaderIndices.push(0);
        }
        var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : (0, _jsxRuntime.jsx)(ListHeaderComponent, {});
        cells.push((0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this._getCellKey() + '-header',
          children: (0, _jsxRuntime.jsx)(View, {
            onLayout: this._onLayoutHeader,
            style: StyleSheet.compose(inversionStyle, this.props.ListHeaderComponentStyle),
            children: element
          })
        }, "$header"));
      }
      var itemCount = this.props.getItemCount(data);
      if (itemCount > 0) {
        _usedIndexForKey = false;
        _keylessItemComponentName = '';
        var spacerKey = this._getSpacerKey(!horizontal);
        var lastInitialIndex = this.props.initialScrollIndex ? -1 : initialNumToRenderOrDefault(this.props.initialNumToRender) - 1;
        var _this$state = this.state,
          first = _this$state.first,
          last = _this$state.last;
        this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);
        var firstAfterInitial = Math.max(lastInitialIndex + 1, first);
        if (!isVirtualizationDisabled && first > lastInitialIndex + 1) {
          var insertedStickySpacer = false;
          if (stickyIndicesFromProps.size > 0) {
            var stickyOffset = ListHeaderComponent ? 1 : 0;
            for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
              if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                var initBlock = this._getFrameMetricsApprox(lastInitialIndex);
                var stickyBlock = this._getFrameMetricsApprox(ii);
                var leadSpace = stickyBlock.offset - initBlock.offset - (this.props.initialScrollIndex ? 0 : initBlock.length);
                cells.push((0, _jsxRuntime.jsx)(View, {
                  style: (0, _defineProperty2.default)({}, spacerKey, leadSpace)
                }, "$sticky_lead"));
                this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);
                var trailSpace = this._getFrameMetricsApprox(first).offset - (stickyBlock.offset + stickyBlock.length);
                cells.push((0, _jsxRuntime.jsx)(View, {
                  style: (0, _defineProperty2.default)({}, spacerKey, trailSpace)
                }, "$sticky_trail"));
                insertedStickySpacer = true;
                break;
              }
            }
          }
          if (!insertedStickySpacer) {
            var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);
            var firstSpace = this._getFrameMetricsApprox(first).offset - (_initBlock.offset + _initBlock.length);
            cells.push((0, _jsxRuntime.jsx)(View, {
              style: (0, _defineProperty2.default)({}, spacerKey, firstSpace)
            }, "$lead_spacer"));
          }
        }
        this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, last, inversionStyle);
        if (!this._hasWarned.keys && _usedIndexForKey) {
          console.warn('VirtualizedList: missing keys for items, make sure to specify a key or id property on each ' + 'item or provide a custom keyExtractor.', _keylessItemComponentName);
          this._hasWarned.keys = true;
        }
        if (!isVirtualizationDisabled && last < itemCount - 1) {
          var lastFrame = this._getFrameMetricsApprox(last);
          var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);
          var endFrame = this._getFrameMetricsApprox(end);
          var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
          cells.push((0, _jsxRuntime.jsx)(View, {
            style: (0, _defineProperty2.default)({}, spacerKey, tailSpacerLength)
          }, "$tail_spacer"));
        }
      } else if (ListEmptyComponent) {
        var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : (0, _jsxRuntime.jsx)(ListEmptyComponent, {});
        cells.push(React.cloneElement(_element, {
          key: '$empty',
          onLayout: function onLayout(event) {
            _this3._onLayoutEmpty(event);
            if (_element.props.onLayout) {
              _element.props.onLayout(event);
            }
          },
          style: StyleSheet.compose(inversionStyle, _element.props.style)
        }));
      }
      if (ListFooterComponent) {
        var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : (0, _jsxRuntime.jsx)(ListFooterComponent, {});
        cells.push((0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this._getFooterCellKey(),
          children: (0, _jsxRuntime.jsx)(View, {
            onLayout: this._onLayoutFooter,
            style: StyleSheet.compose(inversionStyle, this.props.ListFooterComponentStyle),
            children: _element2
          })
        }, "$footer"));
      }
      var scrollProps = (0, _extends2.default)({}, this.props, {
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        onScroll: this._onScroll,
        onScrollBeginDrag: this._onScrollBeginDrag,
        onScrollEndDrag: this._onScrollEndDrag,
        onMomentumScrollBegin: this._onMomentumScrollBegin,
        onMomentumScrollEnd: this._onMomentumScrollEnd,
        scrollEventThrottle: scrollEventThrottleOrDefault(this.props.scrollEventThrottle),
        invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
        stickyHeaderIndices: stickyHeaderIndices,
        style: inversionStyle ? [inversionStyle, this.props.style] : this.props.style
      });
      this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
      var innerRet = (0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListContextProvider, {
        value: {
          cellKey: null,
          getScrollMetrics: this._getScrollMetrics,
          horizontal: horizontalOrDefault(this.props.horizontal),
          getOutermostParentListRef: this._getOutermostParentListRef,
          getNestedChildState: this._getNestedChildState,
          registerAsNestedChild: this._registerAsNestedChild,
          unregisterAsNestedChild: this._unregisterAsNestedChild,
          debugInfo: this._getDebugInfo()
        },
        children: React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
          ref: this._captureScrollRef
        }, cells)
      });
      var ret = innerRet;
      if (__DEV__) {
        ret = (0, _jsxRuntime.jsx)(ScrollView.Context.Consumer, {
          children: function children(scrollContext) {
            if (scrollContext != null && !scrollContext.horizontal === !horizontalOrDefault(_this3.props.horizontal) && !_this3._hasWarned.nesting && _this3.context == null) {
              console.error('VirtualizedLists should never be nested inside plain ScrollViews with the same ' + 'orientation because it can break windowing and other functionality - use another ' + 'VirtualizedList-backed container instead.');
              _this3._hasWarned.nesting = true;
            }
            return innerRet;
          }
        });
      }
      if (this.props.debug) {
        return (0, _jsxRuntime.jsxs)(View, {
          style: styles.debug,
          children: [ret, this._renderDebugOverlay()]
        });
      } else {
        return ret;
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props9 = this.props,
        data = _this$props9.data,
        extraData = _this$props9.extraData;
      if (data !== prevProps.data || extraData !== prevProps.extraData) {
        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.resetViewableIndices();
        });
      }
      var hiPriInProgress = this._hiPriInProgress;
      this._scheduleCellsToRenderUpdate();
      if (hiPriInProgress) {
        this._hiPriInProgress = false;
      }
    }
  }, {
    key: "_computeBlankness",
    value: function _computeBlankness() {
      this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
    }
  }, {
    key: "_onCellLayout",
    value: function _onCellLayout(e, cellKey, index) {
      var layout = e.nativeEvent.layout;
      var next = {
        offset: this._selectOffset(layout),
        length: this._selectLength(layout),
        index: index,
        inLayout: true
      };
      var curr = this._frames[cellKey];
      if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
        this._totalCellLength += next.length - (curr ? curr.length : 0);
        this._totalCellsMeasured += curr ? 0 : 1;
        this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
        this._frames[cellKey] = next;
        this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);
        this._scheduleCellsToRenderUpdate();
      } else {
        this._frames[cellKey].inLayout = true;
      }
      this._triggerRemeasureForChildListsInCell(cellKey);
      this._computeBlankness();
      this._updateViewableItems(this.props.data);
    }
  }, {
    key: "_triggerRemeasureForChildListsInCell",
    value: function _triggerRemeasureForChildListsInCell(cellKey) {
      var childListKeys = this._cellKeysToChildListKeys.get(cellKey);
      if (childListKeys) {
        for (var _iterator2 = _createForOfIteratorHelperLoose(childListKeys), _step2; !(_step2 = _iterator2()).done;) {
          var childKey = _step2.value;
          var childList = this._nestedChildLists.get(childKey);
          childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
        }
      }
    }
  }, {
    key: "measureLayoutRelativeToContainingList",
    value: function measureLayoutRelativeToContainingList() {
      var _this4 = this;
      try {
        if (!this._scrollRef) {
          return;
        }
        this._scrollRef.measureLayout(this.context.getOutermostParentListRef().getScrollRef(), function (x, y, width, height) {
          _this4._offsetFromParentVirtualizedList = _this4._selectOffset({
            x: x,
            y: y
          });
          _this4._scrollMetrics.contentLength = _this4._selectLength({
            width: width,
            height: height
          });
          var scrollMetrics = _this4._convertParentScrollMetrics(_this4.context.getScrollMetrics());
          var metricsChanged = _this4._scrollMetrics.visibleLength !== scrollMetrics.visibleLength || _this4._scrollMetrics.offset !== scrollMetrics.offset;
          if (metricsChanged) {
            _this4._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
            _this4._scrollMetrics.offset = scrollMetrics.offset;
            _this4._cellKeysToChildListKeys.forEach(function (childListKeys) {
              if (childListKeys) {
                for (var _iterator3 = _createForOfIteratorHelperLoose(childListKeys), _step3; !(_step3 = _iterator3()).done;) {
                  var childKey = _step3.value;
                  var childList = _this4._nestedChildLists.get(childKey);
                  childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
                }
              }
            });
          }
        }, function (error) {
          console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
        });
      } catch (error) {
        console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
      }
    }
  }, {
    key: "_getFooterCellKey",
    value: function _getFooterCellKey() {
      return this._getCellKey() + '-footer';
    }
  }, {
    key: "_renderDebugOverlay",
    value: function _renderDebugOverlay() {
      var normalize = this._scrollMetrics.visibleLength / (this._scrollMetrics.contentLength || 1);
      var framesInLayout = [];
      var itemCount = this.props.getItemCount(this.props.data);
      for (var ii = 0; ii < itemCount; ii++) {
        var frame = this._getFrameMetricsApprox(ii);
        if (frame.inLayout) {
          framesInLayout.push(frame);
        }
      }
      var windowTop = this._getFrameMetricsApprox(this.state.first).offset;
      var frameLast = this._getFrameMetricsApprox(this.state.last);
      var windowLen = frameLast.offset + frameLast.length - windowTop;
      var visTop = this._scrollMetrics.offset;
      var visLen = this._scrollMetrics.visibleLength;
      return (0, _jsxRuntime.jsxs)(View, {
        style: [styles.debugOverlayBase, styles.debugOverlay],
        children: [framesInLayout.map(function (f, ii) {
          return (0, _jsxRuntime.jsx)(View, {
            style: [styles.debugOverlayBase, styles.debugOverlayFrame, {
              top: f.offset * normalize,
              height: f.length * normalize
            }]
          }, 'f' + ii);
        }), (0, _jsxRuntime.jsx)(View, {
          style: [styles.debugOverlayBase, styles.debugOverlayFrameLast, {
            top: windowTop * normalize,
            height: windowLen * normalize
          }]
        }), (0, _jsxRuntime.jsx)(View, {
          style: [styles.debugOverlayBase, styles.debugOverlayFrameVis, {
            top: visTop * normalize,
            height: visLen * normalize
          }]
        })]
      });
    }
  }, {
    key: "_selectLength",
    value: function _selectLength(metrics) {
      return !horizontalOrDefault(this.props.horizontal) ? metrics.height : metrics.width;
    }
  }, {
    key: "_selectOffset",
    value: function _selectOffset(metrics) {
      return !horizontalOrDefault(this.props.horizontal) ? metrics.y : metrics.x;
    }
  }, {
    key: "_maybeCallOnEndReached",
    value: function _maybeCallOnEndReached() {
      var _this$props10 = this.props,
        data = _this$props10.data,
        getItemCount = _this$props10.getItemCount,
        onEndReached = _this$props10.onEndReached,
        onEndReachedThreshold = _this$props10.onEndReachedThreshold;
      var _this$_scrollMetrics2 = this._scrollMetrics,
        contentLength = _this$_scrollMetrics2.contentLength,
        visibleLength = _this$_scrollMetrics2.visibleLength,
        offset = _this$_scrollMetrics2.offset;
      var distanceFromEnd = contentLength - visibleLength - offset;
      var threshold = onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : 2;
      if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < threshold && this._scrollMetrics.contentLength !== this._sentEndForContentLength) {
        this._sentEndForContentLength = this._scrollMetrics.contentLength;
        onEndReached({
          distanceFromEnd: distanceFromEnd
        });
      } else if (distanceFromEnd > threshold) {
        this._sentEndForContentLength = 0;
      }
    }
  }, {
    key: "_scheduleCellsToRenderUpdate",
    value: function _scheduleCellsToRenderUpdate() {
      var _this$state2 = this.state,
        first = _this$state2.first,
        last = _this$state2.last;
      var _this$_scrollMetrics3 = this._scrollMetrics,
        offset = _this$_scrollMetrics3.offset,
        visibleLength = _this$_scrollMetrics3.visibleLength,
        velocity = _this$_scrollMetrics3.velocity;
      var itemCount = this.props.getItemCount(this.props.data);
      var hiPri = false;
      var onEndReachedThreshold = onEndReachedThresholdOrDefault(this.props.onEndReachedThreshold);
      var scrollingThreshold = onEndReachedThreshold * visibleLength / 2;
      if (first > 0) {
        var distTop = offset - this._getFrameMetricsApprox(first).offset;
        hiPri = hiPri || distTop < 0 || velocity < -2 && distTop < scrollingThreshold;
      }
      if (last < itemCount - 1) {
        var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
        hiPri = hiPri || distBottom < 0 || velocity > 2 && distBottom < scrollingThreshold;
      }
      if (hiPri && (this._averageCellLength || this.props.getItemLayout) && !this._hiPriInProgress) {
        this._hiPriInProgress = true;
        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });
        this._updateCellsToRender();
        return;
      } else {
        this._updateCellsToRenderBatcher.schedule();
      }
    }
  }, {
    key: "_updateViewableItems",
    value: function _updateViewableItems(data) {
      var _this5 = this;
      var getItemCount = this.props.getItemCount;
      this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.onUpdate(getItemCount(data), _this5._scrollMetrics.offset, _this5._scrollMetrics.visibleLength, _this5._getFrameMetrics, _this5._createViewToken, tuple.onViewableItemsChanged, _this5.state);
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(newProps, prevState) {
      var data = newProps.data,
        getItemCount = newProps.getItemCount;
      var maxToRenderPerBatch = maxToRenderPerBatchOrDefault(newProps.maxToRenderPerBatch);
      return {
        first: Math.max(0, Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
        last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1))
      };
    }
  }]);
  return VirtualizedList;
}(React.PureComponent);
VirtualizedList.contextType = _VirtualizedListContext.VirtualizedListContext;
var CellRenderer = function (_React$Component) {
  (0, _inherits2.default)(CellRenderer, _React$Component);
  var _super2 = _createSuper(CellRenderer);
  function CellRenderer() {
    var _this6;
    (0, _classCallCheck2.default)(this, CellRenderer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this6 = _super2.call.apply(_super2, [this].concat(args));
    _this6.state = {
      separatorProps: {
        highlighted: false,
        leadingItem: _this6.props.item
      }
    };
    _this6._separators = {
      highlight: function highlight() {
        var _this6$props = _this6.props,
          cellKey = _this6$props.cellKey,
          prevCellKey = _this6$props.prevCellKey;
        _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: true
        });
      },
      unhighlight: function unhighlight() {
        var _this6$props2 = _this6.props,
          cellKey = _this6$props2.cellKey,
          prevCellKey = _this6$props2.prevCellKey;
        _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: false
        });
      },
      updateProps: function updateProps(select, newProps) {
        var _this6$props3 = _this6.props,
          cellKey = _this6$props3.cellKey,
          prevCellKey = _this6$props3.prevCellKey;
        _this6.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
      }
    };
    return _this6;
  }
  (0, _createClass2.default)(CellRenderer, [{
    key: "updateSeparatorProps",
    value: function updateSeparatorProps(newProps) {
      this.setState(function (state) {
        return {
          separatorProps: (0, _extends2.default)({}, state.separatorProps, newProps)
        };
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.onUnmount(this.props.cellKey);
    }
  }, {
    key: "_renderElement",
    value: function _renderElement(renderItem, ListItemComponent, item, index) {
      if (renderItem && ListItemComponent) {
        console.warn('VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' + ' precedence over renderItem.');
      }
      if (ListItemComponent) {
        return React.createElement(ListItemComponent, {
          item: item,
          index: index,
          separators: this._separators
        });
      }
      if (renderItem) {
        return renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
      }
      invariant(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props11 = this.props,
        CellRendererComponent = _this$props11.CellRendererComponent,
        ItemSeparatorComponent = _this$props11.ItemSeparatorComponent,
        fillRateHelper = _this$props11.fillRateHelper,
        horizontal = _this$props11.horizontal,
        item = _this$props11.item,
        index = _this$props11.index,
        inversionStyle = _this$props11.inversionStyle,
        parentProps = _this$props11.parentProps;
      var renderItem = parentProps.renderItem,
        getItemLayout = parentProps.getItemLayout,
        ListItemComponent = parentProps.ListItemComponent;
      var element = this._renderElement(renderItem, ListItemComponent, item, index);
      var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;
      var itemSeparator = ItemSeparatorComponent && (0, _jsxRuntime.jsx)(ItemSeparatorComponent, (0, _extends2.default)({}, this.state.separatorProps));
      var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;
      var result = !CellRendererComponent ? (0, _jsxRuntime.jsxs)(View, {
        style: cellStyle,
        onLayout: onLayout,
        children: [element, itemSeparator]
      }) : (0, _jsxRuntime.jsxs)(CellRendererComponent, (0, _extends2.default)({}, this.props, {
        style: cellStyle,
        onLayout: onLayout,
        children: [element, itemSeparator]
      }));
      return (0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
        cellKey: this.props.cellKey,
        children: result
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, prevState) {
      return {
        separatorProps: (0, _extends2.default)({}, prevState.separatorProps, {
          leadingItem: props.item
        })
      };
    }
  }]);
  return CellRenderer;
}(React.Component);
function describeNestedLists(childList) {
  var trace = 'VirtualizedList trace:\n' + ("  Child (" + (childList.horizontal ? 'horizontal' : 'vertical') + "):\n") + ("    listKey: " + childList.key + "\n") + ("    cellKey: " + childList.cellKey);
  var debugInfo = childList.parentDebugInfo;
  while (debugInfo) {
    trace += "\n  Parent (" + (debugInfo.horizontal ? 'horizontal' : 'vertical') + "):\n" + ("    listKey: " + debugInfo.listKey + "\n") + ("    cellKey: " + debugInfo.cellKey);
    debugInfo = debugInfo.parent;
  }
  return trace;
}
var styles = StyleSheet.create({
  verticallyInverted: {
    transform: [{
      scaleY: -1
    }]
  },
  horizontallyInverted: {
    transform: [{
      scaleX: -1
    }]
  },
  row: {
    flexDirection: 'row'
  },
  rowReverse: {
    flexDirection: 'row-reverse'
  },
  columnReverse: {
    flexDirection: 'column-reverse'
  },
  debug: {
    flex: 1
  },
  debugOverlayBase: {
    position: 'absolute',
    top: 0,
    right: 0
  },
  debugOverlay: {
    bottom: 0,
    width: 20,
    borderColor: 'blue',
    borderWidth: 1
  },
  debugOverlayFrame: {
    left: 0,
    backgroundColor: 'orange'
  },
  debugOverlayFrameLast: {
    left: 0,
    borderColor: 'green',
    borderWidth: 2
  },
  debugOverlayFrameVis: {
    left: 0,
    borderColor: 'red',
    borderWidth: 2
  }
});
module.exports = VirtualizedList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlydHVhbGl6ZVV0aWxzIiwicmVxdWlyZSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfVmlydHVhbGl6ZWRMaXN0Q29udGV4dCIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UiLCJvIiwiYWxsb3dBcnJheUxpa2UiLCJpdCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibmV4dCIsImJpbmQiLCJBcnJheSIsImlzQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJsZW5ndGgiLCJpIiwiZG9uZSIsInZhbHVlIiwiVHlwZUVycm9yIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJuIiwidG9TdHJpbmciLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiYXJyIiwibGVuIiwiYXJyMiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YyIiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwiQmF0Y2hpbmF0b3IiLCJGaWxsUmF0ZUhlbHBlciIsIlJlYWN0TmF0aXZlIiwiUmVmcmVzaENvbnRyb2wiLCJTY3JvbGxWaWV3IiwiU3R5bGVTaGVldCIsIlZpZXciLCJWaWV3YWJpbGl0eUhlbHBlciIsImZsYXR0ZW5TdHlsZSIsImluZm9Mb2ciLCJpbnZhcmlhbnQiLCJfdXNlZEluZGV4Rm9yS2V5IiwiX2tleWxlc3NJdGVtQ29tcG9uZW50TmFtZSIsImhvcml6b250YWxPckRlZmF1bHQiLCJob3Jpem9udGFsIiwiaW5pdGlhbE51bVRvUmVuZGVyT3JEZWZhdWx0IiwiaW5pdGlhbE51bVRvUmVuZGVyIiwibWF4VG9SZW5kZXJQZXJCYXRjaE9yRGVmYXVsdCIsIm1heFRvUmVuZGVyUGVyQmF0Y2giLCJvbkVuZFJlYWNoZWRUaHJlc2hvbGRPckRlZmF1bHQiLCJvbkVuZFJlYWNoZWRUaHJlc2hvbGQiLCJzY3JvbGxFdmVudFRocm90dGxlT3JEZWZhdWx0Iiwic2Nyb2xsRXZlbnRUaHJvdHRsZSIsIndpbmRvd1NpemVPckRlZmF1bHQiLCJ3aW5kb3dTaXplIiwiVmlydHVhbGl6ZWRMaXN0IiwiX1JlYWN0JFB1cmVDb21wb25lbnQiLCJfaW5oZXJpdHMyIiwiX3N1cGVyIiwicHJvcHMiLCJfdGhpcyRwcm9wcyR1cGRhdGVDZWwiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjazIiLCJfZ2V0U2Nyb2xsTWV0cmljcyIsIl9zY3JvbGxNZXRyaWNzIiwiX2dldE91dGVybW9zdFBhcmVudExpc3RSZWYiLCJfaXNOZXN0ZWRXaXRoU2FtZU9yaWVudGF0aW9uIiwiY29udGV4dCIsImdldE91dGVybW9zdFBhcmVudExpc3RSZWYiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiIsIl9nZXROZXN0ZWRDaGlsZFN0YXRlIiwiZXhpc3RpbmdDaGlsZERhdGEiLCJfbmVzdGVkQ2hpbGRMaXN0cyIsInN0YXRlIiwiX3JlZ2lzdGVyQXNOZXN0ZWRDaGlsZCIsImNoaWxkTGlzdCIsImNoaWxkTGlzdHNJbkNlbGwiLCJfY2VsbEtleXNUb0NoaWxkTGlzdEtleXMiLCJjZWxsS2V5IiwiU2V0IiwiYWRkIiwicmVmIiwiY29uc29sZSIsImVycm9yIiwiZGVzY3JpYmVOZXN0ZWRMaXN0cyIsIl9leHRlbmRzMiIsIl9oYXNJbnRlcmFjdGVkIiwicmVjb3JkSW50ZXJhY3Rpb24iLCJfdW5yZWdpc3RlckFzTmVzdGVkQ2hpbGQiLCJfb25VcGRhdGVTZXBhcmF0b3JzIiwia2V5cyIsIm5ld1Byb3BzIiwiZm9yRWFjaCIsIl9jZWxsUmVmcyIsInVwZGF0ZVNlcGFyYXRvclByb3BzIiwiX2dldFNwYWNlcktleSIsImlzVmVydGljYWwiLCJfYXZlcmFnZUNlbGxMZW5ndGgiLCJNYXAiLCJfZnJhbWVzIiwiX2Zvb3Rlckxlbmd0aCIsIl9oYXNEb25lSW5pdGlhbFNjcm9sbCIsIl9oYXNNb3JlIiwiX2hhc1dhcm5lZCIsIl9oZWFkZXJMZW5ndGgiLCJfaGlQcmlJblByb2dyZXNzIiwiX2hpZ2hlc3RNZWFzdXJlZEZyYW1lSW5kZXgiLCJfaW5kaWNlc1RvS2V5cyIsIl9vZmZzZXRGcm9tUGFyZW50VmlydHVhbGl6ZWRMaXN0IiwiX3ByZXZQYXJlbnRPZmZzZXQiLCJjb250ZW50TGVuZ3RoIiwiZE9mZnNldCIsImR0Iiwib2Zmc2V0IiwidGltZXN0YW1wIiwidmVsb2NpdHkiLCJ2aXNpYmxlTGVuZ3RoIiwiX3Njcm9sbFJlZiIsIl9zZW50RW5kRm9yQ29udGVudExlbmd0aCIsIl90b3RhbENlbGxMZW5ndGgiLCJfdG90YWxDZWxsc01lYXN1cmVkIiwiX3ZpZXdhYmlsaXR5VHVwbGVzIiwiX2NhcHR1cmVTY3JvbGxSZWYiLCJfZGVmYXVsdFJlbmRlclNjcm9sbENvbXBvbmVudCIsIm9uUmVmcmVzaCIsImpzeCIsIl9wcm9wcyRyZWZyZXNoaW5nIiwicmVmcmVzaGluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZWZyZXNoQ29udHJvbCIsInByb2dyZXNzVmlld09mZnNldCIsIl9vbkNlbGxVbm1vdW50IiwiY3VyciIsImluTGF5b3V0IiwiX29uTGF5b3V0IiwibWVhc3VyZUxheW91dFJlbGF0aXZlVG9Db250YWluaW5nTGlzdCIsIl9zZWxlY3RMZW5ndGgiLCJuYXRpdmVFdmVudCIsImxheW91dCIsIm9uTGF5b3V0IiwiX3NjaGVkdWxlQ2VsbHNUb1JlbmRlclVwZGF0ZSIsIl9tYXliZUNhbGxPbkVuZFJlYWNoZWQiLCJfb25MYXlvdXRFbXB0eSIsIl9vbkxheW91dEZvb3RlciIsIl90cmlnZ2VyUmVtZWFzdXJlRm9yQ2hpbGRMaXN0c0luQ2VsbCIsIl9nZXRGb290ZXJDZWxsS2V5IiwiX29uTGF5b3V0SGVhZGVyIiwiX29uQ29udGVudFNpemVDaGFuZ2UiLCJ3aWR0aCIsImhlaWdodCIsImluaXRpYWxTY3JvbGxJbmRleCIsImNvbnRlbnRPZmZzZXQiLCJzY3JvbGxUb0luZGV4IiwiYW5pbWF0ZWQiLCJpbmRleCIsIm9uQ29udGVudFNpemVDaGFuZ2UiLCJfY29udmVydFBhcmVudFNjcm9sbE1ldHJpY3MiLCJtZXRyaWNzIiwiX29uU2Nyb2xsIiwib25TY3JvbGwiLCJ0aW1lU3RhbXAiLCJsYXlvdXRNZWFzdXJlbWVudCIsImNvbnRlbnRTaXplIiwiX3NlbGVjdE9mZnNldCIsIl90aGlzJF9jb252ZXJ0UGFyZW50UyIsIk1hdGgiLCJtYXgiLCJwZXJmIiwicHJldkR0IiwiX3VwZGF0ZVZpZXdhYmxlSXRlbXMiLCJkYXRhIiwiX2ZpbGxSYXRlSGVscGVyIiwiYWN0aXZhdGUiLCJfY29tcHV0ZUJsYW5rbmVzcyIsIl9vblNjcm9sbEJlZ2luRHJhZyIsInR1cGxlIiwidmlld2FiaWxpdHlIZWxwZXIiLCJvblNjcm9sbEJlZ2luRHJhZyIsIl9vblNjcm9sbEVuZERyYWciLCJvblNjcm9sbEVuZERyYWciLCJfb25Nb21lbnR1bVNjcm9sbEJlZ2luIiwib25Nb21lbnR1bVNjcm9sbEJlZ2luIiwiX29uTW9tZW50dW1TY3JvbGxFbmQiLCJvbk1vbWVudHVtU2Nyb2xsRW5kIiwiX3VwZGF0ZUNlbGxzVG9SZW5kZXIiLCJfdGhpcyRwcm9wcyIsImdldEl0ZW1Db3VudCIsIl9vbkVuZFJlYWNoZWRUaHJlc2hvbGQiLCJpc1ZpcnR1YWxpemF0aW9uRGlzYWJsZWQiLCJfaXNWaXJ0dWFsaXphdGlvbkRpc2FibGVkIiwic2V0U3RhdGUiLCJuZXdTdGF0ZSIsIl90aGlzJF9zY3JvbGxNZXRyaWNzIiwiY29tcHV0ZVdpbmRvd2VkUmVuZGVyTGltaXRzIiwiX2dldEZyYW1lTWV0cmljc0FwcHJveCIsImRpc3RhbmNlRnJvbUVuZCIsInJlbmRlckFoZWFkIiwiZmlyc3QiLCJsYXN0IiwibWluIiwic2l6ZSIsIm5ld0ZpcnN0IiwibmV3TGFzdCIsImlpIiwiY2VsbEtleUZvckluZGV4IiwiY2hpbGRMaXN0S2V5cyIsInNvbWVDaGlsZEhhc01vcmUiLCJfaXRlcmF0b3IiLCJfc3RlcCIsImNoaWxkS2V5IiwiaGFzTW9yZSIsIl9jcmVhdGVWaWV3VG9rZW4iLCJpc1ZpZXdhYmxlIiwiX3RoaXMkcHJvcHMyIiwiZ2V0SXRlbSIsIml0ZW0iLCJfa2V5RXh0cmFjdG9yIiwiZnJhbWUiLCJfZ2V0RnJhbWVNZXRyaWNzIiwiZ2V0SXRlbUxheW91dCIsIl90aGlzJHByb3BzMyIsIl9faXNOYXRpdmUiLCJfdXBkYXRlQ2VsbHNUb1JlbmRlckJhdGNoZXIiLCJ1cGRhdGVDZWxsc0JhdGNoaW5nUGVyaW9kIiwidmlld2FiaWxpdHlDb25maWdDYWxsYmFja1BhaXJzIiwibWFwIiwicGFpciIsInZpZXdhYmlsaXR5Q29uZmlnIiwib25WaWV3YWJsZUl0ZW1zQ2hhbmdlZCIsInB1c2giLCJpbml0aWFsU3RhdGUiLCJzdG9yZWRTdGF0ZSIsImdldE5lc3RlZENoaWxkU3RhdGUiLCJfZ2V0TGlzdEtleSIsImZyYW1lcyIsIl9jcmVhdGVDbGFzczIiLCJzY3JvbGxUb0VuZCIsInBhcmFtcyIsInZlcnlMYXN0Iiwic2Nyb2xsVG8iLCJ3YXJuIiwieCIsInkiLCJfdGhpcyRwcm9wczQiLCJvblNjcm9sbFRvSW5kZXhGYWlsZWQiLCJ2aWV3T2Zmc2V0Iiwidmlld1Bvc2l0aW9uIiwiYXZlcmFnZUl0ZW1MZW5ndGgiLCJoaWdoZXN0TWVhc3VyZWRGcmFtZUluZGV4Iiwic2Nyb2xsVG9JdGVtIiwiX3RoaXMkcHJvcHM1IiwiaXRlbUNvdW50Iiwic2Nyb2xsVG9PZmZzZXQiLCJ0IiwiZmxhc2hTY3JvbGxJbmRpY2F0b3JzIiwiZ2V0U2Nyb2xsUmVzcG9uZGVyIiwiZ2V0U2Nyb2xsYWJsZU5vZGUiLCJmaW5kTm9kZUhhbmRsZSIsImdldFNjcm9sbFJlZiIsInNldE5hdGl2ZVByb3BzIiwiX2dldENlbGxLZXkiLCJfdGhpcyRjb250ZXh0IiwibGlzdEtleSIsIl9nZXREZWJ1Z0luZm8iLCJfdGhpcyRjb250ZXh0MiIsInBhcmVudCIsImRlYnVnSW5mbyIsImNvbXBvbmVudERpZE1vdW50IiwicmVnaXN0ZXJBc05lc3RlZENoaWxkIiwicGFyZW50RGVidWdJbmZvIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJ1bnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCIsImRpc3Bvc2UiLCJhYm9ydCIsImRlYWN0aXZhdGVBbmRGbHVzaCIsIl9wdXNoQ2VsbHMiLCJjZWxscyIsInN0aWNreUhlYWRlckluZGljZXMiLCJzdGlja3lJbmRpY2VzRnJvbVByb3BzIiwiaW52ZXJzaW9uU3R5bGUiLCJfdGhpczIiLCJfdGhpcyRwcm9wczYiLCJDZWxsUmVuZGVyZXJDb21wb25lbnQiLCJJdGVtU2VwYXJhdG9yQ29tcG9uZW50Iiwic3RpY2t5T2Zmc2V0IiwiTGlzdEhlYWRlckNvbXBvbmVudCIsImVuZCIsInByZXZDZWxsS2V5IiwiX2xvb3AiLCJDZWxsUmVuZGVyZXIiLCJ1bmRlZmluZWQiLCJmaWxsUmF0ZUhlbHBlciIsIm9uVXBkYXRlU2VwYXJhdG9ycyIsIl9vbkNlbGxMYXlvdXQiLCJvblVubW91bnQiLCJwYXJlbnRQcm9wcyIsImRpc2FibGVWaXJ0dWFsaXphdGlvbiIsIm5lc3RlZENvbnRleHQiLCJrZXlFeHRyYWN0b3IiLCJkZWZhdWx0S2V5RXh0cmFjdG9yIiwiU3RyaW5nIiwidHlwZSIsImRpc3BsYXlOYW1lIiwicmVuZGVyIiwiX3RoaXMzIiwiX19ERVZfXyIsImZsYXRTdHlsZXMiLCJjb250ZW50Q29udGFpbmVyU3R5bGUiLCJmbGV4V3JhcCIsIl90aGlzJHByb3BzNyIsIkxpc3RFbXB0eUNvbXBvbmVudCIsIkxpc3RGb290ZXJDb21wb25lbnQiLCJfdGhpcyRwcm9wczgiLCJpbnZlcnRlZCIsInN0eWxlcyIsImhvcml6b250YWxseUludmVydGVkIiwidmVydGljYWxseUludmVydGVkIiwiZWxlbWVudCIsImlzVmFsaWRFbGVtZW50IiwiVmlydHVhbGl6ZWRMaXN0Q2VsbENvbnRleHRQcm92aWRlciIsImNoaWxkcmVuIiwic3R5bGUiLCJjb21wb3NlIiwiTGlzdEhlYWRlckNvbXBvbmVudFN0eWxlIiwic3BhY2VyS2V5IiwibGFzdEluaXRpYWxJbmRleCIsIl90aGlzJHN0YXRlIiwiZmlyc3RBZnRlckluaXRpYWwiLCJpbnNlcnRlZFN0aWNreVNwYWNlciIsImluaXRCbG9jayIsInN0aWNreUJsb2NrIiwibGVhZFNwYWNlIiwiX2RlZmluZVByb3BlcnR5MiIsInRyYWlsU3BhY2UiLCJmaXJzdFNwYWNlIiwibGFzdEZyYW1lIiwiZW5kRnJhbWUiLCJ0YWlsU3BhY2VyTGVuZ3RoIiwiY2xvbmVFbGVtZW50IiwiZXZlbnQiLCJMaXN0Rm9vdGVyQ29tcG9uZW50U3R5bGUiLCJzY3JvbGxQcm9wcyIsImludmVydFN0aWNreUhlYWRlcnMiLCJpbm5lclJldCIsIlZpcnR1YWxpemVkTGlzdENvbnRleHRQcm92aWRlciIsImdldFNjcm9sbE1ldHJpY3MiLCJyZW5kZXJTY3JvbGxDb21wb25lbnQiLCJyZXQiLCJDb250ZXh0IiwiQ29uc3VtZXIiLCJzY3JvbGxDb250ZXh0IiwibmVzdGluZyIsImRlYnVnIiwianN4cyIsIl9yZW5kZXJEZWJ1Z092ZXJsYXkiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJfdGhpcyRwcm9wczkiLCJleHRyYURhdGEiLCJyZXNldFZpZXdhYmxlSW5kaWNlcyIsImhpUHJpSW5Qcm9ncmVzcyIsImNvbXB1dGVCbGFua25lc3MiLCJfaXRlcmF0b3IyIiwiX3N0ZXAyIiwiX3RoaXM0IiwibWVhc3VyZUxheW91dCIsInNjcm9sbE1ldHJpY3MiLCJtZXRyaWNzQ2hhbmdlZCIsIl9pdGVyYXRvcjMiLCJfc3RlcDMiLCJzdGFjayIsIm5vcm1hbGl6ZSIsImZyYW1lc0luTGF5b3V0Iiwid2luZG93VG9wIiwiZnJhbWVMYXN0Iiwid2luZG93TGVuIiwidmlzVG9wIiwidmlzTGVuIiwiZGVidWdPdmVybGF5QmFzZSIsImRlYnVnT3ZlcmxheSIsImYiLCJkZWJ1Z092ZXJsYXlGcmFtZSIsInRvcCIsImRlYnVnT3ZlcmxheUZyYW1lTGFzdCIsImRlYnVnT3ZlcmxheUZyYW1lVmlzIiwiX3RoaXMkcHJvcHMxMCIsIm9uRW5kUmVhY2hlZCIsIl90aGlzJF9zY3JvbGxNZXRyaWNzMiIsInRocmVzaG9sZCIsIl90aGlzJHN0YXRlMiIsIl90aGlzJF9zY3JvbGxNZXRyaWNzMyIsImhpUHJpIiwic2Nyb2xsaW5nVGhyZXNob2xkIiwiZGlzdFRvcCIsImRpc3RCb3R0b20iLCJzY2hlZHVsZSIsIl90aGlzNSIsIm9uVXBkYXRlIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwicHJldlN0YXRlIiwiUHVyZUNvbXBvbmVudCIsImNvbnRleHRUeXBlIiwiVmlydHVhbGl6ZWRMaXN0Q29udGV4dCIsIl9SZWFjdCRDb21wb25lbnQiLCJfc3VwZXIyIiwiX3RoaXM2IiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiY29uY2F0Iiwic2VwYXJhdG9yUHJvcHMiLCJoaWdobGlnaHRlZCIsImxlYWRpbmdJdGVtIiwiX3NlcGFyYXRvcnMiLCJoaWdobGlnaHQiLCJfdGhpczYkcHJvcHMiLCJ1bmhpZ2hsaWdodCIsIl90aGlzNiRwcm9wczIiLCJ1cGRhdGVQcm9wcyIsInNlbGVjdCIsIl90aGlzNiRwcm9wczMiLCJfcmVuZGVyRWxlbWVudCIsInJlbmRlckl0ZW0iLCJMaXN0SXRlbUNvbXBvbmVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXBhcmF0b3JzIiwiX3RoaXMkcHJvcHMxMSIsImVuYWJsZWQiLCJpdGVtU2VwYXJhdG9yIiwiY2VsbFN0eWxlIiwicm93UmV2ZXJzZSIsImNvbHVtblJldmVyc2UiLCJyb3ciLCJDb21wb25lbnQiLCJ0cmFjZSIsImNyZWF0ZSIsInRyYW5zZm9ybSIsInNjYWxlWSIsInNjYWxlWCIsImZsZXhEaXJlY3Rpb24iLCJmbGV4IiwicG9zaXRpb24iLCJyaWdodCIsImJvdHRvbSIsImJvcmRlckNvbG9yIiwiYm9yZGVyV2lkdGgiLCJsZWZ0IiwiYmFja2dyb3VuZENvbG9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlZpcnR1YWxpemVkTGlzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuY29uc3QgQmF0Y2hpbmF0b3IgPSByZXF1aXJlKCcuLi9JbnRlcmFjdGlvbi9CYXRjaGluYXRvcicpO1xuY29uc3QgRmlsbFJhdGVIZWxwZXIgPSByZXF1aXJlKCcuL0ZpbGxSYXRlSGVscGVyJyk7XG5jb25zdCBSZWFjdE5hdGl2ZSA9IHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJyk7XG5jb25zdCBSZWZyZXNoQ29udHJvbCA9IHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvUmVmcmVzaENvbnRyb2wvUmVmcmVzaENvbnRyb2wnKTtcbmNvbnN0IFNjcm9sbFZpZXcgPSByZXF1aXJlKCcuLi9Db21wb25lbnRzL1Njcm9sbFZpZXcvU2Nyb2xsVmlldycpO1xuY29uc3QgU3R5bGVTaGVldCA9IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCcpO1xuY29uc3QgVmlldyA9IHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvVmlldy9WaWV3Jyk7XG5jb25zdCBWaWV3YWJpbGl0eUhlbHBlciA9IHJlcXVpcmUoJy4vVmlld2FiaWxpdHlIZWxwZXInKTtcblxuY29uc3QgZmxhdHRlblN0eWxlID0gcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9mbGF0dGVuU3R5bGUnKTtcbmNvbnN0IGluZm9Mb2cgPSByZXF1aXJlKCcuLi9VdGlsaXRpZXMvaW5mb0xvZycpO1xuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbmltcG9ydCB7XG4gIGtleUV4dHJhY3RvciBhcyBkZWZhdWx0S2V5RXh0cmFjdG9yLFxuICBjb21wdXRlV2luZG93ZWRSZW5kZXJMaW1pdHMsXG59IGZyb20gJy4vVmlydHVhbGl6ZVV0aWxzJztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUge1Njcm9sbFJlc3BvbmRlclR5cGV9IGZyb20gJy4uL0NvbXBvbmVudHMvU2Nyb2xsVmlldy9TY3JvbGxWaWV3JztcbmltcG9ydCB0eXBlIHtWaWV3U3R5bGVQcm9wfSBmcm9tICcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IHR5cGUge1xuICBWaWV3YWJpbGl0eUNvbmZpZyxcbiAgVmlld1Rva2VuLFxuICBWaWV3YWJpbGl0eUNvbmZpZ0NhbGxiYWNrUGFpcixcbn0gZnJvbSAnLi9WaWV3YWJpbGl0eUhlbHBlcic7XG5pbXBvcnQge1xuICBWaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyLFxuICBWaXJ0dWFsaXplZExpc3RDb250ZXh0LFxuICBWaXJ0dWFsaXplZExpc3RDb250ZXh0UHJvdmlkZXIsXG4gIHR5cGUgQ2hpbGRMaXN0U3RhdGUsXG4gIHR5cGUgTGlzdERlYnVnSW5mbyxcbn0gZnJvbSAnLi9WaXJ0dWFsaXplZExpc3RDb250ZXh0LmpzJztcblxudHlwZSBJdGVtID0gYW55O1xuXG5leHBvcnQgdHlwZSBTZXBhcmF0b3JzID0ge1xuICBoaWdobGlnaHQ6ICgpID0+IHZvaWQsXG4gIHVuaGlnaGxpZ2h0OiAoKSA9PiB2b2lkLFxuICB1cGRhdGVQcm9wczogKHNlbGVjdDogJ2xlYWRpbmcnIHwgJ3RyYWlsaW5nJywgbmV3UHJvcHM6IE9iamVjdCkgPT4gdm9pZCxcbiAgLi4uXG59O1xuXG5leHBvcnQgdHlwZSBSZW5kZXJJdGVtUHJvcHM8SXRlbVQ+ID0ge1xuICBpdGVtOiBJdGVtVCxcbiAgaW5kZXg6IG51bWJlcixcbiAgc2VwYXJhdG9yczogU2VwYXJhdG9ycyxcbiAgLi4uXG59O1xuXG5leHBvcnQgdHlwZSBSZW5kZXJJdGVtVHlwZTxJdGVtVD4gPSAoXG4gIGluZm86IFJlbmRlckl0ZW1Qcm9wczxJdGVtVD4sXG4pID0+IFJlYWN0Lk5vZGU7XG5cbnR5cGUgVmlld2FiaWxpdHlIZWxwZXJDYWxsYmFja1R1cGxlID0ge1xuICB2aWV3YWJpbGl0eUhlbHBlcjogVmlld2FiaWxpdHlIZWxwZXIsXG4gIG9uVmlld2FibGVJdGVtc0NoYW5nZWQ6IChpbmZvOiB7XG4gICAgdmlld2FibGVJdGVtczogQXJyYXk8Vmlld1Rva2VuPixcbiAgICBjaGFuZ2VkOiBBcnJheTxWaWV3VG9rZW4+LFxuICAgIC4uLlxuICB9KSA9PiB2b2lkLFxuICAuLi5cbn07XG5cbnR5cGUgUmVxdWlyZWRQcm9wcyA9IHt8XG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBhY2Nlc3NvciBmdW5jdGlvbnMgYXNzdW1lIHRoaXMgaXMgYW4gQXJyYXk8e2tleTogc3RyaW5nfSB8IHtpZDogc3RyaW5nfT4gYnV0IHlvdSBjYW4gb3ZlcnJpZGVcbiAgICogZ2V0SXRlbSwgZ2V0SXRlbUNvdW50LCBhbmQga2V5RXh0cmFjdG9yIHRvIGhhbmRsZSBhbnkgdHlwZSBvZiBpbmRleC1iYXNlZCBkYXRhLlxuICAgKi9cbiAgZGF0YT86IGFueSxcbiAgLyoqXG4gICAqIEEgZ2VuZXJpYyBhY2Nlc3NvciBmb3IgZXh0cmFjdGluZyBhbiBpdGVtIGZyb20gYW55IHNvcnQgb2YgZGF0YSBibG9iLlxuICAgKi9cbiAgZ2V0SXRlbTogKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gP0l0ZW0sXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGhvdyBtYW55IGl0ZW1zIGFyZSBpbiB0aGUgZGF0YSBibG9iLlxuICAgKi9cbiAgZ2V0SXRlbUNvdW50OiAoZGF0YTogYW55KSA9PiBudW1iZXIsXG58fTtcbnR5cGUgT3B0aW9uYWxQcm9wcyA9IHt8XG4gIHJlbmRlckl0ZW0/OiA/UmVuZGVySXRlbVR5cGU8SXRlbT4sXG4gIC8qKlxuICAgKiBgZGVidWdgIHdpbGwgdHVybiBvbiBleHRyYSBsb2dnaW5nIGFuZCB2aXN1YWwgb3ZlcmxheXMgdG8gYWlkIHdpdGggZGVidWdnaW5nIGJvdGggdXNhZ2UgYW5kXG4gICAqIGltcGxlbWVudGF0aW9uLCBidXQgd2l0aCBhIHNpZ25pZmljYW50IHBlcmYgaGl0LlxuICAgKi9cbiAgZGVidWc/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIERFUFJFQ0FURUQ6IFZpcnR1YWxpemF0aW9uIHByb3ZpZGVzIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGFuZCBtZW1vcnkgb3B0aW1pemF0aW9ucywgYnV0IGZ1bGx5XG4gICAqIHVubW91bnRzIHJlYWN0IGluc3RhbmNlcyB0aGF0IGFyZSBvdXRzaWRlIG9mIHRoZSByZW5kZXIgd2luZG93LiBZb3Ugc2hvdWxkIG9ubHkgbmVlZCB0byBkaXNhYmxlXG4gICAqIHRoaXMgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAqL1xuICBkaXNhYmxlVmlydHVhbGl6YXRpb24/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIEEgbWFya2VyIHByb3BlcnR5IGZvciB0ZWxsaW5nIHRoZSBsaXN0IHRvIHJlLXJlbmRlciAoc2luY2UgaXQgaW1wbGVtZW50cyBgUHVyZUNvbXBvbmVudGApLiBJZlxuICAgKiBhbnkgb2YgeW91ciBgcmVuZGVySXRlbWAsIEhlYWRlciwgRm9vdGVyLCBldGMuIGZ1bmN0aW9ucyBkZXBlbmQgb24gYW55dGhpbmcgb3V0c2lkZSBvZiB0aGVcbiAgICogYGRhdGFgIHByb3AsIHN0aWNrIGl0IGhlcmUgYW5kIHRyZWF0IGl0IGltbXV0YWJseS5cbiAgICovXG4gIGV4dHJhRGF0YT86IGFueSxcbiAgLy8gZS5nLiBoZWlnaHQsIHlcbiAgZ2V0SXRlbUxheW91dD86IChcbiAgICBkYXRhOiBhbnksXG4gICAgaW5kZXg6IG51bWJlcixcbiAgKSA9PiB7XG4gICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICAuLi5cbiAgfSxcbiAgaG9yaXpvbnRhbD86ID9ib29sZWFuLFxuICAvKipcbiAgICogSG93IG1hbnkgaXRlbXMgdG8gcmVuZGVyIGluIHRoZSBpbml0aWFsIGJhdGNoLiBUaGlzIHNob3VsZCBiZSBlbm91Z2ggdG8gZmlsbCB0aGUgc2NyZWVuIGJ1dCBub3RcbiAgICogbXVjaCBtb3JlLiBOb3RlIHRoZXNlIGl0ZW1zIHdpbGwgbmV2ZXIgYmUgdW5tb3VudGVkIGFzIHBhcnQgb2YgdGhlIHdpbmRvd2VkIHJlbmRlcmluZyBpbiBvcmRlclxuICAgKiB0byBpbXByb3ZlIHBlcmNlaXZlZCBwZXJmb3JtYW5jZSBvZiBzY3JvbGwtdG8tdG9wIGFjdGlvbnMuXG4gICAqL1xuICBpbml0aWFsTnVtVG9SZW5kZXI/OiA/bnVtYmVyLFxuICAvKipcbiAgICogSW5zdGVhZCBvZiBzdGFydGluZyBhdCB0aGUgdG9wIHdpdGggdGhlIGZpcnN0IGl0ZW0sIHN0YXJ0IGF0IGBpbml0aWFsU2Nyb2xsSW5kZXhgLiBUaGlzXG4gICAqIGRpc2FibGVzIHRoZSBcInNjcm9sbCB0byB0b3BcIiBvcHRpbWl6YXRpb24gdGhhdCBrZWVwcyB0aGUgZmlyc3QgYGluaXRpYWxOdW1Ub1JlbmRlcmAgaXRlbXNcbiAgICogYWx3YXlzIHJlbmRlcmVkIGFuZCBpbW1lZGlhdGVseSByZW5kZXJzIHRoZSBpdGVtcyBzdGFydGluZyBhdCB0aGlzIGluaXRpYWwgaW5kZXguIFJlcXVpcmVzXG4gICAqIGBnZXRJdGVtTGF5b3V0YCB0byBiZSBpbXBsZW1lbnRlZC5cbiAgICovXG4gIGluaXRpYWxTY3JvbGxJbmRleD86ID9udW1iZXIsXG4gIC8qKlxuICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIHNjcm9sbC4gVXNlcyBzY2FsZSB0cmFuc2Zvcm1zIG9mIC0xLlxuICAgKi9cbiAgaW52ZXJ0ZWQ/OiA/Ym9vbGVhbixcbiAga2V5RXh0cmFjdG9yPzogPyhpdGVtOiBJdGVtLCBpbmRleDogbnVtYmVyKSA9PiBzdHJpbmcsXG4gIC8qKlxuICAgKiBFYWNoIGNlbGwgaXMgcmVuZGVyZWQgdXNpbmcgdGhpcyBlbGVtZW50LiBDYW4gYmUgYSBSZWFjdCBDb21wb25lbnQgQ2xhc3MsXG4gICAqIG9yIGEgcmVuZGVyIGZ1bmN0aW9uLiBEZWZhdWx0cyB0byB1c2luZyBWaWV3LlxuICAgKi9cbiAgQ2VsbFJlbmRlcmVyQ29tcG9uZW50PzogP1JlYWN0LkNvbXBvbmVudFR5cGU8YW55PixcbiAgLyoqXG4gICAqIFJlbmRlcmVkIGluIGJldHdlZW4gZWFjaCBpdGVtLCBidXQgbm90IGF0IHRoZSB0b3Agb3IgYm90dG9tLiBCeSBkZWZhdWx0LCBgaGlnaGxpZ2h0ZWRgIGFuZFxuICAgKiBgbGVhZGluZ0l0ZW1gIHByb3BzIGFyZSBwcm92aWRlZC4gYHJlbmRlckl0ZW1gIHByb3ZpZGVzIGBzZXBhcmF0b3JzLmhpZ2hsaWdodGAvYHVuaGlnaGxpZ2h0YFxuICAgKiB3aGljaCB3aWxsIHVwZGF0ZSB0aGUgYGhpZ2hsaWdodGVkYCBwcm9wLCBidXQgeW91IGNhbiBhbHNvIGFkZCBjdXN0b20gcHJvcHMgd2l0aFxuICAgKiBgc2VwYXJhdG9ycy51cGRhdGVQcm9wc2AuXG4gICAqL1xuICBJdGVtU2VwYXJhdG9yQ29tcG9uZW50PzogP1JlYWN0LkNvbXBvbmVudFR5cGU8YW55PixcbiAgLyoqXG4gICAqIFRha2VzIGFuIGl0ZW0gZnJvbSBgZGF0YWAgYW5kIHJlbmRlcnMgaXQgaW50byB0aGUgbGlzdC4gRXhhbXBsZSB1c2FnZTpcbiAgICpcbiAgICogICAgIDxGbGF0TGlzdFxuICAgKiAgICAgICBJdGVtU2VwYXJhdG9yQ29tcG9uZW50PXtQbGF0Zm9ybS5PUyAhPT0gJ2FuZHJvaWQnICYmICh7aGlnaGxpZ2h0ZWR9KSA9PiAoXG4gICAqICAgICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZS5zZXBhcmF0b3IsIGhpZ2hsaWdodGVkICYmIHttYXJnaW5MZWZ0OiAwfV19IC8+XG4gICAqICAgICAgICl9XG4gICAqICAgICAgIGRhdGE9e1t7dGl0bGU6ICdUaXRsZSBUZXh0Jywga2V5OiAnaXRlbTEnfV19XG4gICAqICAgICAgIExpc3RJdGVtQ29tcG9uZW50PXsoe2l0ZW0sIHNlcGFyYXRvcnN9KSA9PiAoXG4gICAqICAgICAgICAgPFRvdWNoYWJsZUhpZ2hsaWdodFxuICAgKiAgICAgICAgICAgb25QcmVzcz17KCkgPT4gdGhpcy5fb25QcmVzcyhpdGVtKX1cbiAgICogICAgICAgICAgIG9uU2hvd1VuZGVybGF5PXtzZXBhcmF0b3JzLmhpZ2hsaWdodH1cbiAgICogICAgICAgICAgIG9uSGlkZVVuZGVybGF5PXtzZXBhcmF0b3JzLnVuaGlnaGxpZ2h0fT5cbiAgICogICAgICAgICAgIDxWaWV3IHN0eWxlPXt7YmFja2dyb3VuZENvbG9yOiAnd2hpdGUnfX0+XG4gICAqICAgICAgICAgICAgIDxUZXh0PntpdGVtLnRpdGxlfTwvVGV4dD5cbiAgICogICAgICAgICAgIDwvVmlldz5cbiAgICogICAgICAgICA8L1RvdWNoYWJsZUhpZ2hsaWdodD5cbiAgICogICAgICAgKX1cbiAgICogICAgIC8+XG4gICAqXG4gICAqIFByb3ZpZGVzIGFkZGl0aW9uYWwgbWV0YWRhdGEgbGlrZSBgaW5kZXhgIGlmIHlvdSBuZWVkIGl0LCBhcyB3ZWxsIGFzIGEgbW9yZSBnZW5lcmljXG4gICAqIGBzZXBhcmF0b3JzLnVwZGF0ZVByb3BzYCBmdW5jdGlvbiB3aGljaCBsZXQncyB5b3Ugc2V0IHdoYXRldmVyIHByb3BzIHlvdSB3YW50IHRvIGNoYW5nZSB0aGVcbiAgICogcmVuZGVyaW5nIG9mIGVpdGhlciB0aGUgbGVhZGluZyBzZXBhcmF0b3Igb3IgdHJhaWxpbmcgc2VwYXJhdG9yIGluIGNhc2UgdGhlIG1vcmUgY29tbW9uXG4gICAqIGBoaWdobGlnaHRgIGFuZCBgdW5oaWdobGlnaHRgICh3aGljaCBzZXQgdGhlIGBoaWdobGlnaHRlZDogYm9vbGVhbmAgcHJvcCkgYXJlIGluc3VmZmljaWVudCBmb3JcbiAgICogeW91ciB1c2UtY2FzZS5cbiAgICovXG4gIExpc3RJdGVtQ29tcG9uZW50PzogPyhSZWFjdC5Db21wb25lbnRUeXBlPGFueT4gfCBSZWFjdC5FbGVtZW50PGFueT4pLFxuICAvKipcbiAgICogUmVuZGVyZWQgd2hlbiB0aGUgbGlzdCBpcyBlbXB0eS4gQ2FuIGJlIGEgUmVhY3QgQ29tcG9uZW50IENsYXNzLCBhIHJlbmRlciBmdW5jdGlvbiwgb3JcbiAgICogYSByZW5kZXJlZCBlbGVtZW50LlxuICAgKi9cbiAgTGlzdEVtcHR5Q29tcG9uZW50PzogPyhSZWFjdC5Db21wb25lbnRUeXBlPGFueT4gfCBSZWFjdC5FbGVtZW50PGFueT4pLFxuICAvKipcbiAgICogUmVuZGVyZWQgYXQgdGhlIGJvdHRvbSBvZiBhbGwgdGhlIGl0ZW1zLiBDYW4gYmUgYSBSZWFjdCBDb21wb25lbnQgQ2xhc3MsIGEgcmVuZGVyIGZ1bmN0aW9uLCBvclxuICAgKiBhIHJlbmRlcmVkIGVsZW1lbnQuXG4gICAqL1xuICBMaXN0Rm9vdGVyQ29tcG9uZW50PzogPyhSZWFjdC5Db21wb25lbnRUeXBlPGFueT4gfCBSZWFjdC5FbGVtZW50PGFueT4pLFxuICAvKipcbiAgICogU3R5bGluZyBmb3IgaW50ZXJuYWwgVmlldyBmb3IgTGlzdEZvb3RlckNvbXBvbmVudFxuICAgKi9cbiAgTGlzdEZvb3RlckNvbXBvbmVudFN0eWxlPzogVmlld1N0eWxlUHJvcCxcbiAgLyoqXG4gICAqIFJlbmRlcmVkIGF0IHRoZSB0b3Agb2YgYWxsIHRoZSBpdGVtcy4gQ2FuIGJlIGEgUmVhY3QgQ29tcG9uZW50IENsYXNzLCBhIHJlbmRlciBmdW5jdGlvbiwgb3JcbiAgICogYSByZW5kZXJlZCBlbGVtZW50LlxuICAgKi9cbiAgTGlzdEhlYWRlckNvbXBvbmVudD86ID8oUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+IHwgUmVhY3QuRWxlbWVudDxhbnk+KSxcbiAgLyoqXG4gICAqIFN0eWxpbmcgZm9yIGludGVybmFsIFZpZXcgZm9yIExpc3RIZWFkZXJDb21wb25lbnRcbiAgICovXG4gIExpc3RIZWFkZXJDb21wb25lbnRTdHlsZT86IFZpZXdTdHlsZVByb3AsXG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIGxpc3QuIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBWaXJ0dWFsaXplZExpc3RzIGF0IHRoZSBzYW1lIGxldmVsIG9mXG4gICAqIG5lc3Rpbmcgd2l0aGluIGFub3RoZXIgVmlydHVhbGl6ZWRMaXN0LCB0aGlzIGtleSBpcyBuZWNlc3NhcnkgZm9yIHZpcnR1YWxpemF0aW9uIHRvXG4gICAqIHdvcmsgcHJvcGVybHkuXG4gICAqL1xuICBsaXN0S2V5Pzogc3RyaW5nLFxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHRvIHJlbmRlciBpbiBlYWNoIGluY3JlbWVudGFsIHJlbmRlciBiYXRjaC4gVGhlIG1vcmUgcmVuZGVyZWQgYXRcbiAgICogb25jZSwgdGhlIGJldHRlciB0aGUgZmlsbCByYXRlLCBidXQgcmVzcG9uc2l2ZW5lc3MgbWF5IHN1ZmZlciBiZWNhdXNlIHJlbmRlcmluZyBjb250ZW50IG1heVxuICAgKiBpbnRlcmZlcmUgd2l0aCByZXNwb25kaW5nIHRvIGJ1dHRvbiB0YXBzIG9yIG90aGVyIGludGVyYWN0aW9ucy5cbiAgICovXG4gIG1heFRvUmVuZGVyUGVyQmF0Y2g/OiA/bnVtYmVyLFxuICAvKipcbiAgICogQ2FsbGVkIG9uY2Ugd2hlbiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGdldHMgd2l0aGluIGBvbkVuZFJlYWNoZWRUaHJlc2hvbGRgIG9mIHRoZSByZW5kZXJlZFxuICAgKiBjb250ZW50LlxuICAgKi9cbiAgb25FbmRSZWFjaGVkPzogPyhpbmZvOiB7ZGlzdGFuY2VGcm9tRW5kOiBudW1iZXIsIC4uLn0pID0+IHZvaWQsXG4gIC8qKlxuICAgKiBIb3cgZmFyIGZyb20gdGhlIGVuZCAoaW4gdW5pdHMgb2YgdmlzaWJsZSBsZW5ndGggb2YgdGhlIGxpc3QpIHRoZSBib3R0b20gZWRnZSBvZiB0aGVcbiAgICogbGlzdCBtdXN0IGJlIGZyb20gdGhlIGVuZCBvZiB0aGUgY29udGVudCB0byB0cmlnZ2VyIHRoZSBgb25FbmRSZWFjaGVkYCBjYWxsYmFjay5cbiAgICogVGh1cyBhIHZhbHVlIG9mIDAuNSB3aWxsIHRyaWdnZXIgYG9uRW5kUmVhY2hlZGAgd2hlbiB0aGUgZW5kIG9mIHRoZSBjb250ZW50IGlzXG4gICAqIHdpdGhpbiBoYWxmIHRoZSB2aXNpYmxlIGxlbmd0aCBvZiB0aGUgbGlzdC5cbiAgICovXG4gIG9uRW5kUmVhY2hlZFRocmVzaG9sZD86ID9udW1iZXIsXG4gIC8qKlxuICAgKiBJZiBwcm92aWRlZCwgYSBzdGFuZGFyZCBSZWZyZXNoQ29udHJvbCB3aWxsIGJlIGFkZGVkIGZvciBcIlB1bGwgdG8gUmVmcmVzaFwiIGZ1bmN0aW9uYWxpdHkuIE1ha2VcbiAgICogc3VyZSB0byBhbHNvIHNldCB0aGUgYHJlZnJlc2hpbmdgIHByb3AgY29ycmVjdGx5LlxuICAgKi9cbiAgb25SZWZyZXNoPzogPygpID0+IHZvaWQsXG4gIC8qKlxuICAgKiBVc2VkIHRvIGhhbmRsZSBmYWlsdXJlcyB3aGVuIHNjcm9sbGluZyB0byBhbiBpbmRleCB0aGF0IGhhcyBub3QgYmVlbiBtZWFzdXJlZCB5ZXQuIFJlY29tbWVuZGVkXG4gICAqIGFjdGlvbiBpcyB0byBlaXRoZXIgY29tcHV0ZSB5b3VyIG93biBvZmZzZXQgYW5kIGBzY3JvbGxUb2AgaXQsIG9yIHNjcm9sbCBhcyBmYXIgYXMgcG9zc2libGUgYW5kXG4gICAqIHRoZW4gdHJ5IGFnYWluIGFmdGVyIG1vcmUgaXRlbXMgaGF2ZSBiZWVuIHJlbmRlcmVkLlxuICAgKi9cbiAgb25TY3JvbGxUb0luZGV4RmFpbGVkPzogPyhpbmZvOiB7XG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBoaWdoZXN0TWVhc3VyZWRGcmFtZUluZGV4OiBudW1iZXIsXG4gICAgYXZlcmFnZUl0ZW1MZW5ndGg6IG51bWJlcixcbiAgICAuLi5cbiAgfSkgPT4gdm9pZCxcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSB2aWV3YWJpbGl0eSBvZiByb3dzIGNoYW5nZXMsIGFzIGRlZmluZWQgYnkgdGhlXG4gICAqIGB2aWV3YWJpbGl0eUNvbmZpZ2AgcHJvcC5cbiAgICovXG4gIG9uVmlld2FibGVJdGVtc0NoYW5nZWQ/OiA/KGluZm86IHtcbiAgICB2aWV3YWJsZUl0ZW1zOiBBcnJheTxWaWV3VG9rZW4+LFxuICAgIGNoYW5nZWQ6IEFycmF5PFZpZXdUb2tlbj4sXG4gICAgLi4uXG4gIH0pID0+IHZvaWQsXG4gIHBlcnNpc3RlbnRTY3JvbGxiYXI/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFNldCB0aGlzIHdoZW4gb2Zmc2V0IGlzIG5lZWRlZCBmb3IgdGhlIGxvYWRpbmcgaW5kaWNhdG9yIHRvIHNob3cgY29ycmVjdGx5LlxuICAgKi9cbiAgcHJvZ3Jlc3NWaWV3T2Zmc2V0PzogbnVtYmVyLFxuICAvKipcbiAgICogQSBjdXN0b20gcmVmcmVzaCBjb250cm9sIGVsZW1lbnQuIFdoZW4gc2V0LCBpdCBvdmVycmlkZXMgdGhlIGRlZmF1bHRcbiAgICogPFJlZnJlc2hDb250cm9sPiBjb21wb25lbnQgYnVpbHQgaW50ZXJuYWxseS4gVGhlIG9uUmVmcmVzaCBhbmQgcmVmcmVzaGluZ1xuICAgKiBwcm9wcyBhcmUgYWxzbyBpZ25vcmVkLiBPbmx5IHdvcmtzIGZvciB2ZXJ0aWNhbCBWaXJ0dWFsaXplZExpc3QuXG4gICAqL1xuICByZWZyZXNoQ29udHJvbD86ID9SZWFjdC5FbGVtZW50PGFueT4sXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0cnVlIHdoaWxlIHdhaXRpbmcgZm9yIG5ldyBkYXRhIGZyb20gYSByZWZyZXNoLlxuICAgKi9cbiAgcmVmcmVzaGluZz86ID9ib29sZWFuLFxuICAvKipcbiAgICogTm90ZTogbWF5IGhhdmUgYnVncyAobWlzc2luZyBjb250ZW50KSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgLSB1c2UgYXQgeW91ciBvd24gcmlzay5cbiAgICpcbiAgICogVGhpcyBtYXkgaW1wcm92ZSBzY3JvbGwgcGVyZm9ybWFuY2UgZm9yIGxhcmdlIGxpc3RzLlxuICAgKi9cbiAgcmVtb3ZlQ2xpcHBlZFN1YnZpZXdzPzogYm9vbGVhbixcbiAgLyoqXG4gICAqIFJlbmRlciBhIGN1c3RvbSBzY3JvbGwgY29tcG9uZW50LCBlLmcuIHdpdGggYSBkaWZmZXJlbnRseSBzdHlsZWQgYFJlZnJlc2hDb250cm9sYC5cbiAgICovXG4gIHJlbmRlclNjcm9sbENvbXBvbmVudD86IChwcm9wczogT2JqZWN0KSA9PiBSZWFjdC5FbGVtZW50PGFueT4sXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSBiZXR3ZWVuIGxvdy1wcmkgaXRlbSByZW5kZXIgYmF0Y2hlcywgZS5nLiBmb3IgcmVuZGVyaW5nIGl0ZW1zIHF1aXRlIGEgd2F5cyBvZmZcbiAgICogc2NyZWVuLiBTaW1pbGFyIGZpbGwgcmF0ZS9yZXNwb25zaXZlbmVzcyB0cmFkZW9mZiBhcyBgbWF4VG9SZW5kZXJQZXJCYXRjaGAuXG4gICAqL1xuICB1cGRhdGVDZWxsc0JhdGNoaW5nUGVyaW9kPzogP251bWJlcixcbiAgLyoqXG4gICAqIFNlZSBgVmlld2FiaWxpdHlIZWxwZXJgIGZvciBmbG93IHR5cGUgYW5kIGZ1cnRoZXIgZG9jdW1lbnRhdGlvbi5cbiAgICovXG4gIHZpZXdhYmlsaXR5Q29uZmlnPzogVmlld2FiaWxpdHlDb25maWcsXG4gIC8qKlxuICAgKiBMaXN0IG9mIFZpZXdhYmlsaXR5Q29uZmlnL29uVmlld2FibGVJdGVtc0NoYW5nZWQgcGFpcnMuIEEgc3BlY2lmaWMgb25WaWV3YWJsZUl0ZW1zQ2hhbmdlZFxuICAgKiB3aWxsIGJlIGNhbGxlZCB3aGVuIGl0cyBjb3JyZXNwb25kaW5nIFZpZXdhYmlsaXR5Q29uZmlnJ3MgY29uZGl0aW9ucyBhcmUgbWV0LlxuICAgKi9cbiAgdmlld2FiaWxpdHlDb25maWdDYWxsYmFja1BhaXJzPzogQXJyYXk8Vmlld2FiaWxpdHlDb25maWdDYWxsYmFja1BhaXI+LFxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgaXRlbXMgcmVuZGVyZWQgb3V0c2lkZSBvZiB0aGUgdmlzaWJsZSBhcmVhLCBpbiB1bml0cyBvZlxuICAgKiB2aXNpYmxlIGxlbmd0aHMuIFNvIGlmIHlvdXIgbGlzdCBmaWxscyB0aGUgc2NyZWVuLCB0aGVuIGB3aW5kb3dTaXplPXsyMX1gICh0aGUgZGVmYXVsdCkgd2lsbFxuICAgKiByZW5kZXIgdGhlIHZpc2libGUgc2NyZWVuIGFyZWEgcGx1cyB1cCB0byAxMCBzY3JlZW5zIGFib3ZlIGFuZCAxMCBiZWxvdyB0aGUgdmlld3BvcnQuIFJlZHVjaW5nXG4gICAqIHRoaXMgbnVtYmVyIHdpbGwgcmVkdWNlIG1lbW9yeSBjb25zdW1wdGlvbiBhbmQgbWF5IGltcHJvdmUgcGVyZm9ybWFuY2UsIGJ1dCB3aWxsIGluY3JlYXNlIHRoZVxuICAgKiBjaGFuY2UgdGhhdCBmYXN0IHNjcm9sbGluZyBtYXkgcmV2ZWFsIG1vbWVudGFyeSBibGFuayBhcmVhcyBvZiB1bnJlbmRlcmVkIGNvbnRlbnQuXG4gICAqL1xuICB3aW5kb3dTaXplPzogP251bWJlcixcbiAgLyoqXG4gICAqIFRoZSBsZWdhY3kgaW1wbGVtZW50YXRpb24gaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC5cbiAgICovXG4gIGxlZ2FjeUltcGxlbWVudGF0aW9uPzogZW1wdHksXG58fTtcblxudHlwZSBQcm9wcyA9IHt8XG4gIC4uLlJlYWN0LkVsZW1lbnRDb25maWc8dHlwZW9mIFNjcm9sbFZpZXc+LFxuICAuLi5SZXF1aXJlZFByb3BzLFxuICAuLi5PcHRpb25hbFByb3BzLFxufH07XG5cbmxldCBfdXNlZEluZGV4Rm9yS2V5ID0gZmFsc2U7XG5sZXQgX2tleWxlc3NJdGVtQ29tcG9uZW50TmFtZTogc3RyaW5nID0gJyc7XG5cbnR5cGUgU3RhdGUgPSB7XG4gIGZpcnN0OiBudW1iZXIsXG4gIGxhc3Q6IG51bWJlcixcbn07XG5cbi8qKlxuICogRGVmYXVsdCBQcm9wcyBIZWxwZXIgRnVuY3Rpb25zXG4gKiBVc2UgdGhlIGZvbGxvd2luZyBoZWxwZXIgZnVuY3Rpb25zIGZvciBkZWZhdWx0IHZhbHVlc1xuICovXG5cbi8vIGhvcml6b250YWxPckRlZmF1bHQodGhpcy5wcm9wcy5ob3Jpem9udGFsKVxuZnVuY3Rpb24gaG9yaXpvbnRhbE9yRGVmYXVsdChob3Jpem9udGFsOiA/Ym9vbGVhbikge1xuICByZXR1cm4gaG9yaXpvbnRhbCA/PyBmYWxzZTtcbn1cblxuLy8gaW5pdGlhbE51bVRvUmVuZGVyT3JEZWZhdWx0KHRoaXMucHJvcHMuaW5pdGlhbE51bVRvUmVuZGVyT3JEZWZhdWx0KVxuZnVuY3Rpb24gaW5pdGlhbE51bVRvUmVuZGVyT3JEZWZhdWx0KGluaXRpYWxOdW1Ub1JlbmRlcjogP251bWJlcikge1xuICByZXR1cm4gaW5pdGlhbE51bVRvUmVuZGVyID8/IDEwO1xufVxuXG4vLyBtYXhUb1JlbmRlclBlckJhdGNoT3JEZWZhdWx0KHRoaXMucHJvcHMubWF4VG9SZW5kZXJQZXJCYXRjaClcbmZ1bmN0aW9uIG1heFRvUmVuZGVyUGVyQmF0Y2hPckRlZmF1bHQobWF4VG9SZW5kZXJQZXJCYXRjaDogP251bWJlcikge1xuICByZXR1cm4gbWF4VG9SZW5kZXJQZXJCYXRjaCA/PyAxMDtcbn1cblxuLy8gb25FbmRSZWFjaGVkVGhyZXNob2xkT3JEZWZhdWx0KHRoaXMucHJvcHMub25FbmRSZWFjaGVkVGhyZXNob2xkKVxuZnVuY3Rpb24gb25FbmRSZWFjaGVkVGhyZXNob2xkT3JEZWZhdWx0KG9uRW5kUmVhY2hlZFRocmVzaG9sZDogP251bWJlcikge1xuICByZXR1cm4gb25FbmRSZWFjaGVkVGhyZXNob2xkID8/IDI7XG59XG5cbi8vIHNjcm9sbEV2ZW50VGhyb3R0bGVPckRlZmF1bHQodGhpcy5wcm9wcy5zY3JvbGxFdmVudFRocm90dGxlKVxuZnVuY3Rpb24gc2Nyb2xsRXZlbnRUaHJvdHRsZU9yRGVmYXVsdChzY3JvbGxFdmVudFRocm90dGxlOiA/bnVtYmVyKSB7XG4gIHJldHVybiBzY3JvbGxFdmVudFRocm90dGxlID8/IDUwO1xufVxuXG4vLyB3aW5kb3dTaXplT3JEZWZhdWx0KHRoaXMucHJvcHMud2luZG93U2l6ZSlcbmZ1bmN0aW9uIHdpbmRvd1NpemVPckRlZmF1bHQod2luZG93U2l6ZTogP251bWJlcikge1xuICByZXR1cm4gd2luZG93U2l6ZSA/PyAyMTtcbn1cblxuLyoqXG4gKiBCYXNlIGltcGxlbWVudGF0aW9uIGZvciB0aGUgbW9yZSBjb252ZW5pZW50IFtgPEZsYXRMaXN0PmBdKGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvZmxhdGxpc3QuaHRtbClcbiAqIGFuZCBbYDxTZWN0aW9uTGlzdD5gXShodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3NlY3Rpb25saXN0Lmh0bWwpIGNvbXBvbmVudHMsIHdoaWNoIGFyZSBhbHNvIGJldHRlclxuICogZG9jdW1lbnRlZC4gSW4gZ2VuZXJhbCwgdGhpcyBzaG91bGQgb25seSByZWFsbHkgYmUgdXNlZCBpZiB5b3UgbmVlZCBtb3JlIGZsZXhpYmlsaXR5IHRoYW5cbiAqIGBGbGF0TGlzdGAgcHJvdmlkZXMsIGUuZy4gZm9yIHVzZSB3aXRoIGltbXV0YWJsZSBkYXRhIGluc3RlYWQgb2YgcGxhaW4gYXJyYXlzLlxuICpcbiAqIFZpcnR1YWxpemF0aW9uIG1hc3NpdmVseSBpbXByb3ZlcyBtZW1vcnkgY29uc3VtcHRpb24gYW5kIHBlcmZvcm1hbmNlIG9mIGxhcmdlIGxpc3RzIGJ5XG4gKiBtYWludGFpbmluZyBhIGZpbml0ZSByZW5kZXIgd2luZG93IG9mIGFjdGl2ZSBpdGVtcyBhbmQgcmVwbGFjaW5nIGFsbCBpdGVtcyBvdXRzaWRlIG9mIHRoZSByZW5kZXJcbiAqIHdpbmRvdyB3aXRoIGFwcHJvcHJpYXRlbHkgc2l6ZWQgYmxhbmsgc3BhY2UuIFRoZSB3aW5kb3cgYWRhcHRzIHRvIHNjcm9sbGluZyBiZWhhdmlvciwgYW5kIGl0ZW1zXG4gKiBhcmUgcmVuZGVyZWQgaW5jcmVtZW50YWxseSB3aXRoIGxvdy1wcmkgKGFmdGVyIGFueSBydW5uaW5nIGludGVyYWN0aW9ucykgaWYgdGhleSBhcmUgZmFyIGZyb20gdGhlXG4gKiB2aXNpYmxlIGFyZWEsIG9yIHdpdGggaGktcHJpIG90aGVyd2lzZSB0byBtaW5pbWl6ZSB0aGUgcG90ZW50aWFsIG9mIHNlZWluZyBibGFuayBzcGFjZS5cbiAqXG4gKiBTb21lIGNhdmVhdHM6XG4gKlxuICogLSBJbnRlcm5hbCBzdGF0ZSBpcyBub3QgcHJlc2VydmVkIHdoZW4gY29udGVudCBzY3JvbGxzIG91dCBvZiB0aGUgcmVuZGVyIHdpbmRvdy4gTWFrZSBzdXJlIGFsbFxuICogICB5b3VyIGRhdGEgaXMgY2FwdHVyZWQgaW4gdGhlIGl0ZW0gZGF0YSBvciBleHRlcm5hbCBzdG9yZXMgbGlrZSBGbHV4LCBSZWR1eCwgb3IgUmVsYXkuXG4gKiAtIFRoaXMgaXMgYSBgUHVyZUNvbXBvbmVudGAgd2hpY2ggbWVhbnMgdGhhdCBpdCB3aWxsIG5vdCByZS1yZW5kZXIgaWYgYHByb3BzYCByZW1haW4gc2hhbGxvdy1cbiAqICAgZXF1YWwuIE1ha2Ugc3VyZSB0aGF0IGV2ZXJ5dGhpbmcgeW91ciBgcmVuZGVySXRlbWAgZnVuY3Rpb24gZGVwZW5kcyBvbiBpcyBwYXNzZWQgYXMgYSBwcm9wXG4gKiAgIChlLmcuIGBleHRyYURhdGFgKSB0aGF0IGlzIG5vdCBgPT09YCBhZnRlciB1cGRhdGVzLCBvdGhlcndpc2UgeW91ciBVSSBtYXkgbm90IHVwZGF0ZSBvblxuICogICBjaGFuZ2VzLiBUaGlzIGluY2x1ZGVzIHRoZSBgZGF0YWAgcHJvcCBhbmQgcGFyZW50IGNvbXBvbmVudCBzdGF0ZS5cbiAqIC0gSW4gb3JkZXIgdG8gY29uc3RyYWluIG1lbW9yeSBhbmQgZW5hYmxlIHNtb290aCBzY3JvbGxpbmcsIGNvbnRlbnQgaXMgcmVuZGVyZWQgYXN5bmNocm9ub3VzbHlcbiAqICAgb2Zmc2NyZWVuLiBUaGlzIG1lYW5zIGl0J3MgcG9zc2libGUgdG8gc2Nyb2xsIGZhc3RlciB0aGFuIHRoZSBmaWxsIHJhdGUgYW5kcyBtb21lbnRhcmlseSBzZWVcbiAqICAgYmxhbmsgY29udGVudC4gVGhpcyBpcyBhIHRyYWRlb2ZmIHRoYXQgY2FuIGJlIGFkanVzdGVkIHRvIHN1aXQgdGhlIG5lZWRzIG9mIGVhY2ggYXBwbGljYXRpb24sXG4gKiAgIGFuZCB3ZSBhcmUgd29ya2luZyBvbiBpbXByb3ZpbmcgaXQgYmVoaW5kIHRoZSBzY2VuZXMuXG4gKiAtIEJ5IGRlZmF1bHQsIHRoZSBsaXN0IGxvb2tzIGZvciBhIGBrZXlgIG9yIGBpZGAgcHJvcCBvbiBlYWNoIGl0ZW0gYW5kIHVzZXMgdGhhdCBmb3IgdGhlIFJlYWN0IGtleS5cbiAqICAgQWx0ZXJuYXRpdmVseSwgeW91IGNhbiBwcm92aWRlIGEgY3VzdG9tIGBrZXlFeHRyYWN0b3JgIHByb3AuXG4gKiAtIEFzIGFuIGVmZm9ydCB0byByZW1vdmUgZGVmYXVsdFByb3BzLCB1c2UgaGVscGVyIGZ1bmN0aW9ucyB3aGVuIHJlZmVyZW5jaW5nIGNlcnRhaW4gcHJvcHNcbiAqXG4gKi9cbmNsYXNzIFZpcnR1YWxpemVkTGlzdCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZTogdHlwZW9mIFZpcnR1YWxpemVkTGlzdENvbnRleHQgPSBWaXJ0dWFsaXplZExpc3RDb250ZXh0O1xuXG4gIC8vIHNjcm9sbFRvRW5kIG1heSBiZSBqYW5reSB3aXRob3V0IGdldEl0ZW1MYXlvdXQgcHJvcFxuICBzY3JvbGxUb0VuZChwYXJhbXM/OiA/e2FuaW1hdGVkPzogP2Jvb2xlYW4sIC4uLn0pIHtcbiAgICBjb25zdCBhbmltYXRlZCA9IHBhcmFtcyA/IHBhcmFtcy5hbmltYXRlZCA6IHRydWU7XG4gICAgY29uc3QgdmVyeUxhc3QgPSB0aGlzLnByb3BzLmdldEl0ZW1Db3VudCh0aGlzLnByb3BzLmRhdGEpIC0gMTtcbiAgICBjb25zdCBmcmFtZSA9IHRoaXMuX2dldEZyYW1lTWV0cmljc0FwcHJveCh2ZXJ5TGFzdCk7XG4gICAgY29uc3Qgb2Zmc2V0ID0gTWF0aC5tYXgoXG4gICAgICAwLFxuICAgICAgZnJhbWUub2Zmc2V0ICtcbiAgICAgICAgZnJhbWUubGVuZ3RoICtcbiAgICAgICAgdGhpcy5fZm9vdGVyTGVuZ3RoIC1cbiAgICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcy52aXNpYmxlTGVuZ3RoLFxuICAgICk7XG5cbiAgICBpZiAodGhpcy5fc2Nyb2xsUmVmID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc2Nyb2xsUmVmLnNjcm9sbFRvID09IG51bGwpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ05vIHNjcm9sbFRvIG1ldGhvZCBwcm92aWRlZC4gVGhpcyBtYXkgYmUgYmVjYXVzZSB5b3UgaGF2ZSB0d28gbmVzdGVkICcgK1xuICAgICAgICAgICdWaXJ0dWFsaXplZExpc3RzIHdpdGggdGhlIHNhbWUgb3JpZW50YXRpb24sIG9yIGJlY2F1c2UgeW91IGFyZSAnICtcbiAgICAgICAgICAndXNpbmcgYSBjdXN0b20gY29tcG9uZW50IHRoYXQgZG9lcyBub3QgaW1wbGVtZW50IHNjcm9sbFRvLicsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3Njcm9sbFJlZi5zY3JvbGxUbyhcbiAgICAgIGhvcml6b250YWxPckRlZmF1bHQodGhpcy5wcm9wcy5ob3Jpem9udGFsKVxuICAgICAgICA/IHt4OiBvZmZzZXQsIGFuaW1hdGVkfVxuICAgICAgICA6IHt5OiBvZmZzZXQsIGFuaW1hdGVkfSxcbiAgICApO1xuICB9XG5cbiAgLy8gc2Nyb2xsVG9JbmRleCBtYXkgYmUgamFua3kgd2l0aG91dCBnZXRJdGVtTGF5b3V0IHByb3BcbiAgc2Nyb2xsVG9JbmRleChwYXJhbXM6IHtcbiAgICBhbmltYXRlZD86ID9ib29sZWFuLFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgdmlld09mZnNldD86IG51bWJlcixcbiAgICB2aWV3UG9zaXRpb24/OiBudW1iZXIsXG4gICAgLi4uXG4gIH0pIHtcbiAgICBjb25zdCB7XG4gICAgICBkYXRhLFxuICAgICAgaG9yaXpvbnRhbCxcbiAgICAgIGdldEl0ZW1Db3VudCxcbiAgICAgIGdldEl0ZW1MYXlvdXQsXG4gICAgICBvblNjcm9sbFRvSW5kZXhGYWlsZWQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge2FuaW1hdGVkLCBpbmRleCwgdmlld09mZnNldCwgdmlld1Bvc2l0aW9ufSA9IHBhcmFtcztcbiAgICBpbnZhcmlhbnQoXG4gICAgICBpbmRleCA+PSAwLFxuICAgICAgYHNjcm9sbFRvSW5kZXggb3V0IG9mIHJhbmdlOiByZXF1ZXN0ZWQgaW5kZXggJHtpbmRleH0gYnV0IG1pbmltdW0gaXMgMGAsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBnZXRJdGVtQ291bnQoZGF0YSkgPj0gMSxcbiAgICAgIGBzY3JvbGxUb0luZGV4IG91dCBvZiByYW5nZTogaXRlbSBsZW5ndGggJHtnZXRJdGVtQ291bnQoXG4gICAgICAgIGRhdGEsXG4gICAgICApfSBidXQgbWluaW11bSBpcyAxYCxcbiAgICApO1xuICAgIGludmFyaWFudChcbiAgICAgIGluZGV4IDwgZ2V0SXRlbUNvdW50KGRhdGEpLFxuICAgICAgYHNjcm9sbFRvSW5kZXggb3V0IG9mIHJhbmdlOiByZXF1ZXN0ZWQgaW5kZXggJHtpbmRleH0gaXMgb3V0IG9mIDAgdG8gJHtnZXRJdGVtQ291bnQoXG4gICAgICAgIGRhdGEsXG4gICAgICApIC0gMX1gLFxuICAgICk7XG4gICAgaWYgKCFnZXRJdGVtTGF5b3V0ICYmIGluZGV4ID4gdGhpcy5faGlnaGVzdE1lYXN1cmVkRnJhbWVJbmRleCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICAhIW9uU2Nyb2xsVG9JbmRleEZhaWxlZCxcbiAgICAgICAgJ3Njcm9sbFRvSW5kZXggc2hvdWxkIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBnZXRJdGVtTGF5b3V0IG9yIG9uU2Nyb2xsVG9JbmRleEZhaWxlZCwgJyArXG4gICAgICAgICAgJ290aGVyd2lzZSB0aGVyZSBpcyBubyB3YXkgdG8ga25vdyB0aGUgbG9jYXRpb24gb2Ygb2Zmc2NyZWVuIGluZGljZXMgb3IgaGFuZGxlIGZhaWx1cmVzLicsXG4gICAgICApO1xuICAgICAgb25TY3JvbGxUb0luZGV4RmFpbGVkKHtcbiAgICAgICAgYXZlcmFnZUl0ZW1MZW5ndGg6IHRoaXMuX2F2ZXJhZ2VDZWxsTGVuZ3RoLFxuICAgICAgICBoaWdoZXN0TWVhc3VyZWRGcmFtZUluZGV4OiB0aGlzLl9oaWdoZXN0TWVhc3VyZWRGcmFtZUluZGV4LFxuICAgICAgICBpbmRleCxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmcmFtZSA9IHRoaXMuX2dldEZyYW1lTWV0cmljc0FwcHJveChpbmRleCk7XG4gICAgY29uc3Qgb2Zmc2V0ID1cbiAgICAgIE1hdGgubWF4KFxuICAgICAgICAwLFxuICAgICAgICBmcmFtZS5vZmZzZXQgLVxuICAgICAgICAgICh2aWV3UG9zaXRpb24gfHwgMCkgKlxuICAgICAgICAgICAgKHRoaXMuX3Njcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aCAtIGZyYW1lLmxlbmd0aCksXG4gICAgICApIC0gKHZpZXdPZmZzZXQgfHwgMCk7XG5cbiAgICBpZiAodGhpcy5fc2Nyb2xsUmVmID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc2Nyb2xsUmVmLnNjcm9sbFRvID09IG51bGwpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ05vIHNjcm9sbFRvIG1ldGhvZCBwcm92aWRlZC4gVGhpcyBtYXkgYmUgYmVjYXVzZSB5b3UgaGF2ZSB0d28gbmVzdGVkICcgK1xuICAgICAgICAgICdWaXJ0dWFsaXplZExpc3RzIHdpdGggdGhlIHNhbWUgb3JpZW50YXRpb24sIG9yIGJlY2F1c2UgeW91IGFyZSAnICtcbiAgICAgICAgICAndXNpbmcgYSBjdXN0b20gY29tcG9uZW50IHRoYXQgZG9lcyBub3QgaW1wbGVtZW50IHNjcm9sbFRvLicsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3Njcm9sbFJlZi5zY3JvbGxUbyhcbiAgICAgIGhvcml6b250YWwgPyB7eDogb2Zmc2V0LCBhbmltYXRlZH0gOiB7eTogb2Zmc2V0LCBhbmltYXRlZH0sXG4gICAgKTtcbiAgfVxuXG4gIC8vIHNjcm9sbFRvSXRlbSBtYXkgYmUgamFua3kgd2l0aG91dCBnZXRJdGVtTGF5b3V0IHByb3AuIFJlcXVpcmVkIGxpbmVhciBzY2FuIHRocm91Z2ggaXRlbXMgLVxuICAvLyB1c2Ugc2Nyb2xsVG9JbmRleCBpbnN0ZWFkIGlmIHBvc3NpYmxlLlxuICBzY3JvbGxUb0l0ZW0ocGFyYW1zOiB7XG4gICAgYW5pbWF0ZWQ/OiA/Ym9vbGVhbixcbiAgICBpdGVtOiBJdGVtLFxuICAgIHZpZXdQb3NpdGlvbj86IG51bWJlcixcbiAgICAuLi5cbiAgfSkge1xuICAgIGNvbnN0IHtpdGVtfSA9IHBhcmFtcztcbiAgICBjb25zdCB7ZGF0YSwgZ2V0SXRlbSwgZ2V0SXRlbUNvdW50fSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgaXRlbUNvdW50ID0gZ2V0SXRlbUNvdW50KGRhdGEpO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBpdGVtQ291bnQ7IGluZGV4KyspIHtcbiAgICAgIGlmIChnZXRJdGVtKGRhdGEsIGluZGV4KSA9PT0gaXRlbSkge1xuICAgICAgICB0aGlzLnNjcm9sbFRvSW5kZXgoey4uLnBhcmFtcywgaW5kZXh9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNjcm9sbCB0byBhIHNwZWNpZmljIGNvbnRlbnQgcGl4ZWwgb2Zmc2V0IGluIHRoZSBsaXN0LlxuICAgKlxuICAgKiBQYXJhbSBgb2Zmc2V0YCBleHBlY3RzIHRoZSBvZmZzZXQgdG8gc2Nyb2xsIHRvLlxuICAgKiBJbiBjYXNlIG9mIGBob3Jpem9udGFsYCBpcyB0cnVlLCB0aGUgb2Zmc2V0IGlzIHRoZSB4LXZhbHVlLFxuICAgKiBpbiBhbnkgb3RoZXIgY2FzZSB0aGUgb2Zmc2V0IGlzIHRoZSB5LXZhbHVlLlxuICAgKlxuICAgKiBQYXJhbSBgYW5pbWF0ZWRgIChgdHJ1ZWAgYnkgZGVmYXVsdCkgZGVmaW5lcyB3aGV0aGVyIHRoZSBsaXN0XG4gICAqIHNob3VsZCBkbyBhbiBhbmltYXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICAgKi9cbiAgc2Nyb2xsVG9PZmZzZXQocGFyYW1zOiB7YW5pbWF0ZWQ/OiA/Ym9vbGVhbiwgb2Zmc2V0OiBudW1iZXIsIC4uLn0pIHtcbiAgICBjb25zdCB7YW5pbWF0ZWQsIG9mZnNldH0gPSBwYXJhbXM7XG5cbiAgICBpZiAodGhpcy5fc2Nyb2xsUmVmID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc2Nyb2xsUmVmLnNjcm9sbFRvID09IG51bGwpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ05vIHNjcm9sbFRvIG1ldGhvZCBwcm92aWRlZC4gVGhpcyBtYXkgYmUgYmVjYXVzZSB5b3UgaGF2ZSB0d28gbmVzdGVkICcgK1xuICAgICAgICAgICdWaXJ0dWFsaXplZExpc3RzIHdpdGggdGhlIHNhbWUgb3JpZW50YXRpb24sIG9yIGJlY2F1c2UgeW91IGFyZSAnICtcbiAgICAgICAgICAndXNpbmcgYSBjdXN0b20gY29tcG9uZW50IHRoYXQgZG9lcyBub3QgaW1wbGVtZW50IHNjcm9sbFRvLicsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3Njcm9sbFJlZi5zY3JvbGxUbyhcbiAgICAgIGhvcml6b250YWxPckRlZmF1bHQodGhpcy5wcm9wcy5ob3Jpem9udGFsKVxuICAgICAgICA/IHt4OiBvZmZzZXQsIGFuaW1hdGVkfVxuICAgICAgICA6IHt5OiBvZmZzZXQsIGFuaW1hdGVkfSxcbiAgICApO1xuICB9XG5cbiAgcmVjb3JkSW50ZXJhY3Rpb24oKSB7XG4gICAgdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5mb3JFYWNoKGNoaWxkTGlzdCA9PiB7XG4gICAgICBjaGlsZExpc3QucmVmICYmIGNoaWxkTGlzdC5yZWYucmVjb3JkSW50ZXJhY3Rpb24oKTtcbiAgICB9KTtcbiAgICB0aGlzLl92aWV3YWJpbGl0eVR1cGxlcy5mb3JFYWNoKHQgPT4ge1xuICAgICAgdC52aWV3YWJpbGl0eUhlbHBlci5yZWNvcmRJbnRlcmFjdGlvbigpO1xuICAgIH0pO1xuICAgIHRoaXMuX3VwZGF0ZVZpZXdhYmxlSXRlbXModGhpcy5wcm9wcy5kYXRhKTtcbiAgfVxuXG4gIGZsYXNoU2Nyb2xsSW5kaWNhdG9ycygpIHtcbiAgICBpZiAodGhpcy5fc2Nyb2xsUmVmID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9zY3JvbGxSZWYuZmxhc2hTY3JvbGxJbmRpY2F0b3JzKCk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgYSBoYW5kbGUgdG8gdGhlIHVuZGVybHlpbmcgc2Nyb2xsIHJlc3BvbmRlci5cbiAgICogTm90ZSB0aGF0IGB0aGlzLl9zY3JvbGxSZWZgIG1pZ2h0IG5vdCBiZSBhIGBTY3JvbGxWaWV3YCwgc28gd2VcbiAgICogbmVlZCB0byBjaGVjayB0aGF0IGl0IHJlc3BvbmRzIHRvIGBnZXRTY3JvbGxSZXNwb25kZXJgIGJlZm9yZSBjYWxsaW5nIGl0LlxuICAgKi9cbiAgZ2V0U2Nyb2xsUmVzcG9uZGVyKCk6ID9TY3JvbGxSZXNwb25kZXJUeXBlIHtcbiAgICBpZiAodGhpcy5fc2Nyb2xsUmVmICYmIHRoaXMuX3Njcm9sbFJlZi5nZXRTY3JvbGxSZXNwb25kZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxSZWYuZ2V0U2Nyb2xsUmVzcG9uZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0U2Nyb2xsYWJsZU5vZGUoKTogP251bWJlciB7XG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZiAmJiB0aGlzLl9zY3JvbGxSZWYuZ2V0U2Nyb2xsYWJsZU5vZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxSZWYuZ2V0U2Nyb2xsYWJsZU5vZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFJlYWN0TmF0aXZlLmZpbmROb2RlSGFuZGxlKHRoaXMuX3Njcm9sbFJlZik7XG4gICAgfVxuICB9XG5cbiAgZ2V0U2Nyb2xsUmVmKCk6XG4gICAgfCA/UmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgU2Nyb2xsVmlldz5cbiAgICB8ID9SZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBWaWV3PiB7XG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZiAmJiB0aGlzLl9zY3JvbGxSZWYuZ2V0U2Nyb2xsUmVmKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsUmVmLmdldFNjcm9sbFJlZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsUmVmO1xuICAgIH1cbiAgfVxuXG4gIHNldE5hdGl2ZVByb3BzKHByb3BzOiBPYmplY3QpIHtcbiAgICBpZiAodGhpcy5fc2Nyb2xsUmVmKSB7XG4gICAgICB0aGlzLl9zY3JvbGxSZWYuc2V0TmF0aXZlUHJvcHMocHJvcHMpO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRDZWxsS2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dD8uY2VsbEtleSB8fCAncm9vdExpc3QnO1xuICB9XG5cbiAgX2dldExpc3RLZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5saXN0S2V5IHx8IHRoaXMuX2dldENlbGxLZXkoKTtcbiAgfVxuXG4gIF9nZXREZWJ1Z0luZm8oKTogTGlzdERlYnVnSW5mbyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpc3RLZXk6IHRoaXMuX2dldExpc3RLZXkoKSxcbiAgICAgIGNlbGxLZXk6IHRoaXMuX2dldENlbGxLZXkoKSxcbiAgICAgIGhvcml6b250YWw6IGhvcml6b250YWxPckRlZmF1bHQodGhpcy5wcm9wcy5ob3Jpem9udGFsKSxcbiAgICAgIHBhcmVudDogdGhpcy5jb250ZXh0Py5kZWJ1Z0luZm8sXG4gICAgfTtcbiAgfVxuXG4gIF9nZXRTY3JvbGxNZXRyaWNzID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLl9zY3JvbGxNZXRyaWNzO1xuICB9O1xuXG4gIGhhc01vcmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hhc01vcmU7XG4gIH1cblxuICBfZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZiA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5faXNOZXN0ZWRXaXRoU2FtZU9yaWVudGF0aW9uKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG5cbiAgX2dldE5lc3RlZENoaWxkU3RhdGUgPSAoa2V5OiBzdHJpbmcpOiA/Q2hpbGRMaXN0U3RhdGUgPT4ge1xuICAgIGNvbnN0IGV4aXN0aW5nQ2hpbGREYXRhID0gdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5nZXQoa2V5KTtcbiAgICByZXR1cm4gZXhpc3RpbmdDaGlsZERhdGEgJiYgZXhpc3RpbmdDaGlsZERhdGEuc3RhdGU7XG4gIH07XG5cbiAgX3JlZ2lzdGVyQXNOZXN0ZWRDaGlsZCA9IChjaGlsZExpc3Q6IHtcbiAgICBjZWxsS2V5OiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgcmVmOiBWaXJ0dWFsaXplZExpc3QsXG4gICAgcGFyZW50RGVidWdJbmZvOiBMaXN0RGVidWdJbmZvLFxuICAgIC4uLlxuICB9KTogP0NoaWxkTGlzdFN0YXRlID0+IHtcbiAgICAvLyBSZWdpc3RlciB0aGUgbWFwcGluZyBiZXR3ZWVuIHRoaXMgY2hpbGQga2V5IGFuZCB0aGUgY2VsbEtleSBmb3IgaXRzIGNlbGxcbiAgICBjb25zdCBjaGlsZExpc3RzSW5DZWxsID1cbiAgICAgIHRoaXMuX2NlbGxLZXlzVG9DaGlsZExpc3RLZXlzLmdldChjaGlsZExpc3QuY2VsbEtleSkgfHwgbmV3IFNldCgpO1xuICAgIGNoaWxkTGlzdHNJbkNlbGwuYWRkKGNoaWxkTGlzdC5rZXkpO1xuICAgIHRoaXMuX2NlbGxLZXlzVG9DaGlsZExpc3RLZXlzLnNldChjaGlsZExpc3QuY2VsbEtleSwgY2hpbGRMaXN0c0luQ2VsbCk7XG4gICAgY29uc3QgZXhpc3RpbmdDaGlsZERhdGEgPSB0aGlzLl9uZXN0ZWRDaGlsZExpc3RzLmdldChjaGlsZExpc3Qua2V5KTtcbiAgICBpZiAoZXhpc3RpbmdDaGlsZERhdGEgJiYgZXhpc3RpbmdDaGlsZERhdGEucmVmICE9PSBudWxsKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAnQSBWaXJ0dWFsaXplZExpc3QgY29udGFpbnMgYSBjZWxsIHdoaWNoIGl0c2VsZiBjb250YWlucyAnICtcbiAgICAgICAgICAnbW9yZSB0aGFuIG9uZSBWaXJ0dWFsaXplZExpc3Qgb2YgdGhlIHNhbWUgb3JpZW50YXRpb24gYXMgdGhlIHBhcmVudCAnICtcbiAgICAgICAgICAnbGlzdC4gWW91IG11c3QgcGFzcyBhIHVuaXF1ZSBsaXN0S2V5IHByb3AgdG8gZWFjaCBzaWJsaW5nIGxpc3QuXFxuXFxuJyArXG4gICAgICAgICAgZGVzY3JpYmVOZXN0ZWRMaXN0cyh7XG4gICAgICAgICAgICAuLi5jaGlsZExpc3QsXG4gICAgICAgICAgICAvLyBXZSdyZSBjYWxsZWQgZnJvbSB0aGUgY2hpbGQncyBjb21wb25lbnREaWRNb3VudCwgc28gaXQncyBzYWZlIHRvXG4gICAgICAgICAgICAvLyByZWFkIHRoZSBjaGlsZCdzIHByb3BzIGhlcmUgKGFsYmVpdCB3ZWlyZCkuXG4gICAgICAgICAgICBob3Jpem9udGFsOiAhIWNoaWxkTGlzdC5yZWYucHJvcHMuaG9yaXpvbnRhbCxcbiAgICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuX25lc3RlZENoaWxkTGlzdHMuc2V0KGNoaWxkTGlzdC5rZXksIHtcbiAgICAgIHJlZjogY2hpbGRMaXN0LnJlZixcbiAgICAgIHN0YXRlOiBudWxsLFxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuX2hhc0ludGVyYWN0ZWQpIHtcbiAgICAgIGNoaWxkTGlzdC5yZWYucmVjb3JkSW50ZXJhY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgX3VucmVnaXN0ZXJBc05lc3RlZENoaWxkID0gKGNoaWxkTGlzdDoge1xuICAgIGtleTogc3RyaW5nLFxuICAgIHN0YXRlOiBDaGlsZExpc3RTdGF0ZSxcbiAgICAuLi5cbiAgfSk6IHZvaWQgPT4ge1xuICAgIHRoaXMuX25lc3RlZENoaWxkTGlzdHMuc2V0KGNoaWxkTGlzdC5rZXksIHtcbiAgICAgIHJlZjogbnVsbCxcbiAgICAgIHN0YXRlOiBjaGlsZExpc3Quc3RhdGUsXG4gICAgfSk7XG4gIH07XG5cbiAgc3RhdGU6IFN0YXRlO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgICFwcm9wcy5vblNjcm9sbCB8fCAhcHJvcHMub25TY3JvbGwuX19pc05hdGl2ZSxcbiAgICAgICdDb21wb25lbnRzIGJhc2VkIG9uIFZpcnR1YWxpemVkTGlzdCBtdXN0IGJlIHdyYXBwZWQgd2l0aCBBbmltYXRlZC5jcmVhdGVBbmltYXRlZENvbXBvbmVudCAnICtcbiAgICAgICAgJ3RvIHN1cHBvcnQgbmF0aXZlIG9uU2Nyb2xsIGV2ZW50cyB3aXRoIHVzZU5hdGl2ZURyaXZlcicsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB3aW5kb3dTaXplT3JEZWZhdWx0KHByb3BzLndpbmRvd1NpemUpID4gMCxcbiAgICAgICdWaXJ0dWFsaXplZExpc3Q6IFRoZSB3aW5kb3dTaXplIHByb3AgbXVzdCBiZSBwcmVzZW50IGFuZCBzZXQgdG8gYSB2YWx1ZSBncmVhdGVyIHRoYW4gMC4nLFxuICAgICk7XG5cbiAgICB0aGlzLl9maWxsUmF0ZUhlbHBlciA9IG5ldyBGaWxsUmF0ZUhlbHBlcih0aGlzLl9nZXRGcmFtZU1ldHJpY3MpO1xuICAgIHRoaXMuX3VwZGF0ZUNlbGxzVG9SZW5kZXJCYXRjaGVyID0gbmV3IEJhdGNoaW5hdG9yKFxuICAgICAgdGhpcy5fdXBkYXRlQ2VsbHNUb1JlbmRlcixcbiAgICAgIHRoaXMucHJvcHMudXBkYXRlQ2VsbHNCYXRjaGluZ1BlcmlvZCA/PyA1MCxcbiAgICApO1xuXG4gICAgaWYgKHRoaXMucHJvcHMudmlld2FiaWxpdHlDb25maWdDYWxsYmFja1BhaXJzKSB7XG4gICAgICB0aGlzLl92aWV3YWJpbGl0eVR1cGxlcyA9IHRoaXMucHJvcHMudmlld2FiaWxpdHlDb25maWdDYWxsYmFja1BhaXJzLm1hcChcbiAgICAgICAgcGFpciA9PiAoe1xuICAgICAgICAgIHZpZXdhYmlsaXR5SGVscGVyOiBuZXcgVmlld2FiaWxpdHlIZWxwZXIocGFpci52aWV3YWJpbGl0eUNvbmZpZyksXG4gICAgICAgICAgb25WaWV3YWJsZUl0ZW1zQ2hhbmdlZDogcGFpci5vblZpZXdhYmxlSXRlbXNDaGFuZ2VkLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm9uVmlld2FibGVJdGVtc0NoYW5nZWQpIHtcbiAgICAgIHRoaXMuX3ZpZXdhYmlsaXR5VHVwbGVzLnB1c2goe1xuICAgICAgICB2aWV3YWJpbGl0eUhlbHBlcjogbmV3IFZpZXdhYmlsaXR5SGVscGVyKHRoaXMucHJvcHMudmlld2FiaWxpdHlDb25maWcpLFxuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXVxuICAgICAgICBvblZpZXdhYmxlSXRlbXNDaGFuZ2VkOiB0aGlzLnByb3BzLm9uVmlld2FibGVJdGVtc0NoYW5nZWQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgaW5pdGlhbFN0YXRlID0ge1xuICAgICAgZmlyc3Q6IHRoaXMucHJvcHMuaW5pdGlhbFNjcm9sbEluZGV4IHx8IDAsXG4gICAgICBsYXN0OlxuICAgICAgICBNYXRoLm1pbihcbiAgICAgICAgICB0aGlzLnByb3BzLmdldEl0ZW1Db3VudCh0aGlzLnByb3BzLmRhdGEpLFxuICAgICAgICAgICh0aGlzLnByb3BzLmluaXRpYWxTY3JvbGxJbmRleCB8fCAwKSArXG4gICAgICAgICAgICBpbml0aWFsTnVtVG9SZW5kZXJPckRlZmF1bHQodGhpcy5wcm9wcy5pbml0aWFsTnVtVG9SZW5kZXIpLFxuICAgICAgICApIC0gMSxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuX2lzTmVzdGVkV2l0aFNhbWVPcmllbnRhdGlvbigpKSB7XG4gICAgICBjb25zdCBzdG9yZWRTdGF0ZSA9IHRoaXMuY29udGV4dC5nZXROZXN0ZWRDaGlsZFN0YXRlKHRoaXMuX2dldExpc3RLZXkoKSk7XG4gICAgICBpZiAoc3RvcmVkU3RhdGUpIHtcbiAgICAgICAgaW5pdGlhbFN0YXRlID0gc3RvcmVkU3RhdGU7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdG9yZWRTdGF0ZTtcbiAgICAgICAgdGhpcy5fZnJhbWVzID0gc3RvcmVkU3RhdGUuZnJhbWVzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5faXNOZXN0ZWRXaXRoU2FtZU9yaWVudGF0aW9uKCkpIHtcbiAgICAgIHRoaXMuY29udGV4dC5yZWdpc3RlckFzTmVzdGVkQ2hpbGQoe1xuICAgICAgICBjZWxsS2V5OiB0aGlzLl9nZXRDZWxsS2V5KCksXG4gICAgICAgIGtleTogdGhpcy5fZ2V0TGlzdEtleSgpLFxuICAgICAgICByZWY6IHRoaXMsXG4gICAgICAgIC8vIE5PVEU6IFdoZW4gdGhlIGNoaWxkIG1vdW50cyAoaGVyZSkgaXQncyBub3QgbmVjZXNzYXJpbHkgc2FmZSB0byByZWFkXG4gICAgICAgIC8vIHRoZSBwYXJlbnQncyBwcm9wcy4gVGhpcyBpcyB3aHkgd2UgZXhwbGljaXRseSBwcm9wYWdhdGUgZGVidWdJbmZvXG4gICAgICAgIC8vIFwiZG93blwiIHZpYSBjb250ZXh0IGFuZCBcInVwXCIgYWdhaW4gdmlhIHRoaXMgbWV0aG9kIGNhbGwgb24gdGhlXG4gICAgICAgIC8vIHBhcmVudC5cbiAgICAgICAgcGFyZW50RGVidWdJbmZvOiB0aGlzLmNvbnRleHQuZGVidWdJbmZvLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuX2lzTmVzdGVkV2l0aFNhbWVPcmllbnRhdGlvbigpKSB7XG4gICAgICB0aGlzLmNvbnRleHQudW5yZWdpc3RlckFzTmVzdGVkQ2hpbGQoe1xuICAgICAgICBrZXk6IHRoaXMuX2dldExpc3RLZXkoKSxcbiAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICBmaXJzdDogdGhpcy5zdGF0ZS5maXJzdCxcbiAgICAgICAgICBsYXN0OiB0aGlzLnN0YXRlLmxhc3QsXG4gICAgICAgICAgZnJhbWVzOiB0aGlzLl9mcmFtZXMsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fdXBkYXRlVmlld2FibGVJdGVtcyhudWxsKTtcbiAgICB0aGlzLl91cGRhdGVDZWxsc1RvUmVuZGVyQmF0Y2hlci5kaXNwb3NlKHthYm9ydDogdHJ1ZX0pO1xuICAgIHRoaXMuX3ZpZXdhYmlsaXR5VHVwbGVzLmZvckVhY2godHVwbGUgPT4ge1xuICAgICAgdHVwbGUudmlld2FiaWxpdHlIZWxwZXIuZGlzcG9zZSgpO1xuICAgIH0pO1xuICAgIHRoaXMuX2ZpbGxSYXRlSGVscGVyLmRlYWN0aXZhdGVBbmRGbHVzaCgpO1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXdQcm9wczogUHJvcHMsIHByZXZTdGF0ZTogU3RhdGUpOiBTdGF0ZSB7XG4gICAgY29uc3Qge2RhdGEsIGdldEl0ZW1Db3VudH0gPSBuZXdQcm9wcztcbiAgICBjb25zdCBtYXhUb1JlbmRlclBlckJhdGNoID0gbWF4VG9SZW5kZXJQZXJCYXRjaE9yRGVmYXVsdChcbiAgICAgIG5ld1Byb3BzLm1heFRvUmVuZGVyUGVyQmF0Y2gsXG4gICAgKTtcbiAgICAvLyBmaXJzdCBhbmQgbGFzdCBjb3VsZCBiZSBzdGFsZSAoZS5nLiBpZiBhIG5ldywgc2hvcnRlciBpdGVtcyBwcm9wcyBpcyBwYXNzZWQgaW4pLCBzbyB3ZSBtYWtlXG4gICAgLy8gc3VyZSB3ZSdyZSByZW5kZXJpbmcgYSByZWFzb25hYmxlIHJhbmdlIGhlcmUuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZpcnN0OiBNYXRoLm1heChcbiAgICAgICAgMCxcbiAgICAgICAgTWF0aC5taW4ocHJldlN0YXRlLmZpcnN0LCBnZXRJdGVtQ291bnQoZGF0YSkgLSAxIC0gbWF4VG9SZW5kZXJQZXJCYXRjaCksXG4gICAgICApLFxuICAgICAgbGFzdDogTWF0aC5tYXgoMCwgTWF0aC5taW4ocHJldlN0YXRlLmxhc3QsIGdldEl0ZW1Db3VudChkYXRhKSAtIDEpKSxcbiAgICB9O1xuICB9XG5cbiAgX3B1c2hDZWxscyhcbiAgICBjZWxsczogQXJyYXk8T2JqZWN0PixcbiAgICBzdGlja3lIZWFkZXJJbmRpY2VzOiBBcnJheTxudW1iZXI+LFxuICAgIHN0aWNreUluZGljZXNGcm9tUHJvcHM6IFNldDxudW1iZXI+LFxuICAgIGZpcnN0OiBudW1iZXIsXG4gICAgbGFzdDogbnVtYmVyLFxuICAgIGludmVyc2lvblN0eWxlOiBWaWV3U3R5bGVQcm9wLFxuICApIHtcbiAgICBjb25zdCB7XG4gICAgICBDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgICBJdGVtU2VwYXJhdG9yQ29tcG9uZW50LFxuICAgICAgZGF0YSxcbiAgICAgIGdldEl0ZW0sXG4gICAgICBnZXRJdGVtQ291bnQsXG4gICAgICBob3Jpem9udGFsLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHN0aWNreU9mZnNldCA9IHRoaXMucHJvcHMuTGlzdEhlYWRlckNvbXBvbmVudCA/IDEgOiAwO1xuICAgIGNvbnN0IGVuZCA9IGdldEl0ZW1Db3VudChkYXRhKSAtIDE7XG4gICAgbGV0IHByZXZDZWxsS2V5O1xuICAgIGxhc3QgPSBNYXRoLm1pbihlbmQsIGxhc3QpO1xuICAgIGZvciAobGV0IGlpID0gZmlyc3Q7IGlpIDw9IGxhc3Q7IGlpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBnZXRJdGVtKGRhdGEsIGlpKTtcbiAgICAgIGNvbnN0IGtleSA9IHRoaXMuX2tleUV4dHJhY3RvcihpdGVtLCBpaSk7XG4gICAgICB0aGlzLl9pbmRpY2VzVG9LZXlzLnNldChpaSwga2V5KTtcbiAgICAgIGlmIChzdGlja3lJbmRpY2VzRnJvbVByb3BzLmhhcyhpaSArIHN0aWNreU9mZnNldCkpIHtcbiAgICAgICAgc3RpY2t5SGVhZGVySW5kaWNlcy5wdXNoKGNlbGxzLmxlbmd0aCk7XG4gICAgICB9XG4gICAgICBjZWxscy5wdXNoKFxuICAgICAgICA8Q2VsbFJlbmRlcmVyXG4gICAgICAgICAgQ2VsbFJlbmRlcmVyQ29tcG9uZW50PXtDZWxsUmVuZGVyZXJDb21wb25lbnR9XG4gICAgICAgICAgSXRlbVNlcGFyYXRvckNvbXBvbmVudD17aWkgPCBlbmQgPyBJdGVtU2VwYXJhdG9yQ29tcG9uZW50IDogdW5kZWZpbmVkfVxuICAgICAgICAgIGNlbGxLZXk9e2tleX1cbiAgICAgICAgICBmaWxsUmF0ZUhlbHBlcj17dGhpcy5fZmlsbFJhdGVIZWxwZXJ9XG4gICAgICAgICAgaG9yaXpvbnRhbD17aG9yaXpvbnRhbH1cbiAgICAgICAgICBpbmRleD17aWl9XG4gICAgICAgICAgaW52ZXJzaW9uU3R5bGU9e2ludmVyc2lvblN0eWxlfVxuICAgICAgICAgIGl0ZW09e2l0ZW19XG4gICAgICAgICAga2V5PXtrZXl9XG4gICAgICAgICAgcHJldkNlbGxLZXk9e3ByZXZDZWxsS2V5fVxuICAgICAgICAgIG9uVXBkYXRlU2VwYXJhdG9ycz17dGhpcy5fb25VcGRhdGVTZXBhcmF0b3JzfVxuICAgICAgICAgIG9uTGF5b3V0PXtlID0+IHRoaXMuX29uQ2VsbExheW91dChlLCBrZXksIGlpKX1cbiAgICAgICAgICBvblVubW91bnQ9e3RoaXMuX29uQ2VsbFVubW91bnR9XG4gICAgICAgICAgcGFyZW50UHJvcHM9e3RoaXMucHJvcHN9XG4gICAgICAgICAgcmVmPXtyZWYgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY2VsbFJlZnNba2V5XSA9IHJlZjtcbiAgICAgICAgICB9fVxuICAgICAgICAvPixcbiAgICAgICk7XG4gICAgICBwcmV2Q2VsbEtleSA9IGtleTtcbiAgICB9XG4gIH1cblxuICBfb25VcGRhdGVTZXBhcmF0b3JzID0gKGtleXM6IEFycmF5PD9zdHJpbmc+LCBuZXdQcm9wczogT2JqZWN0KSA9PiB7XG4gICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCByZWYgPSBrZXkgIT0gbnVsbCAmJiB0aGlzLl9jZWxsUmVmc1trZXldO1xuICAgICAgcmVmICYmIHJlZi51cGRhdGVTZXBhcmF0b3JQcm9wcyhuZXdQcm9wcyk7XG4gICAgfSk7XG4gIH07XG5cbiAgX2lzVmlydHVhbGl6YXRpb25EaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kaXNhYmxlVmlydHVhbGl6YXRpb24gfHwgZmFsc2U7XG4gIH1cblxuICBfaXNOZXN0ZWRXaXRoU2FtZU9yaWVudGF0aW9uKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5lc3RlZENvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgcmV0dXJuICEhKFxuICAgICAgbmVzdGVkQ29udGV4dCAmJlxuICAgICAgISFuZXN0ZWRDb250ZXh0Lmhvcml6b250YWwgPT09IGhvcml6b250YWxPckRlZmF1bHQodGhpcy5wcm9wcy5ob3Jpem9udGFsKVxuICAgICk7XG4gIH1cblxuICBfZ2V0U3BhY2VyS2V5ID0gKGlzVmVydGljYWw6IGJvb2xlYW4pOiBzdHJpbmcgPT5cbiAgICBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIF9rZXlFeHRyYWN0b3IoaXRlbTogSXRlbSwgaW5kZXg6IG51bWJlcikge1xuICAgIGlmICh0aGlzLnByb3BzLmtleUV4dHJhY3RvciAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5rZXlFeHRyYWN0b3IoaXRlbSwgaW5kZXgpO1xuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IGRlZmF1bHRLZXlFeHRyYWN0b3IoaXRlbSwgaW5kZXgpO1xuICAgIGlmIChrZXkgPT09IFN0cmluZyhpbmRleCkpIHtcbiAgICAgIF91c2VkSW5kZXhGb3JLZXkgPSB0cnVlO1xuICAgICAgaWYgKGl0ZW0udHlwZSAmJiBpdGVtLnR5cGUuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgX2tleWxlc3NJdGVtQ29tcG9uZW50TmFtZSA9IGl0ZW0udHlwZS5kaXNwbGF5TmFtZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgY29uc3QgZmxhdFN0eWxlcyA9IGZsYXR0ZW5TdHlsZSh0aGlzLnByb3BzLmNvbnRlbnRDb250YWluZXJTdHlsZSk7XG4gICAgICBpZiAoZmxhdFN0eWxlcyAhPSBudWxsICYmIGZsYXRTdHlsZXMuZmxleFdyYXAgPT09ICd3cmFwJykge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ2BmbGV4V3JhcDogYHdyYXBgYCBpcyBub3Qgc3VwcG9ydGVkIHdpdGggdGhlIGBWaXJ0dWFsaXplZExpc3RgIGNvbXBvbmVudHMuJyArXG4gICAgICAgICAgICAnQ29uc2lkZXIgdXNpbmcgYG51bUNvbHVtbnNgIHdpdGggYEZsYXRMaXN0YCBpbnN0ZWFkLicsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIExpc3RFbXB0eUNvbXBvbmVudCxcbiAgICAgIExpc3RGb290ZXJDb21wb25lbnQsXG4gICAgICBMaXN0SGVhZGVyQ29tcG9uZW50LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtkYXRhLCBob3Jpem9udGFsfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgaXNWaXJ0dWFsaXphdGlvbkRpc2FibGVkID0gdGhpcy5faXNWaXJ0dWFsaXphdGlvbkRpc2FibGVkKCk7XG4gICAgY29uc3QgaW52ZXJzaW9uU3R5bGUgPSB0aGlzLnByb3BzLmludmVydGVkXG4gICAgICA/IGhvcml6b250YWxPckRlZmF1bHQodGhpcy5wcm9wcy5ob3Jpem9udGFsKVxuICAgICAgICA/IHN0eWxlcy5ob3Jpem9udGFsbHlJbnZlcnRlZFxuICAgICAgICA6IHN0eWxlcy52ZXJ0aWNhbGx5SW52ZXJ0ZWRcbiAgICAgIDogbnVsbDtcbiAgICBjb25zdCBjZWxscyA9IFtdO1xuICAgIGNvbnN0IHN0aWNreUluZGljZXNGcm9tUHJvcHMgPSBuZXcgU2V0KHRoaXMucHJvcHMuc3RpY2t5SGVhZGVySW5kaWNlcyk7XG4gICAgY29uc3Qgc3RpY2t5SGVhZGVySW5kaWNlcyA9IFtdO1xuICAgIGlmIChMaXN0SGVhZGVyQ29tcG9uZW50KSB7XG4gICAgICBpZiAoc3RpY2t5SW5kaWNlc0Zyb21Qcm9wcy5oYXMoMCkpIHtcbiAgICAgICAgc3RpY2t5SGVhZGVySW5kaWNlcy5wdXNoKDApO1xuICAgICAgfVxuICAgICAgY29uc3QgZWxlbWVudCA9IFJlYWN0LmlzVmFsaWRFbGVtZW50KExpc3RIZWFkZXJDb21wb25lbnQpID8gKFxuICAgICAgICBMaXN0SGVhZGVyQ29tcG9uZW50XG4gICAgICApIDogKFxuICAgICAgICAvLyAkRmxvd0ZpeE1lW25vdC1hLWNvbXBvbmVudF1cbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZS1hcmddXG4gICAgICAgIDxMaXN0SGVhZGVyQ29tcG9uZW50IC8+XG4gICAgICApO1xuICAgICAgY2VsbHMucHVzaChcbiAgICAgICAgPFZpcnR1YWxpemVkTGlzdENlbGxDb250ZXh0UHJvdmlkZXJcbiAgICAgICAgICBjZWxsS2V5PXt0aGlzLl9nZXRDZWxsS2V5KCkgKyAnLWhlYWRlcid9XG4gICAgICAgICAga2V5PVwiJGhlYWRlclwiPlxuICAgICAgICAgIDxWaWV3XG4gICAgICAgICAgICBvbkxheW91dD17dGhpcy5fb25MYXlvdXRIZWFkZXJ9XG4gICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5jb21wb3NlKFxuICAgICAgICAgICAgICBpbnZlcnNpb25TdHlsZSxcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5MaXN0SGVhZGVyQ29tcG9uZW50U3R5bGUsXG4gICAgICAgICAgICApfT5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV0gLSBUeXBpbmcgUmVhY3ROYXRpdmVDb21wb25lbnQgcmV2ZWFsZWQgZXJyb3JzXG4gICAgICAgICAgICAgIGVsZW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgIDwvVmlydHVhbGl6ZWRMaXN0Q2VsbENvbnRleHRQcm92aWRlcj4sXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBpdGVtQ291bnQgPSB0aGlzLnByb3BzLmdldEl0ZW1Db3VudChkYXRhKTtcbiAgICBpZiAoaXRlbUNvdW50ID4gMCkge1xuICAgICAgX3VzZWRJbmRleEZvcktleSA9IGZhbHNlO1xuICAgICAgX2tleWxlc3NJdGVtQ29tcG9uZW50TmFtZSA9ICcnO1xuICAgICAgY29uc3Qgc3BhY2VyS2V5ID0gdGhpcy5fZ2V0U3BhY2VyS2V5KCFob3Jpem9udGFsKTtcbiAgICAgIGNvbnN0IGxhc3RJbml0aWFsSW5kZXggPSB0aGlzLnByb3BzLmluaXRpYWxTY3JvbGxJbmRleFxuICAgICAgICA/IC0xXG4gICAgICAgIDogaW5pdGlhbE51bVRvUmVuZGVyT3JEZWZhdWx0KHRoaXMucHJvcHMuaW5pdGlhbE51bVRvUmVuZGVyKSAtIDE7XG4gICAgICBjb25zdCB7Zmlyc3QsIGxhc3R9ID0gdGhpcy5zdGF0ZTtcbiAgICAgIHRoaXMuX3B1c2hDZWxscyhcbiAgICAgICAgY2VsbHMsXG4gICAgICAgIHN0aWNreUhlYWRlckluZGljZXMsXG4gICAgICAgIHN0aWNreUluZGljZXNGcm9tUHJvcHMsXG4gICAgICAgIDAsXG4gICAgICAgIGxhc3RJbml0aWFsSW5kZXgsXG4gICAgICAgIGludmVyc2lvblN0eWxlLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IGZpcnN0QWZ0ZXJJbml0aWFsID0gTWF0aC5tYXgobGFzdEluaXRpYWxJbmRleCArIDEsIGZpcnN0KTtcbiAgICAgIGlmICghaXNWaXJ0dWFsaXphdGlvbkRpc2FibGVkICYmIGZpcnN0ID4gbGFzdEluaXRpYWxJbmRleCArIDEpIHtcbiAgICAgICAgbGV0IGluc2VydGVkU3RpY2t5U3BhY2VyID0gZmFsc2U7XG4gICAgICAgIGlmIChzdGlja3lJbmRpY2VzRnJvbVByb3BzLnNpemUgPiAwKSB7XG4gICAgICAgICAgY29uc3Qgc3RpY2t5T2Zmc2V0ID0gTGlzdEhlYWRlckNvbXBvbmVudCA/IDEgOiAwO1xuICAgICAgICAgIC8vIFNlZSBpZiB0aGVyZSBhcmUgYW55IHN0aWNreSBoZWFkZXJzIGluIHRoZSB2aXJ0dWFsaXplZCBzcGFjZSB0aGF0IHdlIG5lZWQgdG8gcmVuZGVyLlxuICAgICAgICAgIGZvciAobGV0IGlpID0gZmlyc3RBZnRlckluaXRpYWwgLSAxOyBpaSA+IGxhc3RJbml0aWFsSW5kZXg7IGlpLS0pIHtcbiAgICAgICAgICAgIGlmIChzdGlja3lJbmRpY2VzRnJvbVByb3BzLmhhcyhpaSArIHN0aWNreU9mZnNldCkpIHtcbiAgICAgICAgICAgICAgY29uc3QgaW5pdEJsb2NrID0gdGhpcy5fZ2V0RnJhbWVNZXRyaWNzQXBwcm94KGxhc3RJbml0aWFsSW5kZXgpO1xuICAgICAgICAgICAgICBjb25zdCBzdGlja3lCbG9jayA9IHRoaXMuX2dldEZyYW1lTWV0cmljc0FwcHJveChpaSk7XG4gICAgICAgICAgICAgIGNvbnN0IGxlYWRTcGFjZSA9XG4gICAgICAgICAgICAgICAgc3RpY2t5QmxvY2sub2Zmc2V0IC1cbiAgICAgICAgICAgICAgICBpbml0QmxvY2sub2Zmc2V0IC1cbiAgICAgICAgICAgICAgICAodGhpcy5wcm9wcy5pbml0aWFsU2Nyb2xsSW5kZXggPyAwIDogaW5pdEJsb2NrLmxlbmd0aCk7XG4gICAgICAgICAgICAgIGNlbGxzLnB1c2goXG4gICAgICAgICAgICAgICAgPFZpZXcga2V5PVwiJHN0aWNreV9sZWFkXCIgc3R5bGU9e3tbc3BhY2VyS2V5XTogbGVhZFNwYWNlfX0gLz4sXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRoaXMuX3B1c2hDZWxscyhcbiAgICAgICAgICAgICAgICBjZWxscyxcbiAgICAgICAgICAgICAgICBzdGlja3lIZWFkZXJJbmRpY2VzLFxuICAgICAgICAgICAgICAgIHN0aWNreUluZGljZXNGcm9tUHJvcHMsXG4gICAgICAgICAgICAgICAgaWksXG4gICAgICAgICAgICAgICAgaWksXG4gICAgICAgICAgICAgICAgaW52ZXJzaW9uU3R5bGUsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGNvbnN0IHRyYWlsU3BhY2UgPVxuICAgICAgICAgICAgICAgIHRoaXMuX2dldEZyYW1lTWV0cmljc0FwcHJveChmaXJzdCkub2Zmc2V0IC1cbiAgICAgICAgICAgICAgICAoc3RpY2t5QmxvY2sub2Zmc2V0ICsgc3RpY2t5QmxvY2subGVuZ3RoKTtcbiAgICAgICAgICAgICAgY2VsbHMucHVzaChcbiAgICAgICAgICAgICAgICA8VmlldyBrZXk9XCIkc3RpY2t5X3RyYWlsXCIgc3R5bGU9e3tbc3BhY2VyS2V5XTogdHJhaWxTcGFjZX19IC8+LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBpbnNlcnRlZFN0aWNreVNwYWNlciA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWluc2VydGVkU3RpY2t5U3BhY2VyKSB7XG4gICAgICAgICAgY29uc3QgaW5pdEJsb2NrID0gdGhpcy5fZ2V0RnJhbWVNZXRyaWNzQXBwcm94KGxhc3RJbml0aWFsSW5kZXgpO1xuICAgICAgICAgIGNvbnN0IGZpcnN0U3BhY2UgPVxuICAgICAgICAgICAgdGhpcy5fZ2V0RnJhbWVNZXRyaWNzQXBwcm94KGZpcnN0KS5vZmZzZXQgLVxuICAgICAgICAgICAgKGluaXRCbG9jay5vZmZzZXQgKyBpbml0QmxvY2subGVuZ3RoKTtcbiAgICAgICAgICBjZWxscy5wdXNoKFxuICAgICAgICAgICAgPFZpZXcga2V5PVwiJGxlYWRfc3BhY2VyXCIgc3R5bGU9e3tbc3BhY2VyS2V5XTogZmlyc3RTcGFjZX19IC8+LFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX3B1c2hDZWxscyhcbiAgICAgICAgY2VsbHMsXG4gICAgICAgIHN0aWNreUhlYWRlckluZGljZXMsXG4gICAgICAgIHN0aWNreUluZGljZXNGcm9tUHJvcHMsXG4gICAgICAgIGZpcnN0QWZ0ZXJJbml0aWFsLFxuICAgICAgICBsYXN0LFxuICAgICAgICBpbnZlcnNpb25TdHlsZSxcbiAgICAgICk7XG4gICAgICBpZiAoIXRoaXMuX2hhc1dhcm5lZC5rZXlzICYmIF91c2VkSW5kZXhGb3JLZXkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdWaXJ0dWFsaXplZExpc3Q6IG1pc3Npbmcga2V5cyBmb3IgaXRlbXMsIG1ha2Ugc3VyZSB0byBzcGVjaWZ5IGEga2V5IG9yIGlkIHByb3BlcnR5IG9uIGVhY2ggJyArXG4gICAgICAgICAgICAnaXRlbSBvciBwcm92aWRlIGEgY3VzdG9tIGtleUV4dHJhY3Rvci4nLFxuICAgICAgICAgIF9rZXlsZXNzSXRlbUNvbXBvbmVudE5hbWUsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX2hhc1dhcm5lZC5rZXlzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNWaXJ0dWFsaXphdGlvbkRpc2FibGVkICYmIGxhc3QgPCBpdGVtQ291bnQgLSAxKSB7XG4gICAgICAgIGNvbnN0IGxhc3RGcmFtZSA9IHRoaXMuX2dldEZyYW1lTWV0cmljc0FwcHJveChsYXN0KTtcbiAgICAgICAgLy8gV2l0aG91dCBnZXRJdGVtTGF5b3V0LCB3ZSBsaW1pdCBvdXIgdGFpbCBzcGFjZXIgdG8gdGhlIF9oaWdoZXN0TWVhc3VyZWRGcmFtZUluZGV4IHRvXG4gICAgICAgIC8vIHByZXZlbnQgdGhlIHVzZXIgZm9yIGh5cGVyc2Nyb2xsaW5nIGludG8gdW4tbWVhc3VyZWQgYXJlYSBiZWNhdXNlIG90aGVyd2lzZSBjb250ZW50IHdpbGxcbiAgICAgICAgLy8gbGlrZWx5IGp1bXAgYXJvdW5kIGFzIGl0IHJlbmRlcnMgaW4gYWJvdmUgdGhlIHZpZXdwb3J0LlxuICAgICAgICBjb25zdCBlbmQgPSB0aGlzLnByb3BzLmdldEl0ZW1MYXlvdXRcbiAgICAgICAgICA/IGl0ZW1Db3VudCAtIDFcbiAgICAgICAgICA6IE1hdGgubWluKGl0ZW1Db3VudCAtIDEsIHRoaXMuX2hpZ2hlc3RNZWFzdXJlZEZyYW1lSW5kZXgpO1xuICAgICAgICBjb25zdCBlbmRGcmFtZSA9IHRoaXMuX2dldEZyYW1lTWV0cmljc0FwcHJveChlbmQpO1xuICAgICAgICBjb25zdCB0YWlsU3BhY2VyTGVuZ3RoID1cbiAgICAgICAgICBlbmRGcmFtZS5vZmZzZXQgK1xuICAgICAgICAgIGVuZEZyYW1lLmxlbmd0aCAtXG4gICAgICAgICAgKGxhc3RGcmFtZS5vZmZzZXQgKyBsYXN0RnJhbWUubGVuZ3RoKTtcbiAgICAgICAgY2VsbHMucHVzaChcbiAgICAgICAgICA8VmlldyBrZXk9XCIkdGFpbF9zcGFjZXJcIiBzdHlsZT17e1tzcGFjZXJLZXldOiB0YWlsU3BhY2VyTGVuZ3RofX0gLz4sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChMaXN0RW1wdHlDb21wb25lbnQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQ6IFJlYWN0LkVsZW1lbnQ8YW55PiA9ICgoUmVhY3QuaXNWYWxpZEVsZW1lbnQoXG4gICAgICAgIExpc3RFbXB0eUNvbXBvbmVudCxcbiAgICAgICkgPyAoXG4gICAgICAgIExpc3RFbXB0eUNvbXBvbmVudFxuICAgICAgKSA6IChcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtub3QtYS1jb21wb25lbnRdXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGUtYXJnXVxuICAgICAgICA8TGlzdEVtcHR5Q29tcG9uZW50IC8+XG4gICAgICApKTogYW55KTtcbiAgICAgIGNlbGxzLnB1c2goXG4gICAgICAgIFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgICAga2V5OiAnJGVtcHR5JyxcbiAgICAgICAgICBvbkxheW91dDogZXZlbnQgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25MYXlvdXRFbXB0eShldmVudCk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5wcm9wcy5vbkxheW91dCkge1xuICAgICAgICAgICAgICBlbGVtZW50LnByb3BzLm9uTGF5b3V0KGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHN0eWxlOiBTdHlsZVNoZWV0LmNvbXBvc2UoaW52ZXJzaW9uU3R5bGUsIGVsZW1lbnQucHJvcHMuc3R5bGUpLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChMaXN0Rm9vdGVyQ29tcG9uZW50KSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gUmVhY3QuaXNWYWxpZEVsZW1lbnQoTGlzdEZvb3RlckNvbXBvbmVudCkgPyAoXG4gICAgICAgIExpc3RGb290ZXJDb21wb25lbnRcbiAgICAgICkgOiAoXG4gICAgICAgIC8vICRGbG93Rml4TWVbbm90LWEtY29tcG9uZW50XVxuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlLWFyZ11cbiAgICAgICAgPExpc3RGb290ZXJDb21wb25lbnQgLz5cbiAgICAgICk7XG4gICAgICBjZWxscy5wdXNoKFxuICAgICAgICA8VmlydHVhbGl6ZWRMaXN0Q2VsbENvbnRleHRQcm92aWRlclxuICAgICAgICAgIGNlbGxLZXk9e3RoaXMuX2dldEZvb3RlckNlbGxLZXkoKX1cbiAgICAgICAgICBrZXk9XCIkZm9vdGVyXCI+XG4gICAgICAgICAgPFZpZXdcbiAgICAgICAgICAgIG9uTGF5b3V0PXt0aGlzLl9vbkxheW91dEZvb3Rlcn1cbiAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmNvbXBvc2UoXG4gICAgICAgICAgICAgIGludmVyc2lvblN0eWxlLFxuICAgICAgICAgICAgICB0aGlzLnByb3BzLkxpc3RGb290ZXJDb21wb25lbnRTdHlsZSxcbiAgICAgICAgICAgICl9PlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXSAtIFR5cGluZyBSZWFjdE5hdGl2ZUNvbXBvbmVudCByZXZlYWxlZCBlcnJvcnNcbiAgICAgICAgICAgICAgZWxlbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgPC9WaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyPixcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHNjcm9sbFByb3BzID0ge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIG9uQ29udGVudFNpemVDaGFuZ2U6IHRoaXMuX29uQ29udGVudFNpemVDaGFuZ2UsXG4gICAgICBvbkxheW91dDogdGhpcy5fb25MYXlvdXQsXG4gICAgICBvblNjcm9sbDogdGhpcy5fb25TY3JvbGwsXG4gICAgICBvblNjcm9sbEJlZ2luRHJhZzogdGhpcy5fb25TY3JvbGxCZWdpbkRyYWcsXG4gICAgICBvblNjcm9sbEVuZERyYWc6IHRoaXMuX29uU2Nyb2xsRW5kRHJhZyxcbiAgICAgIG9uTW9tZW50dW1TY3JvbGxCZWdpbjogdGhpcy5fb25Nb21lbnR1bVNjcm9sbEJlZ2luLFxuICAgICAgb25Nb21lbnR1bVNjcm9sbEVuZDogdGhpcy5fb25Nb21lbnR1bVNjcm9sbEVuZCxcbiAgICAgIHNjcm9sbEV2ZW50VGhyb3R0bGU6IHNjcm9sbEV2ZW50VGhyb3R0bGVPckRlZmF1bHQoXG4gICAgICAgIHRoaXMucHJvcHMuc2Nyb2xsRXZlbnRUaHJvdHRsZSxcbiAgICAgICksIC8vIFRPRE86IEFuZHJvaWQgc3VwcG9ydFxuICAgICAgaW52ZXJ0U3RpY2t5SGVhZGVyczpcbiAgICAgICAgdGhpcy5wcm9wcy5pbnZlcnRTdGlja3lIZWFkZXJzICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IHRoaXMucHJvcHMuaW52ZXJ0U3RpY2t5SGVhZGVyc1xuICAgICAgICAgIDogdGhpcy5wcm9wcy5pbnZlcnRlZCxcbiAgICAgIHN0aWNreUhlYWRlckluZGljZXMsXG4gICAgICBzdHlsZTogaW52ZXJzaW9uU3R5bGVcbiAgICAgICAgPyBbaW52ZXJzaW9uU3R5bGUsIHRoaXMucHJvcHMuc3R5bGVdXG4gICAgICAgIDogdGhpcy5wcm9wcy5zdHlsZSxcbiAgICB9O1xuXG4gICAgdGhpcy5faGFzTW9yZSA9XG4gICAgICB0aGlzLnN0YXRlLmxhc3QgPCB0aGlzLnByb3BzLmdldEl0ZW1Db3VudCh0aGlzLnByb3BzLmRhdGEpIC0gMTtcblxuICAgIGNvbnN0IGlubmVyUmV0ID0gKFxuICAgICAgPFZpcnR1YWxpemVkTGlzdENvbnRleHRQcm92aWRlclxuICAgICAgICB2YWx1ZT17e1xuICAgICAgICAgIGNlbGxLZXk6IG51bGwsXG4gICAgICAgICAgZ2V0U2Nyb2xsTWV0cmljczogdGhpcy5fZ2V0U2Nyb2xsTWV0cmljcyxcbiAgICAgICAgICBob3Jpem9udGFsOiBob3Jpem9udGFsT3JEZWZhdWx0KHRoaXMucHJvcHMuaG9yaXpvbnRhbCksXG4gICAgICAgICAgZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZjogdGhpcy5fZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZixcbiAgICAgICAgICBnZXROZXN0ZWRDaGlsZFN0YXRlOiB0aGlzLl9nZXROZXN0ZWRDaGlsZFN0YXRlLFxuICAgICAgICAgIHJlZ2lzdGVyQXNOZXN0ZWRDaGlsZDogdGhpcy5fcmVnaXN0ZXJBc05lc3RlZENoaWxkLFxuICAgICAgICAgIHVucmVnaXN0ZXJBc05lc3RlZENoaWxkOiB0aGlzLl91bnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCxcbiAgICAgICAgICBkZWJ1Z0luZm86IHRoaXMuX2dldERlYnVnSW5mbygpLFxuICAgICAgICB9fT5cbiAgICAgICAge1JlYWN0LmNsb25lRWxlbWVudChcbiAgICAgICAgICAoXG4gICAgICAgICAgICB0aGlzLnByb3BzLnJlbmRlclNjcm9sbENvbXBvbmVudCB8fFxuICAgICAgICAgICAgdGhpcy5fZGVmYXVsdFJlbmRlclNjcm9sbENvbXBvbmVudFxuICAgICAgICAgICkoc2Nyb2xsUHJvcHMpLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJlZjogdGhpcy5fY2FwdHVyZVNjcm9sbFJlZixcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNlbGxzLFxuICAgICAgICApfVxuICAgICAgPC9WaXJ0dWFsaXplZExpc3RDb250ZXh0UHJvdmlkZXI+XG4gICAgKTtcbiAgICBsZXQgcmV0ID0gaW5uZXJSZXQ7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIHJldCA9IChcbiAgICAgICAgPFNjcm9sbFZpZXcuQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAgICB7c2Nyb2xsQ29udGV4dCA9PiB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHNjcm9sbENvbnRleHQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAhc2Nyb2xsQ29udGV4dC5ob3Jpem9udGFsID09PVxuICAgICAgICAgICAgICAgICFob3Jpem9udGFsT3JEZWZhdWx0KHRoaXMucHJvcHMuaG9yaXpvbnRhbCkgJiZcbiAgICAgICAgICAgICAgIXRoaXMuX2hhc1dhcm5lZC5uZXN0aW5nICYmXG4gICAgICAgICAgICAgIHRoaXMuY29udGV4dCA9PSBudWxsXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgLy8gVE9ETyAoVDQ2NTQ3MDQ0KTogdXNlIFJlYWN0Lndhcm4gb25jZSAxNi45IGlzIHN5bmMnZDogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMTUxNzBcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAnVmlydHVhbGl6ZWRMaXN0cyBzaG91bGQgbmV2ZXIgYmUgbmVzdGVkIGluc2lkZSBwbGFpbiBTY3JvbGxWaWV3cyB3aXRoIHRoZSBzYW1lICcgK1xuICAgICAgICAgICAgICAgICAgJ29yaWVudGF0aW9uIGJlY2F1c2UgaXQgY2FuIGJyZWFrIHdpbmRvd2luZyBhbmQgb3RoZXIgZnVuY3Rpb25hbGl0eSAtIHVzZSBhbm90aGVyICcgK1xuICAgICAgICAgICAgICAgICAgJ1ZpcnR1YWxpemVkTGlzdC1iYWNrZWQgY29udGFpbmVyIGluc3RlYWQuJyxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgdGhpcy5faGFzV2FybmVkLm5lc3RpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGlubmVyUmV0O1xuICAgICAgICAgIH19XG4gICAgICAgIDwvU2Nyb2xsVmlldy5Db250ZXh0LkNvbnN1bWVyPlxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMuZGVidWcpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuZGVidWd9PlxuICAgICAgICAgIHtyZXR9XG4gICAgICAgICAge3RoaXMuX3JlbmRlckRlYnVnT3ZlcmxheSgpfVxuICAgICAgICA8L1ZpZXc+XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHM6IFByb3BzKSB7XG4gICAgY29uc3Qge2RhdGEsIGV4dHJhRGF0YX0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChkYXRhICE9PSBwcmV2UHJvcHMuZGF0YSB8fCBleHRyYURhdGEgIT09IHByZXZQcm9wcy5leHRyYURhdGEpIHtcbiAgICAgIC8vIGNsZWFyIHRoZSB2aWV3YWJsZUluZGljZXMgY2FjaGUgdG8gYWxzbyB0cmlnZ2VyXG4gICAgICAvLyB0aGUgb25WaWV3YWJsZUl0ZW1zQ2hhbmdlZCBjYWxsYmFjayB3aXRoIHRoZSBuZXcgZGF0YVxuICAgICAgdGhpcy5fdmlld2FiaWxpdHlUdXBsZXMuZm9yRWFjaCh0dXBsZSA9PiB7XG4gICAgICAgIHR1cGxlLnZpZXdhYmlsaXR5SGVscGVyLnJlc2V0Vmlld2FibGVJbmRpY2VzKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gVGhlIGB0aGlzLl9oaVByaUluUHJvZ3Jlc3NgIGlzIGd1YXJhbnRlZWluZyBhIGhpUHJpIGNlbGwgdXBkYXRlIHdpbGwgb25seSBoYXBwZW5cbiAgICAvLyBvbmNlIHBlciBmaWJlciB1cGRhdGUuIFRoZSBgX3NjaGVkdWxlQ2VsbHNUb1JlbmRlclVwZGF0ZWAgd2lsbCBzZXQgaXQgdG8gdHJ1ZVxuICAgIC8vIGlmIGEgaGlQcmkgdXBkYXRlIG5lZWRzIHRvIHBlcmZvcm0uIElmIGBjb21wb25lbnREaWRVcGRhdGVgIGlzIHRyaWdnZXJlZCB3aXRoXG4gICAgLy8gYHRoaXMuX2hpUHJpSW5Qcm9ncmVzcz10cnVlYCwgbWVhbnMgaXQncyB0cmlnZ2VyZWQgYnkgdGhlIGhpUHJpIHVwZGF0ZS4gVGhlXG4gICAgLy8gYF9zY2hlZHVsZUNlbGxzVG9SZW5kZXJVcGRhdGVgIHdpbGwgY2hlY2sgdGhpcyBjb25kaXRpb24gYW5kIG5vdCBwZXJmb3JtXG4gICAgLy8gYW5vdGhlciBoaVByaSB1cGRhdGUuXG4gICAgY29uc3QgaGlQcmlJblByb2dyZXNzID0gdGhpcy5faGlQcmlJblByb2dyZXNzO1xuICAgIHRoaXMuX3NjaGVkdWxlQ2VsbHNUb1JlbmRlclVwZGF0ZSgpO1xuICAgIC8vIE1ha2Ugc3VyZSBzZXR0aW5nIGB0aGlzLl9oaVByaUluUHJvZ3Jlc3NgIGJhY2sgdG8gZmFsc2UgYWZ0ZXIgYGNvbXBvbmVudERpZFVwZGF0ZWBcbiAgICAvLyBpcyB0cmlnZ2VyZWQgd2l0aCBgdGhpcy5faGlQcmlJblByb2dyZXNzID0gdHJ1ZWBcbiAgICBpZiAoaGlQcmlJblByb2dyZXNzKSB7XG4gICAgICB0aGlzLl9oaVByaUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBfYXZlcmFnZUNlbGxMZW5ndGggPSAwO1xuICAvLyBNYXBzIGEgY2VsbCBrZXkgdG8gdGhlIHNldCBvZiBrZXlzIGZvciBhbGwgb3V0ZXJtb3N0IGNoaWxkIGxpc3RzIHdpdGhpbiB0aGF0IGNlbGxcbiAgX2NlbGxLZXlzVG9DaGlsZExpc3RLZXlzOiBNYXA8c3RyaW5nLCBTZXQ8c3RyaW5nPj4gPSBuZXcgTWFwKCk7XG4gIF9jZWxsUmVmcyA9IHt9O1xuICBfZmlsbFJhdGVIZWxwZXI6IEZpbGxSYXRlSGVscGVyO1xuICBfZnJhbWVzID0ge307XG4gIF9mb290ZXJMZW5ndGggPSAwO1xuICBfaGFzRG9uZUluaXRpYWxTY3JvbGwgPSBmYWxzZTtcbiAgX2hhc0ludGVyYWN0ZWQgPSBmYWxzZTtcbiAgX2hhc01vcmUgPSBmYWxzZTtcbiAgX2hhc1dhcm5lZCA9IHt9O1xuICBfaGVhZGVyTGVuZ3RoID0gMDtcbiAgX2hpUHJpSW5Qcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlOyAvLyBmbGFnIHRvIHByZXZlbnQgaW5maW5pdGUgaGlQcmkgY2VsbCBsaW1pdCB1cGRhdGVcbiAgX2hpZ2hlc3RNZWFzdXJlZEZyYW1lSW5kZXggPSAwO1xuICBfaW5kaWNlc1RvS2V5czogTWFwPG51bWJlciwgc3RyaW5nPiA9IG5ldyBNYXAoKTtcbiAgX25lc3RlZENoaWxkTGlzdHM6IE1hcDxcbiAgICBzdHJpbmcsXG4gICAge1xuICAgICAgcmVmOiA/VmlydHVhbGl6ZWRMaXN0LFxuICAgICAgc3RhdGU6ID9DaGlsZExpc3RTdGF0ZSxcbiAgICAgIC4uLlxuICAgIH0sXG4gID4gPSBuZXcgTWFwKCk7XG4gIF9vZmZzZXRGcm9tUGFyZW50VmlydHVhbGl6ZWRMaXN0OiBudW1iZXIgPSAwO1xuICBfcHJldlBhcmVudE9mZnNldDogbnVtYmVyID0gMDtcbiAgX3Njcm9sbE1ldHJpY3MgPSB7XG4gICAgY29udGVudExlbmd0aDogMCxcbiAgICBkT2Zmc2V0OiAwLFxuICAgIGR0OiAxMCxcbiAgICBvZmZzZXQ6IDAsXG4gICAgdGltZXN0YW1wOiAwLFxuICAgIHZlbG9jaXR5OiAwLFxuICAgIHZpc2libGVMZW5ndGg6IDAsXG4gIH07XG4gIF9zY3JvbGxSZWY6ID9SZWFjdC5FbGVtZW50UmVmPGFueT4gPSBudWxsO1xuICBfc2VudEVuZEZvckNvbnRlbnRMZW5ndGggPSAwO1xuICBfdG90YWxDZWxsTGVuZ3RoID0gMDtcbiAgX3RvdGFsQ2VsbHNNZWFzdXJlZCA9IDA7XG4gIF91cGRhdGVDZWxsc1RvUmVuZGVyQmF0Y2hlcjogQmF0Y2hpbmF0b3I7XG4gIF92aWV3YWJpbGl0eVR1cGxlczogQXJyYXk8Vmlld2FiaWxpdHlIZWxwZXJDYWxsYmFja1R1cGxlPiA9IFtdO1xuXG4gIF9jYXB0dXJlU2Nyb2xsUmVmID0gcmVmID0+IHtcbiAgICB0aGlzLl9zY3JvbGxSZWYgPSByZWY7XG4gIH07XG5cbiAgX2NvbXB1dGVCbGFua25lc3MoKSB7XG4gICAgdGhpcy5fZmlsbFJhdGVIZWxwZXIuY29tcHV0ZUJsYW5rbmVzcyhcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgICB0aGlzLnN0YXRlLFxuICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcyxcbiAgICApO1xuICB9XG5cbiAgX2RlZmF1bHRSZW5kZXJTY3JvbGxDb21wb25lbnQgPSBwcm9wcyA9PiB7XG4gICAgY29uc3Qgb25SZWZyZXNoID0gcHJvcHMub25SZWZyZXNoO1xuICAgIGlmICh0aGlzLl9pc05lc3RlZFdpdGhTYW1lT3JpZW50YXRpb24oKSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIC0gVHlwaW5nIFJlYWN0TmF0aXZlQ29tcG9uZW50IHJldmVhbGVkIGVycm9yc1xuICAgICAgcmV0dXJuIDxWaWV3IHsuLi5wcm9wc30gLz47XG4gICAgfSBlbHNlIGlmIChvblJlZnJlc2gpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgdHlwZW9mIHByb3BzLnJlZnJlc2hpbmcgPT09ICdib29sZWFuJyxcbiAgICAgICAgJ2ByZWZyZXNoaW5nYCBwcm9wIG11c3QgYmUgc2V0IGFzIGEgYm9vbGVhbiBpbiBvcmRlciB0byB1c2UgYG9uUmVmcmVzaGAsIGJ1dCBnb3QgYCcgK1xuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHByb3BzLnJlZnJlc2hpbmcgPz8gJ3VuZGVmaW5lZCcpICtcbiAgICAgICAgICAnYCcsXG4gICAgICApO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIEludmFsaWQgcHJvcCB1c2FnZVxuICAgICAgICA8U2Nyb2xsVmlld1xuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICByZWZyZXNoQ29udHJvbD17XG4gICAgICAgICAgICBwcm9wcy5yZWZyZXNoQ29udHJvbCA9PSBudWxsID8gKFxuICAgICAgICAgICAgICA8UmVmcmVzaENvbnRyb2xcbiAgICAgICAgICAgICAgICByZWZyZXNoaW5nPXtwcm9wcy5yZWZyZXNoaW5nfVxuICAgICAgICAgICAgICAgIG9uUmVmcmVzaD17b25SZWZyZXNofVxuICAgICAgICAgICAgICAgIHByb2dyZXNzVmlld09mZnNldD17cHJvcHMucHJvZ3Jlc3NWaWV3T2Zmc2V0fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgcHJvcHMucmVmcmVzaENvbnRyb2xcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gSW52YWxpZCBwcm9wIHVzYWdlXG4gICAgICByZXR1cm4gPFNjcm9sbFZpZXcgey4uLnByb3BzfSAvPjtcbiAgICB9XG4gIH07XG5cbiAgX29uQ2VsbExheW91dChlLCBjZWxsS2V5LCBpbmRleCkge1xuICAgIGNvbnN0IGxheW91dCA9IGUubmF0aXZlRXZlbnQubGF5b3V0O1xuICAgIGNvbnN0IG5leHQgPSB7XG4gICAgICBvZmZzZXQ6IHRoaXMuX3NlbGVjdE9mZnNldChsYXlvdXQpLFxuICAgICAgbGVuZ3RoOiB0aGlzLl9zZWxlY3RMZW5ndGgobGF5b3V0KSxcbiAgICAgIGluZGV4LFxuICAgICAgaW5MYXlvdXQ6IHRydWUsXG4gICAgfTtcbiAgICBjb25zdCBjdXJyID0gdGhpcy5fZnJhbWVzW2NlbGxLZXldO1xuICAgIGlmIChcbiAgICAgICFjdXJyIHx8XG4gICAgICBuZXh0Lm9mZnNldCAhPT0gY3Vyci5vZmZzZXQgfHxcbiAgICAgIG5leHQubGVuZ3RoICE9PSBjdXJyLmxlbmd0aCB8fFxuICAgICAgaW5kZXggIT09IGN1cnIuaW5kZXhcbiAgICApIHtcbiAgICAgIHRoaXMuX3RvdGFsQ2VsbExlbmd0aCArPSBuZXh0Lmxlbmd0aCAtIChjdXJyID8gY3Vyci5sZW5ndGggOiAwKTtcbiAgICAgIHRoaXMuX3RvdGFsQ2VsbHNNZWFzdXJlZCArPSBjdXJyID8gMCA6IDE7XG4gICAgICB0aGlzLl9hdmVyYWdlQ2VsbExlbmd0aCA9XG4gICAgICAgIHRoaXMuX3RvdGFsQ2VsbExlbmd0aCAvIHRoaXMuX3RvdGFsQ2VsbHNNZWFzdXJlZDtcbiAgICAgIHRoaXMuX2ZyYW1lc1tjZWxsS2V5XSA9IG5leHQ7XG4gICAgICB0aGlzLl9oaWdoZXN0TWVhc3VyZWRGcmFtZUluZGV4ID0gTWF0aC5tYXgoXG4gICAgICAgIHRoaXMuX2hpZ2hlc3RNZWFzdXJlZEZyYW1lSW5kZXgsXG4gICAgICAgIGluZGV4LFxuICAgICAgKTtcbiAgICAgIHRoaXMuX3NjaGVkdWxlQ2VsbHNUb1JlbmRlclVwZGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9mcmFtZXNbY2VsbEtleV0uaW5MYXlvdXQgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX3RyaWdnZXJSZW1lYXN1cmVGb3JDaGlsZExpc3RzSW5DZWxsKGNlbGxLZXkpO1xuXG4gICAgdGhpcy5fY29tcHV0ZUJsYW5rbmVzcygpO1xuICAgIHRoaXMuX3VwZGF0ZVZpZXdhYmxlSXRlbXModGhpcy5wcm9wcy5kYXRhKTtcbiAgfVxuXG4gIF9vbkNlbGxVbm1vdW50ID0gKGNlbGxLZXk6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGN1cnIgPSB0aGlzLl9mcmFtZXNbY2VsbEtleV07XG4gICAgaWYgKGN1cnIpIHtcbiAgICAgIHRoaXMuX2ZyYW1lc1tjZWxsS2V5XSA9IHsuLi5jdXJyLCBpbkxheW91dDogZmFsc2V9O1xuICAgIH1cbiAgfTtcblxuICBfdHJpZ2dlclJlbWVhc3VyZUZvckNoaWxkTGlzdHNJbkNlbGwoY2VsbEtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgY2hpbGRMaXN0S2V5cyA9IHRoaXMuX2NlbGxLZXlzVG9DaGlsZExpc3RLZXlzLmdldChjZWxsS2V5KTtcbiAgICBpZiAoY2hpbGRMaXN0S2V5cykge1xuICAgICAgZm9yIChsZXQgY2hpbGRLZXkgb2YgY2hpbGRMaXN0S2V5cykge1xuICAgICAgICBjb25zdCBjaGlsZExpc3QgPSB0aGlzLl9uZXN0ZWRDaGlsZExpc3RzLmdldChjaGlsZEtleSk7XG4gICAgICAgIGNoaWxkTGlzdCAmJlxuICAgICAgICAgIGNoaWxkTGlzdC5yZWYgJiZcbiAgICAgICAgICBjaGlsZExpc3QucmVmLm1lYXN1cmVMYXlvdXRSZWxhdGl2ZVRvQ29udGFpbmluZ0xpc3QoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBtZWFzdXJlTGF5b3V0UmVsYXRpdmVUb0NvbnRhaW5pbmdMaXN0KCk6IHZvaWQge1xuICAgIC8vIFRPRE8gKFQzNTU3NDUzOCk6IGZpbmROb2RlSGFuZGxlIHNvbWV0aW1lcyBjcmFzaGVzIHdpdGggXCJVbmFibGUgdG8gZmluZFxuICAgIC8vIG5vZGUgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudFwiIGR1cmluZyBzY3JvbGxpbmdcbiAgICB0cnkge1xuICAgICAgaWYgKCF0aGlzLl9zY3JvbGxSZWYpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gV2UgYXJlIGFzc3VtaW5nIHRoYXQgZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZigpLmdldFNjcm9sbFJlZigpXG4gICAgICAvLyBpcyBhIG5vbi1udWxsIHJlZmVyZW5jZSB0byBhIFNjcm9sbFZpZXdcbiAgICAgIHRoaXMuX3Njcm9sbFJlZi5tZWFzdXJlTGF5b3V0KFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZigpLmdldFNjcm9sbFJlZigpLFxuICAgICAgICAoeCwgeSwgd2lkdGgsIGhlaWdodCkgPT4ge1xuICAgICAgICAgIHRoaXMuX29mZnNldEZyb21QYXJlbnRWaXJ0dWFsaXplZExpc3QgPSB0aGlzLl9zZWxlY3RPZmZzZXQoe3gsIHl9KTtcbiAgICAgICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLmNvbnRlbnRMZW5ndGggPSB0aGlzLl9zZWxlY3RMZW5ndGgoe1xuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc3Qgc2Nyb2xsTWV0cmljcyA9IHRoaXMuX2NvbnZlcnRQYXJlbnRTY3JvbGxNZXRyaWNzKFxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmdldFNjcm9sbE1ldHJpY3MoKSxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgY29uc3QgbWV0cmljc0NoYW5nZWQgPVxuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcy52aXNpYmxlTGVuZ3RoICE9PSBzY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGggfHxcbiAgICAgICAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3Mub2Zmc2V0ICE9PSBzY3JvbGxNZXRyaWNzLm9mZnNldDtcblxuICAgICAgICAgIGlmIChtZXRyaWNzQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcy52aXNpYmxlTGVuZ3RoID0gc2Nyb2xsTWV0cmljcy52aXNpYmxlTGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcy5vZmZzZXQgPSBzY3JvbGxNZXRyaWNzLm9mZnNldDtcblxuICAgICAgICAgICAgLy8gSWYgbWV0cmljcyBvZiB0aGUgc2Nyb2xsVmlldyBjaGFuZ2VkLCB0aGVuIHdlIHRyaWdnZXJlZCByZW1lYXN1cmUgZm9yIGNoaWxkIGxpc3RcbiAgICAgICAgICAgIC8vIHRvIGVuc3VyZSBWaXJ0dWFsaXplZExpc3QgaGFzIHRoZSByaWdodCBpbmZvcm1hdGlvbi5cbiAgICAgICAgICAgIHRoaXMuX2NlbGxLZXlzVG9DaGlsZExpc3RLZXlzLmZvckVhY2goY2hpbGRMaXN0S2V5cyA9PiB7XG4gICAgICAgICAgICAgIGlmIChjaGlsZExpc3RLZXlzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY2hpbGRLZXkgb2YgY2hpbGRMaXN0S2V5cykge1xuICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGRMaXN0ID0gdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5nZXQoY2hpbGRLZXkpO1xuICAgICAgICAgICAgICAgICAgY2hpbGRMaXN0ICYmXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkTGlzdC5yZWYgJiZcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRMaXN0LnJlZi5tZWFzdXJlTGF5b3V0UmVsYXRpdmVUb0NvbnRhaW5pbmdMaXN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIlZpcnR1YWxpemVkTGlzdDogRW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgbWVhc3VyaW5nIGEgbGlzdCdzXCIgK1xuICAgICAgICAgICAgICAnIG9mZnNldCBmcm9tIGl0cyBjb250YWluaW5nIFZpcnR1YWxpemVkTGlzdC4nLFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdtZWFzdXJlTGF5b3V0UmVsYXRpdmVUb0NvbnRhaW5pbmdMaXN0IHRocmV3IGFuIGVycm9yJyxcbiAgICAgICAgZXJyb3Iuc3RhY2ssXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIF9vbkxheW91dCA9IChlOiBPYmplY3QpID0+IHtcbiAgICBpZiAodGhpcy5faXNOZXN0ZWRXaXRoU2FtZU9yaWVudGF0aW9uKCkpIHtcbiAgICAgIC8vIE5lZWQgdG8gYWRqdXN0IG91ciBzY3JvbGwgbWV0cmljcyB0byBiZSByZWxhdGl2ZSB0byBvdXIgY29udGFpbmluZ1xuICAgICAgLy8gVmlydHVhbGl6ZWRMaXN0IGJlZm9yZSB3ZSBjYW4gbWFrZSBjbGFpbXMgYWJvdXQgbGlzdCBpdGVtIHZpZXdhYmlsaXR5XG4gICAgICB0aGlzLm1lYXN1cmVMYXlvdXRSZWxhdGl2ZVRvQ29udGFpbmluZ0xpc3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcy52aXNpYmxlTGVuZ3RoID0gdGhpcy5fc2VsZWN0TGVuZ3RoKFxuICAgICAgICBlLm5hdGl2ZUV2ZW50LmxheW91dCxcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMucHJvcHMub25MYXlvdXQgJiYgdGhpcy5wcm9wcy5vbkxheW91dChlKTtcbiAgICB0aGlzLl9zY2hlZHVsZUNlbGxzVG9SZW5kZXJVcGRhdGUoKTtcbiAgICB0aGlzLl9tYXliZUNhbGxPbkVuZFJlYWNoZWQoKTtcbiAgfTtcblxuICBfb25MYXlvdXRFbXB0eSA9IGUgPT4ge1xuICAgIHRoaXMucHJvcHMub25MYXlvdXQgJiYgdGhpcy5wcm9wcy5vbkxheW91dChlKTtcbiAgfTtcblxuICBfZ2V0Rm9vdGVyQ2VsbEtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9nZXRDZWxsS2V5KCkgKyAnLWZvb3Rlcic7XG4gIH1cblxuICBfb25MYXlvdXRGb290ZXIgPSBlID0+IHtcbiAgICB0aGlzLl90cmlnZ2VyUmVtZWFzdXJlRm9yQ2hpbGRMaXN0c0luQ2VsbCh0aGlzLl9nZXRGb290ZXJDZWxsS2V5KCkpO1xuICAgIHRoaXMuX2Zvb3Rlckxlbmd0aCA9IHRoaXMuX3NlbGVjdExlbmd0aChlLm5hdGl2ZUV2ZW50LmxheW91dCk7XG4gIH07XG5cbiAgX29uTGF5b3V0SGVhZGVyID0gZSA9PiB7XG4gICAgdGhpcy5faGVhZGVyTGVuZ3RoID0gdGhpcy5fc2VsZWN0TGVuZ3RoKGUubmF0aXZlRXZlbnQubGF5b3V0KTtcbiAgfTtcblxuICBfcmVuZGVyRGVidWdPdmVybGF5KCkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZSA9XG4gICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGggL1xuICAgICAgKHRoaXMuX3Njcm9sbE1ldHJpY3MuY29udGVudExlbmd0aCB8fCAxKTtcbiAgICBjb25zdCBmcmFtZXNJbkxheW91dCA9IFtdO1xuICAgIGNvbnN0IGl0ZW1Db3VudCA9IHRoaXMucHJvcHMuZ2V0SXRlbUNvdW50KHRoaXMucHJvcHMuZGF0YSk7XG4gICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IGl0ZW1Db3VudDsgaWkrKykge1xuICAgICAgY29uc3QgZnJhbWUgPSB0aGlzLl9nZXRGcmFtZU1ldHJpY3NBcHByb3goaWkpO1xuICAgICAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddICg+PTAuNjguMCBzaXRlPXJlYWN0X25hdGl2ZV9mYikgVGhpcyBjb21tZW50XG4gICAgICAgKiBzdXBwcmVzc2VzIGFuIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC42OCB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGVcbiAgICAgICAqIGVycm9yIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgICAgaWYgKGZyYW1lLmluTGF5b3V0KSB7XG4gICAgICAgIGZyYW1lc0luTGF5b3V0LnB1c2goZnJhbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB3aW5kb3dUb3AgPSB0aGlzLl9nZXRGcmFtZU1ldHJpY3NBcHByb3godGhpcy5zdGF0ZS5maXJzdCkub2Zmc2V0O1xuICAgIGNvbnN0IGZyYW1lTGFzdCA9IHRoaXMuX2dldEZyYW1lTWV0cmljc0FwcHJveCh0aGlzLnN0YXRlLmxhc3QpO1xuICAgIGNvbnN0IHdpbmRvd0xlbiA9IGZyYW1lTGFzdC5vZmZzZXQgKyBmcmFtZUxhc3QubGVuZ3RoIC0gd2luZG93VG9wO1xuICAgIGNvbnN0IHZpc1RvcCA9IHRoaXMuX3Njcm9sbE1ldHJpY3Mub2Zmc2V0O1xuICAgIGNvbnN0IHZpc0xlbiA9IHRoaXMuX3Njcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aDtcblxuICAgIHJldHVybiAoXG4gICAgICA8VmlldyBzdHlsZT17W3N0eWxlcy5kZWJ1Z092ZXJsYXlCYXNlLCBzdHlsZXMuZGVidWdPdmVybGF5XX0+XG4gICAgICAgIHtmcmFtZXNJbkxheW91dC5tYXAoKGYsIGlpKSA9PiAoXG4gICAgICAgICAgPFZpZXdcbiAgICAgICAgICAgIGtleT17J2YnICsgaWl9XG4gICAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgICBzdHlsZXMuZGVidWdPdmVybGF5QmFzZSxcbiAgICAgICAgICAgICAgc3R5bGVzLmRlYnVnT3ZlcmxheUZyYW1lLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG9wOiBmLm9mZnNldCAqIG5vcm1hbGl6ZSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGYubGVuZ3RoICogbm9ybWFsaXplLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgICAgPFZpZXdcbiAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgc3R5bGVzLmRlYnVnT3ZlcmxheUJhc2UsXG4gICAgICAgICAgICBzdHlsZXMuZGVidWdPdmVybGF5RnJhbWVMYXN0LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0b3A6IHdpbmRvd1RvcCAqIG5vcm1hbGl6ZSxcbiAgICAgICAgICAgICAgaGVpZ2h0OiB3aW5kb3dMZW4gKiBub3JtYWxpemUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF19XG4gICAgICAgIC8+XG4gICAgICAgIDxWaWV3XG4gICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgIHN0eWxlcy5kZWJ1Z092ZXJsYXlCYXNlLFxuICAgICAgICAgICAgc3R5bGVzLmRlYnVnT3ZlcmxheUZyYW1lVmlzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0b3A6IHZpc1RvcCAqIG5vcm1hbGl6ZSxcbiAgICAgICAgICAgICAgaGVpZ2h0OiB2aXNMZW4gKiBub3JtYWxpemUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF19XG4gICAgICAgIC8+XG4gICAgICA8L1ZpZXc+XG4gICAgKTtcbiAgfVxuXG4gIF9zZWxlY3RMZW5ndGgoXG4gICAgbWV0cmljczogJFJlYWRPbmx5PHtcbiAgICAgIGhlaWdodDogbnVtYmVyLFxuICAgICAgd2lkdGg6IG51bWJlcixcbiAgICAgIC4uLlxuICAgIH0+LFxuICApOiBudW1iZXIge1xuICAgIHJldHVybiAhaG9yaXpvbnRhbE9yRGVmYXVsdCh0aGlzLnByb3BzLmhvcml6b250YWwpXG4gICAgICA/IG1ldHJpY3MuaGVpZ2h0XG4gICAgICA6IG1ldHJpY3Mud2lkdGg7XG4gIH1cblxuICBfc2VsZWN0T2Zmc2V0KFxuICAgIG1ldHJpY3M6ICRSZWFkT25seTx7XG4gICAgICB4OiBudW1iZXIsXG4gICAgICB5OiBudW1iZXIsXG4gICAgICAuLi5cbiAgICB9PixcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gIWhvcml6b250YWxPckRlZmF1bHQodGhpcy5wcm9wcy5ob3Jpem9udGFsKSA/IG1ldHJpY3MueSA6IG1ldHJpY3MueDtcbiAgfVxuXG4gIF9tYXliZUNhbGxPbkVuZFJlYWNoZWQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgZGF0YSxcbiAgICAgIGdldEl0ZW1Db3VudCxcbiAgICAgIG9uRW5kUmVhY2hlZCxcbiAgICAgIG9uRW5kUmVhY2hlZFRocmVzaG9sZCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7Y29udGVudExlbmd0aCwgdmlzaWJsZUxlbmd0aCwgb2Zmc2V0fSA9IHRoaXMuX3Njcm9sbE1ldHJpY3M7XG4gICAgY29uc3QgZGlzdGFuY2VGcm9tRW5kID0gY29udGVudExlbmd0aCAtIHZpc2libGVMZW5ndGggLSBvZmZzZXQ7XG4gICAgY29uc3QgdGhyZXNob2xkID1cbiAgICAgIG9uRW5kUmVhY2hlZFRocmVzaG9sZCAhPSBudWxsID8gb25FbmRSZWFjaGVkVGhyZXNob2xkICogdmlzaWJsZUxlbmd0aCA6IDI7XG4gICAgaWYgKFxuICAgICAgb25FbmRSZWFjaGVkICYmXG4gICAgICB0aGlzLnN0YXRlLmxhc3QgPT09IGdldEl0ZW1Db3VudChkYXRhKSAtIDEgJiZcbiAgICAgIGRpc3RhbmNlRnJvbUVuZCA8IHRocmVzaG9sZCAmJlxuICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcy5jb250ZW50TGVuZ3RoICE9PSB0aGlzLl9zZW50RW5kRm9yQ29udGVudExlbmd0aFxuICAgICkge1xuICAgICAgLy8gT25seSBjYWxsIG9uRW5kUmVhY2hlZCBvbmNlIGZvciBhIGdpdmVuIGNvbnRlbnQgbGVuZ3RoXG4gICAgICB0aGlzLl9zZW50RW5kRm9yQ29udGVudExlbmd0aCA9IHRoaXMuX3Njcm9sbE1ldHJpY3MuY29udGVudExlbmd0aDtcbiAgICAgIG9uRW5kUmVhY2hlZCh7ZGlzdGFuY2VGcm9tRW5kfSk7XG4gICAgfSBlbHNlIGlmIChkaXN0YW5jZUZyb21FbmQgPiB0aHJlc2hvbGQpIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHNjcm9sbHMgYXdheSBmcm9tIHRoZSBlbmQgYW5kIGJhY2sgYWdhaW4gY2F1c2VcbiAgICAgIC8vIGFuIG9uRW5kUmVhY2hlZCB0byBiZSB0cmlnZ2VyZWQgYWdhaW5cbiAgICAgIHRoaXMuX3NlbnRFbmRGb3JDb250ZW50TGVuZ3RoID0gMDtcbiAgICB9XG4gIH1cblxuICBfb25Db250ZW50U2l6ZUNoYW5nZSA9ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xuICAgIGlmIChcbiAgICAgIHdpZHRoID4gMCAmJlxuICAgICAgaGVpZ2h0ID4gMCAmJlxuICAgICAgdGhpcy5wcm9wcy5pbml0aWFsU2Nyb2xsSW5kZXggIT0gbnVsbCAmJlxuICAgICAgdGhpcy5wcm9wcy5pbml0aWFsU2Nyb2xsSW5kZXggPiAwICYmXG4gICAgICAhdGhpcy5faGFzRG9uZUluaXRpYWxTY3JvbGxcbiAgICApIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmNvbnRlbnRPZmZzZXQgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNjcm9sbFRvSW5kZXgoe1xuICAgICAgICAgIGFuaW1hdGVkOiBmYWxzZSxcbiAgICAgICAgICBpbmRleDogdGhpcy5wcm9wcy5pbml0aWFsU2Nyb2xsSW5kZXgsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5faGFzRG9uZUluaXRpYWxTY3JvbGwgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5vbkNvbnRlbnRTaXplQ2hhbmdlKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ29udGVudFNpemVDaGFuZ2Uod2lkdGgsIGhlaWdodCk7XG4gICAgfVxuICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MuY29udGVudExlbmd0aCA9IHRoaXMuX3NlbGVjdExlbmd0aCh7aGVpZ2h0LCB3aWR0aH0pO1xuICAgIHRoaXMuX3NjaGVkdWxlQ2VsbHNUb1JlbmRlclVwZGF0ZSgpO1xuICAgIHRoaXMuX21heWJlQ2FsbE9uRW5kUmVhY2hlZCgpO1xuICB9O1xuXG4gIC8qIFRyYW5zbGF0ZXMgbWV0cmljcyBmcm9tIGEgc2Nyb2xsIGV2ZW50IGluIGEgcGFyZW50IFZpcnR1YWxpemVkTGlzdCBpbnRvXG4gICAqIGNvb3JkaW5hdGVzIHJlbGF0aXZlIHRvIHRoZSBjaGlsZCBsaXN0LlxuICAgKi9cbiAgX2NvbnZlcnRQYXJlbnRTY3JvbGxNZXRyaWNzID0gKG1ldHJpY3M6IHtcbiAgICB2aXNpYmxlTGVuZ3RoOiBudW1iZXIsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgLi4uXG4gIH0pID0+IHtcbiAgICAvLyBPZmZzZXQgb2YgdGhlIHRvcCBvZiB0aGUgbmVzdGVkIGxpc3QgcmVsYXRpdmUgdG8gdGhlIHRvcCBvZiBpdHMgcGFyZW50J3Mgdmlld3BvcnRcbiAgICBjb25zdCBvZmZzZXQgPSBtZXRyaWNzLm9mZnNldCAtIHRoaXMuX29mZnNldEZyb21QYXJlbnRWaXJ0dWFsaXplZExpc3Q7XG4gICAgLy8gQ2hpbGQncyB2aXNpYmxlIGxlbmd0aCBpcyB0aGUgc2FtZSBhcyBpdHMgcGFyZW50J3NcbiAgICBjb25zdCB2aXNpYmxlTGVuZ3RoID0gbWV0cmljcy52aXNpYmxlTGVuZ3RoO1xuICAgIGNvbnN0IGRPZmZzZXQgPSBvZmZzZXQgLSB0aGlzLl9zY3JvbGxNZXRyaWNzLm9mZnNldDtcbiAgICBjb25zdCBjb250ZW50TGVuZ3RoID0gdGhpcy5fc2Nyb2xsTWV0cmljcy5jb250ZW50TGVuZ3RoO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZpc2libGVMZW5ndGgsXG4gICAgICBjb250ZW50TGVuZ3RoLFxuICAgICAgb2Zmc2V0LFxuICAgICAgZE9mZnNldCxcbiAgICB9O1xuICB9O1xuXG4gIF9vblNjcm9sbCA9IChlOiBPYmplY3QpID0+IHtcbiAgICB0aGlzLl9uZXN0ZWRDaGlsZExpc3RzLmZvckVhY2goY2hpbGRMaXN0ID0+IHtcbiAgICAgIGNoaWxkTGlzdC5yZWYgJiYgY2hpbGRMaXN0LnJlZi5fb25TY3JvbGwoZSk7XG4gICAgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25TY3JvbGwpIHtcbiAgICAgIHRoaXMucHJvcHMub25TY3JvbGwoZSk7XG4gICAgfVxuICAgIGNvbnN0IHRpbWVzdGFtcCA9IGUudGltZVN0YW1wO1xuICAgIGxldCB2aXNpYmxlTGVuZ3RoID0gdGhpcy5fc2VsZWN0TGVuZ3RoKGUubmF0aXZlRXZlbnQubGF5b3V0TWVhc3VyZW1lbnQpO1xuICAgIGxldCBjb250ZW50TGVuZ3RoID0gdGhpcy5fc2VsZWN0TGVuZ3RoKGUubmF0aXZlRXZlbnQuY29udGVudFNpemUpO1xuICAgIGxldCBvZmZzZXQgPSB0aGlzLl9zZWxlY3RPZmZzZXQoZS5uYXRpdmVFdmVudC5jb250ZW50T2Zmc2V0KTtcbiAgICBsZXQgZE9mZnNldCA9IG9mZnNldCAtIHRoaXMuX3Njcm9sbE1ldHJpY3Mub2Zmc2V0O1xuXG4gICAgaWYgKHRoaXMuX2lzTmVzdGVkV2l0aFNhbWVPcmllbnRhdGlvbigpKSB7XG4gICAgICBpZiAodGhpcy5fc2Nyb2xsTWV0cmljcy5jb250ZW50TGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIElnbm9yZSBzY3JvbGwgZXZlbnRzIHVudGlsIG9uTGF5b3V0IGhhcyBiZWVuIGNhbGxlZCBhbmQgd2VcbiAgICAgICAgLy8ga25vdyBvdXIgb2Zmc2V0IGZyb20gb3VyIG9mZnNldCBmcm9tIG91ciBwYXJlbnRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgKHtcbiAgICAgICAgdmlzaWJsZUxlbmd0aCxcbiAgICAgICAgY29udGVudExlbmd0aCxcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBkT2Zmc2V0LFxuICAgICAgfSA9IHRoaXMuX2NvbnZlcnRQYXJlbnRTY3JvbGxNZXRyaWNzKHtcbiAgICAgICAgdmlzaWJsZUxlbmd0aCxcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGNvbnN0IGR0ID0gdGhpcy5fc2Nyb2xsTWV0cmljcy50aW1lc3RhbXBcbiAgICAgID8gTWF0aC5tYXgoMSwgdGltZXN0YW1wIC0gdGhpcy5fc2Nyb2xsTWV0cmljcy50aW1lc3RhbXApXG4gICAgICA6IDE7XG4gICAgY29uc3QgdmVsb2NpdHkgPSBkT2Zmc2V0IC8gZHQ7XG5cbiAgICBpZiAoXG4gICAgICBkdCA+IDUwMCAmJlxuICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcy5kdCA+IDUwMCAmJlxuICAgICAgY29udGVudExlbmd0aCA+IDUgKiB2aXNpYmxlTGVuZ3RoICYmXG4gICAgICAhdGhpcy5faGFzV2FybmVkLnBlcmZcbiAgICApIHtcbiAgICAgIGluZm9Mb2coXG4gICAgICAgICdWaXJ0dWFsaXplZExpc3Q6IFlvdSBoYXZlIGEgbGFyZ2UgbGlzdCB0aGF0IGlzIHNsb3cgdG8gdXBkYXRlIC0gbWFrZSBzdXJlIHlvdXIgJyArXG4gICAgICAgICAgJ3JlbmRlckl0ZW0gZnVuY3Rpb24gcmVuZGVycyBjb21wb25lbnRzIHRoYXQgZm9sbG93IFJlYWN0IHBlcmZvcm1hbmNlIGJlc3QgcHJhY3RpY2VzICcgK1xuICAgICAgICAgICdsaWtlIFB1cmVDb21wb25lbnQsIHNob3VsZENvbXBvbmVudFVwZGF0ZSwgZXRjLicsXG4gICAgICAgIHtkdCwgcHJldkR0OiB0aGlzLl9zY3JvbGxNZXRyaWNzLmR0LCBjb250ZW50TGVuZ3RofSxcbiAgICAgICk7XG4gICAgICB0aGlzLl9oYXNXYXJuZWQucGVyZiA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MgPSB7XG4gICAgICBjb250ZW50TGVuZ3RoLFxuICAgICAgZHQsXG4gICAgICBkT2Zmc2V0LFxuICAgICAgb2Zmc2V0LFxuICAgICAgdGltZXN0YW1wLFxuICAgICAgdmVsb2NpdHksXG4gICAgICB2aXNpYmxlTGVuZ3RoLFxuICAgIH07XG4gICAgdGhpcy5fdXBkYXRlVmlld2FibGVJdGVtcyh0aGlzLnByb3BzLmRhdGEpO1xuICAgIGlmICghdGhpcy5wcm9wcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9tYXliZUNhbGxPbkVuZFJlYWNoZWQoKTtcbiAgICBpZiAodmVsb2NpdHkgIT09IDApIHtcbiAgICAgIHRoaXMuX2ZpbGxSYXRlSGVscGVyLmFjdGl2YXRlKCk7XG4gICAgfVxuICAgIHRoaXMuX2NvbXB1dGVCbGFua25lc3MoKTtcbiAgICB0aGlzLl9zY2hlZHVsZUNlbGxzVG9SZW5kZXJVcGRhdGUoKTtcbiAgfTtcblxuICBfc2NoZWR1bGVDZWxsc1RvUmVuZGVyVXBkYXRlKCkge1xuICAgIGNvbnN0IHtmaXJzdCwgbGFzdH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtvZmZzZXQsIHZpc2libGVMZW5ndGgsIHZlbG9jaXR5fSA9IHRoaXMuX3Njcm9sbE1ldHJpY3M7XG4gICAgY29uc3QgaXRlbUNvdW50ID0gdGhpcy5wcm9wcy5nZXRJdGVtQ291bnQodGhpcy5wcm9wcy5kYXRhKTtcbiAgICBsZXQgaGlQcmkgPSBmYWxzZTtcbiAgICBjb25zdCBvbkVuZFJlYWNoZWRUaHJlc2hvbGQgPSBvbkVuZFJlYWNoZWRUaHJlc2hvbGRPckRlZmF1bHQoXG4gICAgICB0aGlzLnByb3BzLm9uRW5kUmVhY2hlZFRocmVzaG9sZCxcbiAgICApO1xuICAgIGNvbnN0IHNjcm9sbGluZ1RocmVzaG9sZCA9IChvbkVuZFJlYWNoZWRUaHJlc2hvbGQgKiB2aXNpYmxlTGVuZ3RoKSAvIDI7XG4gICAgLy8gTWFyayBhcyBoaWdoIHByaW9yaXR5IGlmIHdlJ3JlIGNsb3NlIHRvIHRoZSBzdGFydCBvZiB0aGUgZmlyc3QgaXRlbVxuICAgIC8vIEJ1dCBvbmx5IGlmIHRoZXJlIGFyZSBpdGVtcyBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlcmVkIGl0ZW1cbiAgICBpZiAoZmlyc3QgPiAwKSB7XG4gICAgICBjb25zdCBkaXN0VG9wID0gb2Zmc2V0IC0gdGhpcy5fZ2V0RnJhbWVNZXRyaWNzQXBwcm94KGZpcnN0KS5vZmZzZXQ7XG4gICAgICBoaVByaSA9XG4gICAgICAgIGhpUHJpIHx8IGRpc3RUb3AgPCAwIHx8ICh2ZWxvY2l0eSA8IC0yICYmIGRpc3RUb3AgPCBzY3JvbGxpbmdUaHJlc2hvbGQpO1xuICAgIH1cbiAgICAvLyBNYXJrIGFzIGhpZ2ggcHJpb3JpdHkgaWYgd2UncmUgY2xvc2UgdG8gdGhlIGVuZCBvZiB0aGUgbGFzdCBpdGVtXG4gICAgLy8gQnV0IG9ubHkgaWYgdGhlcmUgYXJlIGl0ZW1zIGFmdGVyIHRoZSBsYXN0IHJlbmRlcmVkIGl0ZW1cbiAgICBpZiAobGFzdCA8IGl0ZW1Db3VudCAtIDEpIHtcbiAgICAgIGNvbnN0IGRpc3RCb3R0b20gPVxuICAgICAgICB0aGlzLl9nZXRGcmFtZU1ldHJpY3NBcHByb3gobGFzdCkub2Zmc2V0IC0gKG9mZnNldCArIHZpc2libGVMZW5ndGgpO1xuICAgICAgaGlQcmkgPVxuICAgICAgICBoaVByaSB8fFxuICAgICAgICBkaXN0Qm90dG9tIDwgMCB8fFxuICAgICAgICAodmVsb2NpdHkgPiAyICYmIGRpc3RCb3R0b20gPCBzY3JvbGxpbmdUaHJlc2hvbGQpO1xuICAgIH1cbiAgICAvLyBPbmx5IHRyaWdnZXIgaGlnaC1wcmlvcml0eSB1cGRhdGVzIGlmIHdlJ3ZlIGFjdHVhbGx5IHJlbmRlcmVkIGNlbGxzLFxuICAgIC8vIGFuZCB3aXRoIHRoYXQgc2l6ZSBlc3RpbWF0ZSwgYWNjdXJhdGVseSBjb21wdXRlIGhvdyBtYW55IGNlbGxzIHdlIHNob3VsZCByZW5kZXIuXG4gICAgLy8gT3RoZXJ3aXNlLCBpdCB3b3VsZCBqdXN0IHJlbmRlciBhcyBtYW55IGNlbGxzIGFzIGl0IGNhbiAob2YgemVybyBkaW1lbnNpb24pLFxuICAgIC8vIGVhY2ggdGltZSB0aHJvdWdoIGF0dGVtcHRpbmcgdG8gcmVuZGVyIG1vcmUgKGxpbWl0ZWQgYnkgbWF4VG9SZW5kZXJQZXJCYXRjaCksXG4gICAgLy8gc3RhcnZpbmcgdGhlIHJlbmRlcmVyIGZyb20gYWN0dWFsbHkgbGF5aW5nIG91dCB0aGUgb2JqZWN0cyBhbmQgY29tcHV0aW5nIF9hdmVyYWdlQ2VsbExlbmd0aC5cbiAgICAvLyBJZiB0aGlzIGlzIHRyaWdnZXJlZCBpbiBhbiBgY29tcG9uZW50RGlkVXBkYXRlYCBmb2xsb3dlZCBieSBhIGhpUHJpIGNlbGxUb1JlbmRlclVwZGF0ZVxuICAgIC8vIFdlIHNob3VsZG4ndCBkbyBhbm90aGVyIGhpcHJpIGNlbGxUb1JlbmRlclVwZGF0ZVxuICAgIGlmIChcbiAgICAgIGhpUHJpICYmXG4gICAgICAodGhpcy5fYXZlcmFnZUNlbGxMZW5ndGggfHwgdGhpcy5wcm9wcy5nZXRJdGVtTGF5b3V0KSAmJlxuICAgICAgIXRoaXMuX2hpUHJpSW5Qcm9ncmVzc1xuICAgICkge1xuICAgICAgdGhpcy5faGlQcmlJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgIC8vIERvbid0IHdvcnJ5IGFib3V0IGludGVyYWN0aW9ucyB3aGVuIHNjcm9sbGluZyBxdWlja2x5OyBmb2N1cyBvbiBmaWxsaW5nIGNvbnRlbnQgYXMgZmFzdFxuICAgICAgLy8gYXMgcG9zc2libGUuXG4gICAgICB0aGlzLl91cGRhdGVDZWxsc1RvUmVuZGVyQmF0Y2hlci5kaXNwb3NlKHthYm9ydDogdHJ1ZX0pO1xuICAgICAgdGhpcy5fdXBkYXRlQ2VsbHNUb1JlbmRlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl91cGRhdGVDZWxsc1RvUmVuZGVyQmF0Y2hlci5zY2hlZHVsZSgpO1xuICAgIH1cbiAgfVxuXG4gIF9vblNjcm9sbEJlZ2luRHJhZyA9IChlKTogdm9pZCA9PiB7XG4gICAgdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5mb3JFYWNoKGNoaWxkTGlzdCA9PiB7XG4gICAgICBjaGlsZExpc3QucmVmICYmIGNoaWxkTGlzdC5yZWYuX29uU2Nyb2xsQmVnaW5EcmFnKGUpO1xuICAgIH0pO1xuICAgIHRoaXMuX3ZpZXdhYmlsaXR5VHVwbGVzLmZvckVhY2godHVwbGUgPT4ge1xuICAgICAgdHVwbGUudmlld2FiaWxpdHlIZWxwZXIucmVjb3JkSW50ZXJhY3Rpb24oKTtcbiAgICB9KTtcbiAgICB0aGlzLl9oYXNJbnRlcmFjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLnByb3BzLm9uU2Nyb2xsQmVnaW5EcmFnICYmIHRoaXMucHJvcHMub25TY3JvbGxCZWdpbkRyYWcoZSk7XG4gIH07XG5cbiAgX29uU2Nyb2xsRW5kRHJhZyA9IChlKTogdm9pZCA9PiB7XG4gICAgdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5mb3JFYWNoKGNoaWxkTGlzdCA9PiB7XG4gICAgICBjaGlsZExpc3QucmVmICYmIGNoaWxkTGlzdC5yZWYuX29uU2Nyb2xsRW5kRHJhZyhlKTtcbiAgICB9KTtcbiAgICBjb25zdCB7dmVsb2NpdHl9ID0gZS5uYXRpdmVFdmVudDtcbiAgICBpZiAodmVsb2NpdHkpIHtcbiAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MudmVsb2NpdHkgPSB0aGlzLl9zZWxlY3RPZmZzZXQodmVsb2NpdHkpO1xuICAgIH1cbiAgICB0aGlzLl9jb21wdXRlQmxhbmtuZXNzKCk7XG4gICAgdGhpcy5wcm9wcy5vblNjcm9sbEVuZERyYWcgJiYgdGhpcy5wcm9wcy5vblNjcm9sbEVuZERyYWcoZSk7XG4gIH07XG5cbiAgX29uTW9tZW50dW1TY3JvbGxCZWdpbiA9IChlKTogdm9pZCA9PiB7XG4gICAgdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5mb3JFYWNoKGNoaWxkTGlzdCA9PiB7XG4gICAgICBjaGlsZExpc3QucmVmICYmIGNoaWxkTGlzdC5yZWYuX29uTW9tZW50dW1TY3JvbGxCZWdpbihlKTtcbiAgICB9KTtcbiAgICB0aGlzLnByb3BzLm9uTW9tZW50dW1TY3JvbGxCZWdpbiAmJiB0aGlzLnByb3BzLm9uTW9tZW50dW1TY3JvbGxCZWdpbihlKTtcbiAgfTtcblxuICBfb25Nb21lbnR1bVNjcm9sbEVuZCA9IChlKTogdm9pZCA9PiB7XG4gICAgdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5mb3JFYWNoKGNoaWxkTGlzdCA9PiB7XG4gICAgICBjaGlsZExpc3QucmVmICYmIGNoaWxkTGlzdC5yZWYuX29uTW9tZW50dW1TY3JvbGxFbmQoZSk7XG4gICAgfSk7XG4gICAgdGhpcy5fc2Nyb2xsTWV0cmljcy52ZWxvY2l0eSA9IDA7XG4gICAgdGhpcy5fY29tcHV0ZUJsYW5rbmVzcygpO1xuICAgIHRoaXMucHJvcHMub25Nb21lbnR1bVNjcm9sbEVuZCAmJiB0aGlzLnByb3BzLm9uTW9tZW50dW1TY3JvbGxFbmQoZSk7XG4gIH07XG5cbiAgX3VwZGF0ZUNlbGxzVG9SZW5kZXIgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZGF0YSxcbiAgICAgIGdldEl0ZW1Db3VudCxcbiAgICAgIG9uRW5kUmVhY2hlZFRocmVzaG9sZDogX29uRW5kUmVhY2hlZFRocmVzaG9sZCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBvbkVuZFJlYWNoZWRUaHJlc2hvbGQgPSBvbkVuZFJlYWNoZWRUaHJlc2hvbGRPckRlZmF1bHQoXG4gICAgICBfb25FbmRSZWFjaGVkVGhyZXNob2xkLFxuICAgICk7XG4gICAgY29uc3QgaXNWaXJ0dWFsaXphdGlvbkRpc2FibGVkID0gdGhpcy5faXNWaXJ0dWFsaXphdGlvbkRpc2FibGVkKCk7XG4gICAgdGhpcy5fdXBkYXRlVmlld2FibGVJdGVtcyhkYXRhKTtcbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSA9PiB7XG4gICAgICBsZXQgbmV3U3RhdGU7XG4gICAgICBjb25zdCB7Y29udGVudExlbmd0aCwgb2Zmc2V0LCB2aXNpYmxlTGVuZ3RofSA9IHRoaXMuX3Njcm9sbE1ldHJpY3M7XG4gICAgICBpZiAoIWlzVmlydHVhbGl6YXRpb25EaXNhYmxlZCkge1xuICAgICAgICAvLyBJZiB3ZSBydW4gdGhpcyB3aXRoIGJvZ3VzIGRhdGEsIHdlJ2xsIGZvcmNlLXJlbmRlciB3aW5kb3cge2ZpcnN0OiAwLCBsYXN0OiAwfSxcbiAgICAgICAgLy8gYW5kIHdpcGUgb3V0IHRoZSBpbml0aWFsTnVtVG9SZW5kZXIgcmVuZGVyZWQgZWxlbWVudHMuXG4gICAgICAgIC8vIFNvIGxldCdzIHdhaXQgdW50aWwgdGhlIHNjcm9sbCB2aWV3IG1ldHJpY3MgaGF2ZSBiZWVuIHNldCB1cC4gQW5kIHVudGlsIHRoZW4sXG4gICAgICAgIC8vIHdlIHdpbGwgdHJ1c3QgdGhlIGluaXRpYWxOdW1Ub1JlbmRlciBzdWdnZXN0aW9uXG4gICAgICAgIGlmICh2aXNpYmxlTGVuZ3RoID4gMCAmJiBjb250ZW50TGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSBub24temVybyBpbml0aWFsU2Nyb2xsSW5kZXggYW5kIHJ1biB0aGlzIGJlZm9yZSB3ZSd2ZSBzY3JvbGxlZCxcbiAgICAgICAgICAvLyB3ZSdsbCB3aXBlIG91dCB0aGUgaW5pdGlhbE51bVRvUmVuZGVyIHJlbmRlcmVkIGVsZW1lbnRzIHN0YXJ0aW5nIGF0IGluaXRpYWxTY3JvbGxJbmRleC5cbiAgICAgICAgICAvLyBTbyBsZXQncyB3YWl0IHVudGlsIHdlJ3ZlIHNjcm9sbGVkIHRoZSB2aWV3IHRvIHRoZSByaWdodCBwbGFjZS4gQW5kIHVudGlsIHRoZW4sXG4gICAgICAgICAgLy8gd2Ugd2lsbCB0cnVzdCB0aGUgaW5pdGlhbFNjcm9sbEluZGV4IHN1Z2dlc3Rpb24uXG4gICAgICAgICAgaWYgKCF0aGlzLnByb3BzLmluaXRpYWxTY3JvbGxJbmRleCB8fCB0aGlzLl9zY3JvbGxNZXRyaWNzLm9mZnNldCkge1xuICAgICAgICAgICAgbmV3U3RhdGUgPSBjb21wdXRlV2luZG93ZWRSZW5kZXJMaW1pdHMoXG4gICAgICAgICAgICAgIHRoaXMucHJvcHMuZGF0YSxcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5nZXRJdGVtQ291bnQsXG4gICAgICAgICAgICAgIG1heFRvUmVuZGVyUGVyQmF0Y2hPckRlZmF1bHQodGhpcy5wcm9wcy5tYXhUb1JlbmRlclBlckJhdGNoKSxcbiAgICAgICAgICAgICAgd2luZG93U2l6ZU9yRGVmYXVsdCh0aGlzLnByb3BzLndpbmRvd1NpemUpLFxuICAgICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgICAgdGhpcy5fZ2V0RnJhbWVNZXRyaWNzQXBwcm94LFxuICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlRnJvbUVuZCA9IGNvbnRlbnRMZW5ndGggLSB2aXNpYmxlTGVuZ3RoIC0gb2Zmc2V0O1xuICAgICAgICBjb25zdCByZW5kZXJBaGVhZCA9XG4gICAgICAgICAgZGlzdGFuY2VGcm9tRW5kIDwgb25FbmRSZWFjaGVkVGhyZXNob2xkICogdmlzaWJsZUxlbmd0aFxuICAgICAgICAgICAgPyBtYXhUb1JlbmRlclBlckJhdGNoT3JEZWZhdWx0KHRoaXMucHJvcHMubWF4VG9SZW5kZXJQZXJCYXRjaClcbiAgICAgICAgICAgIDogMDtcbiAgICAgICAgbmV3U3RhdGUgPSB7XG4gICAgICAgICAgZmlyc3Q6IDAsXG4gICAgICAgICAgbGFzdDogTWF0aC5taW4oc3RhdGUubGFzdCArIHJlbmRlckFoZWFkLCBnZXRJdGVtQ291bnQoZGF0YSkgLSAxKSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdTdGF0ZSAmJiB0aGlzLl9uZXN0ZWRDaGlsZExpc3RzLnNpemUgPiAwKSB7XG4gICAgICAgIGNvbnN0IG5ld0ZpcnN0ID0gbmV3U3RhdGUuZmlyc3Q7XG4gICAgICAgIGNvbnN0IG5ld0xhc3QgPSBuZXdTdGF0ZS5sYXN0O1xuICAgICAgICAvLyBJZiBzb21lIGNlbGwgaW4gdGhlIG5ldyBzdGF0ZSBoYXMgYSBjaGlsZCBsaXN0IGluIGl0LCB3ZSBzaG91bGQgb25seSByZW5kZXJcbiAgICAgICAgLy8gdXAgdGhyb3VnaCB0aGF0IGl0ZW0sIHNvIHRoYXQgd2UgZ2l2ZSB0aGF0IGxpc3QgYSBjaGFuY2UgdG8gcmVuZGVyLlxuICAgICAgICAvLyBPdGhlcndpc2UgdGhlcmUncyBjaHVybiBmcm9tIG11bHRpcGxlIGNoaWxkIGxpc3RzIG1vdW50aW5nIGFuZCB1bi1tb3VudGluZ1xuICAgICAgICAvLyB0aGVpciBpdGVtcy5cbiAgICAgICAgZm9yIChsZXQgaWkgPSBuZXdGaXJzdDsgaWkgPD0gbmV3TGFzdDsgaWkrKykge1xuICAgICAgICAgIGNvbnN0IGNlbGxLZXlGb3JJbmRleCA9IHRoaXMuX2luZGljZXNUb0tleXMuZ2V0KGlpKTtcbiAgICAgICAgICBjb25zdCBjaGlsZExpc3RLZXlzID1cbiAgICAgICAgICAgIGNlbGxLZXlGb3JJbmRleCAmJlxuICAgICAgICAgICAgdGhpcy5fY2VsbEtleXNUb0NoaWxkTGlzdEtleXMuZ2V0KGNlbGxLZXlGb3JJbmRleCk7XG4gICAgICAgICAgaWYgKCFjaGlsZExpc3RLZXlzKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IHNvbWVDaGlsZEhhc01vcmUgPSBmYWxzZTtcbiAgICAgICAgICAvLyBGb3IgZWFjaCBjZWxsLCBuZWVkIHRvIGNoZWNrIHdoZXRoZXIgYW55IGNoaWxkIGxpc3QgaW4gaXQgaGFzIG1vcmUgZWxlbWVudHMgdG8gcmVuZGVyXG4gICAgICAgICAgZm9yIChsZXQgY2hpbGRLZXkgb2YgY2hpbGRMaXN0S2V5cykge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRMaXN0ID0gdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5nZXQoY2hpbGRLZXkpO1xuICAgICAgICAgICAgaWYgKGNoaWxkTGlzdCAmJiBjaGlsZExpc3QucmVmICYmIGNoaWxkTGlzdC5yZWYuaGFzTW9yZSgpKSB7XG4gICAgICAgICAgICAgIHNvbWVDaGlsZEhhc01vcmUgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNvbWVDaGlsZEhhc01vcmUpIHtcbiAgICAgICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgICAgIG5ld1N0YXRlLmxhc3QgPSBpaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBuZXdTdGF0ZSAhPSBudWxsICYmXG4gICAgICAgIG5ld1N0YXRlLmZpcnN0ID09PSBzdGF0ZS5maXJzdCAmJlxuICAgICAgICBuZXdTdGF0ZS5sYXN0ID09PSBzdGF0ZS5sYXN0XG4gICAgICApIHtcbiAgICAgICAgbmV3U3RhdGUgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgIH0pO1xuICB9O1xuXG4gIF9jcmVhdGVWaWV3VG9rZW4gPSAoaW5kZXg6IG51bWJlciwgaXNWaWV3YWJsZTogYm9vbGVhbikgPT4ge1xuICAgIGNvbnN0IHtkYXRhLCBnZXRJdGVtfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgaXRlbSA9IGdldEl0ZW0oZGF0YSwgaW5kZXgpO1xuICAgIHJldHVybiB7aW5kZXgsIGl0ZW0sIGtleTogdGhpcy5fa2V5RXh0cmFjdG9yKGl0ZW0sIGluZGV4KSwgaXNWaWV3YWJsZX07XG4gIH07XG5cbiAgX2dldEZyYW1lTWV0cmljc0FwcHJveCA9IChcbiAgICBpbmRleDogbnVtYmVyLFxuICApOiB7XG4gICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgLi4uXG4gIH0gPT4ge1xuICAgIGNvbnN0IGZyYW1lID0gdGhpcy5fZ2V0RnJhbWVNZXRyaWNzKGluZGV4KTtcbiAgICBpZiAoZnJhbWUgJiYgZnJhbWUuaW5kZXggPT09IGluZGV4KSB7XG4gICAgICAvLyBjaGVjayBmb3IgaW52YWxpZCBmcmFtZXMgZHVlIHRvIHJvdyByZS1vcmRlcmluZ1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7Z2V0SXRlbUxheW91dH0gPSB0aGlzLnByb3BzO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICAhZ2V0SXRlbUxheW91dCxcbiAgICAgICAgJ1Nob3VsZCBub3QgaGF2ZSB0byBlc3RpbWF0ZSBmcmFtZXMgd2hlbiBhIG1lYXN1cmVtZW50IG1ldHJpY3MgZnVuY3Rpb24gaXMgcHJvdmlkZWQnLFxuICAgICAgKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlbmd0aDogdGhpcy5fYXZlcmFnZUNlbGxMZW5ndGgsXG4gICAgICAgIG9mZnNldDogdGhpcy5fYXZlcmFnZUNlbGxMZW5ndGggKiBpbmRleCxcbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIF9nZXRGcmFtZU1ldHJpY3MgPSAoXG4gICAgaW5kZXg6IG51bWJlcixcbiAgKTogP3tcbiAgICBsZW5ndGg6IG51bWJlcixcbiAgICBvZmZzZXQ6IG51bWJlcixcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIGluTGF5b3V0PzogYm9vbGVhbixcbiAgICAuLi5cbiAgfSA9PiB7XG4gICAgY29uc3Qge2RhdGEsIGdldEl0ZW0sIGdldEl0ZW1Db3VudCwgZ2V0SXRlbUxheW91dH0gPSB0aGlzLnByb3BzO1xuICAgIGludmFyaWFudChcbiAgICAgIGdldEl0ZW1Db3VudChkYXRhKSA+IGluZGV4LFxuICAgICAgJ1RyaWVkIHRvIGdldCBmcmFtZSBmb3Igb3V0IG9mIHJhbmdlIGluZGV4ICcgKyBpbmRleCxcbiAgICApO1xuICAgIGNvbnN0IGl0ZW0gPSBnZXRJdGVtKGRhdGEsIGluZGV4KTtcbiAgICBsZXQgZnJhbWUgPSBpdGVtICYmIHRoaXMuX2ZyYW1lc1t0aGlzLl9rZXlFeHRyYWN0b3IoaXRlbSwgaW5kZXgpXTtcbiAgICBpZiAoIWZyYW1lIHx8IGZyYW1lLmluZGV4ICE9PSBpbmRleCkge1xuICAgICAgaWYgKGdldEl0ZW1MYXlvdXQpIHtcbiAgICAgICAgZnJhbWUgPSBnZXRJdGVtTGF5b3V0KGRhdGEsIGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddICg+PTAuNjMuMCBzaXRlPXJlYWN0X25hdGl2ZV9mYikgVGhpcyBjb21tZW50XG4gICAgICogc3VwcHJlc3NlcyBhbiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuNjMgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yXG4gICAgICogZGVsZXRlIHRoaXMgY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG4gICAgcmV0dXJuIGZyYW1lO1xuICB9O1xuXG4gIF91cGRhdGVWaWV3YWJsZUl0ZW1zKGRhdGE6IGFueSkge1xuICAgIGNvbnN0IHtnZXRJdGVtQ291bnR9ID0gdGhpcy5wcm9wcztcblxuICAgIHRoaXMuX3ZpZXdhYmlsaXR5VHVwbGVzLmZvckVhY2godHVwbGUgPT4ge1xuICAgICAgdHVwbGUudmlld2FiaWxpdHlIZWxwZXIub25VcGRhdGUoXG4gICAgICAgIGdldEl0ZW1Db3VudChkYXRhKSxcbiAgICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcy5vZmZzZXQsXG4gICAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aCxcbiAgICAgICAgdGhpcy5fZ2V0RnJhbWVNZXRyaWNzLFxuICAgICAgICB0aGlzLl9jcmVhdGVWaWV3VG9rZW4sXG4gICAgICAgIHR1cGxlLm9uVmlld2FibGVJdGVtc0NoYW5nZWQsXG4gICAgICAgIHRoaXMuc3RhdGUsXG4gICAgICApO1xuICAgIH0pO1xuICB9XG59XG5cbnR5cGUgQ2VsbFJlbmRlcmVyUHJvcHMgPSB7XG4gIENlbGxSZW5kZXJlckNvbXBvbmVudD86ID9SZWFjdC5Db21wb25lbnRUeXBlPGFueT4sXG4gIEl0ZW1TZXBhcmF0b3JDb21wb25lbnQ6ID9SZWFjdC5Db21wb25lbnRUeXBlPFxuICAgIGFueSB8IHtoaWdobGlnaHRlZDogYm9vbGVhbiwgbGVhZGluZ0l0ZW06ID9JdGVtfSxcbiAgPixcbiAgY2VsbEtleTogc3RyaW5nLFxuICBmaWxsUmF0ZUhlbHBlcjogRmlsbFJhdGVIZWxwZXIsXG4gIGhvcml6b250YWw6ID9ib29sZWFuLFxuICBpbmRleDogbnVtYmVyLFxuICBpbnZlcnNpb25TdHlsZTogVmlld1N0eWxlUHJvcCxcbiAgaXRlbTogSXRlbSxcbiAgLy8gVGhpcyBpcyBleHRyYWN0ZWQgYnkgU2Nyb2xsVmlld1N0aWNreUhlYWRlclxuICBvbkxheW91dDogKGV2ZW50OiBPYmplY3QpID0+IHZvaWQsXG4gIG9uVW5tb3VudDogKGNlbGxLZXk6IHN0cmluZykgPT4gdm9pZCxcbiAgb25VcGRhdGVTZXBhcmF0b3JzOiAoY2VsbEtleXM6IEFycmF5PD9zdHJpbmc+LCBwcm9wczogT2JqZWN0KSA9PiB2b2lkLFxuICBwYXJlbnRQcm9wczoge1xuICAgIC8vIGUuZy4gaGVpZ2h0LCB5LFxuICAgIGdldEl0ZW1MYXlvdXQ/OiAoXG4gICAgICBkYXRhOiBhbnksXG4gICAgICBpbmRleDogbnVtYmVyLFxuICAgICkgPT4ge1xuICAgICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgICBvZmZzZXQ6IG51bWJlcixcbiAgICAgIGluZGV4OiBudW1iZXIsXG4gICAgICAuLi5cbiAgICB9LFxuICAgIHJlbmRlckl0ZW0/OiA/UmVuZGVySXRlbVR5cGU8SXRlbT4sXG4gICAgTGlzdEl0ZW1Db21wb25lbnQ/OiA/KFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PiB8IFJlYWN0LkVsZW1lbnQ8YW55PiksXG4gICAgLi4uXG4gIH0sXG4gIHByZXZDZWxsS2V5OiA/c3RyaW5nLFxuICAuLi5cbn07XG5cbnR5cGUgQ2VsbFJlbmRlcmVyU3RhdGUgPSB7XG4gIHNlcGFyYXRvclByb3BzOiAkUmVhZE9ubHk8e3xcbiAgICBoaWdobGlnaHRlZDogYm9vbGVhbixcbiAgICBsZWFkaW5nSXRlbTogP0l0ZW0sXG4gIHx9PixcbiAgLi4uXG59O1xuXG5jbGFzcyBDZWxsUmVuZGVyZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8XG4gIENlbGxSZW5kZXJlclByb3BzLFxuICBDZWxsUmVuZGVyZXJTdGF0ZSxcbj4ge1xuICBzdGF0ZSA9IHtcbiAgICBzZXBhcmF0b3JQcm9wczoge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IGZhbHNlLFxuICAgICAgbGVhZGluZ0l0ZW06IHRoaXMucHJvcHMuaXRlbSxcbiAgICB9LFxuICB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoXG4gICAgcHJvcHM6IENlbGxSZW5kZXJlclByb3BzLFxuICAgIHByZXZTdGF0ZTogQ2VsbFJlbmRlcmVyU3RhdGUsXG4gICk6ID9DZWxsUmVuZGVyZXJTdGF0ZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlcGFyYXRvclByb3BzOiB7XG4gICAgICAgIC4uLnByZXZTdGF0ZS5zZXBhcmF0b3JQcm9wcyxcbiAgICAgICAgbGVhZGluZ0l0ZW06IHByb3BzLml0ZW0sXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICAvLyBUT0RPOiBjb25zaWRlciBmYWN0b3Jpbmcgc2VwYXJhdG9yIHN0dWZmIG91dCBvZiBWaXJ0dWFsaXplZExpc3QgaW50byBGbGF0TGlzdCBzaW5jZSBpdCdzIG5vdFxuICAvLyByZXVzZWQgYnkgU2VjdGlvbkxpc3QgYW5kIHdlIGNhbiBrZWVwIFZpcnR1YWxpemVkTGlzdCBzaW1wbGVyLlxuICBfc2VwYXJhdG9ycyA9IHtcbiAgICBoaWdobGlnaHQ6ICgpID0+IHtcbiAgICAgIGNvbnN0IHtjZWxsS2V5LCBwcmV2Q2VsbEtleX0gPSB0aGlzLnByb3BzO1xuICAgICAgdGhpcy5wcm9wcy5vblVwZGF0ZVNlcGFyYXRvcnMoW2NlbGxLZXksIHByZXZDZWxsS2V5XSwge1xuICAgICAgICBoaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdW5oaWdobGlnaHQ6ICgpID0+IHtcbiAgICAgIGNvbnN0IHtjZWxsS2V5LCBwcmV2Q2VsbEtleX0gPSB0aGlzLnByb3BzO1xuICAgICAgdGhpcy5wcm9wcy5vblVwZGF0ZVNlcGFyYXRvcnMoW2NlbGxLZXksIHByZXZDZWxsS2V5XSwge1xuICAgICAgICBoaWdobGlnaHRlZDogZmFsc2UsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZVByb3BzOiAoc2VsZWN0OiAnbGVhZGluZycgfCAndHJhaWxpbmcnLCBuZXdQcm9wczogT2JqZWN0KSA9PiB7XG4gICAgICBjb25zdCB7Y2VsbEtleSwgcHJldkNlbGxLZXl9ID0gdGhpcy5wcm9wcztcbiAgICAgIHRoaXMucHJvcHMub25VcGRhdGVTZXBhcmF0b3JzKFxuICAgICAgICBbc2VsZWN0ID09PSAnbGVhZGluZycgPyBwcmV2Q2VsbEtleSA6IGNlbGxLZXldLFxuICAgICAgICBuZXdQcm9wcyxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcblxuICB1cGRhdGVTZXBhcmF0b3JQcm9wcyhuZXdQcm9wczogT2JqZWN0KSB7XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSA9PiAoe1xuICAgICAgc2VwYXJhdG9yUHJvcHM6IHsuLi5zdGF0ZS5zZXBhcmF0b3JQcm9wcywgLi4ubmV3UHJvcHN9LFxuICAgIH0pKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucHJvcHMub25Vbm1vdW50KHRoaXMucHJvcHMuY2VsbEtleSk7XG4gIH1cblxuICBfcmVuZGVyRWxlbWVudChyZW5kZXJJdGVtLCBMaXN0SXRlbUNvbXBvbmVudCwgaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAocmVuZGVySXRlbSAmJiBMaXN0SXRlbUNvbXBvbmVudCkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnVmlydHVhbGl6ZWRMaXN0OiBCb3RoIExpc3RJdGVtQ29tcG9uZW50IGFuZCByZW5kZXJJdGVtIHByb3BzIGFyZSBwcmVzZW50LiBMaXN0SXRlbUNvbXBvbmVudCB3aWxsIHRha2UnICtcbiAgICAgICAgICAnIHByZWNlZGVuY2Ugb3ZlciByZW5kZXJJdGVtLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChMaXN0SXRlbUNvbXBvbmVudCkge1xuICAgICAgLyogJEZsb3dGaXhNZVtub3QtYS1jb21wb25lbnRdICg+PTAuMTA4LjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIpIFRoaXNcbiAgICAgICAqIGNvbW1lbnQgc3VwcHJlc3NlcyBhbiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuMTA4IHdhcyBkZXBsb3llZC4gVG9cbiAgICAgICAqIHNlZSB0aGUgZXJyb3IsIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgICAgLyogJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZS1hcmddICg+PTAuMTA4LjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIpXG4gICAgICAgKiBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhbiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuMTA4IHdhcyBkZXBsb3llZC5cbiAgICAgICAqIFRvIHNlZSB0aGUgZXJyb3IsIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlzdEl0ZW1Db21wb25lbnQsIHtcbiAgICAgICAgaXRlbSxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHNlcGFyYXRvcnM6IHRoaXMuX3NlcGFyYXRvcnMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVuZGVySXRlbSkge1xuICAgICAgcmV0dXJuIHJlbmRlckl0ZW0oe1xuICAgICAgICBpdGVtLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgc2VwYXJhdG9yczogdGhpcy5fc2VwYXJhdG9ycyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGludmFyaWFudChcbiAgICAgIGZhbHNlLFxuICAgICAgJ1ZpcnR1YWxpemVkTGlzdDogRWl0aGVyIExpc3RJdGVtQ29tcG9uZW50IG9yIHJlbmRlckl0ZW0gcHJvcHMgYXJlIHJlcXVpcmVkIGJ1dCBub25lIHdlcmUgZm91bmQuJyxcbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIENlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICAgIEl0ZW1TZXBhcmF0b3JDb21wb25lbnQsXG4gICAgICBmaWxsUmF0ZUhlbHBlcixcbiAgICAgIGhvcml6b250YWwsXG4gICAgICBpdGVtLFxuICAgICAgaW5kZXgsXG4gICAgICBpbnZlcnNpb25TdHlsZSxcbiAgICAgIHBhcmVudFByb3BzLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtyZW5kZXJJdGVtLCBnZXRJdGVtTGF5b3V0LCBMaXN0SXRlbUNvbXBvbmVudH0gPSBwYXJlbnRQcm9wcztcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fcmVuZGVyRWxlbWVudChcbiAgICAgIHJlbmRlckl0ZW0sXG4gICAgICBMaXN0SXRlbUNvbXBvbmVudCxcbiAgICAgIGl0ZW0sXG4gICAgICBpbmRleCxcbiAgICApO1xuXG4gICAgY29uc3Qgb25MYXlvdXQgPVxuICAgICAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddICg+PTAuNjguMCBzaXRlPXJlYWN0X25hdGl2ZV9mYikgVGhpcyBjb21tZW50XG4gICAgICAgKiBzdXBwcmVzc2VzIGFuIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC42OCB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGVcbiAgICAgICAqIGVycm9yIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgICAgZ2V0SXRlbUxheW91dCAmJiAhcGFyZW50UHJvcHMuZGVidWcgJiYgIWZpbGxSYXRlSGVscGVyLmVuYWJsZWQoKVxuICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICA6IHRoaXMucHJvcHMub25MYXlvdXQ7XG4gICAgLy8gTk9URTogdGhhdCB3aGVuIHRoaXMgaXMgYSBzdGlja3kgaGVhZGVyLCBgb25MYXlvdXRgIHdpbGwgZ2V0IGF1dG9tYXRpY2FsbHkgZXh0cmFjdGVkIGFuZFxuICAgIC8vIGNhbGxlZCBleHBsaWNpdGx5IGJ5IGBTY3JvbGxWaWV3U3RpY2t5SGVhZGVyYC5cbiAgICBjb25zdCBpdGVtU2VwYXJhdG9yID0gSXRlbVNlcGFyYXRvckNvbXBvbmVudCAmJiAoXG4gICAgICA8SXRlbVNlcGFyYXRvckNvbXBvbmVudCB7Li4udGhpcy5zdGF0ZS5zZXBhcmF0b3JQcm9wc30gLz5cbiAgICApO1xuICAgIGNvbnN0IGNlbGxTdHlsZSA9IGludmVyc2lvblN0eWxlXG4gICAgICA/IGhvcml6b250YWxcbiAgICAgICAgPyBbc3R5bGVzLnJvd1JldmVyc2UsIGludmVyc2lvblN0eWxlXVxuICAgICAgICA6IFtzdHlsZXMuY29sdW1uUmV2ZXJzZSwgaW52ZXJzaW9uU3R5bGVdXG4gICAgICA6IGhvcml6b250YWxcbiAgICAgID8gW3N0eWxlcy5yb3csIGludmVyc2lvblN0eWxlXVxuICAgICAgOiBpbnZlcnNpb25TdHlsZTtcbiAgICBjb25zdCByZXN1bHQgPSAhQ2VsbFJlbmRlcmVyQ29tcG9uZW50ID8gKFxuICAgICAgLyogJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZS1hcmddICg+PTAuODkuMCBzaXRlPXJlYWN0X25hdGl2ZV9mYikgKlxuICAgICAgICBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhbiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuODkgd2FzIGRlcGxveWVkLiAqXG4gICAgICAgIFRvIHNlZSB0aGUgZXJyb3IsIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgICAgPFZpZXcgc3R5bGU9e2NlbGxTdHlsZX0gb25MYXlvdXQ9e29uTGF5b3V0fT5cbiAgICAgICAge2VsZW1lbnR9XG4gICAgICAgIHtpdGVtU2VwYXJhdG9yfVxuICAgICAgPC9WaWV3PlxuICAgICkgOiAoXG4gICAgICA8Q2VsbFJlbmRlcmVyQ29tcG9uZW50XG4gICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICBzdHlsZT17Y2VsbFN0eWxlfVxuICAgICAgICBvbkxheW91dD17b25MYXlvdXR9PlxuICAgICAgICB7ZWxlbWVudH1cbiAgICAgICAge2l0ZW1TZXBhcmF0b3J9XG4gICAgICA8L0NlbGxSZW5kZXJlckNvbXBvbmVudD5cbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxWaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyIGNlbGxLZXk9e3RoaXMucHJvcHMuY2VsbEtleX0+XG4gICAgICAgIHtyZXN1bHR9XG4gICAgICA8L1ZpcnR1YWxpemVkTGlzdENlbGxDb250ZXh0UHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXNjcmliZU5lc3RlZExpc3RzKGNoaWxkTGlzdDoge1xuICArY2VsbEtleTogc3RyaW5nLFxuICAra2V5OiBzdHJpbmcsXG4gICtyZWY6IFZpcnR1YWxpemVkTGlzdCxcbiAgK3BhcmVudERlYnVnSW5mbzogTGlzdERlYnVnSW5mbyxcbiAgK2hvcml6b250YWw6IGJvb2xlYW4sXG4gIC4uLlxufSkge1xuICBsZXQgdHJhY2UgPVxuICAgICdWaXJ0dWFsaXplZExpc3QgdHJhY2U6XFxuJyArXG4gICAgYCAgQ2hpbGQgKCR7Y2hpbGRMaXN0Lmhvcml6b250YWwgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnfSk6XFxuYCArXG4gICAgYCAgICBsaXN0S2V5OiAke2NoaWxkTGlzdC5rZXl9XFxuYCArXG4gICAgYCAgICBjZWxsS2V5OiAke2NoaWxkTGlzdC5jZWxsS2V5fWA7XG5cbiAgbGV0IGRlYnVnSW5mbyA9IGNoaWxkTGlzdC5wYXJlbnREZWJ1Z0luZm87XG4gIHdoaWxlIChkZWJ1Z0luZm8pIHtcbiAgICB0cmFjZSArPVxuICAgICAgYFxcbiAgUGFyZW50ICgke2RlYnVnSW5mby5ob3Jpem9udGFsID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJ30pOlxcbmAgK1xuICAgICAgYCAgICBsaXN0S2V5OiAke2RlYnVnSW5mby5saXN0S2V5fVxcbmAgK1xuICAgICAgYCAgICBjZWxsS2V5OiAke2RlYnVnSW5mby5jZWxsS2V5fWA7XG4gICAgZGVidWdJbmZvID0gZGVidWdJbmZvLnBhcmVudDtcbiAgfVxuICByZXR1cm4gdHJhY2U7XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgdmVydGljYWxseUludmVydGVkOiB7XG4gICAgdHJhbnNmb3JtOiBbe3NjYWxlWTogLTF9XSxcbiAgfSxcbiAgaG9yaXpvbnRhbGx5SW52ZXJ0ZWQ6IHtcbiAgICB0cmFuc2Zvcm06IFt7c2NhbGVYOiAtMX1dLFxuICB9LFxuICByb3c6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgfSxcbiAgcm93UmV2ZXJzZToge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZScsXG4gIH0sXG4gIGNvbHVtblJldmVyc2U6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uLXJldmVyc2UnLFxuICB9LFxuICBkZWJ1Zzoge1xuICAgIGZsZXg6IDEsXG4gIH0sXG4gIGRlYnVnT3ZlcmxheUJhc2U6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gIH0sXG4gIGRlYnVnT3ZlcmxheToge1xuICAgIGJvdHRvbTogMCxcbiAgICB3aWR0aDogMjAsXG4gICAgYm9yZGVyQ29sb3I6ICdibHVlJyxcbiAgICBib3JkZXJXaWR0aDogMSxcbiAgfSxcbiAgZGVidWdPdmVybGF5RnJhbWU6IHtcbiAgICBsZWZ0OiAwLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ29yYW5nZScsXG4gIH0sXG4gIGRlYnVnT3ZlcmxheUZyYW1lTGFzdDoge1xuICAgIGxlZnQ6IDAsXG4gICAgYm9yZGVyQ29sb3I6ICdncmVlbicsXG4gICAgYm9yZGVyV2lkdGg6IDIsXG4gIH0sXG4gIGRlYnVnT3ZlcmxheUZyYW1lVmlzOiB7XG4gICAgbGVmdDogMCxcbiAgICBib3JkZXJDb2xvcjogJ3JlZCcsXG4gICAgYm9yZGVyV2lkdGg6IDIsXG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBWaXJ0dWFsaXplZExpc3Q7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQXVCQSxJQUFBQSxnQkFBQSxHQUFBQyxPQUFBO0FBS0EsSUFBQUMsS0FBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBUUEsSUFBQUcsdUJBQUEsR0FBQUgsT0FBQTtBQU1xQyxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFBQSxTQUFBSyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUosd0JBQUFRLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFE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