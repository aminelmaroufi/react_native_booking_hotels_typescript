7cee65d6f457fba15a95d701a247afa3
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));
var _reactNative = require("@testing-library/react-native");
var eva = _interopRequireWildcard(require("@eva-design/eva"));
var _components = require("@ui-kitten/components");
var _Home = _interopRequireDefault(require("../Home"));
var _actions = require("../../redux/actions");
var _reactRedux = require("react-redux");
var _hotels_response = _interopRequireDefault(require("./fixtures/hotels_response"));
var _native = require("@react-navigation/native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var mockStore = (0, _reduxMockStore.default)();
var navigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var store = mockStore({
  hotel: {
    hotels: _hotels_response.default.result.hotels
  }
});
var setup = function setup() {
  return (0, _reactNative.render)(_react.default.createElement(_reactRedux.Provider, {
    store: store
  }, _react.default.createElement(_components.ApplicationProvider, (0, _extends2.default)({}, eva, {
    theme: eva.light
  }), _react.default.createElement(_native.NavigationContainer, null, _react.default.createElement(_Home.default, {
    hotels: _hotels_response.default.result.hotels
  })))));
};
describe('Test homepage screen', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    setup();
  });
  afterEach(_reactNative.cleanup);
  it('fetches the hotels on mount', function () {
    var expectedAction = (0, _actions.getHotels)({
      q: '',
      page: 1
    });
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith(expectedAction);
  });
  it('should display the list of hotels', function () {
    expect(_reactNative.screen.getByTestId('search-box')).toBeDefined();
  });
  it('should render a list of hotels', function () {
    var hotels = _hotels_response.default.result.name;
    hotels.forEach(function (hotel) {
      var hotelName = _reactNative.screen.getByText(hotel.name);
      expect(hotelName).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWR1eE1vY2tTdG9yZSIsIl9yZWFjdE5hdGl2ZSIsImV2YSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2NvbXBvbmVudHMiLCJfSG9tZSIsIl9hY3Rpb25zIiwiX3JlYWN0UmVkdXgiLCJfaG90ZWxzX3Jlc3BvbnNlIiwiX25hdGl2ZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJtb2NrU3RvcmUiLCJjb25maWd1cmVTdG9yZSIsIm5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImplc3QiLCJmbiIsImdvQmFjayIsInN0b3JlIiwiaG90ZWwiLCJob3RlbHMiLCJob3RlbHNfcmVzcG9uc2UiLCJyZXN1bHQiLCJzZXR1cCIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsIkFwcGxpY2F0aW9uUHJvdmlkZXIiLCJfZXh0ZW5kczIiLCJ0aGVtZSIsImxpZ2h0IiwiTmF2aWdhdGlvbkNvbnRhaW5lciIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImRpc3BhdGNoIiwiYWZ0ZXJFYWNoIiwiY2xlYW51cCIsIml0IiwiZXhwZWN0ZWRBY3Rpb24iLCJnZXRIb3RlbHMiLCJxIiwicGFnZSIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlRGVmaW5lZCIsIm5hbWUiLCJmb3JFYWNoIiwiaG90ZWxOYW1lIiwiZ2V0QnlUZXh0Il0sInNvdXJjZXMiOlsiaG9tZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNvbmZpZ3VyZVN0b3JlIGZyb20gJ3JlZHV4LW1vY2stc3RvcmUnO1xuaW1wb3J0IHtcbiAgY2xlYW51cCxcbiAgZmlyZUV2ZW50LFxuICByZW5kZXIsXG4gIHNjcmVlbixcbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuXG5pbXBvcnQgKiBhcyBldmEgZnJvbSAnQGV2YS1kZXNpZ24vZXZhJztcbmltcG9ydCB7QXBwbGljYXRpb25Qcm92aWRlcn0gZnJvbSAnQHVpLWtpdHRlbi9jb21wb25lbnRzJztcbi8vIGltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tICcuLi8uLi9yZWR1eC9zdG9yZSc7XG5pbXBvcnQgSG9tZSBmcm9tICcuLi9Ib21lJztcbmltcG9ydCB7Z2V0SG90ZWxzfSBmcm9tICcuLi8uLi9yZWR1eC9hY3Rpb25zJztcbmltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBob3RlbHNfcmVzcG9uc2UgZnJvbSAnLi9maXh0dXJlcy9ob3RlbHNfcmVzcG9uc2UnO1xuaW1wb3J0IHtOYXZpZ2F0aW9uQ29udGFpbmVyfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xuXG5sZXQgbW9ja1N0b3JlID0gY29uZmlndXJlU3RvcmUoKTtcblxuY29uc3QgbmF2aWdhdGlvbiA9IHtcbiAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgZ29CYWNrOiBqZXN0LmZuKCksXG59O1xuXG5jb25zdCBzdG9yZSA9IG1vY2tTdG9yZSh7XG4gIGhvdGVsOiB7XG4gICAgaG90ZWxzOiBob3RlbHNfcmVzcG9uc2UucmVzdWx0LmhvdGVscyxcbiAgfSxcbn0pO1xuXG5jb25zdCBzZXR1cCA9ICgpID0+XG4gIHJlbmRlcihcbiAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgIDxBcHBsaWNhdGlvblByb3ZpZGVyIHsuLi5ldmF9IHRoZW1lPXtldmEubGlnaHR9PlxuICAgICAgICA8TmF2aWdhdGlvbkNvbnRhaW5lcj5cbiAgICAgICAgICA8SG9tZSBob3RlbHM9e2hvdGVsc19yZXNwb25zZS5yZXN1bHQuaG90ZWxzfSAvPlxuICAgICAgICA8L05hdmlnYXRpb25Db250YWluZXI+XG4gICAgICA8L0FwcGxpY2F0aW9uUHJvdmlkZXI+XG4gICAgPC9Qcm92aWRlcj4sXG4gICk7XG5cbmRlc2NyaWJlKCdUZXN0IGhvbWVwYWdlIHNjcmVlbicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RvcmUuZGlzcGF0Y2ggPSBqZXN0LmZuKCk7XG4gICAgc2V0dXAoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGNsZWFudXApO1xuXG4gIGl0KCdmZXRjaGVzIHRoZSBob3RlbHMgb24gbW91bnQnLCAoKSA9PiB7XG4gICAgY29uc3QgZXhwZWN0ZWRBY3Rpb24gPSBnZXRIb3RlbHMoe3E6ICcnLCBwYWdlOiAxfSk7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3RlZEFjdGlvbik7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZGlzcGxheSB0aGUgbGlzdCBvZiBob3RlbHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnc2VhcmNoLWJveCcpKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhIGxpc3Qgb2YgaG90ZWxzJywgKCkgPT4ge1xuICAgIGNvbnN0IGhvdGVscyA9IGhvdGVsc19yZXNwb25zZS5yZXN1bHQubmFtZTtcbiAgICBob3RlbHMuZm9yRWFjaChob3RlbCA9PiB7XG4gICAgICBjb25zdCBob3RlbE5hbWUgPSBzY3JlZW4uZ2V0QnlUZXh0KGhvdGVsLm5hbWUpO1xuICAgICAgZXhwZWN0KGhvdGVsTmFtZSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQU9BLElBQUFHLEdBQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFLLFdBQUEsR0FBQUwsT0FBQTtBQUVBLElBQUFNLEtBQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFPLFFBQUEsR0FBQVAsT0FBQTtBQUNBLElBQUFRLFdBQUEsR0FBQVIsT0FBQTtBQUNBLElBQUFTLGdCQUFBLEdBQUFWLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBVSxPQUFBLEdBQUFWLE9BQUE7QUFBNkQsU0FBQVcseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFSLHdCQUFBWSxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQSxTQUFBTSxN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