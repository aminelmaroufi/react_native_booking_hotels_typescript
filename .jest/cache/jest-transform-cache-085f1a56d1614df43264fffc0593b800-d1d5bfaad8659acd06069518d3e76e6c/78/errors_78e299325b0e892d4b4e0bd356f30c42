a0c5c8e3ff4bf2c0d8d954952f976e36
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RootNavigation = _interopRequireWildcard(require("../../navigation/rootNavigation"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var errorInterceptor = function errorInterceptor(axiosInstance) {
  axiosInstance.interceptors.response.use(function (response) {}, function (error) {
    console.log('===error status:', error);
    if (error.response && error.response.status === 401) {
      return RootNavigation.navigate('Home', {});
    } else if (error.response && error.response.status === 503) {
      return RootNavigation.navigate('SERVER_ERROR_SCREEN', {});
    } else {
      return Promise.reject(error);
    }
  });
};
var _default = errorInterceptor;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb290TmF2aWdhdGlvbiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJlcnJvckludGVyY2VwdG9yIiwiYXhpb3NJbnN0YW5jZSIsImludGVyY2VwdG9ycyIsInJlc3BvbnNlIiwidXNlIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwic3RhdHVzIiwibmF2aWdhdGUiLCJQcm9taXNlIiwicmVqZWN0IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiZXJyb3JzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcywge0F4aW9zRXJyb3J9IGZyb20gJ2F4aW9zJztcbmltcG9ydCAqIGFzIFJvb3ROYXZpZ2F0aW9uIGZyb20gJy4uLy4uL25hdmlnYXRpb24vcm9vdE5hdmlnYXRpb24nO1xuXG5jb25zdCBlcnJvckludGVyY2VwdG9yID0gYXhpb3NJbnN0YW5jZSA9PiB7XG4gIGF4aW9zSW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShcbiAgICByZXNwb25zZSA9PiB7XG4gICAgICAvL1Jlc3BvbnNlIFN1Y2Nlc3NmdWxcbiAgICB9LFxuICAgIGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCc9PT1lcnJvciBzdGF0dXM6JywgZXJyb3IpO1xuICAgICAgaWYgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgIHJldHVybiBSb290TmF2aWdhdGlvbi5uYXZpZ2F0ZSgnSG9tZScsIHt9KTtcbiAgICAgICAgLy9VbmF1dGhvcml6ZWRcbiAgICAgICAgLy9yZWRpcmVjdCB0byBMb2dpblxuICAgICAgfSBlbHNlIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDUwMykge1xuICAgICAgICByZXR1cm4gUm9vdE5hdmlnYXRpb24ubmF2aWdhdGUoJ1NFUlZFUl9FUlJPUl9TQ1JFRU4nLCB7fSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL2Rpc3BhdGNoIHlvdXIgZXJyb3IgaW4gYSBtb3JlIHVzZXIgZnJpZW5kbHkgbWFubmVyXG4gICAgICAgIC8vIGlmIChERUJVRykge1xuICAgICAgICAvLyAgIC8vZWFzaWVyIGRlYnVnZ2luZ1xuICAgICAgICAvLyAgIGNvbnNvbGUuZ3JvdXAoJ0Vycm9yJyk7XG4gICAgICAgIC8vICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAvLyAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfSxcbiAgKTtcbn07XG5leHBvcnQgZGVmYXVsdCBlcnJvckludGVyY2VwdG9yO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxjQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFBa0UsU0FBQUMseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFILHdCQUFBTyxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQSxTQUFBTSxNQUFBLFdBQUFDLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLEdBQUEsSUFBQVgsR0FBQSxRQUFBVyxHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFkLEdBQUEsRUFBQVcsR0FBQSxTQUFBSSxJQUFBLEdBQUFSLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQVYsR0FBQSxFQUFBVyxHQUFBLGNBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBVixHQUFBLElBQUFVLElBQUEsQ0FBQUMsR0FBQSxLQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUgsTUFBQSxFQUFBSyxHQUFBLEVBQUFJLElBQUEsWUFBQVQsTUFBQSxDQUFBSyxHQUFBLElBQUFYLEdBQUEsQ0FBQVcsR0FBQSxTQUFBTCxNQUFBLENBQUFKLE9BQUEsR0FBQUYsR0FBQSxNQUFBRyxLQUFBLElBQUFBLEtBQUEsQ0FBQWEsR0FBQSxDQUFBaEIsR0FBQSxFQUFBTSxNQUFBLFlBQUFBLE1BQUE7QUFFbEUsSUFBTVcsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFnQkEsQ0FBR0MsYUFBYSxFQUFJO0VBQ3hDQSxhQUFhLENBQUNDLFlBQVksQ0FBQ0MsUUFBUSxDQUFDQyxHQUFHLENBQ3JDLFVBQUFELFFBQVEsRUFBSSxDQUVaLENBQUMsRUFDRCxVQUFBRSxLQUFLLEVBQUk7SUFDUEMsT0FBTyxDQUFDQyxHQUFHLENBQUMsa0JBQWtCLEVBQUVGLEtBQUssQ0FBQztJQUN0QyxJQUFJQSxLQUFLLENBQUNGLFFBQVEsSUFBSUUsS0FBSyxDQUFDRixRQUFRLENBQUNLLE1BQU0sS0FBSyxHQUFHLEVBQUU7TUFDbkQsT0FBT2pDLGNBQWMsQ0FBQ2tDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFHNUMsQ0FBQyxNQUFNLElBQUlKLEtBQUssQ0FBQ0YsUUFBUSxJQUFJRSxLQUFLLENBQUNGLFFBQVEsQ0FBQ0ssTUFBTSxLQUFLLEdBQUcsRUFBRTtNQUMxRCxPQUFPakMsY0FBYyxDQUFDa0MsUUFBUSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUMsTUFBTTtNQVNMLE9BQU9DLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDTixLQUFLLENBQUM7SUFDOUI7RUFDRixDQUFDLENBQ0Y7QUFDSCxDQUFDO0FBQUMsSUFBQU8sUUFBQSxHQUNhWixnQkFBZ0I7QUFBQWEsT0FBQSxDQUFBNUIsT0FBQSxHQUFBMkIsUUFBQSJ9