c333128a79ce170a6ea735d213ea51d0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Divider = _interopRequireDefault(require("../divider/Divider"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var CardDivider = function CardDivider(_a) {
  var style = _a.style,
    props = __rest(_a, ["style"]);
  return (0, _jsxRuntime.jsx)(_Divider.default, (0, _extends2.default)({
    style: _reactNative.StyleSheet.flatten([styles.divider, style])
  }, props));
};
var styles = _reactNative.StyleSheet.create({
  divider: {
    marginBottom: 15
  }
});
var _default = (0, _config.withTheme)(CardDivider, 'CardDivider');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfRGl2aWRlciIsIl9qc3hSdW50aW1lIiwiX19yZXN0IiwicyIsImUiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJDYXJkRGl2aWRlciIsIl9hIiwic3R5bGUiLCJwcm9wcyIsImpzeCIsImRlZmF1bHQiLCJfZXh0ZW5kczIiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlcyIsImRpdmlkZXIiLCJjcmVhdGUiLCJtYXJnaW5Cb3R0b20iLCJfZGVmYXVsdCIsIndpdGhUaGVtZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJDYXJkRGl2aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IERpdmlkZXIgZnJvbSAnLi4vZGl2aWRlci9EaXZpZGVyJztcbmNvbnN0IENhcmREaXZpZGVyID0gKF9hKSA9PiB7XG4gICAgdmFyIHsgc3R5bGUgfSA9IF9hLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wic3R5bGVcIl0pO1xuICAgIHJldHVybiAoPERpdmlkZXIgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLmRpdmlkZXIsIHN0eWxlXSl9IHsuLi5wcm9wc30vPik7XG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGRpdmlkZXI6IHtcbiAgICAgICAgbWFyZ2luQm90dG9tOiAxNSxcbiAgICB9LFxufSk7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQ2FyZERpdmlkZXIsICdDYXJkRGl2aWRlcicpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFXQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxRQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBeUMsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBZHpDLElBQUlLLE1BQU0sR0FBSSxJQUFJLElBQUksSUFBSSxDQUFDQSxNQUFNLElBQUssVUFBVUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFDbEQsSUFBSUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNWLEtBQUssSUFBSUMsQ0FBQyxJQUFJSCxDQUFDLEVBQUUsSUFBSUksTUFBTSxDQUFDQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQyxJQUFJRixDQUFDLENBQUNPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUMvRUQsQ0FBQyxDQUFDQyxDQUFDLENBQUMsR0FBR0gsQ0FBQyxDQUFDRyxDQUFDLENBQUM7RUFDZixJQUFJSCxDQUFDLElBQUksSUFBSSxJQUFJLE9BQU9JLE1BQU0sQ0FBQ0sscUJBQXFCLEtBQUssVUFBVSxFQUMvRCxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVQLENBQUMsR0FBR0MsTUFBTSxDQUFDSyxxQkFBcUIsQ0FBQ1QsQ0FBQyxDQUFDLEVBQUVVLENBQUMsR0FBR1AsQ0FBQyxDQUFDUSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ3BFLElBQUlULENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJTixNQUFNLENBQUNDLFNBQVMsQ0FBQ08sb0JBQW9CLENBQUNMLElBQUksQ0FBQ1AsQ0FBQyxFQUFFRyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEVBQzFFUixDQUFDLENBQUNDLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBR1YsQ0FBQyxDQUFDRyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDO0VBQ3pCO0VBQ0osT0FBT1IsQ0FBQztBQUNaLENBQUM7QUFLRCxJQUFNVyxXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBSUMsRUFBRSxFQUFLO0VBQ3BCLElBQUVDLEtBQUssR0FBS0QsRUFBRSxDQUFaQyxLQUFLO0lBQVNDLEtBQUssR0FBR2pCLE1BQU0sQ0FBQ2UsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDakQsT0FBUSxJQUFBaEIsV0FBQSxDQUFBbUIsR0FBQSxFQUFDcEIsUUFBQSxDQUFBcUIsT0FBTyxNQUFBQyxTQUFBLENBQUFELE9BQUE7SUFBQ0gsS0FBSyxFQUFFSyx1QkFBVSxDQUFDQyxPQUFPLENBQUMsQ0FBQ0MsTUFBTSxDQUFDQyxPQUFPLEVBQUVSLEtBQUssQ0FBQztFQUFFLEdBQUtDLEtBQUssRUFBRztBQUNyRixDQUFDO0FBQ0QsSUFBTU0sTUFBTSxHQUFHRix1QkFBVSxDQUFDSSxNQUFNLENBQUM7RUFDN0JELE9BQU8sRUFBRTtJQUNMRSxZQUFZLEVBQUU7RUFDbEI7QUFDSixDQUFDLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQ1ksSUFBQUMsaUJBQVMsRUFBQ2QsV0FBVyxFQUFFLGFBQWEsQ0FBQztBQUFBZSxPQUFBLENBQUFWLE9BQUEsR0FBQVEsUUFBQSJ9