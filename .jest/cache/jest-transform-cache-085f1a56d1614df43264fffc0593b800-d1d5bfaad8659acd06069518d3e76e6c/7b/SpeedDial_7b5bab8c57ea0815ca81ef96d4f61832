b7e8b9c148338de8befdc55088c6f5d8
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SpeedDial = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _FAB = _interopRequireDefault(require("./FAB"));
var _config = require("../config");
var _color = _interopRequireDefault(require("color"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var SpeedDialAction = (0, _config.withTheme)(function (_a) {
  var title = _a.title,
    titleStyle = _a.titleStyle,
    actionProps = __rest(_a, ["title", "titleStyle"]);
  return _react.default.createElement(_reactNative.View, {
    style: styles.action
  }, title && _react.default.createElement(_reactNative.Text, {
    style: [styles.title, titleStyle]
  }, title), _react.default.createElement(_FAB.default, (0, _extends2.default)({}, actionProps, {
    size: "small",
    style: [actionProps.style]
  })));
}, 'SpeedDialAction');
var SpeedDial = function SpeedDial(_a) {
  var _b;
  var theme = _a.theme,
    isOpen = _a.isOpen,
    _a$onOpen = _a.onOpen,
    onOpen = _a$onOpen === void 0 ? function () {} : _a$onOpen,
    _a$onClose = _a.onClose,
    onClose = _a$onClose === void 0 ? function () {} : _a$onClose,
    icon = _a.icon,
    openIcon = _a.openIcon,
    children = _a.children,
    _a$transitionDuration = _a.transitionDuration,
    transitionDuration = _a$transitionDuration === void 0 ? 150 : _a$transitionDuration,
    style = _a.style,
    overlayColor = _a.overlayColor,
    props = __rest(_a, ["theme", "isOpen", "onOpen", "onClose", "icon", "openIcon", "children", "transitionDuration", "style", "overlayColor"]);
  var animations = _react.default.useRef((0, _toConsumableArray2.default)(new Array(_react.default.Children.count(children))).map(function () {
    return new _reactNative.Animated.Value(Number(isOpen));
  }));
  _react.default.useEffect(function () {
    _reactNative.Animated.stagger(50, animations.current.map(function (animation) {
      return _reactNative.Animated.timing(animation, {
        toValue: Number(isOpen),
        duration: transitionDuration,
        useNativeDriver: true
      });
    })[isOpen ? 'reverse' : 'sort']()).start();
  }, [isOpen, animations, children, transitionDuration]);
  return _react.default.createElement(_reactNative.View, {
    style: [styles.container, style],
    pointerEvents: "box-none"
  }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
    onPress: onClose
  }, _react.default.createElement(_reactNative.Animated.View, {
    style: [_reactNative.StyleSheet.absoluteFillObject, {
      opacity: animations.current[0],
      backgroundColor: overlayColor || (0, _color.default)((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.black).alpha(0.6).rgb().toString()
    }],
    pointerEvents: isOpen ? 'auto' : 'none'
  })), _react.default.createElement(_reactNative.SafeAreaView, {
    pointerEvents: "box-none",
    style: styles.safeArea
  }, _react.default.Children.toArray(children).map(function (ChildAction, i) {
    return _react.default.createElement(_reactNative.Animated.View, {
      pointerEvents: isOpen ? 'auto' : 'none',
      key: i,
      style: {
        transform: [{
          scale: animations.current[i]
        }],
        opacity: animations.current[i]
      }
    }, ChildAction);
  }), _react.default.createElement(_FAB.default, (0, _extends2.default)({
    style: [styles.fab],
    icon: isOpen ? openIcon : icon
  }, props, {
    onPress: isOpen ? onClose : onOpen
  }))));
};
exports.SpeedDial = SpeedDial;
var styles = _reactNative.StyleSheet.create({
  safeArea: {
    alignItems: 'flex-end'
  },
  container: (0, _extends2.default)((0, _extends2.default)({}, _reactNative.StyleSheet.absoluteFillObject), {
    justifyContent: 'flex-end'
  }),
  fab: {
    margin: 16,
    marginTop: 0
  },
  title: {
    backgroundColor: 'white',
    color: 'black',
    borderRadius: 5,
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginVertical: 8,
    marginHorizontal: 16,
    elevation: 2
  },
  action: {
    marginBottom: 16,
    marginRight: 24,
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center'
  }
});
var _default = (0, _extends2.default)((0, _config.withTheme)(SpeedDial, 'SpeedDial'), {
  Action: SpeedDialAction
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,