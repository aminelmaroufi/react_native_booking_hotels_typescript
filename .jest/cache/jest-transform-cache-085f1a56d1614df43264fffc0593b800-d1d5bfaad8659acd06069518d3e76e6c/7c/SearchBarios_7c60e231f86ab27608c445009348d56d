a0c261c0a2770692bca87e039a230b67
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Input = _interopRequireDefault(require("../input/Input"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _helpers = require("../helpers");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var defaultSearchIcon = function defaultSearchIcon(theme) {
  var _a, _b, _c;
  return {
    type: 'ionicon',
    size: 20,
    name: 'ios-search',
    color: (_c = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.platform) === null || _b === void 0 ? void 0 : _b.ios) === null || _c === void 0 ? void 0 : _c.grey
  };
};
var defaultClearIcon = function defaultClearIcon(theme) {
  var _a, _b, _c;
  return {
    type: 'ionicon',
    name: 'ios-close-circle',
    size: 20,
    color: (_c = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.platform) === null || _b === void 0 ? void 0 : _b.ios) === null || _c === void 0 ? void 0 : _c.grey
  };
};
var SearchBar = function (_Component) {
  (0, _inherits2.default)(SearchBar, _Component);
  var _super = _createSuper(SearchBar);
  function SearchBar(props) {
    var _this;
    (0, _classCallCheck2.default)(this, SearchBar);
    _this = _super.call(this, props);
    _this.focus = function () {
      _this.input.focus();
    };
    _this.blur = function () {
      _this.input.blur();
    };
    _this.clear = function () {
      _this.input.clear();
      _this.onChangeText('');
      _this.props.onClear();
    };
    _this.cancel = function () {
      _this.onChangeText('');
      if (_this.props.showCancel) {
        _reactNative.LayoutAnimation.configureNext(_reactNative.LayoutAnimation.Presets.easeInEaseOut);
        _this.setState({
          hasFocus: false
        });
      }
      setTimeout(function () {
        _this.blur();
        _this.props.onCancel();
      }, 0);
    };
    _this.onFocus = function (event) {
      _this.props.onFocus(event);
      _reactNative.LayoutAnimation.configureNext(_reactNative.LayoutAnimation.Presets.easeInEaseOut);
      _this.setState({
        hasFocus: true,
        isEmpty: _this.props.value === ''
      });
    };
    _this.onBlur = function (event) {
      _this.props.onBlur(event);
      if (!_this.props.showCancel) {
        _reactNative.LayoutAnimation.configureNext(_reactNative.LayoutAnimation.Presets.easeInEaseOut);
        _this.setState({
          hasFocus: false
        });
      }
    };
    _this.onChangeText = function (text) {
      _this.props.onChangeText(text);
      _this.setState({
        isEmpty: text === ''
      });
    };
    var value = props.value;
    _this.state = {
      hasFocus: false,
      isEmpty: value ? value === '' : true,
      cancelButtonWidth: null
    };
    return _this;
  }
  (0, _createClass2.default)(SearchBar, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _a, _b, _c, _d, _e, _f, _g;
      var _h = this.props,
        theme = _h.theme,
        cancelButtonProps = _h.cancelButtonProps,
        cancelButtonTitle = _h.cancelButtonTitle,
        clearIcon = _h.clearIcon,
        containerStyle = _h.containerStyle,
        leftIconContainerStyle = _h.leftIconContainerStyle,
        rightIconContainerStyle = _h.rightIconContainerStyle,
        inputContainerStyle = _h.inputContainerStyle,
        inputStyle = _h.inputStyle,
        placeholderTextColor = _h.placeholderTextColor,
        showLoading = _h.showLoading,
        loadingProps = _h.loadingProps,
        searchIcon = _h.searchIcon,
        showCancel = _h.showCancel,
        attributes = __rest(_h, ["theme", "cancelButtonProps", "cancelButtonTitle", "clearIcon", "containerStyle", "leftIconContainerStyle", "rightIconContainerStyle", "inputContainerStyle", "inputStyle", "placeholderTextColor", "showLoading", "loadingProps", "searchIcon", "showCancel"]);
      var _this$state = this.state,
        hasFocus = _this$state.hasFocus,
        isEmpty = _this$state.isEmpty;
      var loadingStyle = loadingProps.style,
        otherLoadingProps = __rest(loadingProps, ["style"]);
      var buttonStyle = cancelButtonProps.buttonStyle,
        buttonTextStyle = cancelButtonProps.buttonTextStyle,
        buttonColor = cancelButtonProps.color,
        buttonDisabled = cancelButtonProps.disabled,
        buttonDisabledStyle = cancelButtonProps.buttonDisabledStyle,
        buttonDisabledTextStyle = cancelButtonProps.buttonDisabledTextStyle,
        otherCancelButtonProps = __rest(cancelButtonProps, ["buttonStyle", "buttonTextStyle", "color", "disabled", "buttonDisabledStyle", "buttonDisabledTextStyle"]);
      return _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, {
          backgroundColor: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.white
        }, containerStyle])
      }, _react.default.createElement(_Input.default, (0, _extends2.default)({
        testID: "searchInput",
        renderErrorMessage: false
      }, attributes, {
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onChangeText: this.onChangeText,
        ref: function ref(input) {
          _this2.input = input;
        },
        inputStyle: _reactNative.StyleSheet.flatten([styles.input, inputStyle]),
        containerStyle: {
          paddingHorizontal: 0
        },
        inputContainerStyle: _reactNative.StyleSheet.flatten([styles.inputContainer, {
          backgroundColor: (_d = (_c = (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.platform) === null || _c === void 0 ? void 0 : _c.ios) === null || _d === void 0 ? void 0 : _d.searchBg
        }, hasFocus && {
          marginRight: this.state.cancelButtonWidth ? this.state.cancelButtonWidth : 0
        }, inputContainerStyle]),
        leftIcon: (0, _helpers.renderNode)(_Icon.default, searchIcon, defaultSearchIcon(theme)),
        leftIconContainerStyle: _reactNative.StyleSheet.flatten([styles.leftIconContainerStyle, leftIconContainerStyle]),
        placeholderTextColor: placeholderTextColor || ((_g = (_f = (_e = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _e === void 0 ? void 0 : _e.platform) === null || _f === void 0 ? void 0 : _f.ios) === null || _g === void 0 ? void 0 : _g.grey),
        rightIcon: _react.default.createElement(_reactNative.View, {
          style: {
            flexDirection: 'row'
          }
        }, showLoading && _react.default.createElement(_reactNative.ActivityIndicator, (0, _extends2.default)({
          key: "loading",
          style: _reactNative.StyleSheet.flatten([{
            marginRight: 5
          }, loadingStyle])
        }, otherLoadingProps)), !isEmpty && (0, _helpers.renderNode)(_Icon.default, clearIcon, (0, _extends2.default)((0, _extends2.default)({}, defaultClearIcon(theme)), {
          key: 'cancel',
          onPress: this.clear
        }))),
        rightIconContainerStyle: _reactNative.StyleSheet.flatten([styles.rightIconContainerStyle, rightIconContainerStyle])
      })), _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.cancelButtonContainer, {
          opacity: this.state.cancelButtonWidth === null ? 0 : 1,
          right: hasFocus ? 0 : this.state.cancelButtonWidth && -this.state.cancelButtonWidth
        }]),
        onLayout: function onLayout(event) {
          return _this2.setState({
            cancelButtonWidth: event.nativeEvent.layout.width
          });
        }
      }, _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({
        accessibilityRole: "button",
        onPress: this.cancel,
        disabled: buttonDisabled
      }, otherCancelButtonProps), _react.default.createElement(_reactNative.View, {
        style: [buttonStyle, buttonDisabled && buttonDisabledStyle]
      }, _react.default.createElement(_reactNative.Text, {
        style: [styles.buttonTextStyle, buttonColor && {
          color: buttonColor
        }, buttonTextStyle, buttonDisabled && (buttonDisabledTextStyle || styles.buttonTextDisabled)]
      }, cancelButtonTitle)))));
    }
  }]);
  return SearchBar;
}(_react.Component);
SearchBar.defaultProps = {
  value: '',
  cancelButtonTitle: 'Cancel',
  loadingProps: {},
  cancelButtonProps: {},
  showLoading: false,
  onClear: function onClear() {
    return null;
  },
  onCancel: function onCancel() {
    return null;
  },
  onFocus: function onFocus() {
    return null;
  },
  onBlur: function onBlur() {
    return null;
  },
  onChangeText: function onChangeText() {
    return null;
  },
  searchIcon: {
    name: 'ios-search'
  },
  clearIcon: {
    name: 'ios-close-circle'
  },
  showCancel: false
};
var styles = _reactNative.StyleSheet.create({
  container: {
    paddingBottom: 13,
    paddingTop: 13,
    flexDirection: 'row',
    overflow: 'hidden',
    alignItems: 'center'
  },
  input: {
    marginLeft: 6,
    overflow: 'hidden'
  },
  inputContainer: {
    borderBottomWidth: 0,
    borderRadius: 9,
    minHeight: 36,
    marginLeft: 8,
    marginRight: 8
  },
  rightIconContainerStyle: {
    marginRight: 8
  },
  leftIconContainerStyle: {
    marginLeft: 8
  },
  buttonTextStyle: {
    color: '#007aff',
    textAlign: 'center',
    padding: 8,
    fontSize: 18
  },
  buttonTextDisabled: {
    color: '#cdcdcd'
  },
  cancelButtonContainer: {
    position: 'absolute'
  }
});
var _default = SearchBar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfSW5wdXQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX0ljb24iLCJfaGVscGVycyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mMiIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwiX19yZXN0IiwicyIsInQiLCJwIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImRlZmF1bHRTZWFyY2hJY29uIiwidGhlbWUiLCJfYSIsIl9iIiwiX2MiLCJ0eXBlIiwic2l6ZSIsIm5hbWUiLCJjb2xvciIsImNvbG9ycyIsInBsYXRmb3JtIiwiaW9zIiwiZ3JleSIsImRlZmF1bHRDbGVhckljb24iLCJTZWFyY2hCYXIiLCJfQ29tcG9uZW50IiwiX2luaGVyaXRzMiIsIl9zdXBlciIsInByb3BzIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiZm9jdXMiLCJpbnB1dCIsImJsdXIiLCJjbGVhciIsIm9uQ2hhbmdlVGV4dCIsIm9uQ2xlYXIiLCJjYW5jZWwiLCJzaG93Q2FuY2VsIiwiTGF5b3V0QW5pbWF0aW9uIiwiY29uZmlndXJlTmV4dCIsIlByZXNldHMiLCJlYXNlSW5FYXNlT3V0Iiwic2V0U3RhdGUiLCJoYXNGb2N1cyIsInNldFRpbWVvdXQiLCJvbkNhbmNlbCIsIm9uRm9jdXMiLCJldmVudCIsImlzRW1wdHkiLCJ2YWx1ZSIsIm9uQmx1ciIsInRleHQiLCJzdGF0ZSIsImNhbmNlbEJ1dHRvbldpZHRoIiwiX2NyZWF0ZUNsYXNzMiIsInJlbmRlciIsIl90aGlzMiIsIl9kIiwiX2UiLCJfZiIsIl9nIiwiX2giLCJjYW5jZWxCdXR0b25Qcm9wcyIsImNhbmNlbEJ1dHRvblRpdGxlIiwiY2xlYXJJY29uIiwiY29udGFpbmVyU3R5bGUiLCJsZWZ0SWNvbkNvbnRhaW5lclN0eWxlIiwicmlnaHRJY29uQ29udGFpbmVyU3R5bGUiLCJpbnB1dENvbnRhaW5lclN0eWxlIiwiaW5wdXRTdHlsZSIsInBsYWNlaG9sZGVyVGV4dENvbG9yIiwic2hvd0xvYWRpbmciLCJsb2FkaW5nUHJvcHMiLCJzZWFyY2hJY29uIiwiYXR0cmlidXRlcyIsIl90aGlzJHN0YXRlIiwibG9hZGluZ1N0eWxlIiwic3R5bGUiLCJvdGhlckxvYWRpbmdQcm9wcyIsImJ1dHRvblN0eWxlIiwiYnV0dG9uVGV4dFN0eWxlIiwiYnV0dG9uQ29sb3IiLCJidXR0b25EaXNhYmxlZCIsImRpc2FibGVkIiwiYnV0dG9uRGlzYWJsZWRTdHlsZSIsImJ1dHRvbkRpc2FibGVkVGV4dFN0eWxlIiwib3RoZXJDYW5jZWxCdXR0b25Qcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJWaWV3IiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJzdHlsZXMiLCJjb250YWluZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ3aGl0ZSIsIl9leHRlbmRzMiIsInRlc3RJRCIsInJlbmRlckVycm9yTWVzc2FnZSIsInJlZiIsInBhZGRpbmdIb3Jpem9udGFsIiwiaW5wdXRDb250YWluZXIiLCJzZWFyY2hCZyIsIm1hcmdpblJpZ2h0IiwibGVmdEljb24iLCJyZW5kZXJOb2RlIiwiSWNvbiIsInJpZ2h0SWNvbiIsImZsZXhEaXJlY3Rpb24iLCJBY3Rpdml0eUluZGljYXRvciIsIm9uUHJlc3MiLCJjYW5jZWxCdXR0b25Db250YWluZXIiLCJvcGFjaXR5IiwicmlnaHQiLCJvbkxheW91dCIsIm5hdGl2ZUV2ZW50IiwibGF5b3V0Iiwid2lkdGgiLCJUb3VjaGFibGVPcGFjaXR5IiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJUZXh0IiwiYnV0dG9uVGV4dERpc2FibGVkIiwiQ29tcG9uZW50IiwiZGVmYXVsdFByb3BzIiwiY3JlYXRlIiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdUb3AiLCJvdmVyZmxvdyIsImFsaWduSXRlbXMiLCJtYXJnaW5MZWZ0IiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJSYWRpdXMiLCJtaW5IZWlnaHQiLCJ0ZXh0QWxpZ24iLCJwYWRkaW5nIiwiZm9udFNpemUiLCJwb3NpdGlvbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlNlYXJjaEJhci1pb3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRvdWNoYWJsZU9wYWNpdHksIExheW91dEFuaW1hdGlvbiwgU3R5bGVTaGVldCwgVmlldywgQWN0aXZpdHlJbmRpY2F0b3IsIFRleHQsIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9pbnB1dC9JbnB1dCc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29ucy9JY29uJztcbmltcG9ydCB7IHJlbmRlck5vZGUgfSBmcm9tICcuLi9oZWxwZXJzJztcbmNvbnN0IGRlZmF1bHRTZWFyY2hJY29uID0gKHRoZW1lKSA9PiB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgcmV0dXJuICh7XG4gICAgICAgIHR5cGU6ICdpb25pY29uJyxcbiAgICAgICAgc2l6ZTogMjAsXG4gICAgICAgIG5hbWU6ICdpb3Mtc2VhcmNoJyxcbiAgICAgICAgY29sb3I6IChfYyA9IChfYiA9IChfYSA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wbGF0Zm9ybSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmlvcykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmdyZXksXG4gICAgfSk7XG59O1xuY29uc3QgZGVmYXVsdENsZWFySWNvbiA9ICh0aGVtZSkgPT4ge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHJldHVybiAoe1xuICAgICAgICB0eXBlOiAnaW9uaWNvbicsXG4gICAgICAgIG5hbWU6ICdpb3MtY2xvc2UtY2lyY2xlJyxcbiAgICAgICAgc2l6ZTogMjAsXG4gICAgICAgIGNvbG9yOiAoX2MgPSAoX2IgPSAoX2EgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGxhdGZvcm0pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pb3MpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5ncmV5LFxuICAgIH0pO1xufTtcbmNsYXNzIFNlYXJjaEJhciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLmZvY3VzID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbnB1dC5mb2N1cygpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmJsdXIgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlucHV0LmJsdXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jbGVhciA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2VUZXh0KCcnKTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25DbGVhcigpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNhbmNlbCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2VUZXh0KCcnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnNob3dDYW5jZWwpIHtcbiAgICAgICAgICAgICAgICBMYXlvdXRBbmltYXRpb24uY29uZmlndXJlTmV4dChMYXlvdXRBbmltYXRpb24uUHJlc2V0cy5lYXNlSW5FYXNlT3V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGFzRm9jdXM6IGZhbHNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNhbmNlbCgpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25Gb2N1cyA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgICAgICAgIExheW91dEFuaW1hdGlvbi5jb25maWd1cmVOZXh0KExheW91dEFuaW1hdGlvbi5QcmVzZXRzLmVhc2VJbkVhc2VPdXQpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaGFzRm9jdXM6IHRydWUsXG4gICAgICAgICAgICAgICAgaXNFbXB0eTogdGhpcy5wcm9wcy52YWx1ZSA9PT0gJycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkJsdXIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25CbHVyKGV2ZW50KTtcbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5zaG93Q2FuY2VsKSB7XG4gICAgICAgICAgICAgICAgTGF5b3V0QW5pbWF0aW9uLmNvbmZpZ3VyZU5leHQoTGF5b3V0QW5pbWF0aW9uLlByZXNldHMuZWFzZUluRWFzZU91dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGhhc0ZvY3VzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZVRleHQgPSAodGV4dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZVRleHQodGV4dCk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNFbXB0eTogdGV4dCA9PT0gJycgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IHByb3BzO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaGFzRm9jdXM6IGZhbHNlLFxuICAgICAgICAgICAgaXNFbXB0eTogdmFsdWUgPyB2YWx1ZSA9PT0gJycgOiB0cnVlLFxuICAgICAgICAgICAgY2FuY2VsQnV0dG9uV2lkdGg6IG51bGwsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xuICAgICAgICBjb25zdCBfaCA9IHRoaXMucHJvcHMsIHsgdGhlbWUsIGNhbmNlbEJ1dHRvblByb3BzLCBjYW5jZWxCdXR0b25UaXRsZSwgY2xlYXJJY29uLCBjb250YWluZXJTdHlsZSwgbGVmdEljb25Db250YWluZXJTdHlsZSwgcmlnaHRJY29uQ29udGFpbmVyU3R5bGUsIGlucHV0Q29udGFpbmVyU3R5bGUsIGlucHV0U3R5bGUsIHBsYWNlaG9sZGVyVGV4dENvbG9yLCBzaG93TG9hZGluZywgbG9hZGluZ1Byb3BzLCBzZWFyY2hJY29uLCBzaG93Q2FuY2VsIH0gPSBfaCwgYXR0cmlidXRlcyA9IF9fcmVzdChfaCwgW1widGhlbWVcIiwgXCJjYW5jZWxCdXR0b25Qcm9wc1wiLCBcImNhbmNlbEJ1dHRvblRpdGxlXCIsIFwiY2xlYXJJY29uXCIsIFwiY29udGFpbmVyU3R5bGVcIiwgXCJsZWZ0SWNvbkNvbnRhaW5lclN0eWxlXCIsIFwicmlnaHRJY29uQ29udGFpbmVyU3R5bGVcIiwgXCJpbnB1dENvbnRhaW5lclN0eWxlXCIsIFwiaW5wdXRTdHlsZVwiLCBcInBsYWNlaG9sZGVyVGV4dENvbG9yXCIsIFwic2hvd0xvYWRpbmdcIiwgXCJsb2FkaW5nUHJvcHNcIiwgXCJzZWFyY2hJY29uXCIsIFwic2hvd0NhbmNlbFwiXSk7XG4gICAgICAgIGNvbnN0IHsgaGFzRm9jdXMsIGlzRW1wdHkgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IHsgc3R5bGU6IGxvYWRpbmdTdHlsZSB9ID0gbG9hZGluZ1Byb3BzLCBvdGhlckxvYWRpbmdQcm9wcyA9IF9fcmVzdChsb2FkaW5nUHJvcHMsIFtcInN0eWxlXCJdKTtcbiAgICAgICAgY29uc3QgeyBidXR0b25TdHlsZSwgYnV0dG9uVGV4dFN0eWxlLCBjb2xvcjogYnV0dG9uQ29sb3IsIGRpc2FibGVkOiBidXR0b25EaXNhYmxlZCwgYnV0dG9uRGlzYWJsZWRTdHlsZSwgYnV0dG9uRGlzYWJsZWRUZXh0U3R5bGUgfSA9IGNhbmNlbEJ1dHRvblByb3BzLCBvdGhlckNhbmNlbEJ1dHRvblByb3BzID0gX19yZXN0KGNhbmNlbEJ1dHRvblByb3BzLCBbXCJidXR0b25TdHlsZVwiLCBcImJ1dHRvblRleHRTdHlsZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZWRcIiwgXCJidXR0b25EaXNhYmxlZFN0eWxlXCIsIFwiYnV0dG9uRGlzYWJsZWRUZXh0U3R5bGVcIl0pO1xuICAgICAgICByZXR1cm4gKDxWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICAgIHN0eWxlcy5jb250YWluZXIsXG4gICAgICAgICAgICAgICAgeyBiYWNrZ3JvdW5kQ29sb3I6IChfYSA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS53aGl0ZSB9LFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLFxuICAgICAgICAgICAgXSl9PlxuICAgICAgICA8SW5wdXQgdGVzdElEPVwic2VhcmNoSW5wdXRcIiByZW5kZXJFcnJvck1lc3NhZ2U9e2ZhbHNlfSB7Li4uYXR0cmlidXRlc30gb25Gb2N1cz17dGhpcy5vbkZvY3VzfSBvbkJsdXI9e3RoaXMub25CbHVyfSBvbkNoYW5nZVRleHQ9e3RoaXMub25DaGFuZ2VUZXh0fSByZWY9eyhpbnB1dCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgICAgIH19IGlucHV0U3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLmlucHV0LCBpbnB1dFN0eWxlXSl9IGNvbnRhaW5lclN0eWxlPXt7XG4gICAgICAgICAgICAgICAgcGFkZGluZ0hvcml6b250YWw6IDAsXG4gICAgICAgICAgICB9fSBpbnB1dENvbnRhaW5lclN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICAgIHN0eWxlcy5pbnB1dENvbnRhaW5lcixcbiAgICAgICAgICAgICAgICB7IGJhY2tncm91bmRDb2xvcjogKF9kID0gKF9jID0gKF9iID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnBsYXRmb3JtKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuaW9zKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Quc2VhcmNoQmcgfSxcbiAgICAgICAgICAgICAgICBoYXNGb2N1cyAmJiB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiB0aGlzLnN0YXRlLmNhbmNlbEJ1dHRvbldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuc3RhdGUuY2FuY2VsQnV0dG9uV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIDogMCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0Q29udGFpbmVyU3R5bGUsXG4gICAgICAgICAgICBdKX0gbGVmdEljb249e3JlbmRlck5vZGUoSWNvbiwgc2VhcmNoSWNvbiwgZGVmYXVsdFNlYXJjaEljb24odGhlbWUpKX0gbGVmdEljb25Db250YWluZXJTdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgICAgICBzdHlsZXMubGVmdEljb25Db250YWluZXJTdHlsZSxcbiAgICAgICAgICAgICAgICBsZWZ0SWNvbkNvbnRhaW5lclN0eWxlLFxuICAgICAgICAgICAgXSl9IHBsYWNlaG9sZGVyVGV4dENvbG9yPXtwbGFjZWhvbGRlclRleHRDb2xvciB8fCAoKF9nID0gKF9mID0gKF9lID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLnBsYXRmb3JtKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuaW9zKSA9PT0gbnVsbCB8fCBfZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2cuZ3JleSl9IHJpZ2h0SWNvbj17PFZpZXcgc3R5bGU9e3sgZmxleERpcmVjdGlvbjogJ3JvdycgfX0+XG4gICAgICAgICAgICAgIHtzaG93TG9hZGluZyAmJiAoPEFjdGl2aXR5SW5kaWNhdG9yIGtleT1cImxvYWRpbmdcIiBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFt7IG1hcmdpblJpZ2h0OiA1IH0sIGxvYWRpbmdTdHlsZV0pfSB7Li4ub3RoZXJMb2FkaW5nUHJvcHN9Lz4pfVxuICAgICAgICAgICAgICB7IWlzRW1wdHkgJiZcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyTm9kZShJY29uLCBjbGVhckljb24sIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENsZWFySWNvbih0aGVtZSkpLCB7IGtleTogJ2NhbmNlbCcsIG9uUHJlc3M6IHRoaXMuY2xlYXIgfSkpfVxuICAgICAgICAgICAgPC9WaWV3Pn0gcmlnaHRJY29uQ29udGFpbmVyU3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgICAgICAgc3R5bGVzLnJpZ2h0SWNvbkNvbnRhaW5lclN0eWxlLFxuICAgICAgICAgICAgICAgIHJpZ2h0SWNvbkNvbnRhaW5lclN0eWxlLFxuICAgICAgICAgICAgXSl9Lz5cblxuICAgICAgICA8VmlldyBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgICAgICBzdHlsZXMuY2FuY2VsQnV0dG9uQ29udGFpbmVyLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogdGhpcy5zdGF0ZS5jYW5jZWxCdXR0b25XaWR0aCA9PT0gbnVsbCA/IDAgOiAxLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogaGFzRm9jdXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnN0YXRlLmNhbmNlbEJ1dHRvbldpZHRoICYmIC10aGlzLnN0YXRlLmNhbmNlbEJ1dHRvbldpZHRoLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdKX0gb25MYXlvdXQ9eyhldmVudCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGNhbmNlbEJ1dHRvbldpZHRoOiBldmVudC5uYXRpdmVFdmVudC5sYXlvdXQud2lkdGggfSl9PlxuICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5IGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCIgb25QcmVzcz17dGhpcy5jYW5jZWx9IGRpc2FibGVkPXtidXR0b25EaXNhYmxlZH0gey4uLm90aGVyQ2FuY2VsQnV0dG9uUHJvcHN9PlxuICAgICAgICAgICAgPFZpZXcgc3R5bGU9e1tidXR0b25TdHlsZSwgYnV0dG9uRGlzYWJsZWQgJiYgYnV0dG9uRGlzYWJsZWRTdHlsZV19PlxuICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17W1xuICAgICAgICAgICAgICAgIHN0eWxlcy5idXR0b25UZXh0U3R5bGUsXG4gICAgICAgICAgICAgICAgYnV0dG9uQ29sb3IgJiYgeyBjb2xvcjogYnV0dG9uQ29sb3IgfSxcbiAgICAgICAgICAgICAgICBidXR0b25UZXh0U3R5bGUsXG4gICAgICAgICAgICAgICAgYnV0dG9uRGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgKGJ1dHRvbkRpc2FibGVkVGV4dFN0eWxlIHx8IHN0eWxlcy5idXR0b25UZXh0RGlzYWJsZWQpLFxuICAgICAgICAgICAgXX0+XG4gICAgICAgICAgICAgICAge2NhbmNlbEJ1dHRvblRpdGxlfVxuICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L1ZpZXc+KTtcbiAgICB9XG59XG5TZWFyY2hCYXIuZGVmYXVsdFByb3BzID0ge1xuICAgIHZhbHVlOiAnJyxcbiAgICBjYW5jZWxCdXR0b25UaXRsZTogJ0NhbmNlbCcsXG4gICAgbG9hZGluZ1Byb3BzOiB7fSxcbiAgICBjYW5jZWxCdXR0b25Qcm9wczoge30sXG4gICAgc2hvd0xvYWRpbmc6IGZhbHNlLFxuICAgIG9uQ2xlYXI6ICgpID0+IG51bGwsXG4gICAgb25DYW5jZWw6ICgpID0+IG51bGwsXG4gICAgb25Gb2N1czogKCkgPT4gbnVsbCxcbiAgICBvbkJsdXI6ICgpID0+IG51bGwsXG4gICAgb25DaGFuZ2VUZXh0OiAoKSA9PiBudWxsLFxuICAgIHNlYXJjaEljb246IHsgbmFtZTogJ2lvcy1zZWFyY2gnIH0sXG4gICAgY2xlYXJJY29uOiB7IG5hbWU6ICdpb3MtY2xvc2UtY2lyY2xlJyB9LFxuICAgIHNob3dDYW5jZWw6IGZhbHNlLFxufTtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBjb250YWluZXI6IHtcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogMTMsXG4gICAgICAgIHBhZGRpbmdUb3A6IDEzLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICB9LFxuICAgIGlucHV0OiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6IDYsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICB9LFxuICAgIGlucHV0Q29udGFpbmVyOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbVdpZHRoOiAwLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDksXG4gICAgICAgIG1pbkhlaWdodDogMzYsXG4gICAgICAgIG1hcmdpbkxlZnQ6IDgsXG4gICAgICAgIG1hcmdpblJpZ2h0OiA4LFxuICAgIH0sXG4gICAgcmlnaHRJY29uQ29udGFpbmVyU3R5bGU6IHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IDgsXG4gICAgfSxcbiAgICBsZWZ0SWNvbkNvbnRhaW5lclN0eWxlOiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6IDgsXG4gICAgfSxcbiAgICBidXR0b25UZXh0U3R5bGU6IHtcbiAgICAgICAgY29sb3I6ICcjMDA3YWZmJyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgcGFkZGluZzogOCxcbiAgICAgICAgZm9udFNpemU6IDE4LFxuICAgIH0sXG4gICAgYnV0dG9uVGV4dERpc2FibGVkOiB7XG4gICAgICAgIGNvbG9yOiAnI2NkY2RjZCcsXG4gICAgfSxcbiAgICBjYW5jZWxCdXR0b25Db250YWluZXI6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgfSxcbn0pO1xuZXhwb3J0IGRlZmF1bHQgU2VhcmNoQmFyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBV0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxP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