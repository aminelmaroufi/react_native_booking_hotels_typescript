2ccfbe98602d237a777dc1ca23cb5372
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _helpers = require("../helpers");
var _Input = _interopRequireDefault(require("../input/Input"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _jsxRuntime = require("react/jsx-runtime");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var defaultSearchIcon = function defaultSearchIcon(theme) {
  var _a;
  return {
    type: 'material',
    size: 18,
    name: 'search',
    color: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.grey3
  };
};
var defaultClearIcon = function defaultClearIcon(theme) {
  var _a;
  return {
    type: 'material',
    size: 18,
    name: 'clear',
    color: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.grey3
  };
};
var SearchBar = function (_React$Component) {
  (0, _inherits2.default)(SearchBar, _React$Component);
  var _super = _createSuper(SearchBar);
  function SearchBar(props) {
    var _this;
    (0, _classCallCheck2.default)(this, SearchBar);
    _this = _super.call(this, props);
    _this.focus = function () {
      _this.input.focus();
    };
    _this.blur = function () {
      _this.input.blur();
    };
    _this.clear = function () {
      _this.input.clear();
      _this.onChangeText('');
      _this.props.onClear();
    };
    _this.onFocus = function (event) {
      _this.props.onFocus(event);
      _this.setState({
        isEmpty: _this.props.value === ''
      });
    };
    _this.onBlur = function (event) {
      _this.props.onBlur(event);
    };
    _this.onChangeText = function (text) {
      _this.props.onChangeText(text);
      _this.setState({
        isEmpty: text === ''
      });
    };
    var value = props.value;
    _this.state = {
      isEmpty: value ? value === '' : true
    };
    return _this;
  }
  (0, _createClass2.default)(SearchBar, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _a, _b, _c, _d, _e, _f;
      var _g = this.props,
        theme = _g.theme,
        rest = __rest(_g, ["theme"]);
      var lightTheme = rest.lightTheme,
        round = rest.round,
        _rest$clearIcon = rest.clearIcon,
        clearIcon = _rest$clearIcon === void 0 ? defaultClearIcon(theme) : _rest$clearIcon,
        containerStyle = rest.containerStyle,
        _rest$searchIcon = rest.searchIcon,
        searchIcon = _rest$searchIcon === void 0 ? defaultSearchIcon(theme) : _rest$searchIcon,
        leftIconContainerStyle = rest.leftIconContainerStyle,
        rightIconContainerStyle = rest.rightIconContainerStyle,
        inputContainerStyle = rest.inputContainerStyle,
        inputStyle = rest.inputStyle,
        showLoading = rest.showLoading,
        loadingProps = rest.loadingProps,
        _rest$placeholderText = rest.placeholderTextColor,
        placeholderTextColor = _rest$placeholderText === void 0 ? (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.grey3 : _rest$placeholderText,
        attributes = __rest(rest, ["lightTheme", "round", "clearIcon", "containerStyle", "searchIcon", "leftIconContainerStyle", "rightIconContainerStyle", "inputContainerStyle", "inputStyle", "showLoading", "loadingProps", "placeholderTextColor"]);
      var isEmpty = this.state.isEmpty;
      var loadingStyle = loadingProps.style,
        otherLoadingProps = __rest(loadingProps, ["style"]);
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([{
          borderTopWidth: 1,
          borderBottomWidth: 1,
          borderBottomColor: '#000',
          borderTopColor: '#000',
          padding: 8,
          backgroundColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey0
        }, lightTheme && {
          borderTopColor: '#e1e1e1',
          borderBottomColor: '#e1e1e1',
          backgroundColor: (_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.grey5
        }, containerStyle]),
        children: (0, _jsxRuntime.jsx)(_Input.default, (0, _extends2.default)({
          testID: "searchInput",
          renderErrorMessage: false
        }, attributes, {
          onFocus: this.onFocus,
          onBlur: this.onBlur,
          onChangeText: this.onChangeText,
          ref: function ref(input) {
            _this2.input = input;
          },
          placeholderTextColor: placeholderTextColor,
          inputStyle: _reactNative.StyleSheet.flatten([{
            color: (_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.grey3,
            marginLeft: 10
          }, inputStyle]),
          inputContainerStyle: _reactNative.StyleSheet.flatten([{
            borderBottomWidth: 0,
            borderRadius: 3,
            overflow: 'hidden',
            minHeight: 30,
            backgroundColor: (_e = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _e === void 0 ? void 0 : _e.searchBg
          }, lightTheme && {
            backgroundColor: (_f = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _f === void 0 ? void 0 : _f.grey4
          }, round && styles.round, inputContainerStyle]),
          containerStyle: styles.inputContainer,
          leftIcon: (0, _helpers.renderNode)(_Icon.default, searchIcon, defaultSearchIcon(theme)),
          leftIconContainerStyle: _reactNative.StyleSheet.flatten([styles.leftIconContainerStyle, leftIconContainerStyle]),
          rightIcon: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: {
              flexDirection: 'row'
            },
            children: [showLoading && (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, (0, _extends2.default)({
              style: _reactNative.StyleSheet.flatten([{
                marginRight: 5
              }, loadingStyle])
            }, otherLoadingProps), "loading"), !isEmpty && (0, _helpers.renderNode)(_Icon.default, clearIcon, (0, _extends2.default)((0, _extends2.default)({}, defaultClearIcon(theme)), {
              key: 'cancel',
              onPress: this.clear
            }))]
          }),
          rightIconContainerStyle: _reactNative.StyleSheet.flatten([styles.rightIconContainerStyle, rightIconContainerStyle])
        }))
      });
    }
  }]);
  return SearchBar;
}(_react.default.Component);
SearchBar.defaultProps = {
  value: '',
  loadingProps: {},
  showLoading: false,
  lightTheme: false,
  round: false,
  onClear: function onClear() {
    return null;
  },
  onFocus: function onFocus() {
    return null;
  },
  onBlur: function onBlur() {
    return null;
  },
  onChangeText: function onChangeText() {
    return null;
  }
};
var styles = _reactNative.StyleSheet.create({
  rightIconContainerStyle: {
    marginRight: 8
  },
  leftIconContainerStyle: {
    marginLeft: 8
  },
  inputContainer: {
    paddingHorizontal: 0
  },
  round: {
    borderRadius: 15
  }
});
var _default = SearchBar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,