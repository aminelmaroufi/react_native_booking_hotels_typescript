12c9393982be370dbd5aaa8378ab61e7
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var parseHermesStack = require('./parseHermesStack');
function convertHermesStack(stack) {
  var frames = [];
  for (var _iterator = _createForOfIteratorHelperLoose(stack.entries), _step; !(_step = _iterator()).done;) {
    var entry = _step.value;
    if (entry.type !== 'FRAME') {
      continue;
    }
    var location = entry.location,
      functionName = entry.functionName;
    if (location.type === 'NATIVE') {
      continue;
    }
    frames.push({
      methodName: functionName,
      file: location.sourceUrl,
      lineNumber: location.line1Based,
      column: location.type === 'SOURCE' ? location.column1Based - 1 : location.virtualOffset0Based
    });
  }
  return frames;
}
function parseErrorStack(errorStack) {
  if (errorStack == null) {
    return [];
  }
  var stacktraceParser = require('stacktrace-parser');
  var parsedStack = Array.isArray(errorStack) ? errorStack : global.HermesInternal ? convertHermesStack(parseHermesStack(errorStack)) : stacktraceParser.parse(errorStack).map(function (frame) {
    return (0, _extends2.default)({}, frame, {
      column: frame.column != null ? frame.column - 1 : null
    });
  });
  return parsedStack;
}
module.exports = parseErrorStack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9leHRlbmRzMiIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UiLCJvIiwiYWxsb3dBcnJheUxpa2UiLCJpdCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY2FsbCIsIm5leHQiLCJiaW5kIiwiQXJyYXkiLCJpc0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibGVuZ3RoIiwiaSIsImRvbmUiLCJ2YWx1ZSIsIlR5cGVFcnJvciIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsImFyciIsImxlbiIsImFycjIiLCJwYXJzZUhlcm1lc1N0YWNrIiwiY29udmVydEhlcm1lc1N0YWNrIiwic3RhY2siLCJmcmFtZXMiLCJfaXRlcmF0b3IiLCJlbnRyaWVzIiwiX3N0ZXAiLCJlbnRyeSIsInR5cGUiLCJsb2NhdGlvbiIsImZ1bmN0aW9uTmFtZSIsInB1c2giLCJtZXRob2ROYW1lIiwiZmlsZSIsInNvdXJjZVVybCIsImxpbmVOdW1iZXIiLCJsaW5lMUJhc2VkIiwiY29sdW1uIiwiY29sdW1uMUJhc2VkIiwidmlydHVhbE9mZnNldDBCYXNlZCIsInBhcnNlRXJyb3JTdGFjayIsImVycm9yU3RhY2siLCJzdGFja3RyYWNlUGFyc2VyIiwicGFyc2VkU3RhY2siLCJnbG9iYWwiLCJIZXJtZXNJbnRlcm5hbCIsInBhcnNlIiwibWFwIiwiZnJhbWUiLCJkZWZhdWx0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInBhcnNlRXJyb3JTdGFjay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge1N0YWNrRnJhbWV9IGZyb20gJy4uL05hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyJztcbmltcG9ydCB0eXBlIHtIZXJtZXNQYXJzZWRTdGFja30gZnJvbSAnLi9wYXJzZUhlcm1lc1N0YWNrJztcblxuY29uc3QgcGFyc2VIZXJtZXNTdGFjayA9IHJlcXVpcmUoJy4vcGFyc2VIZXJtZXNTdGFjaycpO1xuXG5mdW5jdGlvbiBjb252ZXJ0SGVybWVzU3RhY2soc3RhY2s6IEhlcm1lc1BhcnNlZFN0YWNrKTogQXJyYXk8U3RhY2tGcmFtZT4ge1xuICBjb25zdCBmcmFtZXMgPSBbXTtcbiAgZm9yIChjb25zdCBlbnRyeSBvZiBzdGFjay5lbnRyaWVzKSB7XG4gICAgaWYgKGVudHJ5LnR5cGUgIT09ICdGUkFNRScpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCB7bG9jYXRpb24sIGZ1bmN0aW9uTmFtZX0gPSBlbnRyeTtcbiAgICBpZiAobG9jYXRpb24udHlwZSA9PT0gJ05BVElWRScpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBmcmFtZXMucHVzaCh7XG4gICAgICBtZXRob2ROYW1lOiBmdW5jdGlvbk5hbWUsXG4gICAgICBmaWxlOiBsb2NhdGlvbi5zb3VyY2VVcmwsXG4gICAgICBsaW5lTnVtYmVyOiBsb2NhdGlvbi5saW5lMUJhc2VkLFxuICAgICAgY29sdW1uOlxuICAgICAgICBsb2NhdGlvbi50eXBlID09PSAnU09VUkNFJ1xuICAgICAgICAgID8gbG9jYXRpb24uY29sdW1uMUJhc2VkIC0gMVxuICAgICAgICAgIDogbG9jYXRpb24udmlydHVhbE9mZnNldDBCYXNlZCxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZnJhbWVzO1xufVxuXG5mdW5jdGlvbiBwYXJzZUVycm9yU3RhY2soZXJyb3JTdGFjaz86IHN0cmluZyk6IEFycmF5PFN0YWNrRnJhbWU+IHtcbiAgaWYgKGVycm9yU3RhY2sgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrdHJhY2VQYXJzZXIgPSByZXF1aXJlKCdzdGFja3RyYWNlLXBhcnNlcicpO1xuICBjb25zdCBwYXJzZWRTdGFjayA9IEFycmF5LmlzQXJyYXkoZXJyb3JTdGFjaylcbiAgICA/IGVycm9yU3RhY2tcbiAgICA6IGdsb2JhbC5IZXJtZXNJbnRlcm5hbFxuICAgID8gY29udmVydEhlcm1lc1N0YWNrKHBhcnNlSGVybWVzU3RhY2soZXJyb3JTdGFjaykpXG4gICAgOiBzdGFja3RyYWNlUGFyc2VyLnBhcnNlKGVycm9yU3RhY2spLm1hcChmcmFtZSA9PiAoe1xuICAgICAgICAuLi5mcmFtZSxcbiAgICAgICAgY29sdW1uOiBmcmFtZS5jb2x1bW4gIT0gbnVsbCA/IGZyYW1lLmNvbHVtbiAtIDEgOiBudWxsLFxuICAgICAgfSkpO1xuXG4gIHJldHVybiBwYXJzZWRTdGFjaztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUVycm9yU3RhY2s7XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLFNBQUFFLGdDQUFBQyxDQUFBLEVBQUFDLGNBQUEsUUFBQUMsRUFBQSxVQUFBQyxNQUFBLG9CQUFBSCxDQUFBLENBQUFHLE1BQUEsQ0FBQUMsUUFBQSxLQUFBSixDQUFBLG9CQUFBRSxFQUFBLFVBQUFBLEVBQUEsR0FBQUEsRUFBQSxDQUFBRyxJQUFBLENBQUFMLENBQUEsR0FBQU0sSUFBQSxDQUFBQyxJQUFBLENBQUFMLEVBQUEsT0FBQU0sS0FBQSxDQUFBQyxPQUFB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