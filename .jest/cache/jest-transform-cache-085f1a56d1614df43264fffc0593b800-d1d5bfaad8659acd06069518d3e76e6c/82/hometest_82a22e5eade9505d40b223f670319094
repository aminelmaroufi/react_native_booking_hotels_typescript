c87f2ae785c4f4987ef3504faea6664e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));
var _reactNative = require("@testing-library/react-native");
var _Home = _interopRequireDefault(require("../Home"));
var _actions = require("../../redux/actions");
var _hotels_response = _interopRequireDefault(require("./fixtures/hotels_response"));
var _setup = _interopRequireDefault(require("./setup"));
var mockStore = (0, _reduxMockStore.default)();
var navigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var store = mockStore({
  hotel: {
    hotels: _hotels_response.default.result.hotels
  }
});
describe('Test homepage screen', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    (0, _setup.default)(_react.default.createElement(_Home.default, {
      hotels: _hotels_response.default
    }), store);
  });
  afterEach(_reactNative.cleanup);
  it('fetches the hotels on mount', function () {
    var expectedAction = (0, _actions.getHotels)({
      q: '',
      page: 1
    });
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith(expectedAction);
  });
  it('should display the list of hotels', function () {
    expect(_reactNative.screen.getByTestId('search-box')).toBeDefined();
  });
  it('should render a list of hotels', function () {
    var hotels = _hotels_response.default.result.hotels;
    hotels.forEach(function (hotel) {
      var hotelName = _reactNative.screen.getByText(hotel.name);
      var addressElement = _reactNative.screen.getByText(hotel.short_address);
      expect(hotelName).toBeDefined();
      expect(addressElement).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWR1eE1vY2tTdG9yZSIsIl9yZWFjdE5hdGl2ZSIsIl9Ib21lIiwiX2FjdGlvbnMiLCJfaG90ZWxzX3Jlc3BvbnNlIiwiX3NldHVwIiwibW9ja1N0b3JlIiwiY29uZmlndXJlU3RvcmUiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJqZXN0IiwiZm4iLCJnb0JhY2siLCJzdG9yZSIsImhvdGVsIiwiaG90ZWxzIiwiaG90ZWxzX3Jlc3BvbnNlIiwicmVzdWx0IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiZGlzcGF0Y2giLCJzZXR1cCIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiYWZ0ZXJFYWNoIiwiY2xlYW51cCIsIml0IiwiZXhwZWN0ZWRBY3Rpb24iLCJnZXRIb3RlbHMiLCJxIiwicGFnZSIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlRGVmaW5lZCIsImZvckVhY2giLCJob3RlbE5hbWUiLCJnZXRCeVRleHQiLCJuYW1lIiwiYWRkcmVzc0VsZW1lbnQiLCJzaG9ydF9hZGRyZXNzIl0sInNvdXJjZXMiOlsiaG9tZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNvbmZpZ3VyZVN0b3JlIGZyb20gJ3JlZHV4LW1vY2stc3RvcmUnO1xuaW1wb3J0IHtcbiAgY2xlYW51cCxcbiAgZmlyZUV2ZW50LFxuICByZW5kZXIsXG4gIHNjcmVlbixcbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuXG5pbXBvcnQgKiBhcyBldmEgZnJvbSAnQGV2YS1kZXNpZ24vZXZhJztcbmltcG9ydCB7QXBwbGljYXRpb25Qcm92aWRlcn0gZnJvbSAnQHVpLWtpdHRlbi9jb21wb25lbnRzJztcbi8vIGltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tICcuLi8uLi9yZWR1eC9zdG9yZSc7XG5pbXBvcnQgSG9tZSBmcm9tICcuLi9Ib21lJztcbmltcG9ydCB7Z2V0SG90ZWxzfSBmcm9tICcuLi8uLi9yZWR1eC9hY3Rpb25zJztcbmltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBob3RlbHNfcmVzcG9uc2UgZnJvbSAnLi9maXh0dXJlcy9ob3RlbHNfcmVzcG9uc2UnO1xuaW1wb3J0IHtOYXZpZ2F0aW9uQ29udGFpbmVyfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xuaW1wb3J0IHNldHVwIGZyb20gJy4vc2V0dXAnO1xuXG5sZXQgbW9ja1N0b3JlID0gY29uZmlndXJlU3RvcmUoKTtcblxuY29uc3QgbmF2aWdhdGlvbiA9IHtcbiAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgZ29CYWNrOiBqZXN0LmZuKCksXG59O1xuXG5jb25zdCBzdG9yZSA9IG1vY2tTdG9yZSh7XG4gIGhvdGVsOiB7XG4gICAgaG90ZWxzOiBob3RlbHNfcmVzcG9uc2UucmVzdWx0LmhvdGVscyxcbiAgfSxcbn0pO1xuXG4vLyBjb25zdCBzZXR1cCA9IChNeUNvbXBvbmVudCwgc3RvcmUpID0+XG4vLyAgIHJlbmRlcihcbi8vICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbi8vICAgICAgIDxBcHBsaWNhdGlvblByb3ZpZGVyIHsuLi5ldmF9IHRoZW1lPXtldmEubGlnaHR9PlxuLy8gICAgICAgICA8TmF2aWdhdGlvbkNvbnRhaW5lcj5cbi8vICAgICAgICAgICB7LyogPEhvbWUgaG90ZWxzPXtob3RlbHNfcmVzcG9uc2UucmVzdWx0LmhvdGVsc30gLz4gKi99XG4vLyAgICAgICAgICAge015Q29tcG9uZW50fVxuLy8gICAgICAgICA8L05hdmlnYXRpb25Db250YWluZXI+XG4vLyAgICAgICA8L0FwcGxpY2F0aW9uUHJvdmlkZXI+XG4vLyAgICAgPC9Qcm92aWRlcj4sXG4vLyAgICk7XG5cbmRlc2NyaWJlKCdUZXN0IGhvbWVwYWdlIHNjcmVlbicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RvcmUuZGlzcGF0Y2ggPSBqZXN0LmZuKCk7XG4gICAgc2V0dXAoPEhvbWUgaG90ZWxzPXtob3RlbHNfcmVzcG9uc2V9IC8+LCBzdG9yZSk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaChjbGVhbnVwKTtcblxuICBpdCgnZmV0Y2hlcyB0aGUgaG90ZWxzIG9uIG1vdW50JywgKCkgPT4ge1xuICAgIGNvbnN0IGV4cGVjdGVkQWN0aW9uID0gZ2V0SG90ZWxzKHtxOiAnJywgcGFnZTogMX0pO1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0ZWRBY3Rpb24pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGRpc3BsYXkgdGhlIGxpc3Qgb2YgaG90ZWxzJywgKCkgPT4ge1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NlYXJjaC1ib3gnKSkudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSBsaXN0IG9mIGhvdGVscycsICgpID0+IHtcbiAgICBjb25zdCBob3RlbHMgPSBob3RlbHNfcmVzcG9uc2UucmVzdWx0LmhvdGVscztcbiAgICBob3RlbHMuZm9yRWFjaChob3RlbCA9PiB7XG4gICAgICBjb25zdCBob3RlbE5hbWUgPSBzY3JlZW4uZ2V0QnlUZXh0KGhvdGVsLm5hbWUpO1xuICAgICAgY29uc3QgYWRkcmVzc0VsZW1lbnQgPSBzY3JlZW4uZ2V0QnlUZXh0KGhvdGVsLnNob3J0X2FkZHJlc3MpO1xuICAgICAgZXhwZWN0KGhvdGVsTmFtZSkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChhZGRyZXNzRWxlbWVudCkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7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