{"version":3,"names":["_interopRequireDefault","require","_extends2","_slicedToArray2","_classCallCheck2","_createClass2","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","minLen","_arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","invariant","ViewabilityHelper","config","arguments","undefined","viewAreaCoveragePercentThreshold","default","_hasInteracted","_timers","Set","_viewableIndices","_viewableItems","Map","_config","key","dispose","forEach","clearTimeout","computeViewableItems","itemCount","scrollOffset","viewportHeight","getFrameMetrics","renderRange","_this$_config","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","_ref","first","last","console","warn","JSON","stringify","idx","metrics","top","offset","bottom","_isViewable","push","onUpdate","createViewToken","onViewableItemsChanged","_this","waitForInteraction","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","resetViewableIndices","recordInteraction","viewableIndicesToCheck","_this2","filter","includes","prevItems","nextItems","map","viewable","changed","_iterator","_step","_ref2","_ref3","has","_iterator2","_step2","_ref4","_ref5","isViewable","viewableItems","values","viewabilityConfig","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","Math","min","max","module","exports"],"sources":["ViewabilityHelper.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\nexport type ViewToken = {\n  item: any,\n  key: string,\n  index: ?number,\n  isViewable: boolean,\n  section?: any,\n  ...\n};\n\nexport type ViewabilityConfigCallbackPair = {\n  viewabilityConfig: ViewabilityConfig,\n  onViewableItemsChanged: (info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n    ...\n  }) => void,\n  ...\n};\n\nexport type ViewabilityConfig = {|\n  /**\n   * Minimum amount of time (in milliseconds) that an item must be physically viewable before the\n   * viewability callback will be fired. A high number means that scrolling through content without\n   * stopping will not mark the content as viewable.\n   */\n  minimumViewTime?: number,\n\n  /**\n   * Percent of viewport that must be covered for a partially occluded item to count as\n   * \"viewable\", 0-100. Fully visible items are always considered viewable. A value of 0 means\n   * that a single pixel in the viewport makes the item viewable, and a value of 100 means that\n   * an item must be either entirely visible or cover the entire viewport to count as viewable.\n   */\n  viewAreaCoveragePercentThreshold?: number,\n\n  /**\n   * Similar to `viewAreaPercentThreshold`, but considers the percent of the item that is visible,\n   * rather than the fraction of the viewable area it covers.\n   */\n  itemVisiblePercentThreshold?: number,\n\n  /**\n   * Nothing is considered viewable until the user scrolls or `recordInteraction` is called after\n   * render.\n   */\n  waitForInteraction?: boolean,\n|};\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  _config: ViewabilityConfig;\n  _hasInteracted: boolean = false;\n  _timers: Set<number> = new Set();\n  _viewableIndices: Array<number> = [];\n  _viewableItems: Map<string, ViewToken> = new Map();\n\n  constructor(\n    config: ViewabilityConfig = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n     * comment suppresses an error found when Flow v0.63 was deployed. To see\n     * the error delete this comment and run Flow. */\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (\n      index: number,\n    ) => ?{\n      length: number,\n      offset: number,\n      ...\n    },\n    // Optional optimization to reduce the scan size\n    renderRange?: {\n      first: number,\n      last: number,\n      ...\n    },\n  ): Array<number> {\n    const {\n      itemVisiblePercentThreshold,\n      viewAreaCoveragePercentThreshold,\n    } = this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        (itemVisiblePercentThreshold != null) !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    if (last >= itemCount) {\n      console.warn(\n        'Invalid render range computing viewability ' +\n          JSON.stringify({renderRange, itemCount}),\n      );\n      return [];\n    }\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = getFrameMetrics(idx);\n      if (!metrics) {\n        continue;\n      }\n      const top = metrics.offset - scrollOffset;\n      const bottom = top + metrics.length;\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (\n      index: number,\n    ) => ?{\n      length: number,\n      offset: number,\n      ...\n    },\n    createViewToken: (index: number, isViewable: boolean) => ViewToken,\n    onViewableItemsChanged: ({\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n      ...\n    }) => void,\n    // Optional optimization to reduce the scan size\n    renderRange?: {\n      first: number,\n      last: number,\n      ...\n    },\n  ): void {\n    if (\n      (this._config.waitForInteraction && !this._hasInteracted) ||\n      itemCount === 0 ||\n      !getFrameMetrics(0)\n    ) {\n      return;\n    }\n    let viewableIndices = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        itemCount,\n        scrollOffset,\n        viewportHeight,\n        getFrameMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      const handle = setTimeout(() => {\n        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n         * comment suppresses an error found when Flow v0.63 was deployed. To\n         * see the error delete this comment and run Flow. */\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n       * comment suppresses an error found when Flow v0.63 was deployed. To see\n       * the error delete this comment and run Flow. */\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    viewableIndicesToCheck,\n    onViewableItemsChanged,\n    createViewToken,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode: boolean,\n  viewablePercentThreshold: number,\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n  itemLength: number,\n): boolean {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): number {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): boolean {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n"],"mappings":"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"}