b91775d5dd83ca09859f2bf9d096dde4
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var React = _interopRequireWildcard(require("react"));
var _requireNativeComponent = _interopRequireDefault(require("../../../ReactNative/requireNativeComponent"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var RCTRefreshControl = (0, _requireNativeComponent.default)('RCTRefreshControl');
var RefreshControlMock = function (_React$Component) {
  (0, _inherits2.default)(RefreshControlMock, _React$Component);
  var _super = _createSuper(RefreshControlMock);
  function RefreshControlMock() {
    (0, _classCallCheck2.default)(this, RefreshControlMock);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(RefreshControlMock, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      RefreshControlMock.latestRef = this;
    }
  }, {
    key: "render",
    value: function render() {
      return (0, _jsxRuntime.jsx)(RCTRefreshControl, {});
    }
  }]);
  return RefreshControlMock;
}(React.Component);
module.exports = RefreshControlMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2luaGVyaXRzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlcXVpcmVOYXRpdmVDb21wb25lbnQiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwidmFsdWVPZiIsImUiLCJSQ1RSZWZyZXNoQ29udHJvbCIsInJlcXVpcmVOYXRpdmVDb21wb25lbnQiLCJSZWZyZXNoQ29udHJvbE1vY2siLCJfUmVhY3QkQ29tcG9uZW50IiwiX3N1cGVyIiwidmFsdWUiLCJjb21wb25lbnREaWRNb3VudCIsImxhdGVzdFJlZiIsInJlbmRlciIsImpzeCIsIkNvbXBvbmVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJSZWZyZXNoQ29udHJvbE1vY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCByZXF1aXJlTmF0aXZlQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uL1JlYWN0TmF0aXZlL3JlcXVpcmVOYXRpdmVDb21wb25lbnQnO1xuXG5pbXBvcnQgdHlwZSB7SG9zdENvbXBvbmVudH0gZnJvbSAnLi4vLi4vLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVUeXBlcyc7XG5cbmNvbnN0IFJDVFJlZnJlc2hDb250cm9sOiBIb3N0Q29tcG9uZW50PG1peGVkPiA9IHJlcXVpcmVOYXRpdmVDb21wb25lbnQ8bWl4ZWQ+KFxuICAnUkNUUmVmcmVzaENvbnRyb2wnLFxuKTtcblxuY2xhc3MgUmVmcmVzaENvbnRyb2xNb2NrIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PHsuLi59PiB7XG4gIHN0YXRpYyBsYXRlc3RSZWY6ID9SZWZyZXNoQ29udHJvbE1vY2s7XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIFJlZnJlc2hDb250cm9sTW9jay5sYXRlc3RSZWYgPSB0aGlzO1xuICB9XG4gIHJlbmRlcigpOiBSZWFjdC5FbGVtZW50PHR5cGVvZiBSQ1RSZWZyZXNoQ29udHJvbD4ge1xuICAgIHJldHVybiA8UkNUUmVmcmVzaENvbnRyb2wgLz47XG4gIH1c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