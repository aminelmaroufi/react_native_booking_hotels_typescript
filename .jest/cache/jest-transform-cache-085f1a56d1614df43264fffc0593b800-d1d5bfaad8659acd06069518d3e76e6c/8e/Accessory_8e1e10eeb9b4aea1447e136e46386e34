b2d0871c679ea3ebbe1dd2cdd632c782
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Image = _interopRequireDefault(require("../image/Image"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Accessory = function Accessory(_a) {
  var _a$size = _a.size,
    size = _a$size === void 0 ? 10 : _a$size,
    style = _a.style,
    _a$underlayColor = _a.underlayColor,
    underlayColor = _a$underlayColor === void 0 ? '#000' : _a$underlayColor,
    onPress = _a.onPress,
    onLongPress = _a.onLongPress,
    source = _a.source,
    props = __rest(_a, ["size", "style", "underlayColor", "onPress", "onLongPress", "source"]);
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableHighlight, {
    style: [styles.accessory, {
      width: size,
      height: size,
      borderRadius: size / 2
    }, style],
    underlayColor: underlayColor,
    onPress: onPress,
    onLongPress: onLongPress,
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      children: source ? (0, _jsxRuntime.jsx)(_Image.default, (0, _extends2.default)({
        source: source,
        style: {
          width: size,
          height: size,
          borderRadius: size / 2
        }
      }, props)) : (0, _jsxRuntime.jsx)(_Icon.default, (0, _extends2.default)({
        name: "mode-edit",
        type: "material",
        color: "#fff",
        size: size * 0.8
      }, props))
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  accessory: (0, _extends2.default)({
    position: 'absolute',
    bottom: 0,
    right: 0,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#aaa'
  }, _reactNative.Platform.select({
    android: {
      elevation: 1
    },
    default: {
      shadowColor: '#000',
      shadowOffset: {
        width: 1,
        height: 1
      },
      shadowRadius: 2,
      shadowOpacity: 0.5
    }
  }))
});
var _default = (0, _config.withTheme)(Accessory, 'AvatarAccessory');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfSW1hZ2UiLCJfSWNvbiIsIl9qc3hSdW50aW1lIiwiX19yZXN0IiwicyIsImUiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJBY2Nlc3NvcnkiLCJfYSIsIl9hJHNpemUiLCJzaXplIiwic3R5bGUiLCJfYSR1bmRlcmxheUNvbG9yIiwidW5kZXJsYXlDb2xvciIsIm9uUHJlc3MiLCJvbkxvbmdQcmVzcyIsInNvdXJjZSIsInByb3BzIiwianN4IiwiVG91Y2hhYmxlSGlnaGxpZ2h0Iiwic3R5bGVzIiwiYWNjZXNzb3J5Iiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJjaGlsZHJlbiIsIlZpZXciLCJkZWZhdWx0IiwiX2V4dGVuZHMyIiwibmFtZSIsInR5cGUiLCJjb2xvciIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJwb3NpdGlvbiIsImJvdHRvbSIsInJpZ2h0IiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwiYmFja2dyb3VuZENvbG9yIiwiUGxhdGZvcm0iLCJzZWxlY3QiLCJhbmRyb2lkIiwiZWxldmF0aW9uIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJzaGFkb3dSYWRpdXMiLCJzaGFkb3dPcGFjaXR5IiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQWNjZXNzb3J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUb3VjaGFibGVIaWdobGlnaHQsIFZpZXcsIFBsYXRmb3JtLCBTdHlsZVNoZWV0LCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IEltYWdlIGZyb20gJy4uL2ltYWdlL0ltYWdlJztcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb25zL0ljb24nO1xuY29uc3QgQWNjZXNzb3J5ID0gKF9hKSA9PiB7XG4gICAgdmFyIHsgc2l6ZSA9IDEwLCBzdHlsZSwgdW5kZXJsYXlDb2xvciA9ICcjMDAwJywgb25QcmVzcywgb25Mb25nUHJlc3MsIHNvdXJjZSB9ID0gX2EsIHByb3BzID0gX19yZXN0KF9hLCBbXCJzaXplXCIsIFwic3R5bGVcIiwgXCJ1bmRlcmxheUNvbG9yXCIsIFwib25QcmVzc1wiLCBcIm9uTG9uZ1ByZXNzXCIsIFwic291cmNlXCJdKTtcbiAgICByZXR1cm4gKDxUb3VjaGFibGVIaWdobGlnaHQgc3R5bGU9e1tcbiAgICAgICAgc3R5bGVzLmFjY2Vzc29yeSxcbiAgICAgICAge1xuICAgICAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IHNpemUgLyAyLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZSxcbiAgICBdfSB1bmRlcmxheUNvbG9yPXt1bmRlcmxheUNvbG9yfSBvblByZXNzPXtvblByZXNzfSBvbkxvbmdQcmVzcz17b25Mb25nUHJlc3N9PlxuICAgICAgPFZpZXc+XG4gICAgICAgIHtzb3VyY2UgPyAoPEltYWdlIHNvdXJjZT17c291cmNlfSBzdHlsZT17e1xuICAgICAgICB3aWR0aDogc2l6ZSxcbiAgICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgICBib3JkZXJSYWRpdXM6IHNpemUgLyAyLFxuICAgIH19IHsuLi5wcm9wc30vPikgOiAoPEljb24gbmFtZT1cIm1vZGUtZWRpdFwiIHR5cGU9XCJtYXRlcmlhbFwiIGNvbG9yPVwiI2ZmZlwiIHNpemU9e3NpemUgKiAwLjh9IHsuLi5wcm9wc30vPil9XG4gICAgICA8L1ZpZXc+XG4gICAgPC9Ub3VjaGFibGVIaWdobGlnaHQ+KTtcbn07XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgYWNjZXNzb3J5OiBPYmplY3QuYXNzaWduKHsgcG9zaXRpb246ICdhYnNvbHV0ZScsIGJvdHRvbTogMCwgcmlnaHQ6IDAsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsIGJhY2tncm91bmRDb2xvcjogJyNhYWEnIH0sIFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgIGFuZHJvaWQ6IHtcbiAgICAgICAgICAgIGVsZXZhdGlvbjogMSxcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgc2hhZG93Q29sb3I6ICcjMDAwJyxcbiAgICAgICAgICAgIHNoYWRvd09mZnNldDogeyB3aWR0aDogMSwgaGVpZ2h0OiAxIH0sXG4gICAgICAgICAgICBzaGFkb3dSYWRpdXM6IDIsXG4gICAgICAgICAgICBzaGFkb3dPcGFjaXR5OiAwLjUsXG4gICAgICAgIH0sXG4gICAgfSkpLFxufSk7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQWNjZXNzb3J5LCAnQXZhdGFyQWNjZXNzb3J5Jyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQVdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLEtBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFpQyxJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFmakMsSUFBSU0sTUFBTSxHQUFJLElBQUksSUFBSSxJQUFJLENBQUNBLE1BQU0sSUFBSyxVQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJQyxDQUFDLElBQUlILENBQUMsRUFBRSxJQUFJSSxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDLElBQUlGLENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQy9FRCxDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHSCxDQUFDLENBQUNHLENBQUMsQ0FBQztFQUNmLElBQUlILENBQUMsSUFBSSxJQUFJLElBQUksT0FBT0ksTUFBTSxDQUFDSyxxQkFBcUIsS0FBSyxVQUFVLEVBQy9ELEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRVAsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFxQixDQUFDVCxDQUFDLENBQUMsRUFBRVUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDcEUsSUFBSVQsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUlOLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDTyxvQkFBb0IsQ0FBQ0wsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsRUFDMUVSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxHQUFHVixDQUFDLENBQUNHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUM7RUFDekI7RUFDSixPQUFPUixDQUFDO0FBQ1osQ0FBQztBQU1ELElBQU1XLFNBQVMsR0FBRyxTQUFaQSxTQUFTQSxDQUFJQyxFQUFFLEVBQUs7RUFDdEIsSUFBQUMsT0FBQSxHQUFpRkQsRUFBRSxDQUE3RUUsSUFBSTtJQUFKQSxJQUFJLEdBQUFELE9BQUEsY0FBRyxFQUFFLEdBQUFBLE9BQUE7SUFBRUUsS0FBSyxHQUEyREgsRUFBRSxDQUFsRUcsS0FBSztJQUFBQyxnQkFBQSxHQUEyREosRUFBRSxDQUEzREssYUFBYTtJQUFiQSxhQUFhLEdBQUFELGdCQUFBLGNBQUcsTUFBTSxHQUFBQSxnQkFBQTtJQUFFRSxPQUFPLEdBQTBCTixFQUFFLENBQW5DTSxPQUFPO0lBQUVDLFdBQVcsR0FBYVAsRUFBRSxDQUExQk8sV0FBVztJQUFFQyxNQUFNLEdBQUtSLEVBQUUsQ0FBYlEsTUFBTTtJQUFTQyxLQUFLLEdBQUd4QixNQUFNLENBQUNlLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7RUFDL0ssT0FBUSxJQUFBaEIsV0FBQSxDQUFBMEIsR0FBQSxFQUFDOUIsWUFBQSxDQUFBK0Isa0JBQWtCO0lBQUNSLEtBQUssRUFBRSxDQUMvQlMsTUFBTSxDQUFDQyxTQUFTLEVBQ2hCO01BQ0lDLEtBQUssRUFBRVosSUFBSTtNQUNYYSxNQUFNLEVBQUViLElBQUk7TUFDWmMsWUFBWSxFQUFFZCxJQUFJLEdBQUc7SUFDekIsQ0FBQyxFQUNEQyxLQUFLLENBQ1A7SUFBQ0UsYUFBYSxFQUFFQSxhQUFjO0lBQUNDLE9BQU8sRUFBRUEsT0FBUTtJQUFDQyxXQUFXLEVBQUVBLFdBQVk7SUFBQVUsUUFBQSxFQUMxRSxJQUFBakMsV0FBQSxDQUFBMEIsR0FBQSxFQUFDOUIsWUFBQSxDQUFBc0MsSUFBSTtNQUFBRCxRQUFBLEVBQ0ZULE1BQU0sR0FBSSxJQUFBeEIsV0FBQSxDQUFBMEIsR0FBQSxFQUFDNUIsTUFBQSxDQUFBcUMsT0FBSyxNQUFBQyxTQUFBLENBQUFELE9BQUE7UUFBQ1gsTUFBTSxFQUFFQSxNQUFPO1FBQUNMLEtBQUssRUFBRTtVQUN6Q1csS0FBSyxFQUFFWixJQUFJO1VBQ1hhLE1BQU0sRUFBRWIsSUFBSTtVQUNaYyxZQUFZLEVBQUVkLElBQUksR0FBRztRQUN6QjtNQUFFLEdBQUtPLEtBQUssRUFBRyxHQUFLLElBQUF6QixXQUFBLENBQUEwQixHQUFBLEVBQUMzQixLQUFBLENBQUFvQyxPQUFJLE1BQUFDLFNBQUEsQ0FBQUQsT0FBQTtRQUFDRSxJQUFJLEVBQUMsV0FBVztRQUFDQyxJQUFJLEVBQUMsVUFBVTtRQUFDQyxLQUFLLEVBQUMsTUFBTTtRQUFDckIsSUFBSSxFQUFFQSxJQUFJLEdBQUc7TUFBSSxHQUFLTyxLQUFLO0lBQUk7RUFDOUYsRUFDWTtBQUN6QixDQUFDO0FBQ0QsSUFBTUcsTUFBTSxHQUFHWSx1QkFBVSxDQUFDQyxNQUFNLENBQUM7RUFDN0JaLFNBQVMsRUFBRSxJQUFBTyxTQUFBLENBQUFELE9BQUEsRUFBYztJQUFFTyxRQUFRLEVBQUUsVUFBVTtJQUFFQyxNQUFNLEVBQUUsQ0FBQztJQUFFQyxLQUFLLEVBQUUsQ0FBQztJQUFFQyxVQUFVLEVBQUUsUUFBUTtJQUFFQyxjQUFjLEVBQUUsUUFBUTtJQUFFQyxlQUFlLEVBQUU7RUFBTyxDQUFDLEVBQUVDLHFCQUFRLENBQUNDLE1BQU0sQ0FBQztJQUM3SkMsT0FBTyxFQUFFO01BQ0xDLFNBQVMsRUFBRTtJQUNmLENBQUM7SUFDRGhCLE9BQU8sRUFBRTtNQUNMaUIsV0FBVyxFQUFFLE1BQU07TUFDbkJDLFlBQVksRUFBRTtRQUFFdkIsS0FBSyxFQUFFLENBQUM7UUFBRUMsTUFBTSxFQUFFO01BQUUsQ0FBQztNQUNyQ3VCLFlBQVksRUFBRSxDQUFDO01BQ2ZDLGFBQWEsRUFBRTtJQUNuQjtFQUNKLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FDWSxJQUFBQyxpQkFBUyxFQUFDMUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDO0FBQUEyQyxPQUFBLENBQUF2QixPQUFBLEdBQUFxQixRQUFBIn0=