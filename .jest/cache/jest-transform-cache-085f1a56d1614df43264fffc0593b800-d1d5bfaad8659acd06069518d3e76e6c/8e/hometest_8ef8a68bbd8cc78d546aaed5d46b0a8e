c8a6399cb223cbcf2871f2bc7651ec5d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));
var _reactNative = require("@testing-library/react-native");
var _Home = _interopRequireDefault(require("../Home"));
var _actions = require("../../redux/actions");
var _hotels_response = _interopRequireDefault(require("./fixtures/hotels_response"));
var _setup = _interopRequireDefault(require("../setup"));
var mockStore = (0, _reduxMockStore.default)();
var store = mockStore({
  hotel: {
    hotels: _hotels_response.default.hotels
  }
});
describe('Test homepage screen', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    (0, _setup.default)(_react.default.createElement(_Home.default, {
      hotels: _hotels_response.default.hotels
    }), store);
  });
  afterEach(_reactNative.cleanup);
  it('fetches the hotels on mount', function () {
    var expectedAction = (0, _actions.getHotels)({
      q: '',
      page: 1
    });
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith(expectedAction);
  });
  it('should display the list of hotels', function () {
    expect(_reactNative.screen.getByTestId('search-box')).toBeDefined();
  });
  it('should render a list of hotels', function () {
    _hotels_response.default.hotels.forEach(function (hotel) {
      var hotelName = _reactNative.screen.getByText(hotel.name);
      var addressElement = _reactNative.screen.getByText(hotel.short_address);
      expect(hotelName).toBeDefined();
      expect(addressElement).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWR1eE1vY2tTdG9yZSIsIl9yZWFjdE5hdGl2ZSIsIl9Ib21lIiwiX2FjdGlvbnMiLCJfaG90ZWxzX3Jlc3BvbnNlIiwiX3NldHVwIiwibW9ja1N0b3JlIiwiY29uZmlndXJlU3RvcmUiLCJzdG9yZSIsImhvdGVsIiwiaG90ZWxzIiwiaG90ZWxzX3Jlc3BvbnNlIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiZGlzcGF0Y2giLCJqZXN0IiwiZm4iLCJTZXR1cCIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiYWZ0ZXJFYWNoIiwiY2xlYW51cCIsIml0IiwiZXhwZWN0ZWRBY3Rpb24iLCJnZXRIb3RlbHMiLCJxIiwicGFnZSIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlRGVmaW5lZCIsImZvckVhY2giLCJob3RlbE5hbWUiLCJnZXRCeVRleHQiLCJuYW1lIiwiYWRkcmVzc0VsZW1lbnQiLCJzaG9ydF9hZGRyZXNzIl0sInNvdXJjZXMiOlsiaG9tZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNvbmZpZ3VyZVN0b3JlIGZyb20gJ3JlZHV4LW1vY2stc3RvcmUnO1xuaW1wb3J0IHtjbGVhbnVwLCBzY3JlZW59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IEhvbWUgZnJvbSAnLi4vSG9tZSc7XG5pbXBvcnQge2dldEhvdGVsc30gZnJvbSAnLi4vLi4vcmVkdXgvYWN0aW9ucyc7XG5pbXBvcnQgaG90ZWxzX3Jlc3BvbnNlIGZyb20gJy4vZml4dHVyZXMvaG90ZWxzX3Jlc3BvbnNlJztcbmltcG9ydCBTZXR1cCBmcm9tICcuLi9zZXR1cCc7XG5cbmxldCBtb2NrU3RvcmUgPSBjb25maWd1cmVTdG9yZSgpO1xuXG5jb25zdCBzdG9yZSA9IG1vY2tTdG9yZSh7XG4gIGhvdGVsOiB7XG4gICAgaG90ZWxzOiBob3RlbHNfcmVzcG9uc2UuaG90ZWxzLFxuICB9LFxufSk7XG5cbmRlc2NyaWJlKCdUZXN0IGhvbWVwYWdlIHNjcmVlbicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RvcmUuZGlzcGF0Y2ggPSBqZXN0LmZuKCk7XG4gICAgU2V0dXAoPEhvbWUgaG90ZWxzPXtob3RlbHNfcmVzcG9uc2UuaG90ZWxzfSAvPiwgc3RvcmUpO1xuICB9KTtcblxuICBhZnRlckVhY2goY2xlYW51cCk7XG5cbiAgaXQoJ2ZldGNoZXMgdGhlIGhvdGVscyBvbiBtb3VudCcsICgpID0+IHtcbiAgICBjb25zdCBleHBlY3RlZEFjdGlvbiA9IGdldEhvdGVscyh7cTogJycsIHBhZ2U6IDF9KTtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdGVkQWN0aW9uKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkaXNwbGF5IHRoZSBsaXN0IG9mIGhvdGVscycsICgpID0+IHtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdzZWFyY2gtYm94JykpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGEgbGlzdCBvZiBob3RlbHMnLCAoKSA9PiB7XG4gICAgaG90ZWxzX3Jlc3BvbnNlLmhvdGVscy5mb3JFYWNoKGhvdGVsID0+IHtcbiAgICAgIGNvbnN0IGhvdGVsTmFtZSA9IHNjcmVlbi5nZXRCeVRleHQoaG90ZWwubmFtZSk7XG4gICAgICBjb25zdCBhZGRyZXNzRWxlbWVudCA9IHNjcmVlbi5nZXRCeVRleHQoaG90ZWwuc2hvcnRfYWRkcmVzcyk7XG4gICAgICBleHBlY3QoaG90ZWxOYW1lKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGFkZHJlc3NFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxlQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFBRyxLQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxnQkFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sTUFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBSU8sU0FBUyxHQUFHLElBQUFDLHVCQUFjLEdBQUU7QUFFaEMsSUFBTUMsS0FBSyxHQUFHRixTQUFTLENBQUM7RUFDdEJHLEtBQUssRUFBRTtJQUNMQyxNQUFNLEVBQUVDLHdCQUFlLENBQUNEO0VBQzFCO0FBQ0YsQ0FBQyxDQUFDO0FBRUZFLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxZQUFNO0VBQ3JDQyxVQUFVLENBQUMsWUFBTTtJQUNmTCxLQUFLLENBQUNNLFFBQVEsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDMUIsSUFBQUMsY0FBSyxFQUFDcEIsTUFBQSxDQUFBcUIsT0FBQSxDQUFBQyxhQUFBLENBQUNqQixLQUFBLENBQUFnQixPQUFJO01BQUNSLE1BQU0sRUFBRUMsd0JBQWUsQ0FBQ0Q7SUFBTyxFQUFHLEVBQUVGLEtBQUssQ0FBQztFQUN4RCxDQUFDLENBQUM7RUFFRlksU0FBUyxDQUFDQyxvQkFBTyxDQUFDO0VBRWxCQyxFQUFFLENBQUMsNkJBQTZCLEVBQUUsWUFBTTtJQUN0QyxJQUFNQyxjQUFjLEdBQUcsSUFBQUMsa0JBQVMsRUFBQztNQUFDQyxDQUFDLEVBQUUsRUFBRTtNQUFFQyxJQUFJLEVBQUU7SUFBQyxDQUFDLENBQUM7SUFDbERDLE1BQU0sQ0FBQ25CLEtBQUssQ0FBQ00sUUFBUSxDQUFDLENBQUNjLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUMvQ0QsTUFBTSxDQUFDbkIsS0FBSyxDQUFDTSxRQUFRLENBQUMsQ0FBQ2Usb0JBQW9CLENBQUNOLGNBQWMsQ0FBQztFQUM3RCxDQUFDLENBQUM7RUFFRkQsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07SUFDNUNLLE1BQU0sQ0FBQ0csbUJBQU0sQ0FBQ0MsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNDLFdBQVcsRUFBRTtFQUN4RCxDQUFDLENBQUM7RUFFRlYsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLFlBQU07SUFDekNYLHdCQUFlLENBQUNELE1BQU0sQ0FBQ3VCLE9BQU8sQ0FBQyxVQUFBeEIsS0FBSyxFQUFJO01BQ3RDLElBQU15QixTQUFTLEdBQUdKLG1CQUFNLENBQUNLLFNBQVMsQ0FBQzFCLEtBQUssQ0FBQzJCLElBQUksQ0FBQztNQUM5QyxJQUFNQyxjQUFjLEdBQUdQLG1CQUFNLENBQUNLLFNBQVMsQ0FBQzFCLEtBQUssQ0FBQzZCLGFBQWEsQ0FBQztNQUM1RFgsTUFBTSxDQUFDTyxTQUFTLENBQUMsQ0FBQ0YsV0FBVyxFQUFFO01BQy9CTCxNQUFNLENBQUNVLGNBQWMsQ0FBQyxDQUFDTCxXQUFXLEVBQUU7SUFDdEMsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=