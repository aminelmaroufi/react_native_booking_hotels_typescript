09b6e02572845666966b373810d2ca6c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _normalizeText = _interopRequireDefault(require("../helpers/normalizeText"));
var _config = require("../config");
var _Text = _interopRequireDefault(require("../text/Text"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var CardFeaturedTitle = function CardFeaturedTitle(_a) {
  var _b;
  var theme = _a.theme,
    style = _a.style,
    props = __rest(_a, ["theme", "style"]);
  return _react.default.createElement(_Text.default, (0, _extends2.default)({
    style: _reactNative.StyleSheet.flatten([(0, _extends2.default)({
      fontSize: (0, _normalizeText.default)(18),
      marginBottom: 8,
      color: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.white
    }, _reactNative.Platform.select({
      android: (0, _extends2.default)({}, _config.fonts.android.black),
      default: {
        fontWeight: '800'
      }
    })), style])
  }, props));
};
var _default = (0, _config.withTheme)(CardFeaturedTitle, 'CardFeaturedTitle');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9ub3JtYWxpemVUZXh0IiwiX2NvbmZpZyIsIl9UZXh0IiwiX19yZXN0IiwicyIsImUiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJDYXJkRmVhdHVyZWRUaXRsZSIsIl9hIiwiX2IiLCJ0aGVtZSIsInN0eWxlIiwicHJvcHMiLCJkZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsIl9leHRlbmRzMiIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwiZm9udFNpemUiLCJub3JtYWxpemUiLCJtYXJnaW5Cb3R0b20iLCJjb2xvciIsImNvbG9ycyIsIndoaXRlIiwiUGxhdGZvcm0iLCJzZWxlY3QiLCJhbmRyb2lkIiwiZm9udHMiLCJibGFjayIsImZvbnRXZWlnaHQiLCJfZGVmYXVsdCIsIndpdGhUaGVtZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJDYXJkRmVhdHVyZWRUaXRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUGxhdGZvcm0sIFN0eWxlU2hlZXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IG5vcm1hbGl6ZSBmcm9tICcuLi9oZWxwZXJzL25vcm1hbGl6ZVRleHQnO1xuaW1wb3J0IHsgZm9udHMsIHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgVGV4dCBmcm9tICcuLi90ZXh0L1RleHQnO1xuY29uc3QgQ2FyZEZlYXR1cmVkVGl0bGUgPSAoX2EpID0+IHtcbiAgICB2YXIgX2I7XG4gICAgdmFyIHsgdGhlbWUsIHN0eWxlIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcInRoZW1lXCIsIFwic3R5bGVcIl0pO1xuICAgIHJldHVybiAoPFRleHQgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgIE9iamVjdC5hc3NpZ24oeyBmb250U2l6ZTogbm9ybWFsaXplKDE4KSwgbWFyZ2luQm90dG9tOiA4LCBjb2xvcjogKF9iID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLndoaXRlIH0sIFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgICAgICBhbmRyb2lkOiBPYmplY3QuYXNzaWduKHt9LCBmb250cy5hbmRyb2lkLmJsYWNrKSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnODAwJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pKSxcbiAgICAgICAgc3R5bGUsXG4gICAgXSl9IHsuLi5wcm9wc30vPik7XG59O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKENhcmRGZWF0dXJlZFRpdGxlLCAnQ2FyZEZlYXR1cmVkVGl0bGUnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFXQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxjQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxPQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxLQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFmQSxJQUFJSyxNQUFNLEdBQUksVUFBUSxTQUFLQSxNQUFNLElBQUssVUFBVUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFDbEQsSUFBSUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNWLEtBQUssSUFBSUMsQ0FBQyxJQUFJSCxDQUFDLEVBQUUsSUFBSUksTUFBTSxDQUFDQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQyxJQUFJRixDQUFDLENBQUNPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUMvRUQsQ0FBQyxDQUFDQyxDQUFDLENBQUMsR0FBR0gsQ0FBQyxDQUFDRyxDQUFDLENBQUM7RUFDZixJQUFJSCxDQUFDLElBQUksSUFBSSxJQUFJLE9BQU9JLE1BQU0sQ0FBQ0sscUJBQXFCLEtBQUssVUFBVSxFQUMvRCxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVQLENBQUMsR0FBR0MsTUFBTSxDQUFDSyxxQkFBcUIsQ0FBQ1QsQ0FBQyxDQUFDLEVBQUVVLENBQUMsR0FBR1AsQ0FBQyxDQUFDUSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ3BFLElBQUlULENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJTixNQUFNLENBQUNDLFNBQVMsQ0FBQ08sb0JBQW9CLENBQUNMLElBQUksQ0FBQ1AsQ0FBQyxFQUFFRyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEVBQzFFUixDQUFDLENBQUNDLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBR1YsQ0FBQyxDQUFDRyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDO0VBQ3pCO0VBQ0osT0FBT1IsQ0FBQztBQUNaLENBQUM7QUFNRCxJQUFNVyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQWlCQSxDQUFJQyxFQUFFLEVBQUs7RUFDOUIsSUFBSUMsRUFBRTtFQUNOLElBQU1DLEtBQUssR0FBWUYsRUFBRSxDQUFuQkUsS0FBSztJQUFFQyxLQUFLLEdBQUtILEVBQUUsQ0FBWkcsS0FBSztJQUFTQyxLQUFLLEdBQUduQixNQUFNLENBQUNlLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztFQUNqRSxPQUFRdEIsTUFBQSxDQUFBMkIsT0FBQSxDQUFBQyxhQUFBLENBQUN0QixLQUFBLENBQUFxQixPQUFJLE1BQUFFLFNBQUEsQ0FBQUYsT0FBQTtJQUFDRixLQUFLLEVBQUVLLHVCQUFVLENBQUNDLE9BQU8sQ0FBQyxDQUNwQyxJQUFBRixTQUFBLENBQUFGLE9BQUEsRUFBYztNQUFFSyxRQUFRLEVBQUUsSUFBQUMsc0JBQVMsRUFBQyxFQUFFLENBQUM7TUFBRUMsWUFBWSxFQUFFLENBQUM7TUFBRUMsS0FBSyxFQUFFLENBQUNaLEVBQUUsR0FBR0MsS0FBSyxLQUFLLElBQUksSUFBSUEsS0FBSyxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxLQUFLLENBQUNZLE1BQU0sTUFBTSxJQUFJLElBQUliLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBR0EsRUFBRSxDQUFDYztJQUFNLENBQUMsRUFBRUMscUJBQVEsQ0FBQ0MsTUFBTSxDQUFDO01BQ2hNQyxPQUFPLEVBQUUsSUFBQVgsU0FBQSxDQUFBRixPQUFBLEVBQWMsQ0FBQyxDQUFDLEVBQUVjLGFBQUssQ0FBQ0QsT0FBTyxDQUFDRSxLQUFLLENBQUM7TUFDL0NmLE9BQU8sRUFBRTtRQUNMZ0IsVUFBVSxFQUFFO01BQ2hCO0lBQ0osQ0FBQyxDQUFDLENBQUMsRUFDSGxCLEtBQUssQ0FDUjtFQUFFLEdBQUtDLEtBQUssRUFBRztBQUNwQixDQUFDO0FBQUMsSUFBQWtCLFFBQUEsR0FDYSxJQUFBQyxpQkFBUyxFQUFDeEIsaUJBQWlCLEVBQUUsbUJBQW1CLENBQUM7QUFBQXlCLE9BQUEsQ0FBQW5CLE9BQUEsR0FBQWlCLFFBQUEifQ==