ce72ffb521f76c82fa48c4b8defed33a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _components = require("@ui-kitten/components");
var _FontAwesome = _interopRequireDefault(require("react-native-vector-icons/FontAwesome"));
var _reactRedux = require("react-redux");
var _operators = require("rxjs/operators");
var _rxjs = require("rxjs");
var _native = require("@react-navigation/native");
var _actions = require("../redux/actions");
var _HotelItem = require("../components/home/HotelItem");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var Home = function Home(props) {
  var navigation = (0, _native.useNavigation)();
  var dispatch = (0, _reactRedux.useDispatch)();
  var _useSelector = (0, _reactRedux.useSelector)(function (state) {
      return state.hotel;
    }),
    hotels = _useSelector.hotels,
    pages = _useSelector.pages,
    page = _useSelector.page;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    refreshing = _useState2[0],
    setRefreshing = _useState2[1];
  var _useState3 = (0, _react.useState)(function () {
      return new _rxjs.Subject();
    }),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    searchTerm = _useState4[0],
    setSearchTerm = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    q = _useState6[0],
    setTermText = _useState6[1];
  var SearchIcon = function SearchIcon() {
    return _react.default.createElement(_FontAwesome.default, {
      style: styles.searchIcon,
      name: "search",
      size: 20,
      color: "#444"
    });
  };
  (0, _react.useEffect)(function () {
    dispatch((0, _actions.getHotels)({
      q: '',
      page: 1
    }));
  }, []);
  (0, _react.useEffect)(function () {
    setRefreshing(false);
  }, [hotels]);
  (0, _react.useEffect)(function () {
    var subscription = searchTerm.pipe((0, _operators.debounceTime)(300)).subscribe(function (term) {
      if (term.length === 0 || term.length > 2) {
        var params = {
          q: term,
          page: 1
        };
        dispatch((0, _actions.getHotels)(params));
      }
    });
    return function () {
      subscription.unsubscribe();
    };
  }, [searchTerm]);
  (0, _react.useEffect)(function () {
    searchTerm.next(q);
  }, [q]);
  var _renderItem = function _renderItem(_ref) {
    var item = _ref.item;
    return _react.default.createElement(_HotelItem.HotelItem, {
      item: item,
      onSelectHotel: onSelectHotel
    });
  };
  var onSelectHotel = function onSelectHotel(item) {
    dispatch((0, _actions.selectHotel)(item));
    navigation == null ? void 0 : navigation.navigate('HotelDetails');
  };
  var _handleRefresh = function _handleRefresh() {
    console.log('refreshing...');
    setRefreshing(true);
    dispatch((0, _actions.getMoreHotels)({
      q: '',
      page: 1
    }));
  };
  var onLoadMore = function onLoadMore() {
    if (page < pages) {
      dispatch((0, _actions.getMoreHotels)({
        q: '',
        page: page + 1
      }));
    }
  };
  var do_search = function do_search() {};
  return _react.default.createElement(_components.Layout, {
    style: styles.container
  }, _react.default.createElement(_components.Input, {
    testID: "search-box",
    placeholder: "Search hotel by name, city ....",
    accessoryRight: SearchIcon,
    onChangeText: function onChangeText(nextValue) {
      return setTermText(nextValue);
    },
    onSubmitEditing: function onSubmitEditing() {
      return do_search();
    },
    style: styles.searchInput
  }), hotels.length > 0 && _react.default.createElement(_reactNative.FlatList, {
    data: hotels,
    numColumns: 1,
    keyExtractor: function keyExtractor(item) {
      return item._id;
    },
    renderItem: _renderItem,
    onEndReachedThreshold: 0.7,
    onEndReached: onLoadMore,
    refreshing: refreshing,
    onRefresh: _handleRefresh
  }));
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 10,
    paddingTop: 0
  },
  searchInput: {
    backgroundColor: '#ddd',
    borderRadius: 100,
    marginTop: 10
  },
  searchIcon: {
    marginRight: 5,
    color: '#888'
  },
  hotelRow: {
    flexDirection: 'row',
    padding: 10,
    paddingBottom: 15,
    borderBottomWidth: 3,
    borderBottomColor: '#f4ab49'
  },
  row: {
    flexDirection: 'row',
    padding: 10
  },
  info: {
    flex: 1,
    padding: 10
  },
  title: {
    fontSize: 16,
    color: '#000',
    fontWeight: 'bold',
    marginRight: 7
  },
  adress: {
    fontSize: 14,
    color: '#000'
  },
  room: {
    fontSize: 12,
    color: '#000'
  },
  price: {
    fontSize: 17,
    fontWeight: 'bold',
    color: '#000',
    marginTop: 5
  },
  typeStyle: {
    alignItems: 'flex-end',
    position: 'absolute',
    bottom: 5,
    right: 10
  },
  imageStyle: {
    height: 190,
    width: 130
  },
  iconAdressStyle: {
    marginRight: 5,
    marginTop: 2
  }
});
var _default = Home;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,