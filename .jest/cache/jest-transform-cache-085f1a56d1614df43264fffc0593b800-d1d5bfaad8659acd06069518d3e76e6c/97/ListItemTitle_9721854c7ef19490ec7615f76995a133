a86955c5ba55bc63e62f7ecdddea26ad
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Text = _interopRequireDefault(require("../text/Text"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ANDROID_SECONDARY = 'rgba(0, 0, 0, 0.54)';
var ListItemTitle = function ListItemTitle(_a) {
  var style = _a.style,
    right = _a.right,
    children = _a.children,
    props = __rest(_a, ["style", "right", "children"]);
  return (0, _jsxRuntime.jsx)(_Text.default, (0, _extends2.default)({
    testID: "listItemTitle",
    style: _reactNative.StyleSheet.flatten([styles.title, right && styles.rightTitle, style])
  }, props, {
    children: children
  }));
};
var styles = _reactNative.StyleSheet.create({
  title: (0, _extends2.default)({
    backgroundColor: 'transparent'
  }, _reactNative.Platform.select({
    ios: {
      fontSize: 17
    },
    default: {
      fontSize: 16
    }
  })),
  rightTitle: {
    color: ANDROID_SECONDARY
  }
});
var _default = (0, _config.withTheme)(ListItemTitle, 'ListItemTitle');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfVGV4dCIsIl9qc3hSdW50aW1lIiwiX19yZXN0IiwicyIsImUiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJBTkRST0lEX1NFQ09OREFSWSIsIkxpc3RJdGVtVGl0bGUiLCJfYSIsInN0eWxlIiwicmlnaHQiLCJjaGlsZHJlbiIsInByb3BzIiwianN4IiwiZGVmYXVsdCIsIl9leHRlbmRzMiIsInRlc3RJRCIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwic3R5bGVzIiwidGl0bGUiLCJyaWdodFRpdGxlIiwiY3JlYXRlIiwiYmFja2dyb3VuZENvbG9yIiwiUGxhdGZvcm0iLCJzZWxlY3QiLCJpb3MiLCJmb250U2l6ZSIsImNvbG9yIiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiTGlzdEl0ZW1UaXRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgUGxhdGZvcm0gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCBUZXh0IGZyb20gJy4uL3RleHQvVGV4dCc7XG5jb25zdCBBTkRST0lEX1NFQ09OREFSWSA9ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJztcbmNvbnN0IExpc3RJdGVtVGl0bGUgPSAoX2EpID0+IHtcbiAgICB2YXIgeyBzdHlsZSwgcmlnaHQsIGNoaWxkcmVuIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcInN0eWxlXCIsIFwicmlnaHRcIiwgXCJjaGlsZHJlblwiXSk7XG4gICAgcmV0dXJuICg8VGV4dCB0ZXN0SUQ9XCJsaXN0SXRlbVRpdGxlXCIgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgIHN0eWxlcy50aXRsZSxcbiAgICAgICAgcmlnaHQgJiYgc3R5bGVzLnJpZ2h0VGl0bGUsXG4gICAgICAgIHN0eWxlLFxuICAgIF0pfSB7Li4ucHJvcHN9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvVGV4dD4pO1xufTtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICB0aXRsZTogT2JqZWN0LmFzc2lnbih7IGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICBpb3M6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAxNyxcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgICB9LFxuICAgIH0pKSxcbiAgICByaWdodFRpdGxlOiB7XG4gICAgICAgIGNvbG9yOiBBTkRST0lEX1NFQ09OREFSWSxcbiAgICB9LFxufSk7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoTGlzdEl0ZW1UaXRsZSwgJ0xpc3RJdGVtVGl0bGUnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBV0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsS0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQWdDLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQWRoQyxJQUFJSyxNQUFNLEdBQUksSUFBSSxJQUFJLElBQUksQ0FBQ0EsTUFBTSxJQUFLLFVBQVVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ2xELElBQUlDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDVixLQUFLLElBQUlDLENBQUMsSUFBSUgsQ0FBQyxFQUFFLElBQUlJLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1AsQ0FBQyxFQUFFRyxDQUFDLENBQUMsSUFBSUYsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDL0VELENBQUMsQ0FBQ0MsQ0FBQyxDQUFDLEdBQUdILENBQUMsQ0FBQ0csQ0FBQyxDQUFDO0VBQ2YsSUFBSUgsQ0FBQyxJQUFJLElBQUksSUFBSSxPQUFPSSxNQUFNLENBQUNLLHFCQUFxQixLQUFLLFVBQVUsRUFDL0QsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFUCxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0sscUJBQXFCLENBQUNULENBQUMsQ0FBQyxFQUFFVSxDQUFDLEdBQUdQLENBQUMsQ0FBQ1EsTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRTtJQUNwRSxJQUFJVCxDQUFDLENBQUNPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSU4sTUFBTSxDQUFDQyxTQUFTLENBQUNPLG9CQUFvQixDQUFDTCxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxFQUMxRVIsQ0FBQyxDQUFDQyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEdBQUdWLENBQUMsQ0FBQ0csQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQztFQUN6QjtFQUNKLE9BQU9SLENBQUM7QUFDWixDQUFDO0FBS0QsSUFBTVcsaUJBQWlCLEdBQUcscUJBQXFCO0FBQy9DLElBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBSUMsRUFBRSxFQUFLO0VBQzFCLElBQU1DLEtBQUssR0FBc0JELEVBQUUsQ0FBN0JDLEtBQUs7SUFBRUMsS0FBSyxHQUFlRixFQUFFLENBQXRCRSxLQUFLO0lBQUVDLFFBQVEsR0FBS0gsRUFBRSxDQUFmRyxRQUFRO0lBQVNDLEtBQUssR0FBR3BCLE1BQU0sQ0FBQ2dCLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7RUFDdkYsT0FBUSxJQUFBakIsV0FBQSxDQUFBc0IsR0FBQSxFQUFDdkIsS0FBQSxDQUFBd0IsT0FBSSxNQUFBQyxTQUFBLENBQUFELE9BQUE7SUFBQ0UsTUFBTSxFQUFDLGVBQWU7SUFBQ1AsS0FBSyxFQUFFUSx1QkFBVSxDQUFDQyxPQUFPLENBQUMsQ0FDM0RDLE1BQU0sQ0FBQ0MsS0FBSyxFQUNaVixLQUFLLElBQUlTLE1BQU0sQ0FBQ0UsVUFBVSxFQUMxQlosS0FBSyxDQUNSO0VBQUUsR0FBS0csS0FBSztJQUFBRCxRQUFBLEVBQ1ZBO0VBQVEsR0FDSjtBQUNYLENBQUM7QUFDRCxJQUFNUSxNQUFNLEdBQUdGLHVCQUFVLENBQUNLLE1BQU0sQ0FBQztFQUM3QkYsS0FBSyxFQUFFLElBQUFMLFNBQUEsQ0FBQUQsT0FBQSxFQUFjO0lBQUVTLGVBQWUsRUFBRTtFQUFjLENBQUMsRUFBRUMscUJBQVEsQ0FBQ0MsTUFBTSxDQUFDO0lBQ3JFQyxHQUFHLEVBQUU7TUFDREMsUUFBUSxFQUFFO0lBQ2QsQ0FBQztJQUNEYixPQUFPLEVBQUU7TUFDTGEsUUFBUSxFQUFFO0lBQ2Q7RUFDSixDQUFDLENBQUMsQ0FBQztFQUNITixVQUFVLEVBQUU7SUFDUk8sS0FBSyxFQUFFdEI7RUFDWDtBQUNKLENBQUMsQ0FBQztBQUFDLElBQUF1QixRQUFBLEdBQ1ksSUFBQUMsaUJBQVMsRUFBQ3ZCLGFBQWEsRUFBRSxlQUFlLENBQUM7QUFBQXdCLE9BQUEsQ0FBQWpCLE9BQUEsR0FBQWUsUUFBQSJ9