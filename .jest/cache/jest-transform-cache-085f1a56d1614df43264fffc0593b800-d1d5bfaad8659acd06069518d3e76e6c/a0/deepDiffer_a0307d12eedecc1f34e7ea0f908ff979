2e200d90868df878143eded4d21633e0
'use strict';

var logListeners;
function unstable_setLogListeners(listeners) {
  logListeners = listeners;
}
var deepDiffer = function deepDiffer(one, two) {
  var maxDepthOrOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  var maybeOptions = arguments.length > 3 ? arguments[3] : undefined;
  var options = typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;
  var maxDepth = typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;
  if (maxDepth === 0) {
    return true;
  }
  if (one === two) {
    return false;
  }
  if (typeof one === 'function' && typeof two === 'function') {
    var unsafelyIgnoreFunctions = options == null ? void 0 : options.unsafelyIgnoreFunctions;
    if (unsafelyIgnoreFunctions == null) {
      if (logListeners && logListeners.onDifferentFunctionsIgnored && (!options || !('unsafelyIgnoreFunctions' in options))) {
        logListeners.onDifferentFunctionsIgnored(one.name, two.name);
      }
      unsafelyIgnoreFunctions = true;
    }
    return !unsafelyIgnoreFunctions;
  }
  if (typeof one !== 'object' || one === null) {
    return one !== two;
  }
  if (typeof two !== 'object' || two === null) {
    return true;
  }
  if (one.constructor !== two.constructor) {
    return true;
  }
  if (Array.isArray(one)) {
    var len = one.length;
    if (two.length !== len) {
      return true;
    }
    for (var ii = 0; ii < len; ii++) {
      if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
        return true;
      }
    }
  } else {
    for (var key in one) {
      if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
        return true;
      }
    }
    for (var twoKey in two) {
      if (one[twoKey] === undefined && two[twoKey] !== undefined) {
        return true;
      }
    }
  }
  return false;
};
module.exports = deepDiffer;
module.exports.unstable_setLogListeners = unstable_setLogListeners;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dMaXN0ZW5lcnMiLCJ1bnN0YWJsZV9zZXRMb2dMaXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJkZWVwRGlmZmVyIiwib25lIiwidHdvIiwibWF4RGVwdGhPck9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJtYXliZU9wdGlvbnMiLCJvcHRpb25zIiwibWF4RGVwdGgiLCJ1bnNhZmVseUlnbm9yZUZ1bmN0aW9ucyIsIm9uRGlmZmVyZW50RnVuY3Rpb25zSWdub3JlZCIsIm5hbWUiLCJjb25zdHJ1Y3RvciIsIkFycmF5IiwiaXNBcnJheSIsImxlbiIsImlpIiwia2V5IiwidHdvS2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImRlZXBEaWZmZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxubGV0IGxvZ0xpc3RlbmVycztcblxudHlwZSBMb2dMaXN0ZW5lcnMgPSB7fFxuICArb25EaWZmZXJlbnRGdW5jdGlvbnNJZ25vcmVkOiAobmFtZU9uZTogP3N0cmluZywgbmFtZVR3bzogP3N0cmluZykgPT4gdm9pZCxcbnx9O1xuXG50eXBlIE9wdGlvbnMgPSB7fCt1bnNhZmVseUlnbm9yZUZ1bmN0aW9ucz86IGJvb2xlYW58fTtcblxuZnVuY3Rpb24gdW5zdGFibGVfc2V0TG9nTGlzdGVuZXJzKGxpc3RlbmVyczogP0xvZ0xpc3RlbmVycykge1xuICBsb2dMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG59XG5cbi8qXG4gKiBAcmV0dXJucyB7Ym9vbH0gdHJ1ZSBpZiBkaWZmZXJlbnQsIGZhbHNlIGlmIGVxdWFsXG4gKi9cbmNvbnN0IGRlZXBEaWZmZXIgPSBmdW5jdGlvbihcbiAgb25lOiBhbnksXG4gIHR3bzogYW55LFxuICBtYXhEZXB0aE9yT3B0aW9uczogT3B0aW9ucyB8IG51bWJlciA9IC0xLFxuICBtYXliZU9wdGlvbnM/OiBPcHRpb25zLFxuKTogYm9vbGVhbiB7XG4gIGNvbnN0IG9wdGlvbnMgPVxuICAgIHR5cGVvZiBtYXhEZXB0aE9yT3B0aW9ucyA9PT0gJ251bWJlcicgPyBtYXliZU9wdGlvbnMgOiBtYXhEZXB0aE9yT3B0aW9ucztcbiAgY29uc3QgbWF4RGVwdGggPVxuICAgIHR5cGVvZiBtYXhEZXB0aE9yT3B0aW9ucyA9PT0gJ251bWJlcicgPyBtYXhEZXB0aE9yT3B0aW9ucyA6IC0xO1xuICBpZiAobWF4RGVwdGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAob25lID09PSB0d28pIHtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IG9uIGlkZW50aWNhbCBvYmplY3QgcmVmZXJlbmNlcyBpbnN0ZWFkIG9mIHRyYXZlcnNpbmcgdGhlbS5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBvbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHR3byA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFdlIGNvbnNpZGVyIGFsbCBmdW5jdGlvbnMgZXF1YWwgdW5sZXNzIGV4cGxpY2l0bHkgY29uZmlndXJlZCBvdGhlcndpc2VcbiAgICBsZXQgdW5zYWZlbHlJZ25vcmVGdW5jdGlvbnMgPSBvcHRpb25zPy51bnNhZmVseUlnbm9yZUZ1bmN0aW9ucztcbiAgICBpZiAodW5zYWZlbHlJZ25vcmVGdW5jdGlvbnMgPT0gbnVsbCkge1xuICAgICAgaWYgKFxuICAgICAgICBsb2dMaXN0ZW5lcnMgJiZcbiAgICAgICAgbG9nTGlzdGVuZXJzLm9uRGlmZmVyZW50RnVuY3Rpb25zSWdub3JlZCAmJlxuICAgICAgICAoIW9wdGlvbnMgfHwgISgndW5zYWZlbHlJZ25vcmVGdW5jdGlvbnMnIGluIG9wdGlvbnMpKVxuICAgICAgKSB7XG4gICAgICAgIGxvZ0xpc3RlbmVycy5vbkRpZmZlcmVudEZ1bmN0aW9uc0lnbm9yZWQob25lLm5hbWUsIHR3by5uYW1lKTtcbiAgICAgIH1cbiAgICAgIHVuc2FmZWx5SWdub3JlRnVuY3Rpb25zID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuICF1bnNhZmVseUlnbm9yZUZ1bmN0aW9ucztcbiAgfVxuICBpZiAodHlwZW9mIG9uZSAhPT0gJ29iamVjdCcgfHwgb25lID09PSBudWxsKSB7XG4gICAgLy8gUHJpbWl0aXZlcyBjYW4gYmUgZGlyZWN0bHkgY29tcGFyZWRcbiAgICByZXR1cm4gb25lICE9PSB0d287XG4gIH1cbiAgaWYgKHR5cGVvZiB0d28gIT09ICdvYmplY3QnIHx8IHR3byA9PT0gbnVsbCkge1xuICAgIC8vIFdlIGtub3cgdGhleSBhcmUgZGlmZmVyZW50IGJlY2F1c2UgdGhlIHByZXZpb3VzIGNhc2Ugd291bGQgaGF2ZSB0cmlnZ2VyZWRcbiAgICAvLyBvdGhlcndpc2UuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG9uZS5jb25zdHJ1Y3RvciAhPT0gdHdvLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkob25lKSkge1xuICAgIC8vIFdlIGtub3cgdHdvIGlzIGFsc28gYW4gYXJyYXkgYmVjYXVzZSB0aGUgY29uc3RydWN0b3JzIGFyZSBlcXVhbFxuICAgIGNvbnN0IGxlbiA9IG9uZS5sZW5ndGg7XG4gICAgaWYgKHR3by5sZW5ndGggIT09IGxlbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICAgIGlmIChkZWVwRGlmZmVyKG9uZVtpaV0sIHR3b1tpaV0sIG1heERlcHRoIC0gMSwgb3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9uZSkge1xuICAgICAgaWYgKGRlZXBEaWZmZXIob25lW2tleV0sIHR3b1trZXldLCBtYXhEZXB0aCAtIDEsIG9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHR3b0tleSBpbiB0d28pIHtcbiAgICAgIC8vIFRoZSBvbmx5IGNhc2Ugd2UgaGF2ZW4ndCBjaGVja2VkIHlldCBpcyBrZXlzIHRoYXQgYXJlIGluIHR3byBidXQgYXJlbid0XG4gICAgICAvLyBpbiBvbmUsIHdoaWNoIG1lYW5zIHRoZXkgYXJlIGRpZmZlcmVudC5cbiAgICAgIGlmIChvbmVbdHdvS2V5XSA9PT0gdW5kZWZpbmVkICYmIHR3b1t0d29LZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZGVlcERpZmZlcjtcbm1vZHVsZS5leHBvcnRzLnVuc3RhYmxlX3NldExvZ0xpc3RlbmVycyA9IHVuc3RhYmxlX3NldExvZ0xpc3RlbmVycztcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFFWixJQUFJQSxZQUFZO0FBUWhCLFNBQVNDLHdCQUF3QkEsQ0FBQ0MsU0FBd0IsRUFBRTtFQUMxREYsWUFBWSxHQUFHRSxTQUFTO0FBQzFCO0FBS0EsSUFBTUMsVUFBVSxHQUFHLFNBQWJBLFVBQVVBLENBQ2RDLEdBQVEsRUFDUkMsR0FBUSxFQUdDO0VBQUEsSUFGVEMsaUJBQW1DLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztFQUFBLElBQ3hDRyxZQUFzQixHQUFBSCxTQUFBLENBQUFDLE1BQUEsT0FBQUQsU0FBQSxNQUFBRSxTQUFBO0VBRXRCLElBQU1FLE9BQU8sR0FDWCxPQUFPTCxpQkFBaUIsS0FBSyxRQUFRLEdBQUdJLFlBQVksR0FBR0osaUJBQWlCO0VBQzFFLElBQU1NLFFBQVEsR0FDWixPQUFPTixpQkFBaUIsS0FBSyxRQUFRLEdBQUdBLGlCQUFpQixHQUFHLENBQUMsQ0FBQztFQUNoRSxJQUFJTSxRQUFRLEtBQUssQ0FBQyxFQUFFO0lBQ2xCLE9BQU8sSUFBSTtFQUNiO0VBQ0EsSUFBSVIsR0FBRyxLQUFLQyxHQUFHLEVBQUU7SUFFZixPQUFPLEtBQUs7RUFDZDtFQUNBLElBQUksT0FBT0QsR0FBRyxLQUFLLFVBQVUsSUFBSSxPQUFPQyxHQUFHLEtBQUssVUFBVSxFQUFFO0lBRTFELElBQUlRLHVCQUF1QixHQUFHRixPQUFPLG9CQUFQQSxPQUFPLENBQUVFLHVCQUF1QjtJQUM5RCxJQUFJQSx1QkFBdUIsSUFBSSxJQUFJLEVBQUU7TUFDbkMsSUFDRWIsWUFBWSxJQUNaQSxZQUFZLENBQUNjLDJCQUEyQixLQUN2QyxDQUFDSCxPQUFPLElBQUksRUFBRSx5QkFBeUIsSUFBSUEsT0FBTyxDQUFDLENBQUMsRUFDckQ7UUFDQVgsWUFBWSxDQUFDYywyQkFBMkIsQ0FBQ1YsR0FBRyxDQUFDVyxJQUFJLEVBQUVWLEdBQUcsQ0FBQ1UsSUFBSSxDQUFDO01BQzlEO01BQ0FGLHVCQUF1QixHQUFHLElBQUk7SUFDaEM7SUFDQSxPQUFPLENBQUNBLHVCQUF1QjtFQUNqQztFQUNBLElBQUksT0FBT1QsR0FBRyxLQUFLLFFBQVEsSUFBSUEsR0FBRyxLQUFLLElBQUksRUFBRTtJQUUzQyxPQUFPQSxHQUFHLEtBQUtDLEdBQUc7RUFDcEI7RUFDQSxJQUFJLE9BQU9BLEdBQUcsS0FBSyxRQUFRLElBQUlBLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFHM0MsT0FBTyxJQUFJO0VBQ2I7RUFDQSxJQUFJRCxHQUFHLENBQUNZLFdBQVcsS0FBS1gsR0FBRyxDQUFDVyxXQUFXLEVBQUU7SUFDdkMsT0FBTyxJQUFJO0VBQ2I7RUFDQSxJQUFJQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ2QsR0FBRyxDQUFDLEVBQUU7SUFFdEIsSUFBTWUsR0FBRyxHQUFHZixHQUFHLENBQUNJLE1BQU07SUFDdEIsSUFBSUgsR0FBRyxDQUFDRyxNQUFNLEtBQUtXLEdBQUcsRUFBRTtNQUN0QixPQUFPLElBQUk7SUFDYjtJQUNBLEtBQUssSUFBSUMsRUFBRSxHQUFHLENBQUMsRUFBRUEsRUFBRSxHQUFHRCxHQUFHLEVBQUVDLEVBQUUsRUFBRSxFQUFFO01BQy9CLElBQUlqQixVQUFVLENBQUNDLEdBQUcsQ0FBQ2dCLEVBQUUsQ0FBQyxFQUFFZixHQUFHLENBQUNlLEVBQUUsQ0FBQyxFQUFFUixRQUFRLEdBQUcsQ0FBQyxFQUFFRCxPQUFPLENBQUMsRUFBRTtRQUN2RCxPQUFPLElBQUk7TUFDYjtJQUNGO0VBQ0YsQ0FBQyxNQUFNO0lBQ0wsS0FBSyxJQUFNVSxHQUFHLElBQUlqQixHQUFHLEVBQUU7TUFDckIsSUFBSUQsVUFBVSxDQUFDQyxHQUFHLENBQUNpQixHQUFHLENBQUMsRUFBRWhCLEdBQUcsQ0FBQ2dCLEdBQUcsQ0FBQyxFQUFFVCxRQUFRLEdBQUcsQ0FBQyxFQUFFRCxPQUFPLENBQUMsRUFBRTtRQUN6RCxPQUFPLElBQUk7TUFDYjtJQUNGO0lBQ0EsS0FBSyxJQUFNVyxNQUFNLElBQUlqQixHQUFHLEVBQUU7TUFHeEIsSUFBSUQsR0FBRyxDQUFDa0IsTUFBTSxDQUFDLEtBQUtiLFNBQVMsSUFBSUosR0FBRyxDQUFDaUIsTUFBTSxDQUFDLEtBQUtiLFNBQVMsRUFBRTtRQUMxRCxPQUFPLElBQUk7TUFDYjtJQUNGO0VBQ0Y7RUFDQSxPQUFPLEtBQUs7QUFDZCxDQUFDO0FBRURjLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHckIsVUFBVTtBQUMzQm9CLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDdkIsd0JBQXdCLEdBQUdBLHdCQUF3QiJ9