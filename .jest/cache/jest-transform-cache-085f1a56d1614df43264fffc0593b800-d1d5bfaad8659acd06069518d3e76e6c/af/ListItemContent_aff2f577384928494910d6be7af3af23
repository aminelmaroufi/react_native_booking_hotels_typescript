2e211c4863fdd2418a2448352c6e9f2d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ListItemContent = function ListItemContent(_a) {
  var style = _a.style,
    right = _a.right,
    children = _a.children,
    props = __rest(_a, ["style", "right", "children"]);
  var containerStyle = right ? styles.rightContainer : styles.container;
  return (0, _jsxRuntime.jsx)(_reactNative.View, (0, _extends2.default)({
    style: [containerStyle, style]
  }, props, {
    children: children
  }));
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'flex-start'
  },
  rightContainer: {
    flex: 0.5,
    justifyContent: 'center',
    alignItems: 'flex-end'
  }
});
var _default = (0, _config.withTheme)(ListItemContent, 'ListItemContent');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfanN4UnVudGltZSIsIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTGlzdEl0ZW1Db250ZW50IiwiX2EiLCJzdHlsZSIsInJpZ2h0IiwiY2hpbGRyZW4iLCJwcm9wcyIsImNvbnRhaW5lclN0eWxlIiwic3R5bGVzIiwicmlnaHRDb250YWluZXIiLCJjb250YWluZXIiLCJqc3giLCJWaWV3IiwiX2V4dGVuZHMyIiwiZGVmYXVsdCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJmbGV4IiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiTGlzdEl0ZW1Db250ZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5jb25zdCBMaXN0SXRlbUNvbnRlbnQgPSAoX2EpID0+IHtcbiAgICB2YXIgeyBzdHlsZSwgcmlnaHQsIGNoaWxkcmVuIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcInN0eWxlXCIsIFwicmlnaHRcIiwgXCJjaGlsZHJlblwiXSk7XG4gICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSByaWdodCA/IHN0eWxlcy5yaWdodENvbnRhaW5lciA6IHN0eWxlcy5jb250YWluZXI7XG4gICAgcmV0dXJuICg8VmlldyBzdHlsZT17W2NvbnRhaW5lclN0eWxlLCBzdHlsZV19IHsuLi5wcm9wc30+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9WaWV3Pik7XG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgICBmbGV4OiAxLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0JyxcbiAgICB9LFxuICAgIHJpZ2h0Q29udGFpbmVyOiB7XG4gICAgICAgIGZsZXg6IDAuNSxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICAgIH0sXG59KTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShMaXN0SXRlbUNvbnRlbnQsICdMaXN0SXRlbUNv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