0a1df6c9366b57ab60ec40c85c96f670
"use strict";

var _AndroidTextInputNativeComponent = require("../../Components/TextInput/AndroidTextInputNativeComponent");
var _RCTSingelineTextInputNativeComponent = require("../../Components/TextInput/RCTSingelineTextInputNativeComponent");
var React = require('react');
var Platform = require('../../Utilities/Platform');
var _require = require('../../Renderer/shims/ReactNative'),
  findNodeHandle = _require.findNodeHandle;
var currentlyFocusedInputRef = null;
var inputs = new Set();
function currentlyFocusedInput() {
  return currentlyFocusedInputRef;
}
function currentlyFocusedField() {
  if (__DEV__) {
    console.error('currentlyFocusedField is deprecated and will be removed in a future release. Use currentlyFocusedInput');
  }
  return findNodeHandle(currentlyFocusedInputRef);
}
function focusInput(textField) {
  if (currentlyFocusedInputRef !== textField && textField != null) {
    currentlyFocusedInputRef = textField;
  }
}
function blurInput(textField) {
  if (currentlyFocusedInputRef === textField && textField != null) {
    currentlyFocusedInputRef = null;
  }
}
function focusField(textFieldID) {
  if (__DEV__) {
    console.error('focusField no longer works. Use focusInput');
  }
  return;
}
function blurField(textFieldID) {
  if (__DEV__) {
    console.error('blurField no longer works. Use blurInput');
  }
  return;
}
function focusTextInput(textField) {
  if (typeof textField === 'number') {
    if (__DEV__) {
      console.error('focusTextInput must be called with a host component. Passing a react tag is deprecated.');
    }
    return;
  }
  if (currentlyFocusedInputRef !== textField && textField != null) {
    focusInput(textField);
    if (Platform.OS === 'ios') {
      _RCTSingelineTextInputNativeComponent.Commands.focus(textField);
    } else if (Platform.OS === 'android') {
      _AndroidTextInputNativeComponent.Commands.focus(textField);
    }
  }
}
function blurTextInput(textField) {
  if (typeof textField === 'number') {
    if (__DEV__) {
      console.error('blurTextInput must be called with a host component. Passing a react tag is deprecated.');
    }
    return;
  }
  if (currentlyFocusedInputRef === textField && textField != null) {
    blurInput(textField);
    if (Platform.OS === 'ios') {
      _RCTSingelineTextInputNativeComponent.Commands.blur(textField);
    } else if (Platform.OS === 'android') {
      _AndroidTextInputNativeComponent.Commands.blur(textField);
    }
  }
}
function registerInput(textField) {
  if (typeof textField === 'number') {
    if (__DEV__) {
      console.error('registerInput must be called with a host component. Passing a react tag is deprecated.');
    }
    return;
  }
  inputs.add(textField);
}
function unregisterInput(textField) {
  if (typeof textField === 'number') {
    if (__DEV__) {
      console.error('unregisterInput must be called with a host component. Passing a react tag is deprecated.');
    }
    return;
  }
  inputs.delete(textField);
}
function isTextInput(textField) {
  if (typeof textField === 'number') {
    if (__DEV__) {
      console.error('isTextInput must be called with a host component. Passing a react tag is deprecated.');
    }
    return false;
  }
  return inputs.has(textField);
}
module.exports = {
  currentlyFocusedInput: currentlyFocusedInput,
  focusInput: focusInput,
  blurInput: blurInput,
  currentlyFocusedField: currentlyFocusedField,
  focusField: focusField,
  blurField: blurField,
  focusTextInput: focusTextInput,
  blurTextInput: blurTextInput,
  registerInput: registerInput,
  unregisterInput: unregisterInput,
  isTextInput: isTextInput
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQW5kcm9pZFRleHRJbnB1dE5hdGl2ZUNvbXBvbmVudCIsInJlcXVpcmUiLCJfUkNUU2luZ2VsaW5lVGV4dElucHV0TmF0aXZlQ29tcG9uZW50IiwiUmVhY3QiLCJQbGF0Zm9ybSIsIl9yZXF1aXJlIiwiZmluZE5vZGVIYW5kbGUiLCJjdXJyZW50bHlGb2N1c2VkSW5wdXRSZWYiLCJpbnB1dHMiLCJTZXQiLCJjdXJyZW50bHlGb2N1c2VkSW5wdXQiLCJjdXJyZW50bHlGb2N1c2VkRmllbGQiLCJfX0RFVl9fIiwiY29uc29sZSIsImVycm9yIiwiZm9jdXNJbnB1dCIsInRleHRGaWVsZCIsImJsdXJJbnB1dCIsImZvY3VzRmllbGQiLCJ0ZXh0RmllbGRJRCIsImJsdXJGaWVsZCIsImZvY3VzVGV4dElucHV0IiwiT1MiLCJpT1NUZXh0SW5wdXRDb21tYW5kcyIsImZvY3VzIiwiQW5kcm9pZFRleHRJbnB1dENvbW1hbmRzIiwiYmx1clRleHRJbnB1dCIsImJsdXIiLCJyZWdpc3RlcklucHV0IiwiYWRkIiwidW5yZWdpc3RlcklucHV0IiwiZGVsZXRlIiwiaXNUZXh0SW5wdXQiLCJoYXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVGV4dElucHV0U3RhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4vLyBUaGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciBjb29yZGluYXRpbmcgdGhlIFwiZm9jdXNlZFwiIHN0YXRlIGZvclxuLy8gVGV4dElucHV0cy4gQWxsIGNhbGxzIHJlbGF0aW5nIHRvIHRoZSBrZXlib2FyZCBzaG91bGQgYmUgZnVubmVsZWRcbi8vIHRocm91Z2ggaGVyZS5cblxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgUGxhdGZvcm0gPSByZXF1aXJlKCcuLi8uLi9VdGlsaXRpZXMvUGxhdGZvcm0nKTtcbmNvbnN0IHtmaW5kTm9kZUhhbmRsZX0gPSByZXF1aXJlKCcuLi8uLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpO1xuaW1wb3J0IHtDb21tYW5kcyBhcyBBbmRyb2lkVGV4dElucHV0Q29tbWFuZHN9IGZyb20gJy4uLy4uL0NvbXBvbmVudHMvVGV4dElucHV0L0FuZHJvaWRUZXh0SW5wdXROYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0IHtDb21tYW5kcyBhcyBpT1NUZXh0SW5wdXRDb21tYW5kc30gZnJvbSAnLi4vLi4vQ29tcG9uZW50cy9UZXh0SW5wdXQvUkNUU2luZ2VsaW5lVGV4dElucHV0TmF0aXZlQ29tcG9uZW50JztcblxuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xudHlwZSBDb21wb25lbnRSZWYgPSBSZWFjdC5FbGVtZW50UmVmPEhvc3RDb21wb25lbnQ8bWl4ZWQ+PjtcblxubGV0IGN1cnJlbnRseUZvY3VzZWRJbnB1dFJlZjogP0NvbXBvbmVudFJlZiA9IG51bGw7XG5jb25zdCBpbnB1dHMgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIGN1cnJlbnRseUZvY3VzZWRJbnB1dCgpOiA/Q29tcG9uZW50UmVmIHtcbiAgcmV0dXJuIGN1cnJlbnRseUZvY3VzZWRJbnB1dFJlZjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBJRCBvZiB0aGUgY3VycmVudGx5IGZvY3VzZWQgdGV4dCBmaWVsZCwgaWYgb25lIGV4aXN0c1xuICogSWYgbm8gdGV4dCBmaWVsZCBpcyBmb2N1c2VkIGl0IHJldHVybnMgbnVsbFxuICovXG5mdW5jdGlvbiBjdXJyZW50bHlGb2N1c2VkRmllbGQoKTogP251bWJlciB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgICdjdXJyZW50bHlGb2N1c2VkRmllbGQgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuIFVzZSBjdXJyZW50bHlGb2N1c2VkSW5wdXQnLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gZmluZE5vZGVIYW5kbGUoY3VycmVudGx5Rm9jdXNlZElucHV0UmVmKTtcbn1cblxuZnVuY3Rpb24gZm9jdXNJbnB1dCh0ZXh0RmllbGQ6ID9Db21wb25lbnRSZWYpOiB2b2lkIHtcbiAgaWYgKGN1cnJlbnRseUZvY3VzZWRJbnB1dFJlZiAhPT0gdGV4dEZpZWxkICYmIHRleHRGaWVsZCAhPSBudWxsKSB7XG4gICAgY3VycmVudGx5Rm9jdXNlZElucHV0UmVmID0gdGV4dEZpZWxkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJsdXJJbnB1dCh0ZXh0RmllbGQ6ID9Db21wb25lbnRSZWYpOiB2b2lkIHtcbiAgaWYgKGN1cnJlbnRseUZvY3VzZWRJbnB1dFJlZiA9PT0gdGV4dEZpZWxkICYmIHRleHRGaWVsZCAhPSBudWxsKSB7XG4gICAgY3VycmVudGx5Rm9jdXNlZElucHV0UmVmID0gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb2N1c0ZpZWxkKHRleHRGaWVsZElEOiA/bnVtYmVyKTogdm9pZCB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc29sZS5lcnJvcignZm9jdXNGaWVsZCBubyBsb25nZXIgd29ya3MuIFVzZSBmb2N1c0lucHV0Jyk7XG4gIH1cblxuICByZXR1cm47XG59XG5cbmZ1bmN0aW9uIGJsdXJGaWVsZCh0ZXh0RmllbGRJRDogP251bWJlcikge1xuICBpZiAoX19ERVZfXykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ2JsdXJGaWVsZCBubyBsb25nZXIgd29ya3MuIFVzZSBibHVySW5wdXQnKTtcbiAgfVxuXG4gIHJldHVybjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gVGV4dElucHV0SUQgaWQgb2YgdGhlIHRleHQgZmllbGQgdG8gZm9jdXNcbiAqIEZvY3VzZXMgdGhlIHNwZWNpZmllZCB0ZXh0IGZpZWxkXG4gKiBub29wIGlmIHRoZSB0ZXh0IGZpZWxkIHdhcyBhbHJlYWR5IGZvY3VzZWRcbiAqL1xuZnVuY3Rpb24gZm9jdXNUZXh0SW5wdXQodGV4dEZpZWxkOiA/Q29tcG9uZW50UmVmKSB7XG4gIGlmICh0eXBlb2YgdGV4dEZpZWxkID09PSAnbnVtYmVyJykge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAnZm9jdXNUZXh0SW5wdXQgbXVzdCBiZSBjYWxsZWQgd2l0aCBhIGhvc3QgY29tcG9uZW50LiBQYXNzaW5nIGEgcmVhY3QgdGFnIGlzIGRlcHJlY2F0ZWQuJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGN1cnJlbnRseUZvY3VzZWRJbnB1dFJlZiAhPT0gdGV4dEZpZWxkICYmIHRleHRGaWVsZCAhPSBudWxsKSB7XG4gICAgZm9jdXNJbnB1dCh0ZXh0RmllbGQpO1xuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgIC8vIFRoaXMgaXNuJ3QgbmVjZXNzYXJpbHkgYSBzaW5nbGUgbGluZSB0ZXh0IGlucHV0XG4gICAgICAvLyBCdXQgY29tbWFuZHMgZG9uJ3QgYWN0dWFsbHkgY2FyZSBhcyBsb25nIGFzIHRoZSB0aGluZyBiZWluZyBwYXNzZWQgaW5cbiAgICAgIC8vIGFjdHVhbGx5IGhhcyBhIGNvbW1hbmQgd2l0aCB0aGF0IG5hbWUuIFNvIHRoaXMgc2hvdWxkIHdvcmsgd2l0aCBzaW5nbGVcbiAgICAgIC8vIGFuZCBtdWx0aWxpbmUgdGV4dCBpbnB1dHMuIElkZWFsbHkgd2UnbGwgbWVyZ2UgdGhlbSBpbnRvIG9uZSBjb21wb25lbnRcbiAgICAgIC8vIGluIHRoZSBmdXR1cmUuXG4gICAgICBpT1NUZXh0SW5wdXRDb21tYW5kcy5mb2N1cyh0ZXh0RmllbGQpO1xuICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgQW5kcm9pZFRleHRJbnB1dENvbW1hbmRzLmZvY3VzKHRleHRGaWVsZCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRleHRGaWVsZElEIGlkIG9mIHRoZSB0ZXh0IGZpZWxkIHRvIHVuZm9jdXNcbiAqIFVuZm9jdXNlcyB0aGUgc3BlY2lmaWVkIHRleHQgZmllbGRcbiAqIG5vb3AgaWYgaXQgd2Fzbid0IGZvY3VzZWRcbiAqL1xuZnVuY3Rpb24gYmx1clRleHRJbnB1dCh0ZXh0RmllbGQ6ID9Db21wb25lbnRSZWYpIHtcbiAgaWYgKHR5cGVvZiB0ZXh0RmllbGQgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdibHVyVGV4dElucHV0IG11c3QgYmUgY2FsbGVkIHdpdGggYSBob3N0IGNvbXBvbmVudC4gUGFzc2luZyBhIHJlYWN0IHRhZyBpcyBkZXByZWNhdGVkLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjdXJyZW50bHlGb2N1c2VkSW5wdXRSZWYgPT09IHRleHRGaWVsZCAmJiB0ZXh0RmllbGQgIT0gbnVsbCkge1xuICAgIGJsdXJJbnB1dCh0ZXh0RmllbGQpO1xuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgIC8vIFRoaXMgaXNuJ3QgbmVjZXNzYXJpbHkgYSBzaW5nbGUgbGluZSB0ZXh0IGlucHV0XG4gICAgICAvLyBCdXQgY29tbWFuZHMgZG9uJ3QgYWN0dWFsbHkgY2FyZSBhcyBsb25nIGFzIHRoZSB0aGluZyBiZWluZyBwYXNzZWQgaW5cbiAgICAgIC8vIGFjdHVhbGx5IGhhcyBhIGNvbW1hbmQgd2l0aCB0aGF0IG5hbWUuIFNvIHRoaXMgc2hvdWxkIHdvcmsgd2l0aCBzaW5nbGVcbiAgICAgIC8vIGFuZCBtdWx0aWxpbmUgdGV4dCBpbnB1dHMuIElkZWFsbHkgd2UnbGwgbWVyZ2UgdGhlbSBpbnRvIG9uZSBjb21wb25lbnRcbiAgICAgIC8vIGluIHRoZSBmdXR1cmUuXG4gICAgICBpT1NUZXh0SW5wdXRDb21tYW5kcy5ibHVyKHRleHRGaWVsZCk7XG4gICAgfSBlbHNlIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICBBbmRyb2lkVGV4dElucHV0Q29tbWFuZHMuYmx1cih0ZXh0RmllbGQpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZWdpc3RlcklucHV0KHRleHRGaWVsZDogQ29tcG9uZW50UmVmKSB7XG4gIGlmICh0eXBlb2YgdGV4dEZpZWxkID09PSAnbnVtYmVyJykge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAncmVnaXN0ZXJJbnB1dCBtdXN0IGJlIGNhbGxlZCB3aXRoIGEgaG9zdCBjb21wb25lbnQuIFBhc3NpbmcgYSByZWFjdCB0YWcgaXMgZGVwcmVjYXRlZC4nLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpbnB1dHMuYWRkKHRleHRGaWVsZCk7XG59XG5cbmZ1bmN0aW9uIHVucmVnaXN0ZXJJbnB1dCh0ZXh0RmllbGQ6IENvbXBvbmVudFJlZikge1xuICBpZiAodHlwZW9mIHRleHRGaWVsZCA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ3VucmVnaXN0ZXJJbnB1dCBtdXN0IGJlIGNhbGxlZCB3aXRoIGEgaG9zdCBjb21wb25lbnQuIFBhc3NpbmcgYSByZWFjdCB0YWcgaXMgZGVwcmVjYXRlZC4nLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cbiAgaW5wdXRzLmRlbGV0ZSh0ZXh0RmllbGQpO1xufVxuXG5mdW5jdGlvbiBpc1RleHRJbnB1dCh0ZXh0RmllbGQ6IENvbXBvbmVudFJlZik6IGJvb2xlYW4ge1xuICBpZiAodHlwZW9mIHRleHRGaWVsZCA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ2lzVGV4dElucHV0IG11c3QgYmUgY2FsbGVkIHdpdGggYSBob3N0IGNvbXBvbmVudC4gUGFzc2luZyBhIHJlYWN0IHRhZyBpcyBkZXByZWNhdGVkLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpbnB1dHMuaGFzKHRleHRGaWVsZCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjdXJyZW50bHlGb2N1c2VkSW5wdXQsXG4gIGZvY3VzSW5wdXQsXG4gIGJsdXJJbnB1dCxcblxuICBjdXJyZW50bHlGb2N1c2VkRmllbGQsXG4gIGZvY3VzRmllbGQsXG4gIGJsdXJGaWVsZCxcbiAgZm9jdXNUZXh0SW5wdXQsXG4gIGJsdXJUZXh0SW5wdXQsXG4gIHJlZ2lzdGVySW5wdXQsXG4gIHVucmVnaXN0ZXJJbnB1dCxcbiAgaXNUZXh0SW5wdXQsXG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQWlCQSxJQUFBQSxnQ0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMscUNBQUEsR0FBQUQsT0FBQTtBQUpBLElBQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixJQUFNRyxRQUFRLEdBQUdILE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztBQUNwRCxJQUFBSSxRQUFBLEdBQXlCSixPQUFPLENBQUMsa0NBQWtDLENBQUM7RUFBN0RLLGNBQWMsR0FBQUQsUUFBQSxDQUFkQyxjQUFjO0FBT3JCLElBQUlDLHdCQUF1QyxHQUFHLElBQUk7QUFDbEQsSUFBTUMsTUFBTSxHQUFHLElBQUlDLEdBQUcsRUFBRTtBQUV4QixTQUFTQyxxQkFBcUJBLENBQUEsRUFBa0I7RUFDOUMsT0FBT0gsd0JBQXdCO0FBQ2pDO0FBTUEsU0FBU0kscUJBQXFCQSxDQUFBLEVBQVk7RUFDeEMsSUFBSUMsT0FBTyxFQUFFO0lBQ1hDLE9BQU8sQ0FBQ0MsS0FBSyxDQUNYLHdHQUF3RyxDQUN6RztFQUNIO0VBRUEsT0FBT1IsY0FBYyxDQUFDQyx3QkFBd0IsQ0FBQztBQUNqRDtBQUVBLFNBQVNRLFVBQVVBLENBQUNDLFNBQXdCLEVBQVE7RUFDbEQsSUFBSVQsd0JBQXdCLEtBQUtTLFNBQVMsSUFBSUEsU0FBUyxJQUFJLElBQUksRUFBRTtJQUMvRFQsd0JBQXdCLEdBQUdTLFNBQVM7RUFDdEM7QUFDRjtBQUVBLFNBQVNDLFNBQVNBLENBQUNELFNBQXdCLEVBQVE7RUFDakQsSUFBSVQsd0JBQXdCLEtBQUtTLFNBQVMsSUFBSUEsU0FBUyxJQUFJLElBQUksRUFBRTtJQUMvRFQsd0JBQXdCLEdBQUcsSUFBSTtFQUNqQztBQUNGO0FBRUEsU0FBU1csVUFBVUEsQ0FBQ0MsV0FBb0IsRUFBUTtFQUM5QyxJQUFJUCxPQUFPLEVBQUU7SUFDWEMsT0FBTyxDQUFDQyxLQUFLLENBQUMsNENBQTRDLENBQUM7RUFDN0Q7RUFFQTtBQUNGO0FBRUEsU0FBU00sU0FBU0EsQ0FBQ0QsV0FBb0IsRUFBRTtFQUN2QyxJQUFJUCxPQUFPLEVBQUU7SUFDWEMsT0FBTyxDQUFDQyxLQUFLLENBQUMsMENBQTBDLENBQUM7RUFDM0Q7RUFFQTtBQUNGO0FBT0EsU0FBU08sY0FBY0EsQ0FBQ0wsU0FBd0IsRUFBRTtFQUNoRCxJQUFJLE9BQU9BLFNBQVMsS0FBSyxRQUFRLEVBQUU7SUFDakMsSUFBSUosT0FBTyxFQUFFO01BQ1hDLE9BQU8sQ0FBQ0MsS0FBSyxDQUNYLHlGQUF5RixDQUMxRjtJQUNIO0lBRUE7RUFDRjtFQUVBLElBQUlQLHdCQUF3QixLQUFLUyxTQUFTLElBQUlBLFNBQVMsSUFBSSxJQUFJLEVBQUU7SUFDL0RELFVBQVUsQ0FBQ0MsU0FBUyxDQUFDO0lBQ3JCLElBQUlaLFFBQVEsQ0FBQ2tCLEVBQUUsS0FBSyxLQUFLLEVBQUU7TUFNekJDLDhDQUFvQixDQUFDQyxLQUFLLENBQUNSLFNBQVMsQ0FBQztJQUN2QyxDQUFDLE1BQU0sSUFBSVosUUFBUSxDQUFDa0IsRUFBRSxLQUFLLFNBQVMsRUFBRTtNQUNwQ0cseUNBQXdCLENBQUNELEtBQUssQ0FBQ1IsU0FBUyxDQUFDO0lBQzNDO0VBQ0Y7QUFDRjtBQU9BLFNBQVNVLGFBQWFBLENBQUNWLFNBQXdCLEVBQUU7RUFDL0MsSUFBSSxPQUFPQSxTQUFTLEtBQUssUUFBUSxFQUFFO0lBQ2pDLElBQUlKLE9BQU8sRUFBRTtNQUNYQyxPQUFPLENBQUNDLEtBQUssQ0FDWCx3RkFBd0YsQ0FDekY7SUFDSDtJQUVBO0VBQ0Y7RUFFQSxJQUFJUCx3QkFBd0IsS0FBS1MsU0FBUyxJQUFJQSxTQUFTLElBQUksSUFBSSxFQUFFO0lBQy9EQyxTQUFTLENBQUNELFNBQVMsQ0FBQztJQUNwQixJQUFJWixRQUFRLENBQUNrQixFQUFFLEtBQUssS0FBSyxFQUFFO01BTXpCQyw4Q0FBb0IsQ0FBQ0ksSUFBSSxDQUFDWCxTQUFTLENBQUM7SUFDdEMsQ0FBQyxNQUFNLElBQUlaLFFBQVEsQ0FBQ2tCLEVBQUUsS0FBSyxTQUFTLEVBQUU7TUFDcENHLHlDQUF3QixDQUFDRSxJQUFJLENBQUNYLFNBQVMsQ0FBQztJQUMxQztFQUNGO0FBQ0Y7QUFFQSxTQUFTWSxhQUFhQSxDQUFDWixTQUF1QixFQUFFO0VBQzlDLElBQUksT0FBT0EsU0FBUyxLQUFLLFFBQVEsRUFBRTtJQUNqQyxJQUFJSixPQUFPLEVBQUU7TUFDWEMsT0FBTyxDQUFDQyxLQUFLLENBQ1gsd0ZBQXdGLENBQ3pGO0lBQ0g7SUFFQTtFQUNGO0VBRUFOLE1BQU0sQ0FBQ3FCLEdBQUcsQ0FBQ2IsU0FBUyxDQUFDO0FBQ3ZCO0FBRUEsU0FBU2MsZUFBZUEsQ0FBQ2QsU0FBdUIsRUFBRTtFQUNoRCxJQUFJLE9BQU9BLFNBQVMsS0FBSyxRQUFRLEVBQUU7SUFDakMsSUFBSUosT0FBTyxFQUFFO01BQ1hDLE9BQU8sQ0FBQ0MsS0FBSyxDQUNYLDBGQUEwRixDQUMzRjtJQUNIO0lBRUE7RUFDRjtFQUNBTixNQUFNLENBQUN1QixNQUFNLENBQUNmLFNBQVMsQ0FBQztBQUMxQjtBQUVBLFNBQVNnQixXQUFXQSxDQUFDaEIsU0FBdUIsRUFBVztFQUNyRCxJQUFJLE9BQU9BLFNBQVMsS0FBSyxRQUFRLEVBQUU7SUFDakMsSUFBSUosT0FBTyxFQUFFO01BQ1hDLE9BQU8sQ0FBQ0MsS0FBSyxDQUNYLHNGQUFzRixDQUN2RjtJQUNIO0lBRUEsT0FBTyxLQUFLO0VBQ2Q7RUFFQSxPQUFPTixNQUFNLENBQUN5QixHQUFHLENBQUNqQixTQUFTLENBQUM7QUFDOUI7QUFFQWtCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2Z6QixxQkFBcUIsRUFBckJBLHFCQUFxQjtFQUNyQkssVUFBVSxFQUFWQSxVQUFVO0VBQ1ZFLFNBQVMsRUFBVEEsU0FBUztFQUVUTixxQkFBcUIsRUFBckJBLHFCQUFxQjtFQUNyQk8sVUFBVSxFQUFWQSxVQUFVO0VBQ1ZFLFNBQVMsRUFBVEEsU0FBUztFQUNUQyxjQUFjLEVBQWRBLGNBQWM7RUFDZEssYUFBYSxFQUFiQSxhQUFhO0VBQ2JFLGFBQWEsRUFBYkEsYUFBYTtFQUNiRSxlQUFlLEVBQWZBLGVBQWU7RUFDZkUsV0FBVyxFQUFYQTtBQUNGLENBQUMifQ==