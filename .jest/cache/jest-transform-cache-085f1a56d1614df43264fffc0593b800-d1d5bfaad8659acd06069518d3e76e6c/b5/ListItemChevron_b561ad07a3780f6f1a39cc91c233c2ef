4115feb17f3dc27078d4bf1f0e3750a4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ListItemChevron = function ListItemChevron(_a) {
  var containerStyle = _a.containerStyle,
    props = __rest(_a, ["containerStyle"]);
  return (0, _jsxRuntime.jsx)(_Icon.default, (0, _extends2.default)({
    type: _reactNative.Platform.OS === 'ios' ? 'ionicon' : 'material',
    color: "#D1D1D6",
    name: _reactNative.Platform.OS === 'ios' ? 'chevron-forward-outline' : 'keyboard-arrow-right',
    size: 16,
    containerStyle: _reactNative.StyleSheet.flatten([{
      alignSelf: 'center'
    }, containerStyle])
  }, props));
};
var _default = (0, _config.withTheme)(ListItemChevron, 'ListItemChevron');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfSWNvbiIsIl9qc3hSdW50aW1lIiwiX19yZXN0IiwicyIsImUiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJMaXN0SXRlbUNoZXZyb24iLCJfYSIsImNvbnRhaW5lclN0eWxlIiwicHJvcHMiLCJqc3giLCJkZWZhdWx0IiwiX2V4dGVuZHMyIiwidHlwZSIsIlBsYXRmb3JtIiwiT1MiLCJjb2xvciIsIm5hbWUiLCJzaXplIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJhbGlnblNlbGYiLCJfZGVmYXVsdCIsIndpdGhUaGVtZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJMaXN0SXRlbUNoZXZyb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN0eWxlU2hlZXQsIFBsYXRmb3JtIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29ucy9JY29uJztcbmNvbnN0IExpc3RJdGVtQ2hldnJvbiA9IChfYSkgPT4ge1xuICAgIHZhciB7IGNvbnRhaW5lclN0eWxlIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImNvbnRhaW5lclN0eWxlXCJdKTtcbiAgICByZXR1cm4gKDxJY29uIHR5cGU9e1BsYXRmb3JtLk9TID09PSAnaW9zJyA/ICdpb25pY29uJyA6ICdtYXRlcmlhbCd9IGNvbG9yPVwiI0QxRDFENlwiIG5hbWU9e1BsYXRmb3JtLk9TID09PSAnaW9zJ1xuICAgICAgICA/ICdjaGV2cm9uLWZvcndhcmQtb3V0bGluZSdcbiAgICAgICAgOiAna2V5Ym9hcmQtYXJyb3ctcmlnaHQnfSBzaXplPXsxNn0gY29udGFpbmVyU3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgIHsgYWxpZ25TZWxmOiAnY2VudGVyJyB9LFxuICAgICAgICBjb250YWluZXJTdHlsZSxcbiAgICBdKX0gey4uLnByb3BzfS8+KTtcbn07XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoTGlzdEl0ZW1DaGV2cm9uLCAnTGlzdEl0ZW1DaGV2cm9uJyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQVdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLEtBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFpQyxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFkakMsSUFBSUssTUFBTSxHQUFJLElBQUksSUFBSSxJQUFJLENBQUNBLE1BQU0sSUFBSyxVQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJQyxDQUFDLElBQUlILENBQUMsRUFBRSxJQUFJSSxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDLElBQUlGLENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQy9FRCxDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHSCxDQUFDLENBQUNHLENBQUMsQ0FBQztFQUNmLElBQUlILENBQUMsSUFBSSxJQUFJLElBQUksT0FBT0ksTUFBTSxDQUFDSyxxQkFBcUIsS0FBSyxVQUFVLEVBQy9ELEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRVAsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFxQixDQUFDVCxDQUFDLENBQUMsRUFBRVUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDcEUsSUFBSVQsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUlOLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDTyxvQkFBb0IsQ0FBQ0wsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsRUFDMUVSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxHQUFHVixDQUFDLENBQUNHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUM7RUFDekI7RUFDSixPQUFPUixDQUFDO0FBQ1osQ0FBQztBQUtELElBQU1XLGVBQWUsR0FBRyxTQUFsQkEsZUFBZUEsQ0FBSUMsRUFBRSxFQUFLO0VBQ3hCLElBQUVDLGNBQWMsR0FBS0QsRUFBRSxDQUFyQkMsY0FBYztJQUFTQyxLQUFLLEdBQUdqQixNQUFNLENBQUNlLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUM7RUFDbkUsT0FBUSxJQUFBaEIsV0FBQSxDQUFBbUIsR0FBQSxFQUFDcEIsS0FBQSxDQUFBcUIsT0FBSSxNQUFBQyxTQUFBLENBQUFELE9BQUE7SUFBQ0UsSUFBSSxFQUFFQyxxQkFBUSxDQUFDQyxFQUFFLEtBQUssS0FBSyxHQUFHLFNBQVMsR0FBRyxVQUFXO0lBQUNDLEtBQUssRUFBQyxTQUFTO0lBQUNDLElBQUksRUFBRUgscUJBQVEsQ0FBQ0MsRUFBRSxLQUFLLEtBQUssR0FDekcseUJBQXlCLEdBQ3pCLHNCQUF1QjtJQUFDRyxJQUFJLEVBQUUsRUFBRztJQUFDVixjQUFjLEVBQUVXLHVCQUFVLENBQUNDLE9BQU8sQ0FBQyxDQUN2RTtNQUFFQyxTQUFTLEVBQUU7SUFBUyxDQUFDLEVBQ3ZCYixjQUFjLENBQ2pCO0VBQUUsR0FBS0MsS0FBSyxFQUFHO0FBQ3BCLENBQUM7QUFBQyxJQUFBYSxRQUFBLEdBQ2EsSUFBQUMsaUJBQVMsRUFBQ2pCLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQztBQUFBa0IsT0FBQSxDQUFBYixPQUFBLEdBQUFXLFFBQUEifQ==