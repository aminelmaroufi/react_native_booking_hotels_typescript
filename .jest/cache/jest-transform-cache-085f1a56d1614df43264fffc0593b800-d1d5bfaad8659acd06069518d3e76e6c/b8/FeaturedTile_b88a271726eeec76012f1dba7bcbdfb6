5fea06fa63f02cd18ae2d41a2e3d5f3f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FeaturedTile = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var _Text = _interopRequireDefault(require("../text/Text"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var renderText = function renderText(content, defaultProps, style) {
  return (0, _helpers.renderNode)(_Text.default, content, (0, _extends2.default)((0, _extends2.default)({}, defaultProps), {
    style: _reactNative.StyleSheet.flatten([style, defaultProps && defaultProps.style])
  }));
};
var FeaturedTile = function FeaturedTile(props) {
  var title = props.title,
    icon = props.icon,
    caption = props.caption,
    imageSrc = props.imageSrc,
    containerStyle = props.containerStyle,
    imageContainerStyle = props.imageContainerStyle,
    overlayContainerStyle = props.overlayContainerStyle,
    iconContainerStyle = props.iconContainerStyle,
    titleStyle = props.titleStyle,
    captionStyle = props.captionStyle,
    _props$ImageComponent = props.ImageComponent,
    ImageComponent = _props$ImageComponent === void 0 ? _config.BackgroundImage : _props$ImageComponent,
    _props$imageProps = props.imageProps,
    imageProps = _props$imageProps === void 0 ? {} : _props$imageProps,
    attributes = __rest(props, ["title", "icon", "caption", "imageSrc", "containerStyle", "imageContainerStyle", "overlayContainerStyle", "iconContainerStyle", "titleStyle", "captionStyle", "ImageComponent", "imageProps"]);
  var _props$width = props.width,
    width = _props$width === void 0 ? _reactNative.Dimensions.get('window').width : _props$width,
    _props$height = props.height,
    height = _props$height === void 0 ? width * 0.8 : _props$height;
  var styles = _reactNative.StyleSheet.create({
    container: {
      width: width,
      height: height
    },
    imageContainer: {
      alignItems: 'center',
      justifyContent: 'center',
      width: width,
      height: height
    },
    overlayContainer: {
      flex: 1,
      alignItems: 'center',
      alignSelf: 'stretch',
      justifyContent: 'center',
      paddingLeft: 25,
      paddingRight: 25,
      paddingTop: 45,
      paddingBottom: 40,
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    text: {
      color: '#ffffff',
      backgroundColor: 'rgba(0,0,0,0)',
      marginBottom: 15,
      textAlign: 'center'
    },
    iconContainer: {
      justifyContent: 'center',
      alignItems: 'center',
      alignSelf: 'center'
    }
  });
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([styles.container, containerStyle && containerStyle]),
    children: (0, _jsxRuntime.jsx)(ImageComponent, (0, _extends2.default)({
      resizeMode: "cover"
    }, imageProps, {
      source: imageSrc,
      style: _reactNative.StyleSheet.flatten([styles.imageContainer, imageContainerStyle && imageContainerStyle]),
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.overlayContainer, overlayContainerStyle && overlayContainerStyle]),
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle && iconContainerStyle]),
          children: icon && (0, _jsxRuntime.jsx)(_Icon.default, (0, _extends2.default)({}, icon))
        }), (0, _jsxRuntime.jsx)(_Text.default, {
          testID: "featuredTileTitle",
          h4: !titleStyle || !('fontSize' in titleStyle),
          style: _reactNative.StyleSheet.flatten([styles.text, titleStyle && titleStyle]),
          children: title
        }), renderText(caption, {
          style: captionStyle
        }, styles.text)]
      })
    }))
  }));
};
exports.FeaturedTile = FeaturedTile;
var _default = (0, _config.withTheme)(FeaturedTile, 'FeaturedTile');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,