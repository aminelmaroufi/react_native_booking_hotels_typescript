38a53993f85708e02901d3285d3bc9a2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PricingCard = exports.PricingButton = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _helpers = require("../helpers");
var _config = require("../config");
var _Text = _interopRequireDefault(require("../text/Text"));
var _Button = _interopRequireDefault(require("../buttons/Button"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var PricingCard = function PricingCard(props) {
  var _a, _b, _c;
  var theme = props.theme,
    rest = __rest(props, ["theme"]);
  var containerStyle = rest.containerStyle,
    wrapperStyle = rest.wrapperStyle,
    title = rest.title,
    price = rest.price,
    info = rest.info,
    button = rest.button,
    _rest$color = rest.color,
    color = _rest$color === void 0 ? (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.primary : _rest$color,
    titleStyle = rest.titleStyle,
    pricingStyle = rest.pricingStyle,
    infoStyle = rest.infoStyle,
    onButtonPress = rest.onButtonPress,
    attributes = __rest(rest, ["containerStyle", "wrapperStyle", "title", "price", "info", "button", "color", "titleStyle", "pricingStyle", "infoStyle", "onButtonPress"]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([(0, _extends2.default)({
      margin: 15,
      marginBottom: 15,
      backgroundColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.white,
      borderWidth: 1,
      padding: 15,
      borderColor: (_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.grey5
    }, _reactNative.Platform.select({
      android: {
        elevation: 1
      },
      default: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 1,
          width: 0
        },
        shadowOpacity: 0.5,
        shadowRadius: 0.5
      }
    })), containerStyle && containerStyle]),
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.wrapper, wrapperStyle && wrapperStyle]),
      children: [(0, _jsxRuntime.jsx)(_Text.default, {
        testID: "pricingCardTitle",
        style: _reactNative.StyleSheet.flatten([styles.pricingTitle, titleStyle, {
          color: color
        }]),
        children: title
      }), (0, _jsxRuntime.jsx)(_Text.default, {
        style: _reactNative.StyleSheet.flatten([styles.pricingPrice, pricingStyle]),
        children: price
      }), info === null || info === void 0 ? void 0 : info.map(function (item) {
        var _a;
        return (0, _jsxRuntime.jsx)(_Text.default, {
          style: _reactNative.StyleSheet.flatten([(0, _extends2.default)({
            textAlign: 'center',
            marginTop: 5,
            marginBottom: 5,
            color: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.grey3
          }, _reactNative.Platform.select({
            android: (0, _extends2.default)({}, _config.fonts.android.bold),
            default: {
              fontWeight: '600'
            }
          })), infoStyle]),
          children: item
        }, item);
      }), _react.default.isValidElement(button) ? button : (0, _jsxRuntime.jsx)(PricingButton, (0, _extends2.default)({
        color: color,
        onButtonPress: onButtonPress
      }, button))]
    })
  }));
};
exports.PricingCard = PricingCard;
var PricingButton = function PricingButton(props) {
  var title = props.title,
    buttonStyle = props.buttonStyle,
    color = props.color,
    titleStyle = props.titleStyle,
    onButtonPress = props.onButtonPress,
    icon = props.icon,
    buttonProps = __rest(props, ["title", "buttonStyle", "color", "titleStyle", "onButtonPress", "icon"]);
  return (0, _jsxRuntime.jsx)(_Button.default, (0, _extends2.default)({
    title: title,
    buttonStyle: _reactNative.StyleSheet.flatten([styles.button, buttonStyle, {
      backgroundColor: color
    }]),
    titleStyle: titleStyle,
    onPress: onButtonPress,
    icon: _react.default.isValidElement(icon) ? icon : typeof icon === 'string' ? (0, _jsxRuntime.jsx)(_Icon.default, {
      name: icon,
      size: 15,
      color: "white"
    }) : (0, _jsxRuntime.jsx)(_Icon.default, (0, _extends2.default)({}, icon))
  }, buttonProps));
};
exports.PricingButton = PricingButton;
PricingCard.defaultProps = {
  info: []
};
var styles = _reactNative.StyleSheet.create({
  wrapper: {
    backgroundColor: 'transparent'
  },
  pricingTitle: (0, _extends2.default)({
    textAlign: 'center',
    fontSize: (0, _helpers.normalizeText)(30)
  }, _reactNative.Platform.select({
    android: (0, _extends2.default)({}, _config.fonts.android.black),
    default: {
      fontWeight: '800'
    }
  })),
  pricingPrice: (0, _extends2.default)({
    textAlign: 'center',
    marginTop: 10,
    marginBottom: 10,
    fontSize: (0, _helpers.normalizeText)(40)
  }, _reactNative.Platform.select({
    android: (0, _extends2.default)({}, _config.fonts.android.bold),
    default: {
      fontWeight: '700'
    }
  })),
  button: {
    marginTop: 15,
    marginBottom: 10
  }
});
var _default = (0, _config.withTheme)(PricingCard, 'PricingCard');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,