d159fa60165a741d8beeac93401e295d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHotels = exports.getBookings = exports.createBooking = exports.addCard = void 0;
var _adapter = _interopRequireDefault(require("../utils/adapter"));
var getHotels = function getHotels(params) {
  var query = "q=" + params.q + "&page=" + params.page;
  return _adapter.default.get("/hotels?" + query).catch(function (err) {
    console.log('error get hotels!!');
    return Promise.reject(err.response ? err.response.data.result : err);
  });
};
exports.getHotels = getHotels;
var addCard = function addCard(card) {
  return _adapter.default.post('/customers/cards', card).catch(function (err) {
    var error;
    if (typeof err === 'string') {
      error.message = err;
    } else {
      error = err.response.data.message ? err.response.data : err.response.data.result;
    }
    return Promise.reject(error);
  });
};
exports.addCard = addCard;
var createBooking = function createBooking(book) {
  return _adapter.default.post('/customers/bookings', book).catch(function (err) {
    var error;
    if (typeof err === 'string') {
      error.message = err;
    } else {
      error = err.response.data.message ? err.response.data : err.response.data.result;
    }
    return Promise.reject(error);
  });
};
exports.createBooking = createBooking;
var getBookings = function getBookings() {
  return _adapter.default.get('/customers/bookings').catch(function (err) {
    var error;
    if (typeof err === 'string') {
      error.message = err;
    } else {
      error = err.response.data.message ? err.response.data : err.response.data.result;
    }
    return Promise.reject(error);
  });
};
exports.getBookings = getBookings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYWRhcHRlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZ2V0SG90ZWxzIiwicGFyYW1zIiwicXVlcnkiLCJxIiwicGFnZSIsImFkYXB0ZXIiLCJnZXQiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJQcm9taXNlIiwicmVqZWN0IiwicmVzcG9uc2UiLCJkYXRhIiwicmVzdWx0IiwiZXhwb3J0cyIsImFkZENhcmQiLCJjYXJkIiwicG9zdCIsImVycm9yIiwibWVzc2FnZSIsImNyZWF0ZUJvb2tpbmciLCJib29rIiwiZ2V0Qm9va2luZ3MiXSwic291cmNlcyI6WyJib29rLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SUJvb2ssIElDYXJkfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IGFkYXB0ZXIgZnJvbSAnLi4vdXRpbHMvYWRhcHRlcic7XG5cbmV4cG9ydCBjb25zdCBnZXRIb3RlbHMgPSAocGFyYW1zOiBhbnkpID0+IHtcbiAgY29uc3QgcXVlcnkgPSBgcT0ke3BhcmFtcy5xfSZwYWdlPSR7cGFyYW1zLnBhZ2V9YDtcbiAgcmV0dXJuIGFkYXB0ZXIuZ2V0KGAvaG90ZWxzPyR7cXVlcnl9YCkuY2F0Y2goZXJyID0+IHtcbiAgICBjb25zb2xlLmxvZygnZXJyb3IgZ2V0IGhvdGVscyEhJyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVyci5yZXNwb25zZSA/IGVyci5yZXNwb25zZS5kYXRhLnJlc3VsdCA6IGVycik7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGFkZENhcmQgPSAoY2FyZDogSUNhcmQpID0+IHtcbiAgcmV0dXJuIGFkYXB0ZXIucG9zdCgnL2N1c3RvbWVycy9jYXJkcycsIGNhcmQpLmNhdGNoKGVyciA9PiB7XG4gICAgbGV0IGVycm9yOiBhbnk7XG4gICAgaWYgKHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlcnJvci5tZXNzYWdlID0gZXJyO1xuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvciA9IGVyci5yZXNwb25zZS5kYXRhLm1lc3NhZ2VcbiAgICAgICAgPyBlcnIucmVzcG9uc2UuZGF0YVxuICAgICAgICA6IGVyci5yZXNwb25zZS5kYXRhLnJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlQm9va2luZyA9IChib29rOiBJQm9vaykgPT4ge1xuICByZXR1cm4gYWRhcHRlci5wb3N0KCcvY3VzdG9tZXJzL2Jvb2tpbmdzJywgYm9vaykuY2F0Y2goZXJyID0+IHtcbiAgICBsZXQgZXJyb3I6IGFueTtcbiAgICBpZiAodHlwZW9mIGVyciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVycm9yLm1lc3NhZ2UgPSBlcnI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9yID0gZXJyLnJlc3BvbnNlLmRhdGEubWVzc2FnZVxuICAgICAgICA/IGVyci5yZXNwb25zZS5kYXRhXG4gICAgICAgIDogZXJyLnJlc3BvbnNlLmRhdGEucmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRCb29raW5ncyA9ICgpID0+IHtcbiAgcmV0dXJuIGFkYXB0ZXIuZ2V0KCcvY3VzdG9tZXJzL2Jvb2tpbmdzJykuY2F0Y2goZXJyID0+IHtcbiAgICBsZXQgZXJyb3I6IGFueTtcbiAgICBpZiAodHlwZW9mIGVyciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVycm9yLm1lc3NhZ2UgPSBlcnI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9yID0gZXJyLnJlc3BvbnNlLmRhdGEubWVzc2FnZVxuICAgICAgICA/IGVyci5yZXNwb25zZS5kYXRhXG4gICAgICAgIDogZXJyLnJlc3BvbnNlLmRhdGEucmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9KTtcbn07XG4i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