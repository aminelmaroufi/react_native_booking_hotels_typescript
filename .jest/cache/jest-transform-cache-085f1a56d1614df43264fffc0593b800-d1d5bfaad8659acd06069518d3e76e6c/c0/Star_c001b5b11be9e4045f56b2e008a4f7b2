ffbd6435e5c54cb3a9c30625572c3139
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var STAR_IMAGE = require("../images/airbnb-star.png");
var STAR_SELECTED_IMAGE = require("../images/airbnb-star-selected.png");
var STAR_SIZE = 40;
var Star = function Star(props) {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selected = _useState2[0],
    setSelected = _useState2[1];
  var springValue = new _reactNative.Animated.Value(1);
  var spring = function spring() {
    var position = props.position,
      starSelectedInPosition = props.starSelectedInPosition;
    springValue.setValue(1.2);
    _reactNative.Animated.spring(springValue, {
      toValue: 1,
      friction: 2,
      tension: 1,
      useNativeDriver: true
    }).start();
    setSelected(!selected);
    starSelectedInPosition(position);
  };
  var starImage = props.starImage,
    fill = props.fill,
    size = props.size,
    selectedColor = props.selectedColor,
    unSelectedColor = props.unSelectedColor,
    isDisabled = props.isDisabled,
    starStyle = props.starStyle;
  var starSource = fill && selectedColor === null ? STAR_SELECTED_IMAGE : starImage;
  return _react.default.createElement(_reactNative.TouchableOpacity, {
    activeOpacity: 1,
    onPress: spring,
    disabled: isDisabled
  }, _react.default.createElement(_reactNative.Animated.Image, {
    source: starSource,
    style: [styles.starStyle, {
      tintColor: fill && selectedColor ? selectedColor : unSelectedColor,
      width: size || STAR_SIZE,
      height: size || STAR_SIZE,
      transform: [{
        scale: springValue
      }]
    }, starStyle]
  }));
};
Star.defaultProps = {
  starImage: STAR_IMAGE,
  selectedColor: "#f1c40f",
  unSelectedColor: "#BDC3C7"
};
var _default = Star;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  starStyle: {
    margin: 3
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiU1RBUl9JTUFHRSIsIlNUQVJfU0VMRUNURURfSU1BR0UiLCJTVEFSX1NJWkUiLCJTdGFyIiwicHJvcHMiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJzZWxlY3RlZCIsInNldFNlbGVjdGVkIiwic3ByaW5nVmFsdWUiLCJBbmltYXRlZCIsIlZhbHVlIiwic3ByaW5nIiwicG9zaXRpb24iLCJzdGFyU2VsZWN0ZWRJblBvc2l0aW9uIiwic2V0VmFsdWUiLCJ0b1ZhbHVlIiwiZnJpY3Rpb24iLCJ0ZW5zaW9uIiwidXNlTmF0aXZlRHJpdmVyIiwic3RhcnQiLCJzdGFySW1hZ2UiLCJmaWxsIiwic2l6ZSIsInNlbGVjdGVkQ29sb3IiLCJ1blNlbGVjdGVkQ29sb3IiLCJpc0Rpc2FibGVkIiwic3RhclN0eWxlIiwic3RhclNvdXJjZSIsImNyZWF0ZUVsZW1lbnQiLCJUb3VjaGFibGVPcGFjaXR5IiwiYWN0aXZlT3BhY2l0eSIsIm9uUHJlc3MiLCJkaXNhYmxlZCIsIkltYWdlIiwic291cmNlIiwic3R5bGUiLCJzdHlsZXMiLCJ0aW50Q29sb3IiLCJ3aWR0aCIsImhlaWdodCIsInRyYW5zZm9ybSIsInNjYWxlIiwiZGVmYXVsdFByb3BzIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsIm1hcmdpbiJdLCJzb3VyY2VzIjpbIlN0YXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBBbmltYXRlZCwgVG91Y2hhYmxlT3BhY2l0eSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmNvbnN0IFNUQVJfSU1BR0UgPSByZXF1aXJlKFwiLi4vaW1hZ2VzL2FpcmJuYi1zdGFyLnBuZ1wiKTtcbmNvbnN0IFNUQVJfU0VMRUNURURfSU1BR0UgPSByZXF1aXJlKFwiLi4vaW1hZ2VzL2FpcmJuYi1zdGFyLXNlbGVjdGVkLnBuZ1wiKTtcbmNvbnN0IFNUQVJfU0laRSA9IDQwO1xuY29uc3QgU3RhciA9IHByb3BzID0+IHtcbiAgICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBzcHJpbmdWYWx1ZSA9IG5ldyBBbmltYXRlZC5WYWx1ZSgxKTtcbiAgICBjb25zdCBzcHJpbmcgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgcG9zaXRpb24sIHN0YXJTZWxlY3RlZEluUG9zaXRpb24gfSA9IHByb3BzO1xuICAgICAgICBzcHJpbmdWYWx1ZS5zZXRWYWx1ZSgxLjIpO1xuICAgICAgICBBbmltYXRlZC5zcHJpbmcoc3ByaW5nVmFsdWUsIHtcbiAgICAgICAgICAgIHRvVmFsdWU6IDEsXG4gICAgICAgICAgICBmcmljdGlvbjogMixcbiAgICAgICAgICAgIHRlbnNpb246IDEsXG4gICAgICAgICAgICB1c2VOYXRpdmVEcml2ZXI6IHRydWVcbiAgICAgICAgfSkuc3RhcnQoKTtcbiAgICAgICAgc2V0U2VsZWN0ZWQoIXNlbGVjdGVkKTtcbiAgICAgICAgc3RhclNlbGVjdGVkSW5Qb3NpdGlvbihwb3NpdGlvbik7XG4gICAgfTtcbiAgICBjb25zdCB7IHN0YXJJbWFnZSwgZmlsbCwgc2l6ZSwgc2VsZWN0ZWRDb2xvciwgdW5TZWxlY3RlZENvbG9yLCBpc0Rpc2FibGVkLCBzdGFyU3R5bGUgfSA9IHByb3BzO1xuICAgIGNvbnN0IHN0YXJTb3VyY2UgPSBmaWxsICYmIHNlbGVjdGVkQ29sb3IgPT09IG51bGwgPyBTVEFSX1NFTEVDVEVEX0lNQUdFIDogc3RhckltYWdlO1xuICAgIHJldHVybiAoPFRvdWNoYWJsZU9wYWNpdHkgYWN0aXZlT3BhY2l0eT17MX0gb25QcmVzcz17c3ByaW5nfSBkaXNhYmxlZD17aXNEaXNhYmxlZH0+XG4gICAgICA8QW5pbWF0ZWQuSW1hZ2Ugc291cmNlPXtzdGFyU291cmNlfSBzdHlsZT17W1xuICAgICAgICAgICAgc3R5bGVzLnN0YXJTdHlsZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aW50Q29sb3I6IGZpbGwgJiYgc2VsZWN0ZWRDb2xvciA/IHNlbGVjdGVkQ29sb3IgOiB1blNlbGVjdGVkQ29sb3IsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUgfHwgU1RBUl9TSVpFLFxuICAgICAgICAgICAgICAgIGhlaWdodDogc2l6ZSB8fCBTVEFSX1NJWkUsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBbeyBzY2FsZTogc3ByaW5nVmFsdWUgfV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGFyU3R5bGVcbiAgICAgICAgXX0vPlxuICAgIDwvVG91Y2hhYmxlT3BhY2l0eT4pO1xufTtcblN0YXIuZGVmYXVsdFByb3BzID0ge1xuICAgIHN0YXJJbWFnZTogU1RBUl9JTUFHRSxcbiAgICBzZWxlY3RlZENvbG9yOiBcIiNmMWM0MGZcIixcbiAgICB1blNlbGVjdGVkQ29sb3I6IFwiI0JEQzNDN1wiXG59O1xuZXhwb3J0IGRlZmF1bHQgU3RhcjtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBzdGFyU3R5bGU6IHtcbiAgICAgICAgbWFyZ2luOiAz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