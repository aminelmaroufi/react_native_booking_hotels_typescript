2206f514ec5550e616310c2631fdc2ed
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _store = _interopRequireDefault(require("../../redux/store"));
var _Login = _interopRequireDefault(require("../Login"));
var _actions = require("../../redux/actions");
var _setup = _interopRequireDefault(require("../setup"));
var store = (0, _store.default)();
var email = 'test@test.com';
var password = 'Azerty123@@';
var navigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
describe('Test Login Component', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    (0, _setup.default)(_react.default.createElement(_Login.default, null), store);
  });
  afterEach(_reactNative.cleanup);
  it('should render all form element', function () {
    expect(_reactNative.screen.getByTestId('logo')).toBeDefined();
    expect(_reactNative.screen.getByTestId('email')).toBeDefined();
    expect(_reactNative.screen.getByTestId('password')).toBeDefined();
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn).toBeDefined();
  });
  it('should enable login button after entereing valid email and password value', function () {
    var emailInput = _reactNative.screen.getByTestId('email');
    var passwordInput = _reactNative.screen.getByTestId('password');
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', true);
    _reactNative.fireEvent.changeText(emailInput, email);
    _reactNative.fireEvent.changeText(passwordInput, password);
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', false);
    _reactNative.fireEvent.press(loginBtn);
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith((0, _actions.loginRequest)(email, password, navigation));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9zdG9yZSIsIl9Mb2dpbiIsIl9hY3Rpb25zIiwiX3NldHVwIiwic3RvcmUiLCJjb25maWd1cmVTdG9yZSIsImVtYWlsIiwicGFzc3dvcmQiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJqZXN0IiwiZm4iLCJnb0JhY2siLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJkaXNwYXRjaCIsIlNldHVwIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJhZnRlckVhY2giLCJjbGVhbnVwIiwiaXQiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsInRvQmVEZWZpbmVkIiwibG9naW5CdG4iLCJlbWFpbElucHV0IiwicGFzc3dvcmRJbnB1dCIsInByb3BzIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwidG9IYXZlUHJvcGVydHkiLCJmaXJlRXZlbnQiLCJjaGFuZ2VUZXh0IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImxvZ2luUmVxdWVzdCJdLCJzb3VyY2VzIjpbImxvZ2luLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7XG4gIGNsZWFudXAsXG4gIGZpcmVFdmVudCxcbiAgcmVuZGVyLFxuICBzY3JlZW4sXG59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7TmF2aWdhdGlvbkNvbnRhaW5lcn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcbmltcG9ydCAqIGFzIGV2YSBmcm9tICdAZXZhLWRlc2lnbi9ldmEnO1xuaW1wb3J0IHtBcHBsaWNhdGlvblByb3ZpZGVyfSBmcm9tICdAdWkta2l0dGVuL2NvbXBvbmVudHMnO1xuaW1wb3J0IGNvbmZpZ3VyZVN0b3JlIGZyb20gJy4uLy4uL3JlZHV4L3N0b3JlJztcbmltcG9ydCBMb2dpbiBmcm9tICcuLi9Mb2dpbic7XG5pbXBvcnQge2xvZ2luUmVxdWVzdH0gZnJvbSAnLi4vLi4vcmVkdXgvYWN0aW9ucyc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgU2V0dXAgZnJvbSAnLi4vc2V0dXAnO1xuXG5sZXQgc3RvcmUgPSBjb25maWd1cmVTdG9yZSgpO1xuXG5jb25zdCBlbWFpbCA9ICd0ZXN0QHRlc3QuY29tJztcbmNvbnN0IHBhc3N3b3JkID0gJ0F6ZXJ0eTEyM0BAJztcblxuY29uc3QgbmF2aWdhdGlvbiA9IHtcbiAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgZ29CYWNrOiBqZXN0LmZuKCksXG59O1xuLy8gY29uc3Qgc2V0dXAgPSAoKSA9PlxuLy8gICByZW5kZXIoXG4vLyAgICAgPEFwcGxpY2F0aW9uUHJvdmlkZXIgey4uLmV2YX0gdGhlbWU9e2V2YS5saWdodH0+XG4vLyAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbi8vICAgICAgICAgPExvZ2luIG5hdmlnYXRpb249e25hdmlnYXRpb259IC8+XG4vLyAgICAgICA8L1Byb3ZpZGVyPlxuLy8gICAgIDwvQXBwbGljYXRpb25Qcm92aWRlcj4sXG4vLyAgICk7XG5cbmRlc2NyaWJlKCdUZXN0IExvZ2luIENvbXBvbmVudCcsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RvcmUuZGlzcGF0Y2ggPSBqZXN0LmZuKCk7XG4gICAgU2V0dXAoPExvZ2luIC8+LCBzdG9yZSk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaChjbGVhbnVwKTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhbGwgZm9ybSBlbGVtZW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvZ28nKSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdlbWFpbCcpKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Bhc3N3b3JkJykpLnRvQmVEZWZpbmVkKCk7XG5cbiAgICBjb25zdCBsb2dpbkJ0biA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9naW4tYnRuJyk7XG5cbiAgICBleHBlY3QobG9naW5CdG4pLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZW5hYmxlIGxvZ2luIGJ1dHRvbiBhZnRlciBlbnRlcmVpbmcgdmFsaWQgZW1haWwgYW5kIHBhc3N3b3JkIHZhbHVlJywgKCkgPT4ge1xuICAgIGNvbnN0IGVtYWlsSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2VtYWlsJyk7XG4gICAgY29uc3QgcGFzc3dvcmRJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgncGFzc3dvcmQnKTtcbiAgICBjb25zdCBsb2dpbkJ0biA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9naW4tYnRuJyk7XG5cbiAgICBleHBlY3QobG9naW5CdG4ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlKS50b0hhdmVQcm9wZXJ0eSgnZGlzYWJsZWQnLCB0cnVlKTtcblxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGVtYWlsSW5wdXQsIGVtYWlsKTtcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChwYXNzd29yZElucHV0LCBwYXNzd29yZCk7XG5cbiAgICBleHBlY3QobG9naW5CdG4ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlKS50b0hhdmVQcm9wZXJ0eSgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgZmlyZUV2ZW50LnByZXNzKGxvZ2luQnRuKTtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgbG9naW5SZXF1ZXN0KGVtYWlsLCBwYXNzd29yZCwgbmF2aWdhdGlvbiksXG4gICAgKTtcbiAgfSk7XG59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