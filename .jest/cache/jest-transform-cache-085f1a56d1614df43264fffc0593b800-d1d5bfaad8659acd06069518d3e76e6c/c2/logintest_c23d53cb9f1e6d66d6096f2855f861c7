f9f6f74a0f293dc7bfc4f364b2af145b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _store = _interopRequireDefault(require("../../redux/store"));
var _Login = _interopRequireDefault(require("../Login"));
var _actions = require("../../redux/actions");
var _setup = _interopRequireDefault(require("../setup"));
var store = (0, _store.default)();
var email = 'test@test.com';
var password = 'Azerty123@@';
var navigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
describe('Test Login Component', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    (0, _setup.default)(_react.default.createElement(_Login.default, null), store);
  });
  afterEach(_reactNative.cleanup);
  it('should render all form element', function () {
    expect(_reactNative.screen.getByTestId('logo')).toBeDefined();
    expect(_reactNative.screen.getByTestId('email')).toBeDefined();
    expect(_reactNative.screen.getByTestId('password')).toBeDefined();
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn).toBeDefined();
  });
  it('should enable login button after entereing valid email and password value', function () {
    var emailInput = _reactNative.screen.getByTestId('email');
    var passwordInput = _reactNative.screen.getByTestId('password');
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', true);
    _reactNative.fireEvent.changeText(emailInput, email);
    _reactNative.fireEvent.changeText(passwordInput, password);
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', false);
    _reactNative.fireEvent.press(loginBtn);
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith((0, _actions.loginRequest)(email, password, navigation));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9zdG9yZSIsIl9Mb2dpbiIsIl9hY3Rpb25zIiwiX3NldHVwIiwic3RvcmUiLCJjb25maWd1cmVTdG9yZSIsImVtYWlsIiwicGFzc3dvcmQiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJqZXN0IiwiZm4iLCJnb0JhY2siLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJkaXNwYXRjaCIsIlNldHVwIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJhZnRlckVhY2giLCJjbGVhbnVwIiwiaXQiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsInRvQmVEZWZpbmVkIiwibG9naW5CdG4iLCJlbWFpbElucHV0IiwicGFzc3dvcmRJbnB1dCIsInByb3BzIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwidG9IYXZlUHJvcGVydHkiLCJmaXJlRXZlbnQiLCJjaGFuZ2VUZXh0IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImxvZ2luUmVxdWVzdCJdLCJzb3VyY2VzIjpbImxvZ2luLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7XG4gIGNsZWFudXAsXG4gIGZpcmVFdmVudCxcbiAgcmVuZGVyLFxuICBzY3JlZW4sXG59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tICcuLi8uLi9yZWR1eC9zdG9yZSc7XG5pbXBvcnQgTG9naW4gZnJvbSAnLi4vTG9naW4nO1xuaW1wb3J0IHtsb2dpblJlcXVlc3R9IGZyb20gJy4uLy4uL3JlZHV4L2FjdGlvbnMnO1xuaW1wb3J0IFNldHVwIGZyb20gJy4uL3NldHVwJztcblxubGV0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoKTtcblxuY29uc3QgZW1haWwgPSAndGVzdEB0ZXN0LmNvbSc7XG5jb25zdCBwYXNzd29yZCA9ICdBemVydHkxMjNAQCc7XG5cbmNvbnN0IG5hdmlnYXRpb24gPSB7XG4gIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gIGdvQmFjazogamVzdC5mbigpLFxufTtcbi8vIGNvbnN0IHNldHVwID0gKCkgPT5cbi8vICAgcmVuZGVyKFxuLy8gICAgIDxBcHBsaWNhdGlvblByb3ZpZGVyIHsuLi5ldmF9IHRoZW1lPXtldmEubGlnaHR9PlxuLy8gICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4vLyAgICAgICAgIDxMb2dpbiBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9ufSAvPlxuLy8gICAgICAgPC9Qcm92aWRlcj5cbi8vICAgICA8L0FwcGxpY2F0aW9uUHJvdmlkZXI+LFxuLy8gICApO1xuXG5kZXNjcmliZSgnVGVzdCBMb2dpbiBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHN0b3JlLmRpc3BhdGNoID0gamVzdC5mbigpO1xuICAgIFNldHVwKDxMb2dpbiAvPiwgc3RvcmUpO1xuICB9KTtcblxuICBhZnRlckVhY2goY2xlYW51cCk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYWxsIGZvcm0gZWxlbWVudCcsICgpID0+IHtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdsb2dvJykpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnZW1haWwnKSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdwYXNzd29yZCcpKS50b0JlRGVmaW5lZCgpO1xuXG4gICAgY29uc3QgbG9naW5CdG4gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvZ2luLWJ0bicpO1xuXG4gICAgZXhwZWN0KGxvZ2luQnRuKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGVuYWJsZSBsb2dpbiBidXR0b24gYWZ0ZXIgZW50ZXJlaW5nIHZhbGlkIGVtYWlsIGFuZCBwYXNzd29yZCB2YWx1ZScsICgpID0+IHtcbiAgICBjb25zdCBlbWFpbElucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdlbWFpbCcpO1xuICAgIGNvbnN0IHBhc3N3b3JkSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Bhc3N3b3JkJyk7XG4gICAgY29uc3QgbG9naW5CdG4gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvZ2luLWJ0bicpO1xuXG4gICAgZXhwZWN0KGxvZ2luQnRuLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZSkudG9IYXZlUHJvcGVydHkoJ2Rpc2FibGVkJywgdHJ1ZSk7XG5cbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChlbWFpbElucHV0LCBlbWFpbCk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQocGFzc3dvcmRJbnB1dCwgcGFzc3dvcmQpO1xuXG4gICAgZXhwZWN0KGxvZ2luQnRuLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZSkudG9IYXZlUHJvcGVydHkoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhsb2dpbkJ0bik7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIGxvZ2luUmVxdWVzdChlbWFpbCwgcGFzc3dvcmQsIG5hdmlnYXRpb24pLFxuICAgICk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQU1BLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLFFBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFL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