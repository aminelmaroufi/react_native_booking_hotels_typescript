fe6429fa1ea2e599a4f9b4862936ce0d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _DeprecatedImagePropType = _interopRequireDefault(require("../DeprecatedPropTypes/DeprecatedImagePropType"));
var React = _interopRequireWildcard(require("react"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _ImageAnalyticsTagContext = _interopRequireDefault(require("./ImageAnalyticsTagContext"));
var _flattenStyle = _interopRequireDefault(require("../StyleSheet/flattenStyle"));
var _resolveAssetSource = _interopRequireDefault(require("./resolveAssetSource"));
var _NativeImageLoaderIOS = _interopRequireDefault(require("./NativeImageLoaderIOS"));
var _ImageViewNativeComponent = _interopRequireDefault(require("./ImageViewNativeComponent"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _regeneratorRuntime() { "use strict"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function getSize(uri, success, failure) {
  _NativeImageLoaderIOS.default.getSize(uri).then(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      width = _ref2[0],
      height = _ref2[1];
    return success(width, height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image ' + uri);
  });
}
function getSizeWithHeaders(uri, headers, success, failure) {
  return _NativeImageLoaderIOS.default.getSizeWithHeaders(uri, headers).then(function (sizes) {
    success(sizes.width, sizes.height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image: ' + uri);
  });
}
function prefetchWithMetadata(url, queryRootName, rootTag) {
  if (_NativeImageLoaderIOS.default.prefetchImageWithMetadata) {
    return _NativeImageLoaderIOS.default.prefetchImageWithMetadata(url, queryRootName, rootTag ? rootTag : 0);
  } else {
    return _NativeImageLoaderIOS.default.prefetchImage(url);
  }
}
function prefetch(url) {
  return _NativeImageLoaderIOS.default.prefetchImage(url);
}
function queryCache(urls) {
  return _regeneratorRuntime().async(function queryCache$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        _context.next = 2;
        return _regeneratorRuntime().awrap(_NativeImageLoaderIOS.default.queryCache(urls));
      case 2:
        return _context.abrupt("return", _context.sent);
      case 3:
      case "end":
        return _context.stop();
    }
  }, null, null, null, Promise);
}
var Image = function Image(props, forwardedRef) {
  var source = (0, _resolveAssetSource.default)(props.source) || {
    uri: undefined,
    width: undefined,
    height: undefined
  };
  var sources;
  var style;
  if (Array.isArray(source)) {
    style = (0, _flattenStyle.default)([styles.base, props.style]) || {};
    sources = source;
  } else {
    var _width = source.width,
      _height = source.height,
      uri = source.uri;
    style = (0, _flattenStyle.default)([{
      width: _width,
      height: _height
    }, styles.base, props.style]) || {};
    sources = [source];
    if (uri === '') {
      console.warn('source.uri should not be an empty string');
    }
  }
  var resizeMode = props.resizeMode || style.resizeMode || 'cover';
  var tintColor = style.tintColor;
  if (props.src != null) {
    console.warn('The <Image> component requires a `source` property rather than `src`.');
  }
  if (props.children != null) {
    throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
  }
  return React.createElement(_ImageAnalyticsTagContext.default.Consumer, null, function (analyticTag) {
    return React.createElement(_ImageViewNativeComponent.default, (0, _extends2.default)({}, props, {
      ref: forwardedRef,
      style: style,
      resizeMode: resizeMode,
      tintColor: tintColor,
      source: sources,
      internal_analyticTag: analyticTag
    }));
  });
};
Image = React.forwardRef(Image);
Image.displayName = 'Image';
Image.getSize = getSize;
Image.getSizeWithHeaders = getSizeWithHeaders;
Image.prefetch = prefetch;
Image.prefetchWithMetadata = prefetchWithMetadata;
Image.queryCache = queryCache;
Image.resolveAssetSource = _resolveAssetSource.default;
Image.propTypes = _DeprecatedImagePropType.default;
var styles = _StyleSheet.default.create({
  base: {
    overflow: 'hidden'
  }
});
module.exports = Image;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfRGVwcmVjYXRlZEltYWdlUHJvcFR5cGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfU3R5bGVTaGVldCIsIl9JbWFnZUFuYWx5dGljc1RhZ0NvbnRleHQiLCJfZmxhdHRlblN0eWxlIiwiX3Jlc29sdmVBc3NldFNvdXJjZSIsIl9OYXRpdmVJbWFnZUxvYWRlcklPUyIsIl9JbWFnZVZpZXdOYXRpdmVDb21wb25lbnQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImV4cG9ydHMiLCJPcCIsImhhc093biIsInZhbHVlIiwiJFN5bWJvbCIsIlN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJlcnIiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJzZWxmIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNyZWF0ZSIsImNvbnRleHQiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwiZm4iLCJhcmciLCJ0eXBlIiwiQ29udGludWVTZW50aW5lbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIm1ldGhvZCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVjb3JkIiwicmVzdWx0IiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJlcnJvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwic3RhdGUiLCJFcnJvciIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiZG9uZSIsIm1ldGhvZE5hbWUiLCJ1bmRlZmluZWQiLCJyZXR1cm4iLCJUeXBlRXJyb3IiLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNOYU4iLCJsZW5ndGgiLCJpIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwiaXRlciIsImtleXMiLCJ2YWwiLCJvYmplY3QiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwiY2F0Y2giLCJfY2F0Y2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwiZ2V0U2l6ZSIsInVyaSIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwiTmF0aXZlSW1hZ2VMb2FkZXJJT1MiLCJfcmVmIiwiX3JlZjIiLCJfc2xpY2VkVG9BcnJheTIiLCJ3aWR0aCIsImhlaWdodCIsImNvbnNvbGUiLCJ3YXJuIiwiZ2V0U2l6ZVdpdGhIZWFkZXJzIiwiaGVhZGVycyIsInNpemVzIiwicHJlZmV0Y2hXaXRoTWV0YWRhdGEiLCJ1cmwiLCJxdWVyeVJvb3ROYW1lIiwicm9vdFRhZyIsInByZWZldGNoSW1hZ2VXaXRoTWV0YWRhdGEiLCJwcmVmZXRjaEltYWdlIiwicHJlZmV0Y2giLCJxdWVyeUNhY2hlIiwidXJscyIsInF1ZXJ5Q2FjaGUkIiwiX2NvbnRleHQiLCJJbWFnZSIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwic291cmNlIiwicmVzb2x2ZUFzc2V0U291cmNlIiwic291cmNlcyIsInN0eWxlIiwiQXJyYXkiLCJpc0FycmF5IiwiZmxhdHRlblN0eWxlIiwic3R5bGVzIiwiYmFzZSIsInJlc2l6ZU1vZGUiLCJ0aW50Q29sb3IiLCJzcmMiLCJjaGlsZHJlbiIsImNyZWF0ZUVsZW1lbnQiLCJDb25zdW1lciIsImFuYWx5dGljVGFnIiwiX2V4dGVuZHMyIiwicmVmIiwiaW50ZXJuYWxfYW5hbHl0aWNUYWciLCJmb3J3YXJkUmVmIiwicHJvcFR5cGVzIiwiRGVwcmVjYXRlZEltYWdlUHJvcFR5cGUiLCJTdHlsZVNoZWV0Iiwib3ZlcmZsb3ciLCJtb2R1bGUiXSwic291cmNlcyI6WyJJbWFnZS5pb3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCBEZXByZWNhdGVkSW1hZ2VQcm9wVHlwZSBmcm9tICcuLi9EZXByZWNhdGVkUHJvcFR5cGVzL0RlcHJlY2F0ZWRJbWFnZVByb3BUeXBlJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5cbmltcG9ydCBJbWFnZUFuYWx5dGljc1RhZ0NvbnRleHQgZnJvbSAnLi9JbWFnZUFuYWx5dGljc1RhZ0NvbnRleHQnO1xuaW1wb3J0IGZsYXR0ZW5TdHlsZSBmcm9tICcuLi9TdHlsZVNoZWV0L2ZsYXR0ZW5TdHlsZSc7XG5pbXBvcnQgcmVzb2x2ZUFzc2V0U291cmNlIGZyb20gJy4vcmVzb2x2ZUFzc2V0U291cmNlJztcblxuaW1wb3J0IHR5cGUge0ltYWdlUHJvcHMgYXMgSW1hZ2VQcm9wc1R5cGV9IGZyb20gJy4vSW1hZ2VQcm9wcyc7XG5cbmltcG9ydCB0eXBlIHtJbWFnZVN0eWxlUHJvcH0gZnJvbSAnLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCBOYXRpdmVJbWFnZUxvYWRlcklPUyBmcm9tICcuL05hdGl2ZUltYWdlTG9hZGVySU9TJztcblxuaW1wb3J0IEltYWdlVmlld05hdGl2ZUNvbXBvbmVudCBmcm9tICcuL0ltYWdlVmlld05hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgdHlwZSB7Um9vdFRhZ30gZnJvbSAncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9UeXBlcy9Sb290VGFnVHlwZXMnO1xuXG5mdW5jdGlvbiBnZXRTaXplKFxuICB1cmk6IHN0cmluZyxcbiAgc3VjY2VzczogKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB2b2lkLFxuICBmYWlsdXJlPzogKGVycm9yOiBhbnkpID0+IHZvaWQsXG4pIHtcbiAgTmF0aXZlSW1hZ2VMb2FkZXJJT1MuZ2V0U2l6ZSh1cmkpXG4gICAgLnRoZW4oKFt3aWR0aCwgaGVpZ2h0XSkgPT4gc3VjY2Vzcyh3aWR0aCwgaGVpZ2h0KSlcbiAgICAuY2F0Y2goXG4gICAgICBmYWlsdXJlIHx8XG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGdldCBzaXplIGZvciBpbWFnZSAnICsgdXJpKTtcbiAgICAgICAgfSxcbiAgICApO1xufVxuXG5mdW5jdGlvbiBnZXRTaXplV2l0aEhlYWRlcnMoXG4gIHVyaTogc3RyaW5nLFxuICBoZWFkZXJzOiB7W3N0cmluZ106IHN0cmluZywgLi4ufSxcbiAgc3VjY2VzczogKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB2b2lkLFxuICBmYWlsdXJlPzogKGVycm9yOiBhbnkpID0+IHZvaWQsXG4pOiBhbnkge1xuICByZXR1cm4gTmF0aXZlSW1hZ2VMb2FkZXJJT1MuZ2V0U2l6ZVdpdGhIZWFkZXJzKHVyaSwgaGVhZGVycylcbiAgICAudGhlbihmdW5jdGlvbihzaXplcykge1xuICAgICAgc3VjY2VzcyhzaXplcy53aWR0aCwgc2l6ZXMuaGVpZ2h0KTtcbiAgICB9KVxuICAgIC5jYXRjaChcbiAgICAgIGZhaWx1cmUgfHxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gZ2V0IHNpemUgZm9yIGltYWdlOiAnICsgdXJpKTtcbiAgICAgICAgfSxcbiAgICApO1xufVxuXG5mdW5jdGlvbiBwcmVmZXRjaFdpdGhNZXRhZGF0YShcbiAgdXJsOiBzdHJpbmcsXG4gIHF1ZXJ5Um9vdE5hbWU6IHN0cmluZyxcbiAgcm9vdFRhZz86ID9Sb290VGFnLFxuKTogYW55IHtcbiAgaWYgKE5hdGl2ZUltYWdlTG9hZGVySU9TLnByZWZldGNoSW1hZ2VXaXRoTWV0YWRhdGEpIHtcbiAgICAvLyBudW1iZXIgcGFyYW1zIGxpa2Ugcm9vdFRhZyBjYW5ub3QgYmUgbnVsbGFibGUgYmVmb3JlIFR1cmJvTW9kdWxlcyBpcyBhdmFpbGFibGVcbiAgICByZXR1cm4gTmF0aXZlSW1hZ2VMb2FkZXJJT1MucHJlZmV0Y2hJbWFnZVdpdGhNZXRhZGF0YShcbiAgICAgIHVybCxcbiAgICAgIHF1ZXJ5Um9vdE5hbWUsXG4gICAgICAvLyBOT1RFOiBSb290VGFnIHR5cGVcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdIFJvb3RUYWc6IG51bWJlciBpcyBpbmNvbXBhdGlibGUgd2l0aCBSb290VGFnXG4gICAgICByb290VGFnID8gcm9vdFRhZyA6IDAsXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gTmF0aXZlSW1hZ2VMb2FkZXJJT1MucHJlZmV0Y2hJbWFnZSh1cmwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByZWZldGNoKHVybDogc3RyaW5nKTogYW55IHtcbiAgcmV0dXJuIE5hdGl2ZUltYWdlTG9hZGVySU9TLnByZWZldGNoSW1hZ2UodXJsKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcXVlcnlDYWNoZShcbiAgdXJsczogQXJyYXk8c3RyaW5nPixcbik6IFByb21pc2U8e1tzdHJpbmddOiAnbWVtb3J5JyB8ICdkaXNrJyB8ICdkaXNrL21lbW9yeScsIC4uLn0+IHtcbiAgcmV0dXJuIGF3YWl0IE5hdGl2ZUltYWdlTG9hZGVySU9TLnF1ZXJ5Q2FjaGUodXJscyk7XG59XG5cbnR5cGUgSW1hZ2VDb21wb25lbnRTdGF0aWNzID0gJFJlYWRPbmx5PHt8XG4gIGdldFNpemU6IHR5cGVvZiBnZXRTaXplLFxuICBnZXRTaXplV2l0aEhlYWRlcnM6IHR5cGVvZiBnZXRTaXplV2l0aEhlYWRlcnMsXG4gIHByZWZldGNoOiB0eXBlb2YgcHJlZmV0Y2gsXG4gIHByZWZldGNoV2l0aE1ldGFkYXRhOiB0eXBlb2YgcHJlZmV0Y2hXaXRoTWV0YWRhdGEsXG4gIHF1ZXJ5Q2FjaGU6IHR5cGVvZiBxdWVyeUNhY2hlLFxuICByZXNvbHZlQXNzZXRTb3VyY2U6IHR5cGVvZiByZXNvbHZlQXNzZXRTb3VyY2UsXG4gIHByb3BUeXBlczogdHlwZW9mIERlcHJlY2F0ZWRJbWFnZVByb3BUeXBlLFxufH0+O1xuXG4vKipcbiAqIEEgUmVhY3QgY29tcG9uZW50IGZvciBkaXNwbGF5aW5nIGRpZmZlcmVudCB0eXBlcyBvZiBpbWFnZXMsXG4gKiBpbmNsdWRpbmcgbmV0d29yayBpbWFnZXMsIHN0YXRpYyByZXNvdXJjZXMsIHRlbXBvcmFyeSBsb2NhbCBpbWFnZXMsIGFuZFxuICogaW1hZ2VzIGZyb20gbG9jYWwgZGlzaywgc3VjaCBhcyB0aGUgY2FtZXJhIHJvbGwuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvaW1hZ2UuaHRtbFxuICovXG5sZXQgSW1hZ2UgPSAocHJvcHM6IEltYWdlUHJvcHNUeXBlLCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgY29uc3Qgc291cmNlID0gcmVzb2x2ZUFzc2V0U291cmNlKHByb3BzLnNvdXJjZSkgfHwge1xuICAgIHVyaTogdW5kZWZpbmVkLFxuICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gIH07XG5cbiAgbGV0IHNvdXJjZXM7XG4gIGxldCBzdHlsZTogSW1hZ2VTdHlsZVByb3A7XG4gIGlmIChBcnJheS5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICBzdHlsZSA9IGZsYXR0ZW5TdHlsZShbc3R5bGVzLmJhc2UsIHByb3BzLnN0eWxlXSkgfHwge307XG4gICAgc291cmNlcyA9IHNvdXJjZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodCwgdXJpfSA9IHNvdXJjZTtcbiAgICBzdHlsZSA9IGZsYXR0ZW5TdHlsZShbe3dpZHRoLCBoZWlnaHR9LCBzdHlsZXMuYmFzZSwgcHJvcHMuc3R5bGVdKSB8fCB7fTtcbiAgICBzb3VyY2VzID0gW3NvdXJjZV07XG5cbiAgICBpZiAodXJpID09PSAnJykge1xuICAgICAgY29uc29sZS53YXJuKCdzb3VyY2UudXJpIHNob3VsZCBub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuICBjb25zdCByZXNpemVNb2RlID0gcHJvcHMucmVzaXplTW9kZSB8fCBzdHlsZS5yZXNpemVNb2RlIHx8ICdjb3Zlcic7XG4gIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gIGNvbnN0IHRpbnRDb2xvciA9IHN0eWxlLnRpbnRDb2xvcjtcblxuICBpZiAocHJvcHMuc3JjICE9IG51bGwpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnVGhlIDxJbWFnZT4gY29tcG9uZW50IHJlcXVpcmVzIGEgYHNvdXJjZWAgcHJvcGVydHkgcmF0aGVyIHRoYW4gYHNyY2AuJyxcbiAgICApO1xuICB9XG5cbiAgaWYgKHByb3BzLmNoaWxkcmVuICE9IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnVGhlIDxJbWFnZT4gY29tcG9uZW50IGNhbm5vdCBjb250YWluIGNoaWxkcmVuLiBJZiB5b3Ugd2FudCB0byByZW5kZXIgY29udGVudCBvbiB0b3Agb2YgdGhlIGltYWdlLCBjb25zaWRlciB1c2luZyB0aGUgPEltYWdlQmFja2dyb3VuZD4gY29tcG9uZW50IG9yIGFic29sdXRlIHBvc2l0aW9uaW5nLicsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEltYWdlQW5hbHl0aWNzVGFnQ29udGV4dC5Db25zdW1lcj5cbiAgICAgIHthbmFseXRpY1RhZyA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEltYWdlVmlld05hdGl2ZUNvbXBvbmVudFxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9XG4gICAgICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuICAgICAgICAgICAgcmVzaXplTW9kZT17cmVzaXplTW9kZX1cbiAgICAgICAgICAgIHRpbnRDb2xvcj17dGludENvbG9yfVxuICAgICAgICAgICAgc291cmNlPXtzb3VyY2VzfVxuICAgICAgICAgICAgaW50ZXJuYWxfYW5hbHl0aWNUYWc9e2FuYWx5dGljVGFnfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9fVxuICAgIDwvSW1hZ2VBbmFseXRpY3NUYWdDb250ZXh0LkNvbnN1bWVyPlxuICApO1xufTtcblxuSW1hZ2UgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBJbWFnZVByb3BzVHlwZSxcbiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgSW1hZ2VWaWV3TmF0aXZlQ29tcG9uZW50Pixcbj4oSW1hZ2UpO1xuSW1hZ2UuZGlzcGxheU5hbWUgPSAnSW1hZ2UnO1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IChpbiBwaXhlbHMpIG9mIGFuIGltYWdlIHByaW9yIHRvIGRpc3BsYXlpbmcgaXQuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvaW1hZ2UuaHRtbCNnZXRzaXplXG4gKi9cbi8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSAoPj0wLjg5LjAgc2l0ZT1yZWFjdF9uYXRpdmVfaW9zX2ZiKSBUaGlzIGNvbW1lbnRcbiAqIHN1cHByZXNzZXMgYW4gZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjg5IHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvcixcbiAqIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuSW1hZ2UuZ2V0U2l6ZSA9IGdldFNpemU7XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIHdpZHRoIGFuZCBoZWlnaHQgKGluIHBpeGVscykgb2YgYW4gaW1hZ2UgcHJpb3IgdG8gZGlzcGxheWluZyBpdFxuICogd2l0aCB0aGUgYWJpbGl0eSB0byBwcm92aWRlIHRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9pbWFnZS5odG1sI2dldHNpemV3aXRoaGVhZGVyc1xuICovXG4vKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gKD49MC44OS4wIHNpdGU9cmVhY3RfbmF0aXZlX2lvc19mYikgVGhpcyBjb21tZW50XG4gKiBzdXBwcmVzc2VzIGFuIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC44OSB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3IsXG4gKiBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbkltYWdlLmdldFNpemVXaXRoSGVhZGVycyA9IGdldFNpemVXaXRoSGVhZGVycztcblxuLyoqXG4gKiBQcmVmZXRjaGVzIGEgcmVtb3RlIGltYWdlIGZvciBsYXRlciB1c2UgYnkgZG93bmxvYWRpbmcgaXQgdG8gdGhlIGRpc2tcbiAqIGNhY2hlLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2ltYWdlLmh0bWwjcHJlZmV0Y2hcbiAqL1xuLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddICg+PTAuODkuMCBzaXRlPXJlYWN0X25hdGl2ZV9pb3NfZmIpIFRoaXMgY29tbWVudFxuICogc3VwcHJlc3NlcyBhbiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuODkgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yLFxuICogZGVsZXRlIHRoaXMgY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG5JbWFnZS5wcmVmZXRjaCA9IHByZWZldGNoO1xuXG4vKipcbiAqIFByZWZldGNoZXMgYSByZW1vdGUgaW1hZ2UgZm9yIGxhdGVyIHVzZSBieSBkb3dubG9hZGluZyBpdCB0byB0aGUgZGlza1xuICogY2FjaGUsIGFuZCBhZGRzIG1ldGFkYXRhIGZvciBxdWVyeVJvb3ROYW1lIGFuZCByb290VGFnLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2ltYWdlLmh0bWwjcHJlZmV0Y2hcbiAqL1xuLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddICg+PTAuODkuMCBzaXRlPXJlYWN0X25hdGl2ZV9pb3NfZmIpIFRoaXMgY29tbWVudFxuICogc3VwcHJlc3NlcyBhbiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuODkgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yLFxuICogZGVsZXRlIHRoaXMgY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG5JbWFnZS5wcmVmZXRjaFdpdGhNZXRhZGF0YSA9IHByZWZldGNoV2l0aE1ldGFkYXRhO1xuXG4vKipcbiAqIFBlcmZvcm1zIGNhY2hlIGludGVycm9nYXRpb24uXG4gKlxuICogIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2ltYWdlLmh0bWwjcXVlcnljYWNoZVxuICovXG4vKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gKD49MC44OS4wIHNpdGU9cmVhY3RfbmF0aXZlX2lvc19mYikgVGhpcyBjb21tZW50XG4gKiBzdXBwcmVzc2VzIGFuIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC44OSB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3IsXG4gKiBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbkltYWdlLnF1ZXJ5Q2FjaGUgPSBxdWVyeUNhY2hlO1xuXG4vKipcbiAqIFJlc29sdmVzIGFuIGFzc2V0IHJlZmVyZW5jZSBpbnRvIGFuIG9iamVjdC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9pbWFnZS5odG1sI3Jlc29sdmVhc3NldHNvdXJjZVxuICovXG4vKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gKD49MC44OS4wIHNpdGU9cmVhY3RfbmF0aXZlX2lvc19mYikgVGhpcyBjb21tZW50XG4gKiBzdXBwcmVzc2VzIGFuIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC44OSB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3IsXG4gKiBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbkltYWdlLnJlc29sdmVBc3NldFNvdXJjZSA9IHJlc29sdmVBc3NldFNvdXJjZTtcblxuSW1hZ2UucHJvcFR5cGVzID0gRGVwcmVjYXRlZEltYWdlUHJvcFR5cGU7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgYmFzZToge1xuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgoSW1hZ2U6IGFueSk6IFJlYWN0LkFic3RyYWN0Q29tcG9uZW50PFxuICBJbWFnZVByb3BzVHlwZSxcbiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgSW1hZ2VWaWV3TmF0aXZlQ29tcG9uZW50Pixcbj4gJlxuICBJbWFnZUNvbXBvbmVudFN0YXRpY3MpO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQVVBLElBQUFBLHdCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFDLHVCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxXQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBSSx5QkFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssYUFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sbUJBQUEsR0FBQVAsc0JBQUEsQ0FB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