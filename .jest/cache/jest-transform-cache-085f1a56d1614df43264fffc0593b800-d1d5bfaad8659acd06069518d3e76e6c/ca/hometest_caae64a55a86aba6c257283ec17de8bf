3329db90d9d15b70b24d0ccc68ad20dc
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));
var _reactNative = require("@testing-library/react-native");
var _Home = _interopRequireDefault(require("../Home"));
var _actions = require("../../redux/actions");
var _hotels_response = _interopRequireDefault(require("./fixtures/hotels_response"));
var _setup = _interopRequireDefault(require("../setup"));
var mockStore = (0, _reduxMockStore.default)();
var store = mockStore({
  hotel: {
    hotels: _hotels_response.default
  }
});
describe('Test homepage screen', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    (0, _setup.default)(_react.default.createElement(_Home.default, {
      hotels: _hotels_response.default
    }), store);
  });
  afterEach(_reactNative.cleanup);
  it('fetches the hotels on mount', function () {
    var expectedAction = (0, _actions.getHotels)({
      q: '',
      page: 1
    });
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith(expectedAction);
  });
  it('should display the list of hotels', function () {
    expect(_reactNative.screen.getByTestId('search-box')).toBeDefined();
  });
  it('should render a list of hotels', function () {
    _hotels_response.default.forEach(function (hotel) {
      var hotelName = _reactNative.screen.getByText(hotel.name);
      var addressElement = _reactNative.screen.getByText(hotel.short_address);
      expect(hotelName).toBeDefined();
      expect(addressElement).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWR1eE1vY2tTdG9yZSIsIl9yZWFjdE5hdGl2ZSIsIl9Ib21lIiwiX2FjdGlvbnMiLCJfaG90ZWxzX3Jlc3BvbnNlIiwiX3NldHVwIiwibW9ja1N0b3JlIiwiY29uZmlndXJlU3RvcmUiLCJzdG9yZSIsImhvdGVsIiwiaG90ZWxzIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiZGlzcGF0Y2giLCJqZXN0IiwiZm4iLCJTZXR1cCIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiYWZ0ZXJFYWNoIiwiY2xlYW51cCIsIml0IiwiZXhwZWN0ZWRBY3Rpb24iLCJnZXRIb3RlbHMiLCJxIiwicGFnZSIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlRGVmaW5lZCIsImZvckVhY2giLCJob3RlbE5hbWUiLCJnZXRCeVRleHQiLCJuYW1lIiwiYWRkcmVzc0VsZW1lbnQiLCJzaG9ydF9hZGRyZXNzIl0sInNvdXJjZXMiOlsiaG9tZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNvbmZpZ3VyZVN0b3JlIGZyb20gJ3JlZHV4LW1vY2stc3RvcmUnO1xuaW1wb3J0IHtjbGVhbnVwLCBzY3JlZW59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IEhvbWUgZnJvbSAnLi4vSG9tZSc7XG5pbXBvcnQge2dldEhvdGVsc30gZnJvbSAnLi4vLi4vcmVkdXgvYWN0aW9ucyc7XG5pbXBvcnQgaG90ZWxzIGZyb20gJy4vZml4dHVyZXMvaG90ZWxzX3Jlc3BvbnNlJztcbmltcG9ydCBTZXR1cCBmcm9tICcuLi9zZXR1cCc7XG5cbmxldCBtb2NrU3RvcmUgPSBjb25maWd1cmVTdG9yZSgpO1xuXG5jb25zdCBzdG9yZSA9IG1vY2tTdG9yZSh7XG4gIGhvdGVsOiB7XG4gICAgaG90ZWxzOiBob3RlbHMsXG4gIH0sXG59KTtcblxuZGVzY3JpYmUoJ1Rlc3QgaG9tZXBhZ2Ugc2NyZWVuJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBzdG9yZS5kaXNwYXRjaCA9IGplc3QuZm4oKTtcbiAgICBTZXR1cCg8SG9tZSBob3RlbHM9e2hvdGVsc30gLz4sIHN0b3JlKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGNsZWFudXApO1xuXG4gIGl0KCdmZXRjaGVzIHRoZSBob3RlbHMgb24gbW91bnQnLCAoKSA9PiB7XG4gICAgY29uc3QgZXhwZWN0ZWRBY3Rpb24gPSBnZXRIb3RlbHMoe3E6ICcnLCBwYWdlOiAxfSk7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3RlZEFjdGlvbik7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZGlzcGxheSB0aGUgbGlzdCBvZiBob3RlbHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnc2VhcmNoLWJveCcpKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhIGxpc3Qgb2YgaG90ZWxzJywgKCkgPT4ge1xuICAgIGhvdGVscy5mb3JFYWNoKGhvdGVsID0+IHtcbiAgICAgIGNvbnN0IGhvdGVsTmFtZSA9IHNjcmVlbi5nZXRCeVRleHQoaG90ZWwubmFtZSk7XG4gICAgICBjb25zdCBhZGRyZXNzRWxlbWVudCA9IHNjcmVlbi5nZXRCeVRleHQoaG90ZWwuc2hvcnRfYWRkcmVzcyk7XG4gICAgICBleHBlY3QoaG90ZWxOYW1lKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGFkZHJlc3NFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxlQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFBRyxLQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxnQkFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sTUFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBSU8sU0FBUyxHQUFHLElBQUFDLHVCQUFjLEdBQUU7QUFFaEMsSUFBTUMsS0FBSyxHQUFHRixTQUFTLENBQUM7RUFDdEJHLEtBQUssRUFBRTtJQUNMQyxNQUFNLEVBQUVBO0VBQ1Y7QUFDRixDQUFDLENBQUM7QUFFRkMsUUFBUSxDQUFDLHNCQUFzQixFQUFFLFlBQU07RUFDckNDLFVBQVUsQ0FBQyxZQUFNO0lBQ2ZKLEtBQUssQ0FBQ0ssUUFBUSxHQUFHQyxJQUFJLENBQUNDLEVBQUUsRUFBRTtJQUMxQixJQUFBQyxjQUFLLEVBQUNuQixNQUFBLENBQUFvQixPQUFBLENBQUFDLGFBQUEsQ0FBQ2hCLEtBQUEsQ0FBQWUsT0FBSTtNQUFDUCxNQUFNLEVBQUVBO0lBQU8sRUFBRyxFQUFFRixLQUFLLENBQUM7RUFDeEMsQ0FBQyxDQUFDO0VBRUZXLFNBQVMsQ0FBQ0Msb0JBQU8sQ0FBQztFQUVsQkMsRUFBRSxDQUFDLDZCQUE2QixFQUFFLFlBQU07SUFDdEMsSUFBTUMsY0FBYyxHQUFHLElBQUFDLGtCQUFTLEVBQUM7TUFBQ0MsQ0FBQyxFQUFFLEVBQUU7TUFBRUMsSUFBSSxFQUFFO0lBQUMsQ0FBQyxDQUFDO0lBQ2xEQyxNQUFNLENBQUNsQixLQUFLLENBQUNLLFFBQVEsQ0FBQyxDQUFDYyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDL0NELE1BQU0sQ0FBQ2xCLEtBQUssQ0FBQ0ssUUFBUSxDQUFDLENBQUNlLG9CQUFvQixDQUFDTixjQUFjLENBQUM7RUFDN0QsQ0FBQyxDQUFDO0VBRUZELEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxZQUFNO0lBQzVDSyxNQUFNLENBQUNHLG1CQUFNLENBQUNDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDQyxXQUFXLEVBQUU7RUFDeEQsQ0FBQyxDQUFDO0VBRUZWLEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFNO0lBQ3pDWCx3QkFBTSxDQUFDc0IsT0FBTyxDQUFDLFVBQUF2QixLQUFLLEVBQUk7TUFDdEIsSUFBTXdCLFNBQVMsR0FBR0osbUJBQU0sQ0FBQ0ssU0FBUyxDQUFDekIsS0FBSyxDQUFDMEIsSUFBSSxDQUFDO01BQzlDLElBQU1DLGNBQWMsR0FBR1AsbUJBQU0sQ0FBQ0ssU0FBUyxDQUFDekIsS0FBSyxDQUFDNEIsYUFBYSxDQUFDO01BQzVEWCxNQUFNLENBQUNPLFNBQVMsQ0FBQyxDQUFDRixXQUFXLEVBQUU7TUFDL0JMLE1BQU0sQ0FBQ1UsY0FBYyxDQUFDLENBQUNMLFdBQVcsRUFBRTtJQUN0QyxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==