791fde59d7955c7bef84a1896b27401b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _Text = _interopRequireDefault(require("../../Text/Text"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var cleanContent = function cleanContent(content) {
  return content.replace(/^(TransformError |Warning: (Warning: )?|Error: )/g, '');
};
function LogBoxMessage(props) {
  var _props$message = props.message,
    content = _props$message.content,
    substitutions = _props$message.substitutions;
  if (props.plaintext === true) {
    return React.createElement(_Text.default, null, cleanContent(content));
  }
  var maxLength = props.maxLength != null ? props.maxLength : Infinity;
  var substitutionStyle = props.style;
  var elements = [];
  var length = 0;
  var createUnderLength = function createUnderLength(key, message, style) {
    var cleanMessage = cleanContent(message);
    if (props.maxLength != null) {
      cleanMessage = cleanMessage.slice(0, props.maxLength - length);
    }
    if (length < maxLength) {
      elements.push(React.createElement(_Text.default, {
        key: key,
        style: style
      }, cleanMessage));
    }
    length += cleanMessage.length;
  };
  var lastOffset = substitutions.reduce(function (prevOffset, substitution, index) {
    var key = String(index);
    if (substitution.offset > prevOffset) {
      var prevPart = content.substr(prevOffset, substitution.offset - prevOffset);
      createUnderLength(key, prevPart);
    }
    var substititionPart = content.substr(substitution.offset, substitution.length);
    createUnderLength(key + '.5', substititionPart, substitutionStyle);
    return substitution.offset + substitution.length;
  }, 0);
  if (lastOffset < content.length) {
    var lastPart = content.substr(lastOffset);
    createUnderLength('-1', lastPart);
  }
  return React.createElement(React.Fragment, null, elements);
}
var _default = LogBoxMessage;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9UZXh0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJjbGVhbkNvbnRlbnQiLCJjb250ZW50IiwicmVwbGFjZSIsIkxvZ0JveE1lc3NhZ2UiLCJwcm9wcyIsIl9wcm9wcyRtZXNzYWdlIiwibWVzc2FnZSIsInN1YnN0aXR1dGlvbnMiLCJwbGFpbnRleHQiLCJjcmVhdGVFbGVtZW50IiwibWF4TGVuZ3RoIiwiSW5maW5pdHkiLCJzdWJzdGl0dXRpb25TdHlsZSIsInN0eWxlIiwiZWxlbWVudHMiLCJsZW5ndGgiLCJjcmVhdGVVbmRlckxlbmd0aCIsImNsZWFuTWVzc2FnZSIsInNsaWNlIiwicHVzaCIsImxhc3RPZmZzZXQiLCJyZWR1Y2UiLCJwcmV2T2Zmc2V0Iiwic3Vic3RpdHV0aW9uIiwiaW5kZXgiLCJTdHJpbmciLCJvZmZzZXQiLCJwcmV2UGFydCIsInN1YnN0ciIsInN1YnN0aXRpdGlvblBhcnQiLCJsYXN0UGFydCIsIkZyYWdtZW50IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiTG9nQm94TWVzc2FnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUZXh0IGZyb20gJy4uLy4uL1RleHQvVGV4dCc7XG5cbmltcG9ydCB0eXBlIHtUZXh0U3R5bGVQcm9wfSBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IHR5cGUge01lc3NhZ2V9IGZyb20gJy4uL0RhdGEvcGFyc2VMb2dCb3hMb2cnO1xuXG50eXBlIFByb3BzID0ge1xuICBtZXNzYWdlOiBNZXNzYWdlLFxuICBzdHlsZTogVGV4dFN0eWxlUHJvcCxcbiAgcGxhaW50ZXh0PzogP2Jvb2xlYW4sXG4gIG1heExlbmd0aD86ID9udW1iZXIsXG4gIC4uLlxufTtcblxuY29uc3QgY2xlYW5Db250ZW50ID0gY29udGVudCA9PlxuICBjb250ZW50LnJlcGxhY2UoL14oVHJhbnNmb3JtRXJyb3IgfFdhcm5pbmc6IChXYXJuaW5nOiApP3xFcnJvcjogKS9nLCAnJyk7XG5cbmZ1bmN0aW9uIExvZ0JveE1lc3NhZ2UocHJvcHM6IFByb3BzKTogUmVhY3QuTm9kZSB7XG4gIGNvbnN0IHtjb250ZW50LCBzdWJzdGl0dXRpb25zfTogTWVzc2FnZSA9IHByb3BzLm1lc3NhZ2U7XG5cbiAgaWYgKHByb3BzLnBsYWludGV4dCA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiA8VGV4dD57Y2xlYW5Db250ZW50KGNvbnRlbnQpfTwvVGV4dD47XG4gIH1cblxuICBjb25zdCBtYXhMZW5ndGggPSBwcm9wcy5tYXhMZW5ndGggIT0gbnVsbCA/IHByb3BzLm1heExlbmd0aCA6IEluZmluaXR5O1xuICBjb25zdCBzdWJzdGl0dXRpb25TdHlsZTogVGV4dFN0eWxlUHJvcCA9IHByb3BzLnN0eWxlO1xuICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICBsZXQgbGVuZ3RoID0gMDtcbiAgY29uc3QgY3JlYXRlVW5kZXJMZW5ndGggPSAoa2V5LCBtZXNzYWdlLCBzdHlsZSkgPT4ge1xuICAgIGxldCBjbGVhbk1lc3NhZ2UgPSBjbGVhbkNvbnRlbnQobWVzc2FnZSk7XG5cbiAgICBpZiAocHJvcHMubWF4TGVuZ3RoICE9IG51bGwpIHtcbiAgICAgIGNsZWFuTWVzc2FnZSA9IGNsZWFuTWVzc2FnZS5zbGljZSgwLCBwcm9wcy5tYXhMZW5ndGggLSBsZW5ndGgpO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgIGVsZW1lbnRzLnB1c2goXG4gICAgICAgIDxUZXh0IGtleT17a2V5fSBzdHlsZT17c3R5bGV9PlxuICAgICAgICAgIHtjbGVhbk1lc3NhZ2V9XG4gICAgICAgIDwvVGV4dD4sXG4gICAgICApO1xuICAgIH1cblxuICAgIGxlbmd0aCArPSBjbGVhbk1lc3NhZ2UubGVuZ3RoO1xuICB9O1xuXG4gIGNvbnN0IGxhc3RPZmZzZXQgPSBzdWJzdGl0dXRpb25zLnJlZHVjZSgocHJldk9mZnNldCwgc3Vic3RpdHV0aW9uLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGtleSA9IFN0cmluZyhpbmRleCk7XG5cbiAgICBpZiAoc3Vic3RpdHV0aW9uLm9mZnNldCA+IHByZXZPZmZzZXQpIHtcbiAgICAgIGNvbnN0IHByZXZQYXJ0ID0gY29udGVudC5zdWJzdHIoXG4gICAgICAgIHByZXZPZmZzZXQsXG4gICAgICAgIHN1YnN0aXR1dGlvbi5vZmZzZXQgLSBwcmV2T2Zmc2V0LFxuICAgICAgKTtcblxuICAgICAgY3JlYXRlVW5kZXJMZW5ndGgoa2V5LCBwcmV2UGFydCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3Vic3RpdGl0aW9uUGFydCA9IGNvbnRlbnQuc3Vic3RyKFxuICAgICAgc3Vic3RpdHV0aW9uLm9mZnNldCxcbiAgICAgIHN1YnN0aXR1dGlvbi5sZW5ndGgsXG4gICAgKTtcblxuICAgIGNyZWF0ZVVuZGVyTGVuZ3RoKGtleSArICcuNScsIHN1YnN0aXRpdGlvblBhcnQsIHN1YnN0aXR1dGlvblN0eWxlKTtcbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uLm9mZnNldCArIHN1YnN0aXR1dGlvbi5sZW5ndGg7XG4gIH0sIDApO1xuXG4gIGlmIChsYXN0T2Zmc2V0IDwgY29udGVudC5sZW5ndGgpIHtcbiAgICBjb25zdCBsYXN0UGFydCA9IGNvbnRlbnQuc3Vic3RyKGxhc3RPZmZzZXQpO1xuICAgIGNyZWF0ZVVuZGVyTGVuZ3RoKCctMScsIGxhc3RQYXJ0KTtcbiAgfVxuXG4gIHJldHVybiA8PntlbGVtZW50c308Lz47XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvZ0JveE1lc3NhZ2U7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFVQSxJQUFBQSxLQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFBbUMsU0FBQUcseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFMLHdCQUFBUyxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQSxT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