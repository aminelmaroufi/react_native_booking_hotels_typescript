43235a0791b1b2d18d243c6b80feedda
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));
var _reactNative = require("@testing-library/react-native");
var eva = _interopRequireWildcard(require("@eva-design/eva"));
var _components = require("@ui-kitten/components");
var _Home = _interopRequireDefault(require("../Home"));
var _actions = require("../../redux/actions");
var _reactRedux = require("react-redux");
var _hotels_response = _interopRequireDefault(require("./fixtures/hotels_response"));
var _native = require("@react-navigation/native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var mockStore = (0, _reduxMockStore.default)();
var navigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var store = mockStore({
  hotel: {
    hotels: _hotels_response.default.result.hotels
  }
});
var setup = function setup() {
  return (0, _reactNative.render)(_react.default.createElement(_reactRedux.Provider, {
    store: store
  }, _react.default.createElement(_components.ApplicationProvider, (0, _extends2.default)({}, eva, {
    theme: eva.light
  }), _react.default.createElement(_native.NavigationContainer, null, _react.default.createElement(_Home.default, {
    hotels: _hotels_response.default.result.hotels
  })))));
};
describe('Test homepage screen', function () {
  beforeEach(function () {
    mockStore.dispatch = jest.fn();
    setup();
  });
  afterEach(_reactNative.cleanup);
  it('should display the list of hotels', function () {
    expect(_reactNative.screen.getByTestId('search-box')).toBeDefined();
  });
  it('fetches the hotels on mount', function () {
    var expectedAction = (0, _actions.getHotels)({
      q: '',
      page: 1
    });
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith(expectedAction);
    expect(store.getActions()).toContainEqual(expectedAction);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWR1eE1vY2tTdG9yZSIsIl9yZWFjdE5hdGl2ZSIsImV2YSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2NvbXBvbmVudHMiLCJfSG9tZSIsIl9hY3Rpb25zIiwiX3JlYWN0UmVkdXgiLCJfaG90ZWxzX3Jlc3BvbnNlIiwiX25hdGl2ZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJtb2NrU3RvcmUiLCJjb25maWd1cmVTdG9yZSIsIm5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImplc3QiLCJmbiIsImdvQmFjayIsInN0b3JlIiwiaG90ZWwiLCJob3RlbHMiLCJob3RlbHNfcmVzcG9uc2UiLCJyZXN1bHQiLCJzZXR1cCIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsIkFwcGxpY2F0aW9uUHJvdmlkZXIiLCJfZXh0ZW5kczIiLCJ0aGVtZSIsImxpZ2h0IiwiTmF2aWdhdGlvbkNvbnRhaW5lciIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImRpc3BhdGNoIiwiYWZ0ZXJFYWNoIiwiY2xlYW51cCIsIml0IiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlRGVmaW5lZCIsImV4cGVjdGVkQWN0aW9uIiwiZ2V0SG90ZWxzIiwicSIsInBhZ2UiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImdldEFjdGlvbnMiLCJ0b0NvbnRhaW5FcXVhbCJdLCJzb3VyY2VzIjpbImhvbWUudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tICdyZWR1eC1tb2NrLXN0b3JlJztcbmltcG9ydCB7XG4gIGNsZWFudXAsXG4gIGZpcmVFdmVudCxcbiAgcmVuZGVyLFxuICBzY3JlZW4sXG59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcblxuaW1wb3J0ICogYXMgZXZhIGZyb20gJ0BldmEtZGVzaWduL2V2YSc7XG5pbXBvcnQge0FwcGxpY2F0aW9uUHJvdmlkZXJ9IGZyb20gJ0B1aS1raXR0ZW4vY29tcG9uZW50cyc7XG4vLyBpbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAnLi4vLi4vcmVkdXgvc3RvcmUnO1xuaW1wb3J0IEhvbWUgZnJvbSAnLi4vSG9tZSc7XG5pbXBvcnQge2dldEhvdGVsc30gZnJvbSAnLi4vLi4vcmVkdXgvYWN0aW9ucyc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgaG90ZWxzX3Jlc3BvbnNlIGZyb20gJy4vZml4dHVyZXMvaG90ZWxzX3Jlc3BvbnNlJztcbmltcG9ydCB7TmF2aWdhdGlvbkNvbnRhaW5lcn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcblxubGV0IG1vY2tTdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKCk7XG5cbmNvbnN0IG5hdmlnYXRpb24gPSB7XG4gIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gIGdvQmFjazogamVzdC5mbigpLFxufTtcblxuY29uc3Qgc3RvcmUgPSBtb2NrU3RvcmUoe1xuICBob3RlbDoge1xuICAgIGhvdGVsczogaG90ZWxzX3Jlc3BvbnNlLnJlc3VsdC5ob3RlbHMsXG4gIH0sXG59KTtcblxuY29uc3Qgc2V0dXAgPSAoKSA9PlxuICByZW5kZXIoXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICA8QXBwbGljYXRpb25Qcm92aWRlciB7Li4uZXZhfSB0aGVtZT17ZXZhLmxpZ2h0fT5cbiAgICAgICAgPE5hdmlnYXRpb25Db250YWluZXI+XG4gICAgICAgICAgPEhvbWUgaG90ZWxzPXtob3RlbHNfcmVzcG9uc2UucmVzdWx0LmhvdGVsc30gLz5cbiAgICAgICAgPC9OYXZpZ2F0aW9uQ29udGFpbmVyPlxuICAgICAgPC9BcHBsaWNhdGlvblByb3ZpZGVyPlxuICAgIDwvUHJvdmlkZXI+LFxuICApO1xuXG5kZXNjcmliZSgnVGVzdCBob21lcGFnZSBzY3JlZW4nLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIG1vY2tTdG9yZS5kaXNwYXRjaCA9IGplc3QuZm4oKTtcbiAgICBzZXR1cCgpO1xuICB9KTtcblxuICBhZnRlckVhY2goY2xlYW51cCk7XG5cbiAgaXQoJ3Nob3VsZCBkaXNwbGF5IHRoZSBsaXN0IG9mIGhvdGVscycsICgpID0+IHtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdzZWFyY2gtYm94JykpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuICBpdCgnZmV0Y2hlcyB0aGUgaG90ZWxzIG9uIG1vdW50JywgKCkgPT4ge1xuICAgIGNvbnN0IGV4cGVjdGVkQWN0aW9uID0gZ2V0SG90ZWxzKHtxOiAnJywgcGFnZTogMX0pO1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0ZWRBY3Rpb24pO1xuICAgIGV4cGVjdChzdG9yZS5nZXRBY3Rpb25zKCkpLnRvQ29udGFpbkVxdWFsKGV4cGVjdGVkQWN0aW9uKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtB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