1958d8c5b4915290e6e8a5b9c6c91505
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));
var _reactNative = require("@testing-library/react-native");
var _Home = _interopRequireDefault(require("../Home"));
var _actions = require("../../redux/actions");
var _hotels_response = require("./fixtures/hotels_response.json");
var _setup = _interopRequireDefault(require("../setup"));
var mockStore = (0, _reduxMockStore.default)();
var store = mockStore({
  hotel: {
    hotels: _hotels_response.hotels
  }
});
describe('Test homepage screen', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    (0, _setup.default)(_react.default.createElement(_Home.default, {
      hotels: _hotels_response.hotels
    }), store);
  });
  afterEach(_reactNative.cleanup);
  it('fetches the hotels on mount', function () {
    var expectedAction = (0, _actions.getHotels)({
      q: '',
      page: 1
    });
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith(expectedAction);
  });
  it('should display the list of hotels', function () {
    expect(_reactNative.screen.getByTestId('search-box')).toBeDefined();
  });
  it('should render a list of hotels', function () {
    _hotels_response.hotels.forEach(function (hotel) {
      var hotelName = _reactNative.screen.getByText(hotel.name);
      var addressElement = _reactNative.screen.getByText(hotel.short_address);
      expect(hotelName).toBeDefined();
      expect(addressElement).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWR1eE1vY2tTdG9yZSIsIl9yZWFjdE5hdGl2ZSIsIl9Ib21lIiwiX2FjdGlvbnMiLCJfaG90ZWxzX3Jlc3BvbnNlIiwiX3NldHVwIiwibW9ja1N0b3JlIiwiY29uZmlndXJlU3RvcmUiLCJzdG9yZSIsImhvdGVsIiwiaG90ZWxzIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiZGlzcGF0Y2giLCJqZXN0IiwiZm4iLCJTZXR1cCIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiYWZ0ZXJFYWNoIiwiY2xlYW51cCIsIml0IiwiZXhwZWN0ZWRBY3Rpb24iLCJnZXRIb3RlbHMiLCJxIiwicGFnZSIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlRGVmaW5lZCIsImZvckVhY2giLCJob3RlbE5hbWUiLCJnZXRCeVRleHQiLCJuYW1lIiwiYWRkcmVzc0VsZW1lbnQiLCJzaG9ydF9hZGRyZXNzIl0sInNvdXJjZXMiOlsiaG9tZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNvbmZpZ3VyZVN0b3JlIGZyb20gJ3JlZHV4LW1vY2stc3RvcmUnO1xuaW1wb3J0IHtjbGVhbnVwLCBzY3JlZW59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IEhvbWUgZnJvbSAnLi4vSG9tZSc7XG5pbXBvcnQge2dldEhvdGVsc30gZnJvbSAnLi4vLi4vcmVkdXgvYWN0aW9ucyc7XG5pbXBvcnQge2hvdGVsc30gZnJvbSAnLi9maXh0dXJlcy9ob3RlbHNfcmVzcG9uc2UuanNvbic7XG5pbXBvcnQgU2V0dXAgZnJvbSAnLi4vc2V0dXAnO1xuXG5sZXQgbW9ja1N0b3JlID0gY29uZmlndXJlU3RvcmUoKTtcblxuY29uc3Qgc3RvcmUgPSBtb2NrU3RvcmUoe1xuICBob3RlbDoge1xuICAgIGhvdGVsczogaG90ZWxzLFxuICB9LFxufSk7XG5cbmRlc2NyaWJlKCdUZXN0IGhvbWVwYWdlIHNjcmVlbicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RvcmUuZGlzcGF0Y2ggPSBqZXN0LmZuKCk7XG4gICAgU2V0dXAoPEhvbWUgaG90ZWxzPXtob3RlbHN9IC8+LCBzdG9yZSk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaChjbGVhbnVwKTtcblxuICBpdCgnZmV0Y2hlcyB0aGUgaG90ZWxzIG9uIG1vdW50JywgKCkgPT4ge1xuICAgIGNvbnN0IGV4cGVjdGVkQWN0aW9uID0gZ2V0SG90ZWxzKHtxOiAnJywgcGFnZTogMX0pO1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0ZWRBY3Rpb24pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGRpc3BsYXkgdGhlIGxpc3Qgb2YgaG90ZWxzJywgKCkgPT4ge1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NlYXJjaC1ib3gnKSkudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSBsaXN0IG9mIGhvdGVscycsICgpID0+IHtcbiAgICBob3RlbHMuZm9yRWFjaChob3RlbCA9PiB7XG4gICAgICBjb25zdCBob3RlbE5hbWUgPSBzY3JlZW4uZ2V0QnlUZXh0KGhvdGVsLm5hbWUpO1xuICAgICAgY29uc3QgYWRkcmVzc0VsZW1lbnQgPSBzY3JlZW4uZ2V0QnlUZXh0KGhvdGVsLnNob3J0X2FkZHJlc3MpO1xuICAgICAgZXhwZWN0KGhvdGVsTmFtZSkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChhZGRyZXNzRWxlbWVudCkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsZUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBRUEsSUFBQUcsS0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksUUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssZ0JBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLE1BQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUlPLFNBQVMsR0FBRyxJQUFBQyx1QkFBYyxHQUFFO0FBRWhDLElBQU1DLEtBQUssR0FBR0YsU0FBUyxDQUFDO0VBQ3RCRyxLQUFLLEVBQUU7SUFDTEMsTUFBTSxFQUFFQTtFQUNWO0FBQ0YsQ0FBQyxDQUFDO0FBRUZDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxZQUFNO0VBQ3JDQyxVQUFVLENBQUMsWUFBTTtJQUNmSixLQUFLLENBQUNLLFFBQVEsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDMUIsSUFBQUMsY0FBSyxFQUFDbkIsTUFBQSxDQUFBb0IsT0FBQSxDQUFBQyxhQUFBLENBQUNoQixLQUFBLENBQUFlLE9BQUk7TUFBQ1AsTUFBTSxFQUFFQTtJQUFPLEVBQUcsRUFBRUYsS0FBSyxDQUFDO0VBQ3hDLENBQUMsQ0FBQztFQUVGVyxTQUFTLENBQUNDLG9CQUFPLENBQUM7RUFFbEJDLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxZQUFNO0lBQ3RDLElBQU1DLGNBQWMsR0FBRyxJQUFBQyxrQkFBUyxFQUFDO01BQUNDLENBQUMsRUFBRSxFQUFFO01BQUVDLElBQUksRUFBRTtJQUFDLENBQUMsQ0FBQztJQUNsREMsTUFBTSxDQUFDbEIsS0FBSyxDQUFDSyxRQUFRLENBQUMsQ0FBQ2MscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBQy9DRCxNQUFNLENBQUNsQixLQUFLLENBQUNLLFFBQVEsQ0FBQyxDQUFDZSxvQkFBb0IsQ0FBQ04sY0FBYyxDQUFDO0VBQzdELENBQUMsQ0FBQztFQUVGRCxFQUFFLENBQUMsbUNBQW1DLEVBQUUsWUFBTTtJQUM1Q0ssTUFBTSxDQUFDRyxtQkFBTSxDQUFDQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxFQUFFO0VBQ3hELENBQUMsQ0FBQztFQUVGVixFQUFFLENBQUMsZ0NBQWdDLEVBQUUsWUFBTTtJQUN6Q1gsdUJBQU0sQ0FBQ3NCLE9BQU8sQ0FBQyxVQUFBdkIsS0FBSyxFQUFJO01BQ3RCLElBQU13QixTQUFTLEdBQUdKLG1CQUFNLENBQUNLLFNBQVMsQ0FBQ3pCLEtBQUssQ0FBQzBCLElBQUksQ0FBQztNQUM5QyxJQUFNQyxjQUFjLEdBQUdQLG1CQUFNLENBQUNLLFNBQVMsQ0FBQ3pCLEtBQUssQ0FBQzRCLGFBQWEsQ0FBQztNQUM1RFgsTUFBTSxDQUFDTyxTQUFTLENBQUMsQ0FBQ0YsV0FBVyxFQUFFO01BQy9CTCxNQUFNLENBQUNVLGNBQWMsQ0FBQyxDQUFDTCxXQUFXLEVBQUU7SUFDdEMsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=