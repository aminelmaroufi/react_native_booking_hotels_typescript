281edfe552c69423debc05097b9dae85
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _deepMap = _interopRequireDefault(require("./deep-map"));
var validScaleSheetRegex = /^(\-?\d+(?:\.\d{1,3})?)@(mv?s(\d+(?:\.\d{1,2})?)?|s|vs)r?$/;
var scaleByAnnotation = function scaleByAnnotation(scale, verticalScale, moderateScale, moderateVerticalScale) {
  return function (value) {
    if (!validScaleSheetRegex.test(value)) {
      return value;
    }
    var regexExecResult = validScaleSheetRegex.exec(value);
    var size = parseFloat(regexExecResult[1]);
    var scaleFunc = regexExecResult[2];
    var scaleFactor = regexExecResult[3];
    if (scaleFactor) scaleFunc = scaleFunc.slice(0, -scaleFactor.length);
    var shouldRound = value.endsWith('r');
    var result;
    switch (scaleFunc) {
      case 's':
        result = scale(size);
        break;
      case 'vs':
        result = verticalScale(size);
        break;
      case 'ms':
        result = moderateScale(size, scaleFactor);
        break;
      case 'mvs':
        result = moderateVerticalScale(size, scaleFactor);
        break;
    }
    return shouldRound ? Math.round(result) : result;
  };
};
var scaledSheetCreator = function scaledSheetCreator(scale, verticalScale, moderateScale, moderateVerticalScale) {
  var scaleFunc = scaleByAnnotation(scale, verticalScale, moderateScale, moderateVerticalScale);
  return {
    create: function create(styleSheet) {
      return _reactNative.StyleSheet.create((0, _deepMap.default)(styleSheet, scaleFunc));
    }
  };
};
var _default = scaledSheetCreator;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2RlZXBNYXAiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwidmFsaWRTY2FsZVNoZWV0UmVnZXgiLCJzY2FsZUJ5QW5ub3RhdGlvbiIsInNjYWxlIiwidmVydGljYWxTY2FsZSIsIm1vZGVyYXRlU2NhbGUiLCJtb2RlcmF0ZVZlcnRpY2FsU2NhbGUiLCJ2YWx1ZSIsInRlc3QiLCJyZWdleEV4ZWNSZXN1bHQiLCJleGVjIiwic2l6ZSIsInBhcnNlRmxvYXQiLCJzY2FsZUZ1bmMiLCJzY2FsZUZhY3RvciIsInNsaWNlIiwibGVuZ3RoIiwic2hvdWxkUm91bmQiLCJlbmRzV2l0aCIsInJlc3VsdCIsIk1hdGgiLCJyb3VuZCIsInNjYWxlZFNoZWV0Q3JlYXRvciIsImNyZWF0ZSIsInN0eWxlU2hlZXQiLCJTdHlsZVNoZWV0IiwiZGVlcE1hcCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJTY2FsZWRTaGVldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBkZWVwTWFwIGZyb20gJy4vZGVlcC1tYXAnO1xuXG4vLyBHcm91cHMgICAgICAgICAgICAgICAgICAgICBTaXplICAgICAgICAgICAgICAgICAgIEZ1bmMgRmFjdG9yXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSAgICAgICAgICAgICAgICAgICAgICAyICAgIDNcbmNvbnN0IHZhbGlkU2NhbGVTaGVldFJlZ2V4ID0gL14oXFwtP1xcZCsoPzpcXC5cXGR7MSwzfSk/KUAobXY/cyhcXGQrKD86XFwuXFxkezEsMn0pPyk/fHN8dnMpcj8kLztcblxuY29uc3Qgc2NhbGVCeUFubm90YXRpb24gPSAoc2NhbGUsIHZlcnRpY2FsU2NhbGUsIG1vZGVyYXRlU2NhbGUsIG1vZGVyYXRlVmVydGljYWxTY2FsZSkgPT4gKHZhbHVlKSA9PiB7XG4gICAgaWYgKCF2YWxpZFNjYWxlU2hlZXRSZWdleC50ZXN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgcmVnZXhFeGVjUmVzdWx0ID0gdmFsaWRTY2FsZVNoZWV0UmVnZXguZXhlYyh2YWx1ZSk7XG5cbiAgICBjb25zdCBzaXplID0gcGFyc2VGbG9hdChyZWdleEV4ZWNSZXN1bHRbMV0pO1xuICAgIGxldCBzY2FsZUZ1bmMgPSByZWdleEV4ZWNSZXN1bHRbMl07XG4gICAgY29uc3Qgc2NhbGVGYWN0b3IgPSByZWdleEV4ZWNSZXN1bHRbM107IC8vIHN0cmluZyBvciB1bmRlZmluZWRcblxuICAgIGlmIChzY2FsZUZhY3RvcilcbiAgICAgICAgc2NhbGVGdW5jID0gc2NhbGVGdW5jLnNsaWNlKDAsIC0gc2NhbGVGYWN0b3IubGVuZ3RoKTsgLy8gUmVtb3ZlIHRoZSBmYWN0b3IgZnJvbSBpdFxuXG4gICAgY29uc3Qgc2hvdWxkUm91bmQgPSB2YWx1ZS5lbmRzV2l0aCgncicpO1xuXG4gICAgbGV0IHJlc3VsdDtcblxuICAgIHN3aXRjaCAoc2NhbGVGdW5jKSB7XG4gICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgcmVzdWx0ID0gc2NhbGUoc2l6ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndnMnOlxuICAgICAgICAgICAgcmVzdWx0ID0gdmVydGljYWxTY2FsZShzaXplKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtcyc6XG4gICAgICAgICAgICByZXN1bHQgPSBtb2RlcmF0ZVNjYWxlKHNpemUsIHNjYWxlRmFjdG9yKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtdnMnOlxuICAgICAgICAgICAgcmVzdWx0ID0gbW9kZXJhdGVWZXJ0aWNhbFNjYWxlKHNpemUsIHNjYWxlRmFjdG9yKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBzaG91bGRSb3VuZCA/IE1hdGgucm91bmQocmVzdWx0KSA6IHJlc3VsdDtcbn07XG5cbmNvbnN0IHNjYWxlZFNoZWV0Q3JlYXRvciA9IChzY2FsZSwgdmVydGljYWxTY2FsZSwgbW9kZXJhdGVTY2FsZSwgbW9kZXJhdGVWZXJ0aWNhbFNjYWxlKSA9PiB7XG4gICAgY29uc3Qgc2NhbGVGdW5jID0gc2NhbGVCeUFubm90YXRpb24oc2NhbGUsIHZlcnRpY2FsU2NhbGUsIG1vZGVyYXRlU2NhbGUsIG1vZGVyYXRlVmVydGljYWxTY2FsZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY3JlYXRlOiBzdHlsZVNoZWV0ID0+IFN0eWxlU2hlZXQuY3JlYXRlKGRlZXBNYXAoc3R5bGVTaGVldCwgc2NhbGVGdW5jKSlcbiAgICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc2NhbGVkU2hlZXRDcmVhdG9yOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUlBLElBQU1HLG9CQUFvQixHQUFHLDREQUE0RDtBQUV6RixJQUFNQyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQWlCQSxDQUFJQyxLQUFLLEVBQUVDLGFBQWEsRUFBRUMsYUFBYSxFQUFFQyxxQkFBcUI7RUFBQSxPQUFLLFVBQUNDLEtBQUssRUFBSztJQUNqRyxJQUFJLENBQUNOLG9CQUFvQixDQUFDTyxJQUFJLENBQUNELEtBQUssQ0FBQyxFQUFFO01BQ25DLE9BQU9BLEtBQUs7SUFDaEI7SUFFQSxJQUFNRSxlQUFlLEdBQUdSLG9CQUFvQixDQUFDUyxJQUFJLENBQUNILEtBQUssQ0FBQztJQUV4RCxJQUFNSSxJQUFJLEdBQUdDLFVBQVUsQ0FBQ0gsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLElBQUlJLFNBQVMsR0FBR0osZUFBZSxDQUFDLENBQUMsQ0FBQztJQUNsQyxJQUFNSyxXQUFXLEdBQUdMLGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFFdEMsSUFBSUssV0FBVyxFQUNYRCxTQUFTLEdBQUdBLFNBQVMsQ0FBQ0UsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFFRCxXQUFXLENBQUNFLE1BQU0sQ0FBQztJQUV4RCxJQUFNQyxXQUFXLEdBQUdWLEtBQUssQ0FBQ1csUUFBUSxDQUFDLEdBQUcsQ0FBQztJQUV2QyxJQUFJQyxNQUFNO0lBRVYsUUFBUU4sU0FBUztNQUNiLEtBQUssR0FBRztRQUNKTSxNQUFNLEdBQUdoQixLQUFLLENBQUNRLElBQUksQ0FBQztRQUNwQjtNQUNKLEtBQUssSUFBSTtRQUNMUSxNQUFNLEdBQUdmLGFBQWEsQ0FBQ08sSUFBSSxDQUFDO1FBQzVCO01BQ0osS0FBSyxJQUFJO1FBQ0xRLE1BQU0sR0FBR2QsYUFBYSxDQUFDTSxJQUFJLEVBQUVHLFdBQVcsQ0FBQztRQUN6QztNQUNKLEtBQUssS0FBSztRQUNOSyxNQUFNLEdBQUdiLHFCQUFxQixDQUFDSyxJQUFJLEVBQUVHLFdBQVcsQ0FBQztRQUNqRDtJQUFNO0lBR2QsT0FBT0csV0FBVyxHQUFHRyxJQUFJLENBQUNDLEtBQUssQ0FBQ0YsTUFBTSxDQUFDLEdBQUdBLE1BQU07RUFDcEQsQ0FBQztBQUFBO0FBRUQsSUFBTUcsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFrQkEsQ0FBSW5CLEtBQUssRUFBRUMsYUFBYSxFQUFFQyxhQUFhLEVBQUVDLHFCQUFxQixFQUFLO0VBQ3ZGLElBQU1PLFNBQVMsR0FBR1gsaUJBQWlCLENBQUNDLEtBQUssRUFBRUMsYUFBYSxFQUFFQyxhQUFhLEVBQUVDLHFCQUFxQixDQUFDO0VBQy9GLE9BQU87SUFDSGlCLE1BQU0sRUFBRSxTQUFBQSxPQUFBQyxVQUFVO01BQUEsT0FBSUMsdUJBQVUsQ0FBQ0YsTUFBTSxDQUFDLElBQUFHLGdCQUFPLEVBQUNGLFVBQVUsRUFBRVgsU0FBUyxDQUFDLENBQUM7SUFBQTtFQUMzRSxDQUFDO0FBQ0wsQ0FBQztBQUFDLElBQUFjLFFBQUEsR0FFYUwsa0JBQWtCO0FBQUFNLE9BQUEsQ0FBQUMsT0FBQSxHQUFBRixRQUFBIn0=