8c831b86b61c27e0096f377ca8f51755
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RootNavigation = _interopRequireWildcard(require("../../navigation/rootNavigation"));
var _adapter = _interopRequireDefault(require("../adapter"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var errorInterceptor = function errorInterceptor(store) {
  _adapter.default.interceptors.response.use(function (response) {}, function (error) {
    if (!error.response) {
      console.log('ERROR±±±±');
      return RootNavigation.navigate('SERVER_ERROR_SCREEN', {});
    } else if (error.response && error.response.status === 401) {
      console.log('error status:', error.response.status);
      return RootNavigation.navigate('Home', {});
    } else if (error.response && error.response.status === 503) {
      return RootNavigation.navigate('SERVER_ERROR_SCREEN', {});
    } else {
      console.log('error status:', error.response.status);
      return error.response;
    }
  });
};
var _default = errorInterceptor;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb290TmF2aWdhdGlvbiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9hZGFwdGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJlcnJvckludGVyY2VwdG9yIiwic3RvcmUiLCJhZGFwdGVyIiwiaW50ZXJjZXB0b3JzIiwicmVzcG9uc2UiLCJ1c2UiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJuYXZpZ2F0ZSIsInN0YXR1cyIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImVycm9ycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MsIHtBeGlvc0Vycm9yfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgQWN0aW9uVHlwZXMgZnJvbSAnLi4vYWN0aW9uVHlwZXMnO1xuaW1wb3J0ICogYXMgUm9vdE5hdmlnYXRpb24gZnJvbSAnLi4vLi4vbmF2aWdhdGlvbi9yb290TmF2aWdhdGlvbic7XG5pbXBvcnQgYWRhcHRlciBmcm9tICcuLi9hZGFwdGVyJztcblxuY29uc3QgZXJyb3JJbnRlcmNlcHRvciA9IHN0b3JlID0+IHtcbiAgYWRhcHRlci5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKFxuICAgIHJlc3BvbnNlID0+IHtcbiAgICAgIC8vUmVzcG9uc2UgU3VjY2Vzc2Z1bFxuICAgIH0sXG4gICAgZXJyb3IgPT4ge1xuICAgICAgaWYgKCFlcnJvci5yZXNwb25zZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnRVJST1LCscKxwrHCsScpO1xuICAgICAgICByZXR1cm4gUm9vdE5hdmlnYXRpb24ubmF2aWdhdGUoJ1NFUlZFUl9FUlJPUl9TQ1JFRU4nLCB7fSk7XG4gICAgICB9IGVsc2UgaWYgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBzdGF0dXM6JywgZXJyb3IucmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgLy8gc3RvcmUuZGlzcGF0Y2goe1xuICAgICAgICAvLyAgIHR5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX0ZBSUxVUkUsXG4gICAgICAgIC8vICAgcGF5bG9hZDoge1xuICAgICAgICAvLyAgICAgbWVzc2FnZTogZXJyb3IucmVzcG9uc2UuZGF0YS5yZXN1bHQubWVzc2FnZSxcbiAgICAgICAgLy8gICB9LFxuICAgICAgICAvLyB9KTtcbiAgICAgICAgcmV0dXJuIFJvb3ROYXZpZ2F0aW9uLm5hdmlnYXRlKCdIb21lJywge30pO1xuICAgICAgICAvL1VuYXV0aG9yaXplZFxuICAgICAgICAvL3JlZGlyZWN0IHRvIExvZ2luXG4gICAgICB9IGVsc2UgaWYgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNTAzKSB7XG4gICAgICAgIHJldHVybiBSb290TmF2aWdhdGlvbi5uYXZpZ2F0ZSgnU0VSVkVSX0VSUk9SX1NDUkVFTicsIHt9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vZGlzcGF0Y2ggeW91ciBlcnJvciBpbiBhIG1vcmUgdXNlciBmcmllbmRseSBtYW5uZXJcbiAgICAgICAgLy8gaWYgKERFQlVHKSB7XG4gICAgICAgIC8vICAgLy9lYXNpZXIgZGVidWdnaW5nXG4gICAgICAgIC8vICAgY29uc29sZS5ncm91cCgnRXJyb3InKTtcbiAgICAgICAgLy8gICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgIC8vICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICAvLyB9XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBzdGF0dXM6JywgZXJyb3IucmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgcmV0dXJuIGVycm9yLnJlc3BvbnNlO1xuICAgICAgfVxuICAgIH0sXG4gICk7XG59O1xuZXhwb3J0IGRlZmF1bHQgZXJyb3JJbnRlcmNlcHRvcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBLElBQUFBLGNBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUFpQyxTQUFBRyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUwsd0JBQUFTLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQUUsT0FBQSxFQUFBRixHQUFBLFVBQUFHLEtBQUEsR0FBQVIsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTyxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxDQUFBSixHQUFBLFlBQUFHLEtBQUEsQ0FBQUUsR0FBQSxDQUFBTCxHQUFBLFNBQUFNLE1BQUEsV0FBQUMscUJBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsR0FBQSxJQUFBWCxHQUFBLFFBQUFXLEdBQUEsa0JBQUFILE1BQUEsQ0FBQUksU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWQsR0FBQSxFQUFBVyxHQUFBLFNBQUFJLElBQUEsR0FBQVIscUJBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBVixHQUFBLEVBQUFXLEdBQUEsY0FBQUksSUFBQSxLQUFBQSxJQUFBLENBQUFWLEdBQUEsSUFBQVUsSUFBQSxDQUFBQyxHQUFBLEtBQUFSLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSCxNQUFBLEVBQUFLLEdBQUEsRUFBQUksSUFBQSxZQUFBVCxNQUFBLENBQUFLLEdBQUEsSUFBQVgsR0FBQSxDQUFBVyxHQUFBLFNBQUFMLE1BQUEsQ0FBQUosT0FBQSxHQUFBRixHQUFBLE1BQUFHLEtBQUEsSUFBQUEsS0FBQSxDQUFBYSxHQUFBLENBQUFoQixHQUFBLEVBQUFNLE1BQUEsWUFBQUEsTUFBQTtBQUVqQyxJQUFNVyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCQSxDQUFHQyxLQUFLLEVBQUk7RUFDaENDLGdCQUFPLENBQUNDLFlBQVksQ0FBQ0MsUUFBUSxDQUFDQyxHQUFHLENBQy9CLFVBQUFELFFBQVEsRUFBSSxDQUVaLENBQUMsRUFDRCxVQUFBRSxLQUFLLEVBQUk7SUFDUCxJQUFJLENBQUNBLEtBQUssQ0FBQ0YsUUFBUSxFQUFFO01BQ25CRyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxXQUFXLENBQUM7TUFDeEIsT0FBT25DLGNBQWMsQ0FBQ29DLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDLE1BQU0sSUFBSUgsS0FBSyxDQUFDRixRQUFRLElBQUlFLEtBQUssQ0FBQ0YsUUFBUSxDQUFDTSxNQUFNLEtBQUssR0FBRyxFQUFFO01BQzFESCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxlQUFlLEVBQUVGLEtBQUssQ0FBQ0YsUUFBUSxDQUFDTSxNQUFNLENBQUM7TUFPbkQsT0FBT3JDLGNBQWMsQ0FBQ29DLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFHNUMsQ0FBQyxNQUFNLElBQUlILEtBQUssQ0FBQ0YsUUFBUSxJQUFJRSxLQUFLLENBQUNGLFFBQVEsQ0FBQ00sTUFBTSxLQUFLLEdBQUcsRUFBRTtNQUMxRCxPQUFPckMsY0FBYyxDQUFDb0MsUUFBUSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUMsTUFBTTtNQVFMRixPQUFPLENBQUNDLEdBQUcsQ0FBQyxlQUFlLEVBQUVGLEtBQUssQ0FBQ0YsUUFBUSxDQUFDTSxNQUFNLENBQUM7TUFDbkQsT0FBT0osS0FBSyxDQUFDRixRQUFRO0lBQ3ZCO0VBQ0YsQ0FBQyxDQUNGO0FBQ0gsQ0FBQztBQUFDLElBQUFPLFFBQUEsR0FDYVgsZ0JBQWdCO0FBQUFZLE9BQUEsQ0FBQTNCLE9BQUEsR0FBQTBCLFFBQUEifQ==