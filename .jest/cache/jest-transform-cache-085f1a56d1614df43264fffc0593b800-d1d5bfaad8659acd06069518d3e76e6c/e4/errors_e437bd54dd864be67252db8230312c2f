0b9c782a15c6c73b17c068dcc325c7ee
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RootNavigation = _interopRequireWildcard(require("../../navigation/rootNavigation"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var errorInterceptor = function errorInterceptor(axiosInstance) {
  axiosInstance.interceptors.response.use(function (response) {}, function (error) {
    console.log('===error:', error);
    if (error.response && error.response.status === 401) {
      return RootNavigation.navigate('Home', {});
    } else if (error.response && error.response.status === 503) {
      return RootNavigation.navigate('SERVER_ERROR_SCREEN', {});
    } else {
      if (DEBUG) {
        console.group('Error');
        console.log(error);
        console.groupEnd();
      }
    }
  });
};
var _default = errorInterceptor;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb290TmF2aWdhdGlvbiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJlcnJvckludGVyY2VwdG9yIiwiYXhpb3NJbnN0YW5jZSIsImludGVyY2VwdG9ycyIsInJlc3BvbnNlIiwidXNlIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwic3RhdHVzIiwibmF2aWdhdGUiLCJERUJVRyIsImdyb3VwIiwiZ3JvdXBFbmQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJlcnJvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zLCB7QXhpb3NFcnJvcn0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0ICogYXMgUm9vdE5hdmlnYXRpb24gZnJvbSAnLi4vLi4vbmF2aWdhdGlvbi9yb290TmF2aWdhdGlvbic7XG5cbmNvbnN0IGVycm9ySW50ZXJjZXB0b3IgPSBheGlvc0luc3RhbmNlID0+IHtcbiAgYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKFxuICAgIHJlc3BvbnNlID0+IHtcbiAgICAgIC8vUmVzcG9uc2UgU3VjY2Vzc2Z1bFxuICAgIH0sXG4gICAgKGVycm9yOiBBeGlvc0Vycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnPT09ZXJyb3I6JywgZXJyb3IpO1xuICAgICAgaWYgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgIHJldHVybiBSb290TmF2aWdhdGlvbi5uYXZpZ2F0ZSgnSG9tZScsIHt9KTtcbiAgICAgICAgLy9VbmF1dGhvcml6ZWRcbiAgICAgICAgLy9yZWRpcmVjdCB0byBMb2dpblxuICAgICAgfSBlbHNlIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDUwMykge1xuICAgICAgICByZXR1cm4gUm9vdE5hdmlnYXRpb24ubmF2aWdhdGUoJ1NFUlZFUl9FUlJPUl9TQ1JFRU4nLCB7fSk7XG4gICAgICAgIC8vVW5hdXRob3JpemVkXG4gICAgICAgIC8vcmVkaXJlY3QgdG8gTG9naW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vZGlzcGF0Y2ggeW91ciBlcnJvciBpbiBhIG1vcmUgdXNlciBmcmllbmRseSBtYW5uZXJcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgLy9lYXNpZXIgZGVidWdnaW5nXG4gICAgICAgICAgY29uc29sZS5ncm91cCgnRXJyb3InKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgKTtcbn07XG5leHBvcnQgZGVmYXVsdCBlcnJvckludGVyY2VwdG9yO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxjQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFBa0UsU0FBQUMseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFILHdCQUFBTyxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQSxTQUFBTSxNQUFBLFdBQUFDLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLEdBQUEsSUFBQVgsR0FBQSxRQUFBVyxHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFkLEdBQUEsRUFBQVcsR0FBQSxTQUFBSSxJQUFBLEdBQUFSLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQVYsR0FBQSxFQUFBVyxHQUFBLGNBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBVixHQUFBLElBQUFVLElBQUEsQ0FBQUMsR0FBQSxLQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUgsTUFBQSxFQUFBSyxHQUFBLEVBQUFJLElBQUEsWUFBQVQsTUFBQSxDQUFBSyxHQUFBLElBQUFYLEdBQUEsQ0FBQVcsR0FBQSxTQUFBTCxNQUFBLENBQUFKLE9BQUEsR0FBQUYsR0FBQSxNQUFBRyxLQUFBLElBQUFBLEtBQUEsQ0FBQWEsR0FBQSxDQUFBaEIsR0FBQSxFQUFBTSxNQUFBLFlBQUFBLE1BQUE7QUFFbEUsSUFBTVcsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFnQkEsQ0FBR0MsYUFBYSxFQUFJO0VBQ3hDQSxhQUFhLENBQUNDLFlBQVksQ0FBQ0MsUUFBUSxDQUFDQyxHQUFHLENBQ3JDLFVBQUFELFFBQVEsRUFBSSxDQUVaLENBQUMsRUFDRCxVQUFDRSxLQUFpQixFQUFLO0lBQ3JCQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxXQUFXLEVBQUVGLEtBQUssQ0FBQztJQUMvQixJQUFJQSxLQUFLLENBQUNGLFFBQVEsSUFBSUUsS0FBSyxDQUFDRixRQUFRLENBQUNLLE1BQU0sS0FBSyxHQUFHLEVBQUU7TUFDbkQsT0FBT2pDLGNBQWMsQ0FBQ2tDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFHNUMsQ0FBQyxNQUFNLElBQUlKLEtBQUssQ0FBQ0YsUUFBUSxJQUFJRSxLQUFLLENBQUNGLFFBQVEsQ0FBQ0ssTUFBTSxLQUFLLEdBQUcsRUFBRTtNQUMxRCxPQUFPakMsY0FBYyxDQUFDa0MsUUFBUSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRzNELENBQUMsTUFBTTtNQUVMLElBQUlDLEtBQUssRUFBRTtRQUVUSixPQUFPLENBQUNLLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDdEJMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixLQUFLLENBQUM7UUFDbEJDLE9BQU8sQ0FBQ00sUUFBUSxFQUFFO01BQ3BCO0lBQ0Y7RUFDRixDQUFDLENBQ0Y7QUFDSCxDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUNhYixnQkFBZ0I7QUFBQWMsT0FBQSxDQUFBN0IsT0FBQSxHQUFBNEIsUUFBQSJ9