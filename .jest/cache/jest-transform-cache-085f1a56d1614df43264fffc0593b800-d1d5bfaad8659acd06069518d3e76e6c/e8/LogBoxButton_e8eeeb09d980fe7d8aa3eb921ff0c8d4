24aac784abe7a4b77f720461d01a79da
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var React = _interopRequireWildcard(require("react"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _TouchableWithoutFeedback = _interopRequireDefault(require("../../Components/Touchable/TouchableWithoutFeedback"));
var _View = _interopRequireDefault(require("../../Components/View/View"));
var LogBoxStyle = _interopRequireWildcard(require("./LogBoxStyle"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function LogBoxButton(props) {
  var _React$useState = React.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    pressed = _React$useState2[0],
    setPressed = _React$useState2[1];
  var backgroundColor = props.backgroundColor;
  if (!backgroundColor) {
    backgroundColor = {
      default: LogBoxStyle.getBackgroundColor(0.95),
      pressed: LogBoxStyle.getBackgroundColor(0.6)
    };
  }
  var content = React.createElement(_View.default, {
    style: _StyleSheet.default.compose({
      backgroundColor: pressed ? backgroundColor.pressed : backgroundColor.default
    }, props.style)
  }, props.children);
  return props.onPress == null ? content : React.createElement(_TouchableWithoutFeedback.default, {
    hitSlop: props.hitSlop,
    onPress: props.onPress,
    onPressIn: function onPressIn() {
      return setPressed(true);
    },
    onPressOut: function onPressOut() {
      return setPressed(false);
    }
  }, content);
}
var _default = LogBoxButton;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9TdHlsZVNoZWV0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2siLCJfVmlldyIsIkxvZ0JveFN0eWxlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIkxvZ0JveEJ1dHRvbiIsInByb3BzIiwiX1JlYWN0JHVzZVN0YXRlIiwidXNlU3RhdGUiLCJfUmVhY3QkdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwicHJlc3NlZCIsInNldFByZXNzZWQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJnZXRCYWNrZ3JvdW5kQ29sb3IiLCJjb250ZW50IiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiU3R5bGVTaGVldCIsImNvbXBvc2UiLCJjaGlsZHJlbiIsIm9uUHJlc3MiLCJoaXRTbG9wIiwib25QcmVzc0luIiwib25QcmVzc091dCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkxvZ0JveEJ1dHRvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIGZyb20gJy4uLy4uL0NvbXBvbmVudHMvVG91Y2hhYmxlL1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayc7XG5pbXBvcnQgVmlldyBmcm9tICcuLi8uLi9Db21wb25lbnRzL1ZpZXcvVmlldyc7XG5pbXBvcnQgKiBhcyBMb2dCb3hTdHlsZSBmcm9tICcuL0xvZ0JveFN0eWxlJztcbmltcG9ydCB0eXBlIHtFZGdlSW5zZXRzUHJvcH0gZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9FZGdlSW5zZXRzUHJvcFR5cGUnO1xuaW1wb3J0IHR5cGUge1ZpZXdTdHlsZVByb3B9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgdHlwZSB7UHJlc3NFdmVudH0gZnJvbSAnLi4vLi4vVHlwZXMvQ29yZUV2ZW50VHlwZXMnO1xuXG50eXBlIFByb3BzID0gJFJlYWRPbmx5PHt8XG4gIGJhY2tncm91bmRDb2xvcjogJFJlYWRPbmx5PHt8XG4gICAgZGVmYXVsdDogc3RyaW5nLFxuICAgIHByZXNzZWQ6IHN0cmluZyxcbiAgfH0+LFxuICBjaGlsZHJlbj86IFJlYWN0Lk5vZGUsXG4gIGhpdFNsb3A/OiA/RWRnZUluc2V0c1Byb3AsXG4gIG9uUHJlc3M/OiA/KGV2ZW50OiBQcmVzc0V2ZW50KSA9PiB2b2lkLFxuICBzdHlsZT86IFZpZXdTdHlsZVByb3AsXG58fT47XG5cbmZ1bmN0aW9uIExvZ0JveEJ1dHRvbihwcm9wczogUHJvcHMpOiBSZWFjdC5Ob2RlIHtcbiAgY29uc3QgW3ByZXNzZWQsIHNldFByZXNzZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gIGxldCBiYWNrZ3JvdW5kQ29sb3IgPSBwcm9wcy5iYWNrZ3JvdW5kQ29sb3I7XG4gIGlmICghYmFja2dyb3VuZENvbG9yKSB7XG4gICAgYmFja2dyb3VuZENvbG9yID0ge1xuICAgICAgZGVmYXVsdDogTG9nQm94U3R5bGUuZ2V0QmFja2dyb3VuZENvbG9yKDAuOTUpLFxuICAgICAgcHJlc3NlZDogTG9nQm94U3R5bGUuZ2V0QmFja2dyb3VuZENvbG9yKDAuNiksXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IGNvbnRlbnQgPSAoXG4gICAgPFZpZXdcbiAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmNvbXBvc2UoXG4gICAgICAgIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHByZXNzZWRcbiAgICAgICAgICAgID8gYmFja2dyb3VuZENvbG9yLnByZXNzZWRcbiAgICAgICAgICAgIDogYmFja2dyb3VuZENvbG9yLmRlZmF1bHQsXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BzLnN0eWxlLFxuICAgICAgKX0+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9WaWV3PlxuICApO1xuXG4gIHJldHVybiBwcm9wcy5vblByZXNzID09IG51bGwgPyAoXG4gICAgY29udGVudFxuICApIDogKFxuICAgIDxUb3VjaGFibGVXaXRob3V0RmVlZGJhY2tcbiAgICAgIGhpdFNsb3A9e3Byb3BzLmhpdFNsb3B9XG4gICAgICBvblByZXNzPXtwcm9wcy5vblByZXNzfVxuICAgICAgb25QcmVzc0luPXsoKSA9PiBzZXRQcmVzc2VkKHRydWUpfVxuICAgICAgb25QcmVzc091dD17KCkgPT4gc2V0UHJlc3NlZChmYWxzZSl9PlxuICAgICAge2NvbnRlbnR9XG4gICAgPC9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2s+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvZ0JveEJ1dHRvbjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFVQSxJ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