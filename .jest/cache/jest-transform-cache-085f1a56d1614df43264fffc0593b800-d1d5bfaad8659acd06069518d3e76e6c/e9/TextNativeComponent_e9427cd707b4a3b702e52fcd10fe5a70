ac3c644012000b534714fcc857e98554
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeVirtualText = exports.NativeText = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _ReactNativeViewAttributes = _interopRequireDefault(require("../Components/View/ReactNativeViewAttributes"));
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
var _createReactNativeComponentClass = _interopRequireDefault(require("../Renderer/shims/createReactNativeComponentClass"));
var NativeText = (0, _createReactNativeComponentClass.default)('RCTText', function () {
  return {
    validAttributes: (0, _extends2.default)({}, _ReactNativeViewAttributes.default.UIView, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      maxFontSizeMultiplier: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true,
      onTextLayout: true,
      onInlineViewLayout: true,
      dataDetectorType: true,
      android_hyphenationFrequency: true
    }),
    directEventTypes: {
      topTextLayout: {
        registrationName: 'onTextLayout'
      },
      topInlineViewLayout: {
        registrationName: 'onInlineViewLayout'
      }
    },
    uiViewClassName: 'RCTText'
  };
});
exports.NativeText = NativeText;
var NativeVirtualText = !global.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', function () {
  return {
    validAttributes: (0, _extends2.default)({}, _ReactNativeViewAttributes.default.UIView, {
      isHighlighted: true,
      maxFontSizeMultiplier: true
    }),
    uiViewClassName: 'RCTVirtualText'
  };
});
exports.NativeVirtualText = NativeVirtualText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1VJTWFuYWdlciIsIl9jcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzIiwiTmF0aXZlVGV4dCIsImNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MiLCJ2YWxpZEF0dHJpYnV0ZXMiLCJfZXh0ZW5kczIiLCJkZWZhdWx0IiwiUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcyIsIlVJVmlldyIsImlzSGlnaGxpZ2h0ZWQiLCJudW1iZXJPZkxpbmVzIiwiZWxsaXBzaXplTW9kZSIsImFsbG93Rm9udFNjYWxpbmciLCJtYXhGb250U2l6ZU11bHRpcGxpZXIiLCJkaXNhYmxlZCIsInNlbGVjdGFibGUiLCJzZWxlY3Rpb25Db2xvciIsImFkanVzdHNGb250U2l6ZVRvRml0IiwibWluaW11bUZvbnRTY2FsZSIsInRleHRCcmVha1N0cmF0ZWd5Iiwib25UZXh0TGF5b3V0Iiwib25JbmxpbmVWaWV3TGF5b3V0IiwiZGF0YURldGVjdG9yVHlwZSIsImFuZHJvaWRfaHlwaGVuYXRpb25GcmVxdWVuY3kiLCJkaXJlY3RFdmVudFR5cGVzIiwidG9wVGV4dExheW91dCIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ0b3BJbmxpbmVWaWV3TGF5b3V0IiwidWlWaWV3Q2xhc3NOYW1lIiwiZXhwb3J0cyIsIk5hdGl2ZVZpcnR1YWxUZXh0IiwiZ2xvYmFsIiwiUk4kQnJpZGdlbGVzcyIsIlVJTWFuYWdlciIsImhhc1ZpZXdNYW5hZ2VyQ29uZmlnIl0sInNvdXJjZXMiOlsiVGV4dE5hdGl2ZUNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IFJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMgZnJvbSAnLi4vQ29tcG9uZW50cy9WaWV3L1JlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMnO1xuaW1wb3J0IFVJTWFuYWdlciBmcm9tICcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuaW1wb3J0IHt0eXBlIEhvc3RDb21wb25lbnR9IGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MgZnJvbSAnLi4vUmVuZGVyZXIvc2hpbXMvY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcyc7XG5pbXBvcnQge3R5cGUgUHJvY2Vzc2VkQ29sb3JWYWx1ZX0gZnJvbSAnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InO1xuaW1wb3J0IHt0eXBlIFRleHRQcm9wc30gZnJvbSAnLi9UZXh0UHJvcHMnO1xuXG50eXBlIE5hdGl2ZVRleHRQcm9wcyA9ICRSZWFkT25seTx7XG4gIC4uLlRleHRQcm9wcyxcbiAgaXNIaWdobGlnaHRlZD86ID9ib29sZWFuLFxuICBzZWxlY3Rpb25Db2xvcj86ID9Qcm9jZXNzZWRDb2xvclZhbHVlLFxufT47XG5cbmV4cG9ydCBjb25zdCBOYXRpdmVUZXh0OiBIb3N0Q29tcG9uZW50PE5hdGl2ZVRleHRQcm9wcz4gPSAoY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcyhcbiAgJ1JDVFRleHQnLFxuICAoKSA9PiAoe1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gICAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgICAuLi5SZWFjdE5hdGl2ZVZpZXdBdHRyaWJ1dGVzLlVJVmlldyxcbiAgICAgIGlzSGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBudW1iZXJPZkxpbmVzOiB0cnVlLFxuICAgICAgZWxsaXBzaXplTW9kZTogdHJ1ZSxcbiAgICAgIGFsbG93Rm9udFNjYWxpbmc6IHRydWUsXG4gICAgICBtYXhGb250U2l6ZU11bHRpcGxpZXI6IHRydWUsXG4gICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICAgIHNlbGVjdGFibGU6IHRydWUsXG4gICAgICBzZWxlY3Rpb25Db2xvcjogdHJ1ZSxcbiAgICAgIGFkanVzdHNGb250U2l6ZVRvRml0OiB0cnVlLFxuICAgICAgbWluaW11bUZvbnRTY2FsZTogdHJ1ZSxcbiAgICAgIHRleHRCcmVha1N0cmF0ZWd5OiB0cnVlLFxuICAgICAgb25UZXh0TGF5b3V0OiB0cnVlLFxuICAgICAgb25JbmxpbmVWaWV3TGF5b3V0OiB0cnVlLFxuICAgICAgZGF0YURldGVjdG9yVHlwZTogdHJ1ZSxcbiAgICAgIGFuZHJvaWRfaHlwaGVuYXRpb25GcmVxdWVuY3k6IHRydWUsXG4gICAgfSxcbiAgICBkaXJlY3RFdmVudFR5cGVzOiB7XG4gICAgICB0b3BUZXh0TGF5b3V0OiB7XG4gICAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvblRleHRMYXlvdXQnLFxuICAgICAgfSxcbiAgICAgIHRvcElubGluZVZpZXdMYXlvdXQ6IHtcbiAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uSW5saW5lVmlld0xheW91dCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUVGV4dCcsXG4gIH0pLFxuKTogYW55KTtcblxuZXhwb3J0IGNvbnN0IE5hdGl2ZVZpcnR1YWxUZXh0OiBIb3N0Q29tcG9uZW50PE5hdGl2ZVRleHRQcm9wcz4gPVxuICAhZ2xvYmFsLlJOJEJyaWRnZWxlc3MgJiYgIVVJTWFuYWdlci5oYXNWaWV3TWFuYWdlckNvbmZpZygnUkNUVmlydHVhbFRleHQnKVxuICAgID8gTmF0aXZlVGV4dFxuICAgIDogKGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MoJ1JDVFZpcnR1YWxUZXh0JywgKCkgPT4gKHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgICAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgLi4uUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcy5VSVZpZXcsXG4gICAgICAgICAgaXNIaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgICAgICBtYXhGb250U2l6ZU11bHRpcGxpZXI6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHVpVmlld0NsYXNzTmFtZTogJ1JDVFZpcnR1YWxUZXh0JyxcbiAgICAgIH0pKTogYW55KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFVQSxJQUFBQSwwQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUUsZ0NBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQVVPLElBQU1HLFVBQTBDLEdBQUksSUFBQUMsd0NBQStCLEVBQ3hGLFNBQVMsRUFDVDtFQUFBLE9BQU87SUFFTEMsZUFBZSxNQUFBQyxTQUFBLENBQUFDLE9BQUEsTUFDVkMsa0NBQXlCLENBQUNDLE1BQU07TUFDbkNDLGFBQWEsRUFBRSxJQUFJO01BQ25CQyxhQUFhLEVBQUUsSUFBSTtNQUNuQkMsYUFBYSxFQUFFLElBQUk7TUFDbkJDLGdCQUFnQixFQUFFLElBQUk7TUFDdEJDLHFCQUFxQixFQUFFLElBQUk7TUFDM0JDLFFBQVEsRUFBRSxJQUFJO01BQ2RDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxjQUFjLEVBQUUsSUFBSTtNQUNwQkMsb0JBQW9CLEVBQUUsSUFBSTtNQUMxQkMsZ0JBQWdCLEVBQUUsSUFBSTtNQUN0QkMsaUJBQWlCLEVBQUUsSUFBSTtNQUN2QkMsWUFBWSxFQUFFLElBQUk7TUFDbEJDLGtCQUFrQixFQUFFLElBQUk7TUFDeEJDLGdCQUFnQixFQUFFLElBQUk7TUFDdEJDLDRCQUE0QixFQUFFO0lBQUksRUFDbkM7SUFDREMsZ0JBQWdCLEVBQUU7TUFDaEJDLGFBQWEsRUFBRTtRQUNiQyxnQkFBZ0IsRUFBRTtNQUNwQixDQUFDO01BQ0RDLG1CQUFtQixFQUFFO1FBQ25CRCxnQkFBZ0IsRUFBRTtNQUNwQjtJQUNGLENBQUM7SUFDREUsZUFBZSxFQUFFO0VBQ25CLENBQUM7QUFBQSxDQUFDLENBQ0c7QUFBQ0MsT0FBQSxDQUFBM0IsVUFBQSxHQUFBQSxVQUFBO0FBRUQsSUFBTTRCLGlCQUFpRCxHQUM1RCxDQUFDQyxNQUFNLENBQUNDLGFBQWEsSUFBSSxDQUFDQyxrQkFBUyxDQUFDQyxvQkFBb0IsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUN0RWhDLFVBQVUsR0FDVCxJQUFBQyx3Q0FBK0IsRUFBQyxnQkFBZ0IsRUFBRTtFQUFBLE9BQU87SUFFeERDLGVBQWUsTUFBQUMsU0FBQSxDQUFBQyxPQUFBLE1BQ1ZDLGtDQUF5QixDQUFDQyxNQUFNO01BQ25DQyxhQUFhLEVBQUUsSUFBSTtNQUNuQkkscUJBQXFCLEVBQUU7SUFBSSxFQUM1QjtJQUNEZSxlQUFlLEVBQUU7RUFDbkIsQ0FBQztBQUFBLENBQUMsQ0FBTztBQUFDQyxPQUFBLENBQUFDLGlCQUFBLEdBQUFBLGlCQUFBIn0=