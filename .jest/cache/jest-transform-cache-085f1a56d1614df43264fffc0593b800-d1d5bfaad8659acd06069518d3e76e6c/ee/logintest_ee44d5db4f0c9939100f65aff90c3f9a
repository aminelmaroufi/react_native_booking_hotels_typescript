1d911eb747c5c47168d43d227fed0b82
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var eva = _interopRequireWildcard(require("@eva-design/eva"));
var _components = require("@ui-kitten/components");
var _store = _interopRequireDefault(require("../../redux/store"));
var _Login = _interopRequireDefault(require("../Login"));
var _actions = require("../../redux/actions");
var _reactRedux = require("react-redux");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var store = (0, _store.default)();
var email = 'test@test.com';
var password = 'Azerty123@@';
var navigation = {
  navigate: jest.fn()
};
var setup = function setup() {
  return (0, _reactNative.render)(_react.default.createElement(_components.ApplicationProvider, (0, _extends2.default)({}, eva, {
    theme: eva.light
  }), _react.default.createElement(_reactRedux.Provider, {
    store: store
  }, _react.default.createElement(_Login.default, {
    navigation: navigation
  }))));
};
describe('Test Login Component', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
  });
  afterEach(_reactNative.cleanup);
  it('should render all form element', function () {
    setup();
    expect(_reactNative.screen.getByTestId('logo')).toBeDefined();
    expect(_reactNative.screen.getByTestId('email')).toBeDefined();
    expect(_reactNative.screen.getByTestId('password')).toBeDefined();
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn).toBeDefined();
  });
  it('should enable login button after entereing valid email and password value', function () {
    setup();
    var emailInput = _reactNative.screen.getByTestId('email');
    var passwordInput = _reactNative.screen.getByTestId('password');
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', true);
    _reactNative.fireEvent.changeText(emailInput, email);
    _reactNative.fireEvent.changeText(passwordInput, password);
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', false);
    _reactNative.fireEvent.press(loginBtn);
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith((0, _actions.loginRequest)(email, password, navigation));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsImV2YSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2NvbXBvbmVudHMiLCJfc3RvcmUiLCJfTG9naW4iLCJfYWN0aW9ucyIsIl9yZWFjdFJlZHV4IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsInN0b3JlIiwiY29uZmlndXJlU3RvcmUiLCJlbWFpbCIsInBhc3N3b3JkIiwibmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiamVzdCIsImZuIiwic2V0dXAiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiQXBwbGljYXRpb25Qcm92aWRlciIsIl9leHRlbmRzMiIsInRoZW1lIiwibGlnaHQiLCJQcm92aWRlciIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImRpc3BhdGNoIiwiYWZ0ZXJFYWNoIiwiY2xlYW51cCIsIml0IiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlRGVmaW5lZCIsImxvZ2luQnRuIiwiZW1haWxJbnB1dCIsInBhc3N3b3JkSW5wdXQiLCJwcm9wcyIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsInRvSGF2ZVByb3BlcnR5IiwiZmlyZUV2ZW50IiwiY2hhbmdlVGV4dCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJsb2dpblJlcXVlc3QiXSwic291cmNlcyI6WyJsb2dpbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgY2xlYW51cCxcbiAgZmlyZUV2ZW50LFxuICByZW5kZXIsXG4gIHNjcmVlbixcbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuXG5pbXBvcnQgKiBhcyBldmEgZnJvbSAnQGV2YS1kZXNpZ24vZXZhJztcbmltcG9ydCB7QXBwbGljYXRpb25Qcm92aWRlcn0gZnJvbSAnQHVpLWtpdHRlbi9jb21wb25lbnRzJztcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tICcuLi8uLi9yZWR1eC9zdG9yZSc7XG5pbXBvcnQgTG9naW4gZnJvbSAnLi4vTG9naW4nO1xuaW1wb3J0IHtsb2dpblJlcXVlc3R9IGZyb20gJy4uLy4uL3JlZHV4L2FjdGlvbnMnO1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5sZXQgc3RvcmUgPSBjb25maWd1cmVTdG9yZSgpO1xuXG5jb25zdCBlbWFpbCA9ICd0ZXN0QHRlc3QuY29tJztcbmNvbnN0IHBhc3N3b3JkID0gJ0F6ZXJ0eTEyM0BAJztcblxuY29uc3QgbmF2aWdhdGlvbiA9IHtcbiAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbn07XG5jb25zdCBzZXR1cCA9ICgpID0+XG4gIHJlbmRlcihcbiAgICA8QXBwbGljYXRpb25Qcm92aWRlciB7Li4uZXZhfSB0aGVtZT17ZXZhLmxpZ2h0fT5cbiAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgICA8TG9naW4gbmF2aWdhdGlvbj17bmF2aWdhdGlvbn0gLz5cbiAgICAgIDwvUHJvdmlkZXI+XG4gICAgPC9BcHBsaWNhdGlvblByb3ZpZGVyPixcbiAgKTtcblxuZGVzY3JpYmUoJ1Rlc3QgTG9naW4gQ29tcG9uZW50JywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBzdG9yZS5kaXNwYXRjaCA9IGplc3QuZm4oKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGNsZWFudXApO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGFsbCBmb3JtIGVsZW1lbnQnLCAoKSA9PiB7XG4gICAgc2V0dXAoKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvZ28nKSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdlbWFpbCcpKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Bhc3N3b3JkJykpLnRvQmVEZWZpbmVkKCk7XG5cbiAgICBjb25zdCBsb2dpbkJ0biA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9naW4tYnRuJyk7XG5cbiAgICBleHBlY3QobG9naW5CdG4pLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZW5hYmxlIGxvZ2luIGJ1dHRvbiBhZnRlciBlbnRlcmVpbmcgdmFsaWQgZW1haWwgYW5kIHBhc3N3b3JkIHZhbHVlJywgKCkgPT4ge1xuICAgIHNldHVwKCk7XG4gICAgY29uc3QgZW1haWxJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnZW1haWwnKTtcbiAgICBjb25zdCBwYXNzd29yZElucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdwYXNzd29yZCcpO1xuICAgIGNvbnN0IGxvZ2luQnRuID0gc2NyZWVuLmdldEJ5VGVzdElkKCdsb2dpbi1idG4nKTtcblxuICAgIGV4cGVjdChsb2dpbkJ0bi5wcm9wcy5hY2Nlc3NpYmlsaXR5U3RhdGUpLnRvSGF2ZVByb3BlcnR5KCdkaXNhYmxlZCcsIHRydWUpO1xuXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZW1haWxJbnB1dCwgZW1haWwpO1xuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KHBhc3N3b3JkSW5wdXQsIHBhc3N3b3JkKTtcblxuICAgIGV4cGVjdChsb2dpbkJ0bi5wcm9wcy5hY2Nlc3NpYmlsaXR5U3RhdGUpLnRvSGF2ZVByb3BlcnR5KCdkaXNhYmxlZCcsIGZhbHNlKTtcbiAgICBmaXJlRXZlbnQucHJlc3MobG9naW5CdG4pO1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBsb2dpblJlcXVlc3QoZW1haWwsIHBhc3N3b3JkLCBuYXZpZ2F0aW9uKSxcbiAgICApO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBT0EsSUFBQUUsR0FBQSxHQUFBQyx1QkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssTUFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sTUFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU8sUUFBQSxHQUFBUCxPQUFBO0FBQ0EsSUFBQVEsV0FBQSxHQUFBUixPQUFBO0FBQXFDLFNBQUFTLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBUCx3QkFBQVcsR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBLDRCQUFBRSxPQUFBLEVBQUFGLEdBQUEsVUFBQUcsS0FBQSxHQUFBUix3QkFBQSxDQUFBQyxXQUFBLE9BQUFPLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFB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