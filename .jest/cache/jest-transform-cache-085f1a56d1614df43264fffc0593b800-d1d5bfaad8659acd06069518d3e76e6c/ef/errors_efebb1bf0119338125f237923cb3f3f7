f413c7850c6ddf2b0c9221022f2c2db2
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RootNavigation = _interopRequireWildcard(require("../../navigation/rootNavigation"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var errorInterceptor = function errorInterceptor(adapter) {
  adapter.interceptors.response.use(function (response) {}, function (error) {
    if (!error.response) {
      console.log('ERROR±±±±');
      return RootNavigation.navigate('SERVER_ERROR_SCREEN', {});
    } else if (error.response && error.response.status === 401) {
      console.log('error status:', error.response.status);
      return RootNavigation.navigate('Home', {});
    } else if (error.response && error.response.status === 503) {
      return RootNavigation.navigate('SERVER_ERROR_SCREEN', {});
    } else {
      console.log('error status:', error.response.status);
      return error.response;
    }
  });
};
var _default = errorInterceptor;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb290TmF2aWdhdGlvbiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJlcnJvckludGVyY2VwdG9yIiwiYWRhcHRlciIsImludGVyY2VwdG9ycyIsInJlc3BvbnNlIiwidXNlIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwibmF2aWdhdGUiLCJzdGF0dXMiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJlcnJvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zLCB7QXhpb3NFcnJvcn0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IEFjdGlvblR5cGVzIGZyb20gJy4uL2FjdGlvblR5cGVzJztcbmltcG9ydCAqIGFzIFJvb3ROYXZpZ2F0aW9uIGZyb20gJy4uLy4uL25hdmlnYXRpb24vcm9vdE5hdmlnYXRpb24nO1xuXG5jb25zdCBlcnJvckludGVyY2VwdG9yID0gYWRhcHRlciA9PiB7XG4gIGFkYXB0ZXIuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShcbiAgICByZXNwb25zZSA9PiB7XG4gICAgICAvL1Jlc3BvbnNlIFN1Y2Nlc3NmdWxcbiAgICB9LFxuICAgIGVycm9yID0+IHtcbiAgICAgIGlmICghZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SwrHCscKxwrEnKTtcbiAgICAgICAgcmV0dXJuIFJvb3ROYXZpZ2F0aW9uLm5hdmlnYXRlKCdTRVJWRVJfRVJST1JfU0NSRUVOJywge30pO1xuICAgICAgfSBlbHNlIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3Igc3RhdHVzOicsIGVycm9yLnJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgIC8vIHN0b3JlLmRpc3BhdGNoKHtcbiAgICAgICAgLy8gICB0eXBlOiBBY3Rpb25UeXBlcy5BUElfQ0FMTF9GQUlMVVJFLFxuICAgICAgICAvLyAgIHBheWxvYWQ6IHtcbiAgICAgICAgLy8gICAgIG1lc3NhZ2U6IGVycm9yLnJlc3BvbnNlLmRhdGEucmVzdWx0Lm1lc3NhZ2UsXG4gICAgICAgIC8vICAgfSxcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIHJldHVybiBSb290TmF2aWdhdGlvbi5uYXZpZ2F0ZSgnSG9tZScsIHt9KTtcbiAgICAgICAgLy9VbmF1dGhvcml6ZWRcbiAgICAgICAgLy9yZWRpcmVjdCB0byBMb2dpblxuICAgICAgfSBlbHNlIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDUwMykge1xuICAgICAgICByZXR1cm4gUm9vdE5hdmlnYXRpb24ubmF2aWdhdGUoJ1NFUlZFUl9FUlJPUl9TQ1JFRU4nLCB7fSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL2Rpc3BhdGNoIHlvdXIgZXJyb3IgaW4gYSBtb3JlIHVzZXIgZnJpZW5kbHkgbWFubmVyXG4gICAgICAgIC8vIGlmIChERUJVRykge1xuICAgICAgICAvLyAgIC8vZWFzaWVyIGRlYnVnZ2luZ1xuICAgICAgICAvLyAgIGNvbnNvbGUuZ3JvdXAoJ0Vycm9yJyk7XG4gICAgICAgIC8vICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAvLyAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgLy8gfVxuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3Igc3RhdHVzOicsIGVycm9yLnJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgIHJldHVybiBlcnJvci5yZXNwb25zZTtcbiAgICAgIH1cbiAgICB9LFxuICApO1xufTtcbmV4cG9ydCBkZWZhdWx0IGVycm9ySW50ZXJjZXB0b3I7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQUFBLGNBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUFrRSxTQUFBQyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUgsd0JBQUFPLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQUUsT0FBQSxFQUFBRixHQUFBLFVBQUFHLEtBQUEsR0FBQVIsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTyxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxDQUFBSixHQUFBLFlBQUFHLEtBQUEsQ0FBQUUsR0FBQSxDQUFBTCxHQUFBLFNBQUFNLE1BQUEsV0FBQUMscUJBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsR0FBQSxJQUFBWCxHQUFBLFFBQUFXLEdBQUEsa0JBQUFILE1BQUEsQ0FBQUksU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWQsR0FBQSxFQUFBVyxHQUFBLFNBQUFJLElBQUEsR0FBQVIscUJBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBVixHQUFBLEVBQUFXLEdBQUEsY0FBQUksSUFBQSxLQUFBQSxJQUFBLENBQUFWLEdBQUEsSUFBQVUsSUFBQSxDQUFBQyxHQUFBLEtBQUFSLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSCxNQUFBLEVBQUFLLEdBQUEsRUFBQUksSUFBQSxZQUFBVCxNQUFBLENBQUFLLEdBQUEsSUFBQVgsR0FBQSxDQUFBVyxHQUFBLFNBQUFMLE1BQUEsQ0FBQUosT0FBQSxHQUFBRixHQUFBLE1BQUFHLEtBQUEsSUFBQUEsS0FBQSxDQUFBYSxHQUFBLENBQUFoQixHQUFBLEVBQUFNLE1BQUEsWUFBQUEsTUFBQTtBQUVsRSxJQUFNVyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCQSxDQUFHQyxPQUFPLEVBQUk7RUFDbENBLE9BQU8sQ0FBQ0MsWUFBWSxDQUFDQyxRQUFRLENBQUNDLEdBQUcsQ0FDL0IsVUFBQUQsUUFBUSxFQUFJLENBRVosQ0FBQyxFQUNELFVBQUFFLEtBQUssRUFBSTtJQUNQLElBQUksQ0FBQ0EsS0FBSyxDQUFDRixRQUFRLEVBQUU7TUFDbkJHLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFdBQVcsQ0FBQztNQUN4QixPQUFPaEMsY0FBYyxDQUFDaUMsUUFBUSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUMsTUFBTSxJQUFJSCxLQUFLLENBQUNGLFFBQVEsSUFBSUUsS0FBSyxDQUFDRixRQUFRLENBQUNNLE1BQU0sS0FBSyxHQUFHLEVBQUU7TUFDMURILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGVBQWUsRUFBRUYsS0FBSyxDQUFDRixRQUFRLENBQUNNLE1BQU0sQ0FBQztNQU9uRCxPQUFPbEMsY0FBYyxDQUFDaUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUc1QyxDQUFDLE1BQU0sSUFBSUgsS0FBSyxDQUFDRixRQUFRLElBQUlFLEtBQUssQ0FBQ0YsUUFBUSxDQUFDTSxNQUFNLEtBQUssR0FBRyxFQUFFO01BQzFELE9BQU9sQyxjQUFjLENBQUNpQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQyxNQUFNO01BUUxGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGVBQWUsRUFBRUYsS0FBSyxDQUFDRixRQUFRLENBQUNNLE1BQU0sQ0FBQztNQUNuRCxPQUFPSixLQUFLLENBQUNGLFFBQVE7SUFDdkI7RUFDRixDQUFDLENBQ0Y7QUFDSCxDQUFDO0FBQUMsSUFBQU8sUUFBQSxHQUNhVixnQkFBZ0I7QUFBQVcsT0FBQSxDQUFBMUIsT0FBQSxHQUFBeUIsUUFBQSJ9