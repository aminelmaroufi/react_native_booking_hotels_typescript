f390fe3f5d53a1c84349473a4d06332b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _normalizeText = _interopRequireDefault(require("../helpers/normalizeText"));
var _config = require("../config");
var _Text = _interopRequireDefault(require("../text/Text"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var CardFeaturedSubtitle = function CardFeaturedSubtitle(_a) {
  var _b;
  var theme = _a.theme,
    style = _a.style,
    props = __rest(_a, ["theme", "style"]);
  return (0, _jsxRuntime.jsx)(_Text.default, (0, _extends2.default)({
    style: _reactNative.StyleSheet.flatten([(0, _extends2.default)({
      fontSize: (0, _normalizeText.default)(13),
      marginBottom: 8,
      color: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.white
    }, _reactNative.Platform.select({
      android: (0, _extends2.default)({}, _config.fonts.android.black),
      default: {
        fontWeight: '400'
      }
    })), style])
  }, props));
};
var _default = (0, _config.withTheme)(CardFeaturedSubtitle, 'CardFeaturedSubtitle');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9ub3JtYWxpemVUZXh0IiwiX2NvbmZpZyIsIl9UZXh0IiwiX2pzeFJ1bnRpbWUiLCJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkNhcmRGZWF0dXJlZFN1YnRpdGxlIiwiX2EiLCJfYiIsInRoZW1lIiwic3R5bGUiLCJwcm9wcyIsImpzeCIsImRlZmF1bHQiLCJfZXh0ZW5kczIiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsImZvbnRTaXplIiwibm9ybWFsaXplIiwibWFyZ2luQm90dG9tIiwiY29sb3IiLCJjb2xvcnMiLCJ3aGl0ZSIsIlBsYXRmb3JtIiwic2VsZWN0IiwiYW5kcm9pZCIsImZvbnRzIiwiYmxhY2siLCJmb250V2VpZ2h0IiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQ2FyZEZlYXR1cmVkU3VidGl0bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBsYXRmb3JtLCBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBub3JtYWxpemUgZnJvbSAnLi4vaGVscGVycy9ub3JtYWxpemVUZXh0JztcbmltcG9ydCB7IGZvbnRzLCB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IFRleHQgZnJvbSAnLi4vdGV4dC9UZXh0JztcbmNvbnN0IENhcmRGZWF0dXJlZFN1YnRpdGxlID0gKF9hKSA9PiB7XG4gICAgdmFyIF9iO1xuICAgIHZhciB7IHRoZW1lLCBzdHlsZSB9ID0gX2EsIHByb3BzID0gX19yZXN0KF9hLCBbXCJ0aGVtZVwiLCBcInN0eWxlXCJdKTtcbiAgICByZXR1cm4gKDxUZXh0IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICBPYmplY3QuYXNzaWduKHsgZm9udFNpemU6IG5vcm1hbGl6ZSgxMyksIG1hcmdpbkJvdHRvbTogOCwgY29sb3I6IChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi53aGl0ZSB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICAgICAgYW5kcm9pZDogT2JqZWN0LmFzc2lnbih7fSwgZm9udHMuYW5kcm9pZC5ibGFjayksXG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogJzQwMCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSksXG4gICAgICAgIHN0eWxlLFxuICAgIF0pfSB7Li4ucHJvcHN9Lz4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShDYXJkRmVhdHVyZWRTdWJ0aXRsZSwgJ0NhcmRGZWF0dXJlZFN1YnRpdGxlJyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQVdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGNBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLE9BQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLEtBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFnQyxJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFmaEMsSUFBSU0sTUFBTSxHQUFJLElBQUksSUFBSSxJQUFJLENBQUNBLE1BQU0sSUFBSyxVQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJQyxDQUFDLElBQUlILENBQUMsRUFBRSxJQUFJSSxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDLElBQUlGLENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQy9FRCxDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHSCxDQUFDLENBQUNHLENBQUMsQ0FBQztFQUNmLElBQUlILENBQUMsSUFBSSxJQUFJLElBQUksT0FBT0ksTUFBTSxDQUFDSyxxQkFBcUIsS0FBSyxVQUFVLEVBQy9ELEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRVAsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFxQixDQUFDVCxDQUFDLENBQUMsRUFBRVUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDcEUsSUFBSVQsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUlOLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDTyxvQkFBb0IsQ0FBQ0wsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsRUFDMUVSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxHQUFHVixDQUFDLENBQUNHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUM7RUFDekI7RUFDSixPQUFPUixDQUFDO0FBQ1osQ0FBQztBQU1ELElBQU1XLG9CQUFvQixHQUFHLFNBQXZCQSxvQkFBb0JBLENBQUlDLEVBQUUsRUFBSztFQUNqQyxJQUFJQyxFQUFFO0VBQ04sSUFBTUMsS0FBSyxHQUFZRixFQUFFLENBQW5CRSxLQUFLO0lBQUVDLEtBQUssR0FBS0gsRUFBRSxDQUFaRyxLQUFLO0lBQVNDLEtBQUssR0FBR25CLE1BQU0sQ0FBQ2UsRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0VBQ2pFLE9BQVEsSUFBQWhCLFdBQUEsQ0FBQXFCLEdBQUEsRUFBQ3RCLEtBQUEsQ0FBQXVCLE9BQUksTUFBQUMsU0FBQSxDQUFBRCxPQUFBO0lBQUNILEtBQUssRUFBRUssdUJBQVUsQ0FBQ0MsT0FBTyxDQUFDLENBQ3BDLElBQUFGLFNBQUEsQ0FBQUQsT0FBQSxFQUFjO01BQUVJLFFBQVEsRUFBRSxJQUFBQyxzQkFBUyxFQUFDLEVBQUUsQ0FBQztNQUFFQyxZQUFZLEVBQUUsQ0FBQztNQUFFQyxLQUFLLEVBQUUsQ0FBQ1osRUFBRSxHQUFHQyxLQUFLLEtBQUssSUFBSSxJQUFJQSxLQUFLLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEtBQUssQ0FBQ1ksTUFBTSxNQUFNLElBQUksSUFBSWIsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNjO0lBQU0sQ0FBQyxFQUFFQyxxQkFBUSxDQUFDQyxNQUFNLENBQUM7TUFDaE1DLE9BQU8sRUFBRSxJQUFBWCxTQUFBLENBQUFELE9BQUEsRUFBYyxDQUFDLENBQUMsRUFBRWEsYUFBSyxDQUFDRCxPQUFPLENBQUNFLEtBQUssQ0FBQztNQUMvQ2QsT0FBTyxFQUFFO1FBQ0xlLFVBQVUsRUFBRTtNQUNoQjtJQUNKLENBQUMsQ0FBQyxDQUFDLEVBQ0hsQixLQUFLLENBQ1I7RUFBRSxHQUFLQyxLQUFLLEVBQUc7QUFDcEIsQ0FBQztBQUFDLElBQUFrQixRQUFBLEdBQ2EsSUFBQUMsaUJBQVMsRUFBQ3hCLG9CQUFvQixFQUFFLHNCQUFzQixDQUFDO0FBQUF5QixPQUFBLENBQUFsQixPQUFBLEdBQUFnQixRQUFBIn0=