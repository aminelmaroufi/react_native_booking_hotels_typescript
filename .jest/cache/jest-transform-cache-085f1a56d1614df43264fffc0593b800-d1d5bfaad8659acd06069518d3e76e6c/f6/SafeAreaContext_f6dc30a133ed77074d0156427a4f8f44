4dfa5444b239f97850ee9396f2a4f769
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SafeAreaProvider = SafeAreaProvider;
exports.useSafeAreaInsets = useSafeAreaInsets;
exports.useSafeAreaFrame = useSafeAreaFrame;
exports.withSafeAreaInsets = withSafeAreaInsets;
exports.useSafeArea = useSafeArea;
exports.SafeAreaContext = exports.SafeAreaConsumer = exports.SafeAreaFrameContext = exports.SafeAreaInsetsContext = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _NativeSafeAreaProvider = _interopRequireDefault(require("./NativeSafeAreaProvider"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var SafeAreaInsetsContext = React.createContext(null);
exports.SafeAreaInsetsContext = SafeAreaInsetsContext;
SafeAreaInsetsContext.displayName = 'SafeAreaInsetsContext';
var SafeAreaFrameContext = React.createContext(null);
exports.SafeAreaFrameContext = SafeAreaFrameContext;
SafeAreaFrameContext.displayName = 'SafeAreaFrameContext';
function SafeAreaProvider(_ref4) {
  var children = _ref4.children,
    initialMetrics = _ref4.initialMetrics,
    initialSafeAreaInsets = _ref4.initialSafeAreaInsets,
    style = _ref4.style;
  var _ref, _ref2, _initialMetrics$inset, _ref3, _initialMetrics$frame;
  var parentInsets = useParentSafeAreaInsets();
  var parentFrame = useParentSafeAreaFrame();
  var _React$useState = React.useState((_ref = (_ref2 = (_initialMetrics$inset = initialMetrics === null || initialMetrics === void 0 ? void 0 : initialMetrics.insets) !== null && _initialMetrics$inset !== void 0 ? _initialMetrics$inset : initialSafeAreaInsets) !== null && _ref2 !== void 0 ? _ref2 : parentInsets) !== null && _ref !== void 0 ? _ref : null),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    insets = _React$useState2[0],
    setInsets = _React$useState2[1];
  var _React$useState3 = React.useState((_ref3 = (_initialMetrics$frame = initialMetrics === null || initialMetrics === void 0 ? void 0 : initialMetrics.frame) !== null && _initialMetrics$frame !== void 0 ? _initialMetrics$frame : parentFrame) !== null && _ref3 !== void 0 ? _ref3 : {
      x: 0,
      y: 0,
      width: _reactNative.Dimensions.get('window').width,
      height: _reactNative.Dimensions.get('window').height
    }),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    frame = _React$useState4[0],
    setFrame = _React$useState4[1];
  var onInsetsChange = React.useCallback(function (event) {
    var _event$nativeEvent = event.nativeEvent,
      nextFrame = _event$nativeEvent.frame,
      nextInsets = _event$nativeEvent.insets;
    if (nextFrame && (nextFrame.height !== frame.height || nextFrame.width !== frame.width || nextFrame.x !== frame.x || nextFrame.y !== frame.y)) {
      setFrame(nextFrame);
    }
    if (!insets || nextInsets.bottom !== insets.bottom || nextInsets.left !== insets.left || nextInsets.right !== insets.right || nextInsets.top !== insets.top) {
      setInsets(nextInsets);
    }
  }, [frame, insets]);
  return React.createElement(_NativeSafeAreaProvider.default, {
    style: [styles.fill, style],
    onInsetsChange: onInsetsChange
  }, insets != null ? React.createElement(SafeAreaFrameContext.Provider, {
    value: frame
  }, React.createElement(SafeAreaInsetsContext.Provider, {
    value: insets
  }, children)) : null);
}
var styles = _reactNative.StyleSheet.create({
  fill: {
    flex: 1
  }
});
function useParentSafeAreaInsets() {
  return React.useContext(SafeAreaInsetsContext);
}
function useParentSafeAreaFrame() {
  return React.useContext(SafeAreaFrameContext);
}
function useSafeAreaInsets() {
  var safeArea = React.useContext(SafeAreaInsetsContext);
  if (safeArea == null) {
    throw new Error('No safe area insets value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.');
  }
  return safeArea;
}
function useSafeAreaFrame() {
  var frame = React.useContext(SafeAreaFrameContext);
  if (frame == null) {
    throw new Error('No safe area frame value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.');
  }
  return frame;
}
function withSafeAreaInsets(WrappedComponent) {
  return React.forwardRef(function (props, ref) {
    return React.createElement(SafeAreaConsumer, null, function (insets) {
      return React.createElement(WrappedComponent, _extends({}, props, {
        insets: insets,
        ref: ref
      }));
    });
  });
}
function useSafeArea() {
  return useSafeAreaInsets();
}
var SafeAreaConsumer = SafeAreaInsetsContext.Consumer;
exports.SafeAreaConsumer = SafeAreaConsumer;
var SafeAreaContext = SafeAreaInsetsContext;
exports.SafeAreaContext = SafeAreaContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9OYXRpdmVTYWZlQXJlYVByb3ZpZGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIlNhZmVBcmVhSW5zZXRzQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJkaXNwbGF5TmFtZSIsIlNhZmVBcmVhRnJhbWVDb250ZXh0IiwiU2FmZUFyZWFQcm92aWRlciIsIl9yZWY0IiwiY2hpbGRyZW4iLCJpbml0aWFsTWV0cmljcyIsImluaXRpYWxTYWZlQXJlYUluc2V0cyIsInN0eWxlIiwiX3JlZiIsIl9yZWYyIiwiX2luaXRpYWxNZXRyaWNzJGluc2V0IiwiX3JlZjMiLCJfaW5pdGlhbE1ldHJpY3MkZnJhbWUiLCJwYXJlbnRJbnNldHMiLCJ1c2VQYXJlbnRTYWZlQXJlYUluc2V0cyIsInBhcmVudEZyYW1lIiwidXNlUGFyZW50U2FmZUFyZWFGcmFtZSIsIl9SZWFjdCR1c2VTdGF0ZSIsInVzZVN0YXRlIiwiaW5zZXRzIiwiX1JlYWN0JHVzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJzZXRJbnNldHMiLCJfUmVhY3QkdXNlU3RhdGUzIiwiZnJhbWUiLCJ4IiwieSIsIndpZHRoIiwiRGltZW5zaW9ucyIsImdldCIsImhlaWdodCIsIl9SZWFjdCR1c2VTdGF0ZTQiLCJzZXRGcmFtZSIsIm9uSW5zZXRzQ2hhbmdlIiwidXNlQ2FsbGJhY2siLCJldmVudCIsIl9ldmVudCRuYXRpdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwibmV4dEZyYW1lIiwibmV4dEluc2V0cyIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsInRvcCIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZXMiLCJmaWxsIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJmbGV4IiwidXNlQ29udGV4dCIsInVzZVNhZmVBcmVhSW5zZXRzIiwic2FmZUFyZWEiLCJFcnJvciIsInVzZVNhZmVBcmVhRnJhbWUiLCJ3aXRoU2FmZUFyZWFJbnNldHMiLCJXcmFwcGVkQ29tcG9uZW50IiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwiU2FmZUFyZWFDb25zdW1lciIsIl9leHRlbmRzIiwidXNlU2FmZUFyZWEiLCJDb25zdW1lciIsIlNhZmVBcmVhQ29udGV4dCJdLCJzb3VyY2VzIjpbIlNhZmVBcmVhQ29udGV4dC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRGltZW5zaW9ucywgU3R5bGVQcm9wLCBTdHlsZVNoZWV0LCBWaWV3U3R5bGUgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IE5hdGl2ZVNhZmVBcmVhUHJvdmlkZXIgZnJvbSAnLi9OYXRpdmVTYWZlQXJlYVByb3ZpZGVyJztcbmltcG9ydCB7IEVkZ2VJbnNldHMsIEluc2V0Q2hhbmdlZEV2ZW50LCBNZXRyaWNzLCBSZWN0IH0gZnJvbSAnLi9TYWZlQXJlYS50eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBTYWZlQXJlYUluc2V0c0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PEVkZ2VJbnNldHMgfCBudWxsPihcbiAgbnVsbCxcbik7XG5TYWZlQXJlYUluc2V0c0NvbnRleHQuZGlzcGxheU5hbWUgPSAnU2FmZUFyZWFJbnNldHNDb250ZXh0JztcblxuZXhwb3J0IGNvbnN0IFNhZmVBcmVhRnJhbWVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxSZWN0IHwgbnVsbD4obnVsbCk7XG5TYWZlQXJlYUZyYW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdTYWZlQXJlYUZyYW1lQ29udGV4dCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FmZUFyZWFWaWV3UHJvcHMge1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgaW5pdGlhbE1ldHJpY3M/OiBNZXRyaWNzIHwgbnVsbDtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBpbml0aWFsU2FmZUFyZWFJbnNldHM/OiBFZGdlSW5zZXRzIHwgbnVsbDtcbiAgc3R5bGU/OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNhZmVBcmVhUHJvdmlkZXIoe1xuICBjaGlsZHJlbixcbiAgaW5pdGlhbE1ldHJpY3MsXG4gIGluaXRpYWxTYWZlQXJlYUluc2V0cyxcbiAgc3R5bGUsXG59OiBTYWZlQXJlYVZpZXdQcm9wcykge1xuICBjb25zdCBwYXJlbnRJbnNldHMgPSB1c2VQYXJlbnRTYWZlQXJlYUluc2V0cygpO1xuICBjb25zdCBwYXJlbnRGcmFtZSA9IHVzZVBhcmVudFNhZmVBcmVhRnJhbWUoKTtcbiAgY29uc3QgW2luc2V0cywgc2V0SW5zZXRzXSA9IFJlYWN0LnVzZVN0YXRlPEVkZ2VJbnNldHMgfCBudWxsPihcbiAgICBpbml0aWFsTWV0cmljcz8uaW5zZXRzID8/IGluaXRpYWxTYWZlQXJlYUluc2V0cyA/PyBwYXJlbnRJbnNldHMgPz8gbnVsbCxcbiAgKTtcbiAgY29uc3QgW2ZyYW1lLCBzZXRGcmFtZV0gPSBSZWFjdC51c2VTdGF0ZTxSZWN0PihcbiAgICBpbml0aWFsTWV0cmljcz8uZnJhbWUgPz9cbiAgICAgIHBhcmVudEZyYW1lID8/IHtcbiAgICAgICAgLy8gQmFja3dhcmRzIGNvbXBhdCBzbyB3ZSByZW5kZXIgYW55d2F5IGlmIHdlIGRvbid0IGhhdmUgZnJhbWUuXG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIHdpZHRoOiBEaW1lbnNpb25zLmdldCgnd2luZG93Jykud2lkdGgsXG4gICAgICAgIGhlaWdodDogRGltZW5zaW9ucy5nZXQoJ3dpbmRvdycpLmhlaWdodCxcbiAgICAgIH0sXG4gICk7XG4gIGNvbnN0IG9uSW5zZXRzQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBJbnNldENoYW5nZWRFdmVudCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBuYXRpdmVFdmVudDogeyBmcmFtZTogbmV4dEZyYW1lLCBpbnNldHM6IG5leHRJbnNldHMgfSxcbiAgICAgIH0gPSBldmVudDtcblxuICAgICAgaWYgKFxuICAgICAgICAvLyBCYWNrd2FyZHMgY29tcGF0IHdpdGggb2xkIG5hdGl2ZSBjb2RlIHRoYXQgd29uJ3Qgc2VuZCBmcmFtZS5cbiAgICAgICAgbmV4dEZyYW1lICYmXG4gICAgICAgIChuZXh0RnJhbWUuaGVpZ2h0ICE9PSBmcmFtZS5oZWlnaHQgfHxcbiAgICAgICAgICBuZXh0RnJhbWUud2lkdGggIT09IGZyYW1lLndpZHRoIHx8XG4gICAgICAgICAgbmV4dEZyYW1lLnggIT09IGZyYW1lLnggfHxcbiAgICAgICAgICBuZXh0RnJhbWUueSAhPT0gZnJhbWUueSlcbiAgICAgICkge1xuICAgICAgICBzZXRGcmFtZShuZXh0RnJhbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgICFpbnNldHMgfHxcbiAgICAgICAgbmV4dEluc2V0cy5ib3R0b20gIT09IGluc2V0cy5ib3R0b20gfHxcbiAgICAgICAgbmV4dEluc2V0cy5sZWZ0ICE9PSBpbnNldHMubGVmdCB8fFxuICAgICAgICBuZXh0SW5zZXRzLnJpZ2h0ICE9PSBpbnNldHMucmlnaHQgfHxcbiAgICAgICAgbmV4dEluc2V0cy50b3AgIT09IGluc2V0cy50b3BcbiAgICAgICkge1xuICAgICAgICBzZXRJbnNldHMobmV4dEluc2V0cyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbZnJhbWUsIGluc2V0c10sXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8TmF0aXZlU2FmZUFyZWFQcm92aWRlclxuICAgICAgc3R5bGU9e1tzdHlsZXMuZmlsbCwgc3R5bGVdfVxuICAgICAgb25JbnNldHNDaGFuZ2U9e29uSW5zZXRzQ2hhbmdlfVxuICAgID5cbiAgICAgIHtpbnNldHMgIT0gbnVsbCA/IChcbiAgICAgICAgPFNhZmVBcmVhRnJhbWVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtmcmFtZX0+XG4gICAgICAgICAgPFNhZmVBcmVhSW5zZXRzQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17aW5zZXRzfT5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICA8L1NhZmVBcmVhSW5zZXRzQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICAgPC9TYWZlQXJlYUZyYW1lQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICkgOiBudWxsfVxuICAgIDwvTmF0aXZlU2FmZUFyZWFQcm92aWRlcj5cbiAgKTtcbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBmaWxsOiB7IGZsZXg6IDEgfSxcbn0pO1xuXG5mdW5jdGlvbiB1c2VQYXJlbnRTYWZlQXJlYUluc2V0cygpOiBFZGdlSW5zZXRzIHwgbnVsbCB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KFNhZmVBcmVhSW5zZXRzQ29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIHVzZVBhcmVudFNhZmVBcmVhRnJhbWUoKTogUmVjdCB8IG51bGwge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChTYWZlQXJlYUZyYW1lQ29udGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTYWZlQXJlYUluc2V0cygpOiBFZGdlSW5zZXRzIHtcbiAgY29uc3Qgc2FmZUFyZWEgPSBSZWFjdC51c2VDb250ZXh0KFNhZmVBcmVhSW5zZXRzQ29udGV4dCk7XG4gIGlmIChzYWZlQXJlYSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ05vIHNhZmUgYXJlYSBpbnNldHMgdmFsdWUgYXZhaWxhYmxlLiBNYWtlIHN1cmUgeW91IGFyZSByZW5kZXJpbmcgYDxTYWZlQXJlYVByb3ZpZGVyPmAgYXQgdGhlIHRvcCBvZiB5b3VyIGFwcC4nLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHNhZmVBcmVhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2FmZUFyZWFGcmFtZSgpOiBSZWN0IHtcbiAgY29uc3QgZnJhbWUgPSBSZWFjdC51c2VDb250ZXh0KFNhZmVBcmVhRnJhbWVDb250ZXh0KTtcbiAgaWYgKGZyYW1lID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnTm8gc2FmZSBhcmVhIGZyYW1lIHZhbHVlIGF2YWlsYWJsZS4gTWFrZSBzdXJlIHlvdSBhcmUgcmVuZGVyaW5nIGA8U2FmZUFyZWFQcm92aWRlcj5gIGF0IHRoZSB0b3Agb2YgeW91ciBhcHAuJyxcbiAgICApO1xuICB9XG4gIHJldHVybiBmcmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhTYWZlQXJlYUluc2V0czxUPihcbiAgV3JhcHBlZENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxUPixcbikge1xuICByZXR1cm4gUmVhY3QuZm9yd2FyZFJlZigocHJvcHM6IFQsIHJlZjogUmVhY3QuUmVmPFQ+KSA9PiAoXG4gICAgPFNhZmVBcmVhQ29uc3VtZXI+XG4gICAgICB7KGluc2V0cykgPT4gPFdyYXBwZWRDb21wb25lbnQgey4uLnByb3BzfSBpbnNldHM9e2luc2V0c30gcmVmPXtyZWZ9IC8+fVxuICAgIDwvU2FmZUFyZWFDb25zdW1lcj5cbiAgKSk7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNhZmVBcmVhKCk6IEVkZ2VJbnNldHMge1xuICByZXR1cm4gdXNlU2FmZUFyZWFJbnNldHMoKTtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgY29uc3QgU2FmZUFyZWFDb25zdW1lciA9IFNhZmVBcmVhSW5zZXRzQ29udGV4dC5Db25zdW1lcjtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgY29uc3QgU2FmZUFyZWFDb250ZXh0ID0gU2FmZUFyZWFJbnNldHNDb250ZXh0O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxP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