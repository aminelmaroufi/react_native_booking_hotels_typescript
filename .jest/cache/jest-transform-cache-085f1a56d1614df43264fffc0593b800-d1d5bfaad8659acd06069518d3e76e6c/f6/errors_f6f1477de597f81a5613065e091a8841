ccf604f77ea1681fd30cc5f70f5ba2d6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RootNavigation = _interopRequireWildcard(require("../../navigation/rootNavigation"));
var _adapter = _interopRequireDefault(require("../adapter"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var errorInterceptor = function errorInterceptor() {
  _adapter.default.interceptors.response.use(function (response) {}, function (error) {
    if (!error.response) {
      return RootNavigation.navigate('SERVER_ERROR_SCREEN', {});
    } else if (error.response && error.response.status === 401) {
      return RootNavigation.navigate('Home', {});
    } else if (error.response && error.response.status === 503) {
      return RootNavigation.navigate('SERVER_ERROR_SCREEN', {});
    } else {
      return Promise.reject(error);
    }
  });
};
var _default = errorInterceptor;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb290TmF2aWdhdGlvbiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9hZGFwdGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJlcnJvckludGVyY2VwdG9yIiwiYWRhcHRlciIsImludGVyY2VwdG9ycyIsInJlc3BvbnNlIiwidXNlIiwiZXJyb3IiLCJuYXZpZ2F0ZSIsInN0YXR1cyIsIlByb21pc2UiLCJyZWplY3QiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJlcnJvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zLCB7QXhpb3NFcnJvcn0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0ICogYXMgUm9vdE5hdmlnYXRpb24gZnJvbSAnLi4vLi4vbmF2aWdhdGlvbi9yb290TmF2aWdhdGlvbic7XG5pbXBvcnQgYWRhcHRlciBmcm9tICcuLi9hZGFwdGVyJztcblxuY29uc3QgZXJyb3JJbnRlcmNlcHRvciA9ICgpID0+IHtcbiAgYWRhcHRlci5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKFxuICAgIHJlc3BvbnNlID0+IHtcbiAgICAgIC8vUmVzcG9uc2UgU3VjY2Vzc2Z1bFxuICAgIH0sXG4gICAgZXJyb3IgPT4ge1xuICAgICAgaWYgKCFlcnJvci5yZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gUm9vdE5hdmlnYXRpb24ubmF2aWdhdGUoJ1NFUlZFUl9FUlJPUl9TQ1JFRU4nLCB7fSk7XG4gICAgICB9IGVsc2UgaWYgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgIHJldHVybiBSb290TmF2aWdhdGlvbi5uYXZpZ2F0ZSgnSG9tZScsIHt9KTtcbiAgICAgICAgLy9VbmF1dGhvcml6ZWRcbiAgICAgICAgLy9yZWRpcmVjdCB0byBMb2dpblxuICAgICAgfSBlbHNlIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDUwMykge1xuICAgICAgICByZXR1cm4gUm9vdE5hdmlnYXRpb24ubmF2aWdhdGUoJ1NFUlZFUl9FUlJPUl9TQ1JFRU4nLCB7fSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL2Rpc3BhdGNoIHlvdXIgZXJyb3IgaW4gYSBtb3JlIHVzZXIgZnJpZW5kbHkgbWFubmVyXG4gICAgICAgIC8vIGlmIChERUJVRykge1xuICAgICAgICAvLyAgIC8vZWFzaWVyIGRlYnVnZ2luZ1xuICAgICAgICAvLyAgIGNvbnNvbGUuZ3JvdXAoJ0Vycm9yJyk7XG4gICAgICAgIC8vICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAvLyAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfSxcbiAgKTtcbn07XG5leHBvcnQgZGVmYXVsdCBlcnJvckludGVyY2VwdG9yO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0EsSUFBQUEsY0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQWlDLFNBQUFHLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYs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