{"version":3,"names":["_actionTypes","_interopRequireDefault","require","_auth","_user","defaultState","fetching","isLoggedIn","message","error","user","emptyUser","success","noAction","type","payload","error_message","success_message","describe","it","expect","auth","undefined","toEqual","expectedState","_extends2","default","fecthPayload","ActionTypes","API_CALL_REQUEST","fecthSuccessPayload","API_CALL_SUCCESS","fecthFailurePayload","API_CALL_FAILURE","fecthSuccessOperationPayload","SUCCESS_OPERATION","checkUserSuccessPayload","CHECK_USER_SUCCESS","loginSuccessPayload","LOGIN_SUCCESS"],"sources":["auth.test.ts"],"sourcesContent":["import ActionTypes from '../../../utils/actionTypes';\nimport {authActions, AuthState} from '../../../types';\nimport auth from '../auth';\nimport {emptyUser} from '../../../models/user';\n\nconst defaultState: AuthState = {\n  fetching: false,\n  isLoggedIn: false,\n  message: '',\n  error: false,\n  user: emptyUser,\n  success: false,\n};\nconst noAction: authActions = {\n  type: '',\n  payload: null,\n};\nconst error_message = 'Error from API';\nconst success_message = 'Succes message from API';\n\ndescribe('Test auth reducer', () => {\n  it('should return the initial state when state is undefined', () => {\n    expect(auth(undefined, noAction)).toEqual(defaultState);\n  });\n\n  it(\"should handle the 'API_CALL_REQUEST' action\", () => {\n    const expectedState = {...defaultState, fetching: true};\n    const fecthPayload: authActions = {\n      type: ActionTypes.API_CALL_REQUEST,\n      payload: {...defaultState, fetching: true},\n    };\n\n    expect(auth(undefined, fecthPayload)).toEqual(expectedState);\n  });\n\n  it(\"should handle the 'API_CALL_SUCCESS' action\", () => {\n    const expectedState = {...defaultState, success: true};\n    const fecthSuccessPayload: authActions = {\n      type: ActionTypes.API_CALL_SUCCESS,\n      payload: {fetching: false, success: true},\n    };\n\n    expect(auth(undefined, fecthSuccessPayload)).toEqual(expectedState);\n  });\n\n  it(\"should handle the 'API_CALL_FAILURE' action\", () => {\n    const expectedState = {\n      ...defaultState,\n      error: true,\n      message: error_message,\n    };\n    const fecthFailurePayload: authActions = {\n      type: ActionTypes.API_CALL_FAILURE,\n      payload: {fetching: false, error: true, message: error_message},\n    };\n\n    expect(auth(undefined, fecthFailurePayload)).toEqual(expectedState);\n  });\n\n  it(\"should handle the 'SUCCESS_OPERATION' action\", () => {\n    const expectedState = {\n      ...defaultState,\n      success: true,\n      message: success_message,\n    };\n    const fecthSuccessOperationPayload: authActions = {\n      type: ActionTypes.SUCCESS_OPERATION,\n      payload: {fetching: false, success: true, message: success_message},\n    };\n\n    expect(auth(undefined, fecthSuccessOperationPayload)).toEqual(\n      expectedState,\n    );\n  });\n\n  it(\"should handle the 'CHECK_USER_SUCCESS' action for logged user\", () => {\n    const expectedState = {\n      ...defaultState,\n      isLoggedIn: true,\n      user: emptyUser,\n    };\n    const checkUserSuccessPayload: authActions = {\n      type: ActionTypes.CHECK_USER_SUCCESS,\n      payload: {isLoggedIn: true, user: emptyUser},\n    };\n\n    expect(auth(undefined, checkUserSuccessPayload)).toEqual(expectedState);\n  });\n\n  it(\"should handle the 'CHECK_USER_SUCCESS' action for guest user\", () => {\n    const expectedState = {\n      ...defaultState,\n      isLoggedIn: false,\n      user: emptyUser,\n    };\n    const checkUserSuccessPayload: authActions = {\n      type: ActionTypes.CHECK_USER_SUCCESS,\n      payload: {isLoggedIn: false, user: null},\n    };\n\n    expect(auth(undefined, checkUserSuccessPayload)).toEqual(expectedState);\n  });\n\n  it(\"should handle the 'LOGIN_SUCCESS' action\", () => {\n    const expectedState = {\n      ...defaultState,\n      isLoggedIn: true,\n      user: emptyUser,\n    };\n    const loginSuccessPayload: authActions = {\n      type: ActionTypes.LOGIN_SUCCESS,\n      payload: {isLoggedIn: true, user: emptyUser},\n    };\n\n    expect(auth(undefined, loginSuccessPayload)).toEqual(expectedState);\n  });\n});\n"],"mappings":"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"}