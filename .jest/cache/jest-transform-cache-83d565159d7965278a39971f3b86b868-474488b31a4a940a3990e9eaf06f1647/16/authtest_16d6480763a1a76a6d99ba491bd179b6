b65c834920267ac081ab1b90a1438ca5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var effects_1 = require("redux-saga/effects");
var native_1 = require("@react-navigation/native");
var recordSaga_1 = __importDefault(require("../recordSaga"));
var auth_1 = __importStar(require("../auth"));
var actionTypes_1 = __importDefault(require("../../..//utils/actionTypes"));
var api = __importStar(require("../../../api/auth"));
var actions_1 = require("../../../redux/actions");
var error_message = 'Error from API';
var success_message = 'SUCCESS_OPERATION';
describe('Test watchAuthRequest sagas', function () {
  afterEach(function () {
    jest.clearAllMocks();
  });
  it("should call 'all' with the correct functions", function () {
    return __awaiter(void 0, void 0, void 0, _regenerator.default.mark(function _callee() {
      var genObject, effects;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            genObject = (0, auth_1.default)();
            effects = genObject.next().value;
            expect(effects).toEqual((0, effects_1.all)([(0, effects_1.takeLatest)(actionTypes_1.default.SAVE_ACCOUNT_REQUEST, auth_1.save_account), (0, effects_1.takeLatest)(actionTypes_1.default.LOGIN_REQUEST, auth_1.login_request), (0, effects_1.takeLatest)(actionTypes_1.default.CHECK_USER_REQUEST, auth_1.check_user_request)]));
          case 3:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
  });
  describe('Test check_user_request saga', function () {
    it('should call api and dispatch success action', function () {
      return __awaiter(void 0, void 0, void 0, _regenerator.default.mark(function _callee2() {
        var currUser, res, checkUserRequest, dispatched, expectedDispatched;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              currUser = {
                _id: '1',
                firstname: 'test',
                lastname: 'test',
                fullname: 'test test',
                email: 'test@test.com',
                phone: '',
                password: '',
                cards: []
              };
              res = {
                data: {
                  ok: true,
                  result: {
                    user: currUser
                  }
                },
                status: 200,
                statusText: '',
                headers: {},
                config: {}
              };
              checkUserRequest = jest.spyOn(api, 'checkUser').mockImplementation(function () {
                return Promise.resolve(res);
              });
              _context2.next = 5;
              return (0, recordSaga_1.default)(auth_1.check_user_request, null);
            case 5:
              dispatched = _context2.sent;
              expect(checkUserRequest).toHaveBeenCalledTimes(1);
              expectedDispatched = [{
                type: actionTypes_1.default.API_CALL_REQUEST
              }, {
                type: actionTypes_1.default.API_CALL_SUCCESS
              }, {
                type: actionTypes_1.default.CHECK_USER_SUCCESS,
                payload: {
                  user: currUser
                }
              }];
              expect(dispatched).toEqual(expectedDispatched);
              checkUserRequest.mockClear();
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
    });
    it('should check_user_request saga disptach failure from the server', function () {
      return __awaiter(void 0, void 0, void 0, _regenerator.default.mark(function _callee3() {
        var res, checkUserRequest, dispatched, expectedDispatched;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              res = {
                data: {
                  ok: false,
                  result: {
                    message: error_message,
                    user: null
                  }
                },
                status: 200,
                statusText: '',
                headers: {},
                config: {}
              };
              checkUserRequest = jest.spyOn(api, 'checkUser').mockImplementation(function () {
                return Promise.resolve(res);
              });
              _context3.next = 4;
              return (0, recordSaga_1.default)(auth_1.check_user_request, null);
            case 4:
              dispatched = _context3.sent;
              expect(checkUserRequest).toHaveBeenCalledTimes(1);
              expectedDispatched = [{
                type: actionTypes_1.default.API_CALL_REQUEST
              }, {
                type: actionTypes_1.default.API_CALL_FAILURE,
                payload: {
                  message: error_message
                }
              }];
              expect(dispatched).toEqual(expectedDispatched);
              checkUserRequest.mockClear();
            case 9:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
    });
    it('should check_user_request saga disptach failure', function () {
      return __awaiter(void 0, void 0, void 0, _regenerator.default.mark(function _callee4() {
        var checkUserRequest, dispatched, expectedDispatched;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              checkUserRequest = jest.spyOn(api, 'checkUser').mockImplementation(function () {
                return Promise.reject(new Error(error_message));
              });
              _context4.next = 3;
              return (0, recordSaga_1.default)(auth_1.check_user_request, null);
            case 3:
              dispatched = _context4.sent;
              expect(checkUserRequest).toHaveBeenCalledTimes(1);
              expectedDispatched = [{
                type: actionTypes_1.default.API_CALL_REQUEST
              }, {
                type: actionTypes_1.default.API_CALL_FAILURE,
                payload: {
                  message: error_message
                }
              }];
              expect(dispatched).toEqual(expectedDispatched);
              checkUserRequest.mockClear();
            case 8:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
    });
  });
  describe('Test login_request saga', function () {
    var action = {
      email: 'test@test.com',
      password: 'Azerty123@@'
    };
    it('should call api and dispatch success action', function () {
      return __awaiter(void 0, void 0, void 0, _regenerator.default.mark(function _callee5() {
        var currUser, res, loginRequest, dispatched, expectedDispatched;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              currUser = {
                _id: '1',
                firstname: 'test',
                lastname: 'test',
                fullname: 'test test',
                email: 'test@test.com',
                phone: '',
                password: '',
                cards: []
              };
              res = {
                data: {
                  ok: true,
                  result: {
                    user: currUser
                  }
                },
                status: 200,
                statusText: '',
                headers: {},
                config: {}
              };
              loginRequest = jest.spyOn(api, 'login').mockImplementation(function () {
                return Promise.resolve(res);
              });
              _context5.next = 5;
              return (0, recordSaga_1.default)(auth_1.login_request, action);
            case 5:
              dispatched = _context5.sent;
              expect(loginRequest).toHaveBeenCalledTimes(1);
              expectedDispatched = [{
                type: actionTypes_1.default.API_CALL_REQUEST
              }, {
                type: actionTypes_1.default.API_CALL_SUCCESS
              }, {
                type: actionTypes_1.default.LOGIN_SUCCESS,
                payload: {
                  user: currUser
                }
              }, (0, actions_1.navigateToScreen)('Overview', {})];
              expect(dispatched).toEqual(expectedDispatched);
              loginRequest.mockClear();
            case 10:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
    });
    it('should login_request saga disptach failure from the server', function () {
      return __awaiter(void 0, void 0, void 0, _regenerator.default.mark(function _callee6() {
        var res, loginRequest, dispatched, expectedDispatched;
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              res = {
                data: {
                  ok: false,
                  result: {
                    message: error_message,
                    user: null
                  }
                },
                status: 200,
                statusText: '',
                headers: {},
                config: {}
              };
              loginRequest = jest.spyOn(api, 'login').mockImplementation(function () {
                return Promise.resolve(res);
              });
              _context6.next = 4;
              return (0, recordSaga_1.default)(auth_1.login_request, action);
            case 4:
              dispatched = _context6.sent;
              expect(loginRequest).toHaveBeenCalledTimes(1);
              expectedDispatched = [{
                type: actionTypes_1.default.API_CALL_REQUEST
              }, {
                type: actionTypes_1.default.API_CALL_FAILURE,
                payload: {
                  message: error_message
                }
              }];
              expect(dispatched).toEqual(expectedDispatched);
              loginRequest.mockClear();
            case 9:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
    });
    it('should login_request saga disptach failure', function () {
      return __awaiter(void 0, void 0, void 0, _regenerator.default.mark(function _callee7() {
        var loginRequest, dispatched, expectedDispatched;
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              loginRequest = jest.spyOn(api, 'login').mockImplementation(function () {
                return Promise.reject(new Error(error_message));
              });
              _context7.next = 3;
              return (0, recordSaga_1.default)(auth_1.login_request, action);
            case 3:
              dispatched = _context7.sent;
              expect(loginRequest).toHaveBeenCalledTimes(1);
              expectedDispatched = [{
                type: actionTypes_1.default.API_CALL_REQUEST
              }, {
                type: actionTypes_1.default.API_CALL_FAILURE,
                payload: {
                  message: error_message
                }
              }];
              expect(dispatched).toEqual(expectedDispatched);
              loginRequest.mockClear();
            case 8:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
    });
  });
  describe('Test save_account saga', function () {
    var currUser = {
      _id: '1',
      firstname: 'test',
      lastname: 'test',
      fullname: 'test test',
      email: 'test@test.com',
      phone: '',
      password: '',
      cards: []
    };
    var action = {
      account: currUser,
      navigation: {
        pop: jest.fn()
      }
    };
    it('should call api and dispatch success action', function () {
      return __awaiter(void 0, void 0, void 0, _regenerator.default.mark(function _callee8() {
        var res, saveAccountRequest, dispatched, expectedDispatched;
        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              res = {
                data: {
                  ok: true,
                  result: {
                    message: success_message,
                    user: currUser
                  }
                },
                status: 200,
                statusText: '',
                headers: {},
                config: {}
              };
              saveAccountRequest = jest.spyOn(api, 'saveAccount').mockImplementation(function () {
                return Promise.resolve(res);
              });
              _context8.next = 4;
              return (0, recordSaga_1.default)(auth_1.save_account, action);
            case 4:
              dispatched = _context8.sent;
              expect(saveAccountRequest).toHaveBeenCalledTimes(1);
              expectedDispatched = [{
                type: actionTypes_1.default.API_CALL_REQUEST
              }, {
                type: actionTypes_1.default.SUCCESS_OPERATION,
                payload: {
                  message: success_message
                }
              }, {
                type: actionTypes_1.default.CREATE_ACCOUNT_SUCCESS,
                payload: {
                  user: currUser
                }
              }, native_1.CommonActions.goBack(), native_1.CommonActions.navigate({
                name: 'Login'
              })];
              expect(dispatched).toEqual(expectedDispatched);
              saveAccountRequest.mockClear();
            case 9:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
    });
    it('should login_request saga disptach failure from the server', function () {
      return __awaiter(void 0, void 0, void 0, _regenerator.default.mark(function _callee9() {
        var res, saveAccountRequest, dispatched, expectedDispatched;
        return _regenerator.default.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              res = {
                data: {
                  ok: false,
                  result: {
                    message: error_message,
                    user: null
                  }
                },
                status: 200,
                statusText: '',
                headers: {},
                config: {}
              };
              saveAccountRequest = jest.spyOn(api, 'saveAccount').mockImplementation(function () {
                return Promise.resolve(res);
              });
              _context9.next = 4;
              return (0, recordSaga_1.default)(auth_1.save_account, action);
            case 4:
              dispatched = _context9.sent;
              expect(saveAccountRequest).toHaveBeenCalledTimes(1);
              expectedDispatched = [{
                type: actionTypes_1.default.API_CALL_REQUEST
              }, {
                type: actionTypes_1.default.API_CALL_FAILURE,
                payload: {
                  message: error_message
                }
              }];
              expect(dispatched).toEqual(expectedDispatched);
              saveAccountRequest.mockClear();
            case 9:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
    });
    it('should login_request saga disptach failure', function () {
      return __awaiter(void 0, void 0, void 0, _regenerator.default.mark(function _callee10() {
        var saveAccountRequest, dispatched, expectedDispatched;
        return _regenerator.default.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              saveAccountRequest = jest.spyOn(api, 'saveAccount').mockImplementation(function () {
                return Promise.reject(new Error(error_message));
              });
              _context10.next = 3;
              return (0, recordSaga_1.default)(auth_1.save_account, action);
            case 3:
              dispatched = _context10.sent;
              expect(saveAccountRequest).toHaveBeenCalledTimes(1);
              expectedDispatched = [{
                type: actionTypes_1.default.API_CALL_REQUEST
              }, {
                type: actionTypes_1.default.API_CALL_FAILURE,
                payload: {
                  message: error_message
                }
              }];
              expect(dispatched).toEqual(expectedDispatched);
              saveAccountRequest.mockClear();
            case 8:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,