f70e54bf9886a55d6b64fbb44e0fbb52
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _marked = _regenerator.default.mark(get_hotels),
  _marked2 = _regenerator.default.mark(get_more_hotels),
  _marked3 = _regenerator.default.mark(add_card),
  _marked4 = _regenerator.default.mark(create_booking),
  _marked5 = _regenerator.default.mark(get_bookings),
  _marked6 = _regenerator.default.mark(watchBookRequests);
var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var actionTypes_1 = __importDefault(require("../../utils/actionTypes"));
var effects_1 = require("redux-saga/effects");
var api_1 = require("../../api");
var RootNavigation = __importStar(require("../../navigation/rootNavigation"));
function get_hotels(action) {
  var response, data;
  return _regenerator.default.wrap(function get_hotels$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        _context.prev = 0;
        _context.next = 3;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_REQUEST
        });
      case 3:
        _context.next = 5;
        return (0, effects_1.call)(api_1.getHotels, action.params);
      case 5:
        response = _context.sent;
        if (response) {
          _context.next = 11;
          break;
        }
        _context.next = 9;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_SUCCESS
        });
      case 9:
        _context.next = 19;
        break;
      case 11:
        data = response.data;
        if (!data.ok) {
          _context.next = 17;
          break;
        }
        _context.next = 15;
        return (0, effects_1.all)([(0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_SUCCESS
        }), (0, effects_1.put)({
          type: actionTypes_1.default.SET_HOTELS,
          payload: {
            hotels: data.result.hotels,
            total: data.result.total,
            pages: data.result.pages,
            page: data.result.page,
            limit: data.result.limit
          }
        })]);
      case 15:
        _context.next = 19;
        break;
      case 17:
        _context.next = 19;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 19:
        _context.next = 25;
        break;
      case 21:
        _context.prev = 21;
        _context.t0 = _context["catch"](0);
        _context.next = 25;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context.t0 === 'string' ? _context.t0 : _context.t0.message
          }
        });
      case 25:
      case "end":
        return _context.stop();
    }
  }, _marked, null, [[0, 21]]);
}
function get_more_hotels(action) {
  var response, data;
  return _regenerator.default.wrap(function get_more_hotels$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        _context2.prev = 0;
        _context2.next = 3;
        return (0, effects_1.call)(api_1.getHotels, action.params);
      case 3:
        response = _context2.sent;
        data = response.data;
        if (!data.ok) {
          _context2.next = 10;
          break;
        }
        _context2.next = 8;
        return (0, effects_1.all)([(0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_SUCCESS
        }), (0, effects_1.put)({
          type: actionTypes_1.default.SET_HOTELS,
          payload: {
            hotels: data.result.hotels,
            total: data.result.total,
            pages: data.result.pages,
            page: data.result.page,
            limit: data.result.limit
          }
        })]);
      case 8:
        _context2.next = 12;
        break;
      case 10:
        _context2.next = 12;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 12:
        _context2.next = 18;
        break;
      case 14:
        _context2.prev = 14;
        _context2.t0 = _context2["catch"](0);
        _context2.next = 18;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context2.t0 === 'string' ? _context2.t0 : _context2.t0.message
          }
        });
      case 18:
      case "end":
        return _context2.stop();
    }
  }, _marked2, null, [[0, 14]]);
}
function add_card(action) {
  var response, data;
  return _regenerator.default.wrap(function add_card$(_context3) {
    while (1) switch (_context3.prev = _context3.next) {
      case 0:
        _context3.prev = 0;
        _context3.next = 3;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_REQUEST
        });
      case 3:
        _context3.next = 5;
        return (0, effects_1.call)(api_1.addCard, action.card);
      case 5:
        response = _context3.sent;
        data = response.data;
        if (!data.ok) {
          _context3.next = 12;
          break;
        }
        _context3.next = 10;
        return (0, effects_1.all)([(0, effects_1.put)({
          type: actionTypes_1.default.SUCCESS_OPERATION,
          payload: {
            message: data.result.message
          }
        }), (0, effects_1.put)({
          type: actionTypes_1.default.ADD_CARD_SUCCESS,
          payload: {
            card: data.result.card
          }
        })]);
      case 10:
        _context3.next = 14;
        break;
      case 12:
        _context3.next = 14;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 14:
        _context3.next = 20;
        break;
      case 16:
        _context3.prev = 16;
        _context3.t0 = _context3["catch"](0);
        _context3.next = 20;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context3.t0 === 'string' ? _context3.t0 : _context3.t0.message
          }
        });
      case 20:
      case "end":
        return _context3.stop();
    }
  }, _marked3, null, [[0, 16]]);
}
function create_booking(action) {
  var response, data;
  return _regenerator.default.wrap(function create_booking$(_context4) {
    while (1) switch (_context4.prev = _context4.next) {
      case 0:
        _context4.prev = 0;
        _context4.next = 3;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_REQUEST
        });
      case 3:
        _context4.next = 5;
        return (0, effects_1.call)(api_1.createBooking, action.book);
      case 5:
        response = _context4.sent;
        data = response.data;
        if (!data.ok) {
          _context4.next = 14;
          break;
        }
        _context4.next = 10;
        return (0, effects_1.all)([(0, effects_1.put)({
          type: actionTypes_1.default.SUCCESS_OPERATION,
          payload: {
            message: data.result.message
          }
        }), (0, effects_1.put)({
          type: actionTypes_1.default.CREATE_BOOKING_SUCCESS,
          payload: {
            book: data.result.booking
          }
        })]);
      case 10:
        action.navigation.popToTop();
        RootNavigation.navigate('Bookings', {});
        _context4.next = 16;
        break;
      case 14:
        _context4.next = 16;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 16:
        _context4.next = 22;
        break;
      case 18:
        _context4.prev = 18;
        _context4.t0 = _context4["catch"](0);
        _context4.next = 22;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context4.t0 === 'string' ? _context4.t0 : _context4.t0.message
          }
        });
      case 22:
      case "end":
        return _context4.stop();
    }
  }, _marked4, null, [[0, 18]]);
}
function get_bookings() {
  var response, data;
  return _regenerator.default.wrap(function get_bookings$(_context5) {
    while (1) switch (_context5.prev = _context5.next) {
      case 0:
        _context5.prev = 0;
        _context5.next = 3;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_REQUEST
        });
      case 3:
        _context5.next = 5;
        return (0, effects_1.call)(api_1.getBookings);
      case 5:
        response = _context5.sent;
        data = response.data;
        if (!data.ok) {
          _context5.next = 12;
          break;
        }
        _context5.next = 10;
        return (0, effects_1.all)([(0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_SUCCESS
        }), (0, effects_1.put)({
          type: actionTypes_1.default.SET_BOOKINGS,
          payload: {
            bookings: data.result.bookings
          }
        })]);
      case 10:
        _context5.next = 14;
        break;
      case 12:
        _context5.next = 14;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 14:
        _context5.next = 20;
        break;
      case 16:
        _context5.prev = 16;
        _context5.t0 = _context5["catch"](0);
        _context5.next = 20;
        return (0, effects_1.put)({
          type: actionTypes_1.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context5.t0 === 'string' ? _context5.t0 : _context5.t0.message
          }
        });
      case 20:
      case "end":
        return _context5.stop();
    }
  }, _marked5, null, [[0, 16]]);
}
function watchBookRequests() {
  return _regenerator.default.wrap(function watchBookRequests$(_context6) {
    while (1) switch (_context6.prev = _context6.next) {
      case 0:
        _context6.next = 2;
        return (0, effects_1.all)([(0, effects_1.takeLatest)(actionTypes_1.default.GET_HOTELS_REQUEST, get_hotels), (0, effects_1.takeLatest)(actionTypes_1.default.GET_MORE_HOTELS_REQUEST, get_more_hotels), (0, effects_1.takeLatest)(actionTypes_1.default.ADD_CARD_REQUEST, add_card), (0, effects_1.takeLatest)(actionTypes_1.default.CREATE_BOOKING_REQUEST, create_booking), (0, effects_1.takeLatest)(actionTypes_1.default.GET_BOOKINGS_REQUEST, get_bookings)]);
      case 2:
      case "end":
        return _context6.stop();
    }
  }, _marked6);
}
exports.default = watchBookRequests;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRfaG90ZWxzIiwiX21hcmtlZDIiLCJfcmVnZW5lcmF0b3IiLCJkZWZhdWx0IiwibWFyayIsImdldF9tb3JlX2hvdGVscyIsIl9tYXJrZWQzIiwiYWRkX2NhcmQiLCJfbWFya2VkNCIsImNyZWF0ZV9ib29raW5nIiwiX21hcmtlZDUiLCJnZXRfYm9va2luZ3MiLCJfbWFya2VkNiIsIndhdGNoQm9va1JlcXVlc3RzIiwiYWN0aW9uVHlwZXNfMSIsIl9faW1wb3J0RGVmYXVsdCIsInJlcXVpcmUiLCJlZmZlY3RzXzEiLCJhcGlfMSIsIlJvb3ROYXZpZ2F0aW9uIiwiX19pbXBvcnRTdGFyIiwiYWN0aW9uIiwicmVzcG9uc2UiLCJkYXRhIiwid3JhcCIsImdldF9ob3RlbHMkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInB1dCIsInR5cGUiLCJBUElfQ0FMTF9SRVFVRVNUIiwiY2FsbCIsImdldEhvdGVscyIsInBhcmFtcyIsInNlbnQiLCJBUElfQ0FMTF9TVUNDRVNTIiwib2siLCJhbGwiLCJTRVRfSE9URUxTIiwicGF5bG9hZCIsImhvdGVscyIsInJlc3VsdCIsInRvdGFsIiwicGFnZXMiLCJwYWdlIiwibGltaXQiLCJBUElfQ0FMTF9GQUlMVVJFIiwibWVzc2FnZSIsInQwIiwic3RvcCIsIl9tYXJrZWQiLCJnZXRfbW9yZV9ob3RlbHMkIiwiX2NvbnRleHQyIiwiYWRkX2NhcmQkIiwiX2NvbnRleHQzIiwiYWRkQ2FyZCIsImNhcmQiLCJTVUNDRVNTX09QRVJBVElPTiIsIkFERF9DQVJEX1NVQ0NFU1MiLCJjcmVhdGVfYm9va2luZyQiLCJfY29udGV4dDQiLCJjcmVhdGVCb29raW5nIiwiYm9vayIsIkNSRUFURV9CT09LSU5HX1NVQ0NFU1MiLCJib29raW5nIiwibmF2aWdhdGlvbiIsInBvcFRvVG9wIiwibmF2aWdhdGUiLCJnZXRfYm9va2luZ3MkIiwiX2NvbnRleHQ1IiwiZ2V0Qm9va2luZ3MiLCJTRVRfQk9PS0lOR1MiLCJib29raW5ncyIsIndhdGNoQm9va1JlcXVlc3RzJCIsIl9jb250ZXh0NiIsInRha2VMYXRlc3QiLCJHRVRfSE9URUxTX1JFUVVFU1QiLCJHRVRfTU9SRV9IT1RFTFNfUkVRVUVTVCIsIkFERF9DQVJEX1JFUVVFU1QiLCJDUkVBVEVfQk9PS0lOR19SRVFVRVNUIiwiR0VUX0JPT0tJTkdTX1JFUVVFU1QiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL1VzZXJzL0FtaW5lL0Rlc2t0b3AvcHJvamVjdHMvQm9va2luZ0hvdGVsc0FwcC9zcmMvcmVkdXgvc2FnYXMvYm9vay50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQWN0aW9uVHlwZXMgZnJvbSAnLi4vLi4vdXRpbHMvYWN0aW9uVHlwZXMnO1xuaW1wb3J0IHtwdXQsIGNhbGwsIGFsbCwgdGFrZUxhdGVzdH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcbmltcG9ydCB7Z2V0SG90ZWxzLCBhZGRDYXJkLCBjcmVhdGVCb29raW5nLCBnZXRCb29raW5nc30gZnJvbSAnLi4vLi4vYXBpJztcbmltcG9ydCB7QXhpb3NSZXNwb25zZX0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0ICogYXMgUm9vdE5hdmlnYXRpb24gZnJvbSAnLi4vLi4vbmF2aWdhdGlvbi9yb290TmF2aWdhdGlvbic7XG5cbmZ1bmN0aW9uKiBnZXRfaG90ZWxzKGFjdGlvbjogYW55KSB7XG4gIHRyeSB7XG4gICAgeWllbGQgcHV0KHt0eXBlOiBBY3Rpb25UeXBlcy5BUElfQ0FMTF9SRVFVRVNUfSk7XG4gICAgbGV0IHJlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlID0geWllbGQgY2FsbChnZXRIb3RlbHMsIGFjdGlvbi5wYXJhbXMpO1xuXG4gICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgeWllbGQgcHV0KHtcbiAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQVBJX0NBTExfU1VDQ0VTUyxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcblxuICAgICAgaWYgKGRhdGEub2spIHtcbiAgICAgICAgeWllbGQgYWxsKFtcbiAgICAgICAgICBwdXQoe1xuICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQVBJX0NBTExfU1VDQ0VTUyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBwdXQoe1xuICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuU0VUX0hPVEVMUyxcbiAgICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgaG90ZWxzOiBkYXRhLnJlc3VsdC5ob3RlbHMsXG4gICAgICAgICAgICAgIHRvdGFsOiBkYXRhLnJlc3VsdC50b3RhbCxcbiAgICAgICAgICAgICAgcGFnZXM6IGRhdGEucmVzdWx0LnBhZ2VzLFxuICAgICAgICAgICAgICBwYWdlOiBkYXRhLnJlc3VsdC5wYWdlLFxuICAgICAgICAgICAgICBsaW1pdDogZGF0YS5yZXN1bHQubGltaXQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHlpZWxkIHB1dCh7XG4gICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQVBJX0NBTExfRkFJTFVSRSxcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBtZXNzYWdlOiBkYXRhLnJlc3VsdC5tZXNzYWdlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICB5aWVsZCBwdXQoe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQVBJX0NBTExfRkFJTFVSRSxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgbWVzc2FnZTogdHlwZW9mIGVyciA9PT0gJ3N0cmluZycgPyBlcnIgOiBlcnIubWVzc2FnZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24qIGdldF9tb3JlX2hvdGVscyhhY3Rpb246IGFueSkge1xuICB0cnkge1xuICAgIGxldCByZXNwb25zZTogQXhpb3NSZXNwb25zZSA9IHlpZWxkIGNhbGwoZ2V0SG90ZWxzLCBhY3Rpb24ucGFyYW1zKTtcbiAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcblxuICAgIGlmIChkYXRhLm9rKSB7XG4gICAgICB5aWVsZCBhbGwoW1xuICAgICAgICBwdXQoe1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX1NVQ0NFU1MsXG4gICAgICAgIH0pLFxuICAgICAgICBwdXQoe1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlNFVF9IT1RFTFMsXG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgaG90ZWxzOiBkYXRhLnJlc3VsdC5ob3RlbHMsXG4gICAgICAgICAgICB0b3RhbDogZGF0YS5yZXN1bHQudG90YWwsXG4gICAgICAgICAgICBwYWdlczogZGF0YS5yZXN1bHQucGFnZXMsXG4gICAgICAgICAgICBwYWdlOiBkYXRhLnJlc3VsdC5wYWdlLFxuICAgICAgICAgICAgbGltaXQ6IGRhdGEucmVzdWx0LmxpbWl0LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHlpZWxkIHB1dCh7XG4gICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX0ZBSUxVUkUsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBtZXNzYWdlOiBkYXRhLnJlc3VsdC5tZXNzYWdlLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgIHlpZWxkIHB1dCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5BUElfQ0FMTF9GQUlMVVJFLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBtZXNzYWdlOiB0eXBlb2YgZXJyID09PSAnc3RyaW5nJyA/IGVyciA6IGVyci5tZXNzYWdlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiogYWRkX2NhcmQoYWN0aW9uOiBhbnkpIHtcbiAgdHJ5IHtcbiAgICB5aWVsZCBwdXQoe3R5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX1JFUVVFU1R9KTtcbiAgICBsZXQgcmVzcG9uc2U6IEF4aW9zUmVzcG9uc2UgPSB5aWVsZCBjYWxsKGFkZENhcmQsIGFjdGlvbi5jYXJkKTtcbiAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcblxuICAgIGlmIChkYXRhLm9rKSB7XG4gICAgICB5aWVsZCBhbGwoW1xuICAgICAgICBwdXQoe1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlNVQ0NFU1NfT1BFUkFUSU9OLFxuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGRhdGEucmVzdWx0Lm1lc3NhZ2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIHB1dCh7XG4gICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQUREX0NBUkRfU1VDQ0VTUyxcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBjYXJkOiBkYXRhLnJlc3VsdC5jYXJkLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHlpZWxkIHB1dCh7XG4gICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX0ZBSUxVUkUsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBtZXNzYWdlOiBkYXRhLnJlc3VsdC5tZXNzYWdlLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgIHlpZWxkIHB1dCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5BUElfQ0FMTF9GQUlMVVJFLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBtZXNzYWdlOiB0eXBlb2YgZXJyID09PSAnc3RyaW5nJyA/IGVyciA6IGVyci5tZXNzYWdlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiogY3JlYXRlX2Jvb2tpbmcoYWN0aW9uOiBhbnkpIHtcbiAgdHJ5IHtcbiAgICB5aWVsZCBwdXQoe3R5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX1JFUVVFU1R9KTtcbiAgICBsZXQgcmVzcG9uc2U6IEF4aW9zUmVzcG9uc2UgPSB5aWVsZCBjYWxsKGNyZWF0ZUJvb2tpbmcsIGFjdGlvbi5ib29rKTtcbiAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcblxuICAgIGlmIChkYXRhLm9rKSB7XG4gICAgICB5aWVsZCBhbGwoW1xuICAgICAgICBwdXQoe1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlNVQ0NFU1NfT1BFUkFUSU9OLFxuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGRhdGEucmVzdWx0Lm1lc3NhZ2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIHB1dCh7XG4gICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQ1JFQVRFX0JPT0tJTkdfU1VDQ0VTUyxcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBib29rOiBkYXRhLnJlc3VsdC5ib29raW5nLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgXSk7XG4gICAgICBhY3Rpb24ubmF2aWdhdGlvbi5wb3BUb1RvcCgpO1xuICAgICAgUm9vdE5hdmlnYXRpb24ubmF2aWdhdGUoJ0Jvb2tpbmdzJywge30pO1xuICAgIH0gZWxzZSB7XG4gICAgICB5aWVsZCBwdXQoe1xuICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5BUElfQ0FMTF9GQUlMVVJFLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgbWVzc2FnZTogZGF0YS5yZXN1bHQubWVzc2FnZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICB5aWVsZCBwdXQoe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQVBJX0NBTExfRkFJTFVSRSxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgbWVzc2FnZTogdHlwZW9mIGVyciA9PT0gJ3N0cmluZycgPyBlcnIgOiBlcnIubWVzc2FnZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24qIGdldF9ib29raW5ncygpIHtcbiAgdHJ5IHtcbiAgICB5aWVsZCBwdXQoe3R5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX1JFUVVFU1R9KTtcbiAgICBsZXQgcmVzcG9uc2U6IEF4aW9zUmVzcG9uc2UgPSB5aWVsZCBjYWxsKGdldEJvb2tpbmdzKTtcbiAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcblxuICAgIGlmIChkYXRhLm9rKSB7XG4gICAgICB5aWVsZCBhbGwoW1xuICAgICAgICBwdXQoe1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX1NVQ0NFU1MsXG4gICAgICAgIH0pLFxuICAgICAgICBwdXQoe1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlNFVF9CT09LSU5HUyxcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBib29raW5nczogZGF0YS5yZXN1bHQuYm9va2luZ3MsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeWllbGQgcHV0KHtcbiAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQVBJX0NBTExfRkFJTFVSRSxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIG1lc3NhZ2U6IGRhdGEucmVzdWx0Lm1lc3NhZ2UsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgeWllbGQgcHV0KHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkFQSV9DQUxMX0ZBSUxVUkUsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIG1lc3NhZ2U6IHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnID8gZXJyIDogZXJyLm1lc3NhZ2UsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uKiB3YXRjaEJvb2tSZXF1ZXN0cygpIHtcbiAgeWllbGQgYWxsKFtcbiAgICB0YWtlTGF0ZXN0KEFjdGlvblR5cGVzLkdFVF9IT1RFTFNfUkVRVUVTVCwgZ2V0X2hvdGVscyksXG4gICAgdGFrZUxhdGVzdChBY3Rpb25UeXBlcy5HRVRfTU9SRV9IT1RFTFNfUkVRVUVTVCwgZ2V0X21vcmVfaG90ZWxzKSxcbiAgICB0YWtlTGF0ZXN0KEFjdGlvblR5cGVzLkFERF9DQVJEX1JFUVVFU1QsIGFkZF9jYXJkKSxcbiAgICB0YWtlTGF0ZXN0KEFjdGlvblR5cGVzLkNSRUFURV9CT09LSU5HX1JFUVVFU1QsIGNyZWF0ZV9ib29raW5nKSxcbiAgICB0YWtlTGF0ZXN0KEFjdGlvblR5cGVzLkdFVF9CT09LSU5HU19SRVFVRVNULCBnZXRfYm9va2luZ3MpLFxuICBdKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2F0Y2hCb29rUmVxdWVzdHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7d0NBTVVBLFVBQVU7RUFBQUMsUUFBQSxHQUFBQyxZQUFBLENBQUFDLE9BQUEsQ0FBQUMsSUFBQSxDQStDVkMsZUFBZTtFQUFBQyxRQUFBLEdBQUFKLFlBQUEsQ0FBQUMsT0FBQSxDQUFBQyxJQUFBLENBdUNmRyxRQUFRO0VBQUFDLFFBQUEsR0FBQU4sWUFBQSxDQUFBQyxPQUFBLENBQUFDLElBQUEsQ0F1Q1JLLGNBQWM7RUFBQUMsUUFBQSxHQUFBUixZQUFBLENBQUFDLE9BQUEsQ0FBQUMsSUFBQSxDQXlDZE8sWUFBWTtFQUFBQyxRQUFBLEdBQUFWLFlBQUEsQ0FBQUMsT0FBQSxDQUFBQyxJQUFBLENBb0NaUyxpQkFBaUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFoTjNCLElBQUFDLGFBQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsU0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsS0FB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