ca4dc356a4fc778de79ed415e481d656
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var _require = require('../AnimatedEvent'),
  AnimatedEvent = _require.AnimatedEvent;
var AnimatedNode = require('./AnimatedNode');
var AnimatedStyle = require('./AnimatedStyle');
var NativeAnimatedHelper = require('../NativeAnimatedHelper');
var ReactNative = require('../../Renderer/shims/ReactNative');
var invariant = require('invariant');
var AnimatedProps = function (_AnimatedNode) {
  (0, _inherits2.default)(AnimatedProps, _AnimatedNode);
  var _super = _createSuper(AnimatedProps);
  function AnimatedProps(props, callback) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedProps);
    _this = _super.call(this);
    if (props.style) {
      props = (0, _extends2.default)({}, props, {
        style: new AnimatedStyle(props.style)
      });
    }
    _this._props = props;
    _this._callback = callback;
    return _this;
  }
  (0, _createClass2.default)(AnimatedProps, [{
    key: "__getValue",
    value: function __getValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof AnimatedNode) {
          if (!value.__isNative || value instanceof AnimatedStyle) {
            props[key] = value.__getValue();
          }
        } else if (value instanceof AnimatedEvent) {
          props[key] = value.__getHandler();
        } else {
          props[key] = value;
        }
      }
      return props;
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof AnimatedNode) {
          props[key] = value.__getAnimatedValue();
        }
      }
      return props;
    }
  }, {
    key: "__attach",
    value: function __attach() {
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof AnimatedNode) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: "__detach",
    value: function __detach() {
      if (this.__isNative && this._animatedView) {
        this.__disconnectAnimatedView();
      }
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof AnimatedNode) {
          value.__removeChild(this);
        }
      }
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedProps.prototype), "__detach", this).call(this);
    }
  }, {
    key: "update",
    value: function update() {
      this._callback();
    }
  }, {
    key: "__makeNative",
    value: function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }
        if (this._animatedView) {
          this.__connectAnimatedView();
        }
      }
    }
  }, {
    key: "setNativeView",
    value: function setNativeView(animatedView) {
      if (this._animatedView === animatedView) {
        return;
      }
      this._animatedView = animatedView;
      if (this.__isNative) {
        this.__connectAnimatedView();
      }
    }
  }, {
    key: "__connectAnimatedView",
    value: function __connectAnimatedView() {
      invariant(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
      NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: "__disconnectAnimatedView",
    value: function __disconnectAnimatedView() {
      invariant(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
      NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: "__restoreDefaultValues",
    value: function __restoreDefaultValues() {
      if (this.__isNative) {
        NativeAnimatedHelper.API.restoreDefaultValues(this.__getNativeTag());
      }
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var propsConfig = {};
      for (var propKey in this._props) {
        var value = this._props[propKey];
        if (value instanceof AnimatedNode) {
          value.__makeNative();
          propsConfig[propKey] = value.__getNativeTag();
        }
      }
      return {
        type: 'props',
        props: propsConfig
      };
    }
  }]);
  return AnimatedProps;
}(AnimatedNode);
module.exports = AnimatedProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9leHRlbmRzMiIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2dldDIiLCJfaW5oZXJpdHMyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJkZWZhdWx0IiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwiX3JlcXVpcmUiLCJBbmltYXRlZEV2ZW50IiwiQW5pbWF0ZWROb2RlIiwiQW5pbWF0ZWRTdHlsZSIsIk5hdGl2ZUFuaW1hdGVkSGVscGVyIiwiUmVhY3ROYXRpdmUiLCJpbnZhcmlhbnQiLCJBbmltYXRlZFByb3BzIiwiX0FuaW1hdGVkTm9kZSIsIl9zdXBlciIsInByb3BzIiwiY2FsbGJhY2siLCJfdGhpcyIsInN0eWxlIiwiX3Byb3BzIiwiX2NhbGxiYWNrIiwia2V5IiwidmFsdWUiLCJfX2dldFZhbHVlIiwiX19pc05hdGl2ZSIsIl9fZ2V0SGFuZGxlciIsIl9fZ2V0QW5pbWF0ZWRWYWx1ZSIsIl9fYXR0YWNoIiwiX19hZGRDaGlsZCIsIl9fZGV0YWNoIiwiX2FuaW1hdGVkVmlldyIsIl9fZGlzY29ubmVjdEFuaW1hdGVkVmlldyIsIl9fcmVtb3ZlQ2hpbGQiLCJ1cGRhdGUiLCJfX21ha2VOYXRpdmUiLCJfX2Nvbm5lY3RBbmltYXRlZFZpZXciLCJzZXROYXRpdmVWaWV3IiwiYW5pbWF0ZWRWaWV3IiwibmF0aXZlVmlld1RhZyIsImZpbmROb2RlSGFuZGxlIiwiQVBJIiwiY29ubmVjdEFuaW1hdGVkTm9kZVRvVmlldyIsIl9fZ2V0TmF0aXZlVGFnIiwiZGlzY29ubmVjdEFuaW1hdGVkTm9kZUZyb21WaWV3IiwiX19yZXN0b3JlRGVmYXVsdFZhbHVlcyIsInJlc3RvcmVEZWZhdWx0VmFsdWVzIiwiX19nZXROYXRpdmVDb25maWciLCJwcm9wc0NvbmZpZyIsInByb3BLZXkiLCJ0eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkFuaW1hdGVkUHJvcHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3Qge0FuaW1hdGVkRXZlbnR9ID0gcmVxdWlyZSgnLi4vQW5pbWF0ZWRFdmVudCcpO1xuY29uc3QgQW5pbWF0ZWROb2RlID0gcmVxdWlyZSgnLi9BbmltYXRlZE5vZGUnKTtcbmNvbnN0IEFuaW1hdGVkU3R5bGUgPSByZXF1aXJlKCcuL0FuaW1hdGVkU3R5bGUnKTtcbmNvbnN0IE5hdGl2ZUFuaW1hdGVkSGVscGVyID0gcmVxdWlyZSgnLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcbmNvbnN0IFJlYWN0TmF0aXZlID0gcmVxdWlyZSgnLi4vLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnKTtcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbmNsYXNzIEFuaW1hdGVkUHJvcHMgZXh0ZW5kcyBBbmltYXRlZE5vZGUge1xuICBfcHJvcHM6IE9iamVjdDtcbiAgX2FuaW1hdGVkVmlldzogYW55O1xuICBfY2FsbGJhY2s6ICgpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IE9iamVjdCwgY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChwcm9wcy5zdHlsZSkge1xuICAgICAgcHJvcHMgPSB7XG4gICAgICAgIC4uLnByb3BzLFxuICAgICAgICBzdHlsZTogbmV3IEFuaW1hdGVkU3R5bGUocHJvcHMuc3R5bGUpLFxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5fcHJvcHMgPSBwcm9wcztcbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICB9XG5cbiAgX19nZXRWYWx1ZSgpOiBPYmplY3Qge1xuICAgIGNvbnN0IHByb3BzID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fcHJvcHMpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fcHJvcHNba2V5XTtcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkTm9kZSkge1xuICAgICAgICBpZiAoIXZhbHVlLl9faXNOYXRpdmUgfHwgdmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZFN0eWxlKSB7XG4gICAgICAgICAgLy8gV2UgY2Fubm90IHVzZSB2YWx1ZSBvZiBuYXRpdmVseSBkcml2ZW4gbm9kZXMgdGhpcyB3YXkgYXMgdGhlIHZhbHVlIHdlIGhhdmUgYWNjZXNzIGZyb21cbiAgICAgICAgICAvLyBKUyBtYXkgbm90IGJlIHVwIHRvIGRhdGUuXG4gICAgICAgICAgcHJvcHNba2V5XSA9IHZhbHVlLl9fZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkRXZlbnQpIHtcbiAgICAgICAgcHJvcHNba2V5XSA9IHZhbHVlLl9fZ2V0SGFuZGxlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvcHNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cblxuICBfX2dldEFuaW1hdGVkVmFsdWUoKTogT2JqZWN0IHtcbiAgICBjb25zdCBwcm9wcyA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX3Byb3BzKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX3Byb3BzW2tleV07XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgcHJvcHNba2V5XSA9IHZhbHVlLl9fZ2V0QW5pbWF0ZWRWYWx1ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cblxuICBfX2F0dGFjaCgpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9wcm9wcykge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9wcm9wc1trZXldO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQW5pbWF0ZWROb2RlKSB7XG4gICAgICAgIHZhbHVlLl9fYWRkQ2hpbGQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX19kZXRhY2goKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX19pc05hdGl2ZSAmJiB0aGlzLl9hbmltYXRlZFZpZXcpIHtcbiAgICAgIHRoaXMuX19kaXNjb25uZWN0QW5pbWF0ZWRWaWV3KCk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX3Byb3BzKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX3Byb3BzW2tleV07XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgdmFsdWUuX19yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3VwZXIuX19kZXRhY2goKTtcbiAgfVxuXG4gIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9jYWxsYmFjaygpO1xuICB9XG5cbiAgX19tYWtlTmF0aXZlKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fX2lzTmF0aXZlKSB7XG4gICAgICB0aGlzLl9faXNOYXRpdmUgPSB0cnVlO1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fcHJvcHMpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9wcm9wc1trZXldO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgICB2YWx1ZS5fX21ha2VOYXRpdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2FuaW1hdGVkVmlldykge1xuICAgICAgICB0aGlzLl9fY29ubmVjdEFuaW1hdGVkVmlldygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldE5hdGl2ZVZpZXcoYW5pbWF0ZWRWaWV3OiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fYW5pbWF0ZWRWaWV3ID09PSBhbmltYXRlZFZpZXcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fYW5pbWF0ZWRWaWV3ID0gYW5pbWF0ZWRWaWV3O1xuICAgIGlmICh0aGlzLl9faXNOYXRpdmUpIHtcbiAgICAgIHRoaXMuX19jb25uZWN0QW5pbWF0ZWRWaWV3KCk7XG4gICAgfVxuICB9XG5cbiAgX19jb25uZWN0QW5pbWF0ZWRWaWV3KCk6IHZvaWQge1xuICAgIGludmFyaWFudCh0aGlzLl9faXNOYXRpdmUsICdFeHBlY3RlZCBub2RlIHRvIGJlIG1hcmtlZCBhcyBcIm5hdGl2ZVwiJyk7XG4gICAgY29uc3QgbmF0aXZlVmlld1RhZzogP251bWJlciA9IFJlYWN0TmF0aXZlLmZpbmROb2RlSGFuZGxlKFxuICAgICAgdGhpcy5fYW5pbWF0ZWRWaWV3LFxuICAgICk7XG4gICAgaW52YXJpYW50KFxuICAgICAgbmF0aXZlVmlld1RhZyAhPSBudWxsLFxuICAgICAgJ1VuYWJsZSB0byBsb2NhdGUgYXR0YWNoZWQgdmlldyBpbiB0aGUgbmF0aXZlIHRyZWUnLFxuICAgICk7XG4gICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLmNvbm5lY3RBbmltYXRlZE5vZGVUb1ZpZXcoXG4gICAgICB0aGlzLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICBuYXRpdmVWaWV3VGFnLFxuICAgICk7XG4gIH1cblxuICBfX2Rpc2Nvbm5lY3RBbmltYXRlZFZpZXcoKTogdm9pZCB7XG4gICAgaW52YXJpYW50KHRoaXMuX19pc05hdGl2ZSwgJ0V4cGVjdGVkIG5vZGUgdG8gYmUgbWFya2VkIGFzIFwibmF0aXZlXCInKTtcbiAgICBjb25zdCBuYXRpdmVWaWV3VGFnOiA/bnVtYmVyID0gUmVhY3ROYXRpdmUuZmluZE5vZGVIYW5kbGUoXG4gICAgICB0aGlzLl9hbmltYXRlZFZpZXcsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBuYXRpdmVWaWV3VGFnICE9IG51bGwsXG4gICAgICAnVW5hYmxlIHRvIGxvY2F0ZSBhdHRhY2hlZCB2aWV3IGluIHRoZSBuYXRpdmUgdHJlZScsXG4gICAgKTtcbiAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkuZGlzY29ubmVjdEFuaW1hdGVkTm9kZUZyb21WaWV3KFxuICAgICAgdGhpcy5fX2dldE5hdGl2ZVRhZygpLFxuICAgICAgbmF0aXZlVmlld1RhZyxcbiAgICApO1xuICB9XG5cbiAgX19yZXN0b3JlRGVmYXVsdFZhbHVlcygpOiB2b2lkIHtcbiAgICAvLyBXaGVuIHVzaW5nIHRoZSBuYXRpdmUgZHJpdmVyLCB2aWV3IHByb3BlcnRpZXMgbmVlZCB0byBiZSByZXN0b3JlZCB0b1xuICAgIC8vIHRoZWlyIGRlZmF1bHQgdmFsdWVzIG1hbnVhbGx5IHNpbmNlIHJlYWN0IG5vIGxvbmdlciB0cmFja3MgdGhlbS4gVGhpc1xuICAgIC8vIGlzIG5lZWRlZCB0byBoYW5kbGUgY2FzZXMgd2hlcmUgYSBwcm9wIGRyaXZlbiBieSBuYXRpdmUgYW5pbWF0ZWQgaXMgcmVtb3ZlZFxuICAgIC8vIGFmdGVyIGhhdmluZyBiZWVuIGNoYW5nZWQgbmF0aXZlbHkgYnkgYW4gYW5pbWF0aW9uLlxuICAgIGlmICh0aGlzLl9faXNOYXRpdmUpIHtcbiAgICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5yZXN0b3JlRGVmYXVsdFZhbHVlcyh0aGlzLl9fZ2V0TmF0aXZlVGFnKCkpO1xuICAgIH1cbiAgfVxuXG4gIF9fZ2V0TmF0aXZlQ29uZmlnKCk6IE9iamVjdCB7XG4gICAgY29uc3QgcHJvcHNDb25maWcgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHByb3BLZXkgaW4gdGhpcy5fcHJvcHMpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fcHJvcHNbcHJvcEtleV07XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgdmFsdWUuX19tYWtlTmF0aXZlKCk7XG4gICAgICAgIHByb3BzQ29uZmlnW3Byb3BLZXldID0gdmFsdWUuX19nZXROYXRpdmVUYWcoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdwcm9wcycsXG4gICAgICBwcm9wczogcHJvcHNDb25maWcsXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGVkUHJvcHM7XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGdCQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRyxhQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSSxLQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSyxVQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSwyQkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQU8sZ0JBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLFNBQUFRLGFBQUFDLE9BQUEsUUFBQUMseUJBQUEsR0FB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