ae0afddad4f5efc07d41d2196002675b
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var store_1 = __importDefault(require("../../redux/store"));
var Login_1 = __importDefault(require("../Login"));
var actions_1 = require("../../redux/actions");
var Setup_1 = __importDefault(require("../Setup"));
var store = (0, store_1.default)();
var email = 'test@test.com';
var password = 'Azerty123@@';
describe('Test Login Component', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    (0, Setup_1.default)(React.createElement(Login_1.default, null), store);
  });
  afterEach(react_native_1.cleanup);
  it('should render all form element', function () {
    expect(react_native_1.screen.getByTestId('logo')).toBeDefined();
    expect(react_native_1.screen.getByTestId('email')).toBeDefined();
    expect(react_native_1.screen.getByTestId('password')).toBeDefined();
    var loginBtn = react_native_1.screen.getByTestId('login-btn');
    expect(loginBtn).toBeDefined();
  });
  it('should enable login button after entereing valid email and password value', function () {
    var emailInput = react_native_1.screen.getByTestId('email');
    var passwordInput = react_native_1.screen.getByTestId('password');
    var loginBtn = react_native_1.screen.getByTestId('login-btn');
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', true);
    react_native_1.fireEvent.changeText(emailInput, email);
    react_native_1.fireEvent.changeText(passwordInput, password);
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', false);
    react_native_1.fireEvent.press(loginBtn);
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith((0, actions_1.loginRequest)(email, password));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwic3RvcmVfMSIsIkxvZ2luXzEiLCJhY3Rpb25zXzEiLCJTZXR1cF8xIiwic3RvcmUiLCJkZWZhdWx0IiwiZW1haWwiLCJwYXNzd29yZCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImRpc3BhdGNoIiwiamVzdCIsImZuIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwiYWZ0ZXJFYWNoIiwiY2xlYW51cCIsIml0IiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlRGVmaW5lZCIsImxvZ2luQnRuIiwiZW1haWxJbnB1dCIsInBhc3N3b3JkSW5wdXQiLCJwcm9wcyIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsInRvSGF2ZVByb3BlcnR5IiwiZmlyZUV2ZW50IiwiY2hhbmdlVGV4dCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJsb2dpblJlcXVlc3QiXSwic291cmNlcyI6WyIvVXNlcnMvQW1pbmUvRGVza3RvcC9wcm9qZWN0cy9Cb29raW5nSG90ZWxzQXBwL3NyYy9zY3JlZW5zL19fdGVzdHNfXy9sb2dpbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge2NsZWFudXAsIGZpcmVFdmVudCwgc2NyZWVufSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAnLi4vLi4vcmVkdXgvc3RvcmUnO1xuaW1wb3J0IExvZ2luIGZyb20gJy4uL0xvZ2luJztcbmltcG9ydCB7bG9naW5SZXF1ZXN0fSBmcm9tICcuLi8uLi9yZWR1eC9hY3Rpb25zJztcbmltcG9ydCBTZXR1cCBmcm9tICcuLi9TZXR1cCc7XG5cbmxldCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKCk7XG5cbmNvbnN0IGVtYWlsID0gJ3Rlc3RAdGVzdC5jb20nO1xuY29uc3QgcGFzc3dvcmQgPSAnQXplcnR5MTIzQEAnO1xuXG5kZXNjcmliZSgnVGVzdCBMb2dpbiBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHN0b3JlLmRpc3BhdGNoID0gamVzdC5mbigpO1xuICAgIFNldHVwKDxMb2dpbiAvPiwgc3RvcmUpO1xuICB9KTtcblxuICBhZnRlckVhY2goY2xlYW51cCk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYWxsIGZvcm0gZWxlbWVudCcsICgpID0+IHtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdsb2dvJykpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnZW1haWwnKSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdwYXNzd29yZCcpKS50b0JlRGVmaW5lZCgpO1xuXG4gICAgY29uc3QgbG9naW5CdG4gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvZ2luLWJ0bicpO1xuXG4gICAgZXhwZWN0KGxvZ2luQnRuKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGVuYWJsZSBsb2dpbiBidXR0b24gYWZ0ZXIgZW50ZXJlaW5nIHZhbGlkIGVtYWlsIGFuZCBwYXNzd29yZCB2YWx1ZScsICgpID0+IHtcbiAgICBjb25zdCBlbWFpbElucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdlbWFpbCcpO1xuICAgIGNvbnN0IHBhc3N3b3JkSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Bhc3N3b3JkJyk7XG4gICAgY29uc3QgbG9naW5CdG4gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvZ2luLWJ0bicpO1xuXG4gICAgZXhwZWN0KGxvZ2luQnRuLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZSkudG9IYXZlUHJvcGVydHkoJ2Rpc2FibGVkJywgdHJ1ZSk7XG5cbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChlbWFpbElucHV0LCBlbWFpbCk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQocGFzc3dvcmRJbnB1dCwgcGFzc3dvcmQpO1xuXG4gICAgZXhwZWN0KGxvZ2luQnRuLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZSkudG9IYXZlUHJvcGVydHkoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhsb2dpbkJ0bik7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChsb2dpblJlcXVlc3QoZW1haWwsIHBhc3N3b3JkKSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUgsZUFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSixlQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxTQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxPQUFBLEdBQUFOLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUlNLEtBQUssR0FBRyxJQUFBSixPQUFBLENBQUFLLE9BQWMsR0FBRTtBQUU1QixJQUFNQyxLQUFLLEdBQUcsZUFBZTtBQUM3QixJQUFNQyxRQUFRLEdBQUcsYUFBYTtBQUU5QkMsUUFBUSxDQUFDLHNCQUFzQixFQUFFLFlBQUs7RUFDcENDLFVBQVUsQ0FBQyxZQUFLO0lBQ2RMLEtBQUssQ0FBQ00sUUFBUSxHQUFHQyxJQUFJLENBQUNDLEVBQUUsRUFBRTtJQUMxQixJQUFBVCxPQUFBLENBQUFFLE9BQUssRUFBQ1EsS0FBQSxDQUFBQyxhQUFBLENBQUNiLE9BQUEsQ0FBQUksT0FBSyxPQUFHLEVBQUVELEtBQUssQ0FBQztFQUN6QixDQUFDLENBQUM7RUFFRlcsU0FBUyxDQUFDaEIsY0FBQSxDQUFBaUIsT0FBTyxDQUFDO0VBRWxCQyxFQUFFLENBQUMsZ0NBQWdDLEVBQUUsWUFBSztJQUN4Q0MsTUFBTSxDQUFDbkIsY0FBQSxDQUFBb0IsTUFBTSxDQUFDQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxFQUFFO0lBQ2hESCxNQUFNLENBQUNuQixjQUFBLENBQUFvQixNQUFNLENBQUNDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDQyxXQUFXLEVBQUU7SUFDakRILE1BQU0sQ0FBQ25CLGNBQUEsQ0FBQW9CLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUNDLFdBQVcsRUFBRTtJQUVwRCxJQUFNQyxRQUFRLEdBQUd2QixjQUFBLENBQUFvQixNQUFNLENBQUNDLFdBQVcsQ0FBQyxXQUFXLENBQUM7SUFFaERGLE1BQU0sQ0FBQ0ksUUFBUSxDQUFDLENBQUNELFdBQVcsRUFBRTtFQUNoQyxDQUFDLENBQUM7RUFFRkosRUFBRSxDQUFDLDJFQUEyRSxFQUFFLFlBQUs7SUFDbkYsSUFBTU0sVUFBVSxHQUFHeEIsY0FBQSxDQUFBb0IsTUFBTSxDQUFDQyxXQUFXLENBQUMsT0FBTyxDQUFDO0lBQzlDLElBQU1JLGFBQWEsR0FBR3pCLGNBQUEsQ0FBQW9CLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDLFVBQVUsQ0FBQztJQUNwRCxJQUFNRSxRQUFRLEdBQUd2QixjQUFBLENBQUFvQixNQUFNLENBQUNDLFdBQVcsQ0FBQyxXQUFXLENBQUM7SUFFaERGLE1BQU0sQ0FBQ0ksUUFBUSxDQUFDRyxLQUFLLENBQUNDLGtCQUFrQixDQUFDLENBQUNDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDO0lBRTFFNUIsY0FBQSxDQUFBNkIsU0FBUyxDQUFDQyxVQUFVLENBQUNOLFVBQVUsRUFBRWpCLEtBQUssQ0FBQztJQUN2Q1AsY0FBQSxDQUFBNkIsU0FBUyxDQUFDQyxVQUFVLENBQUNMLGFBQWEsRUFBRWpCLFFBQVEsQ0FBQztJQUU3Q1csTUFBTSxDQUFDSSxRQUFRLENBQUNHLEtBQUssQ0FBQ0Msa0JBQWtCLENBQUMsQ0FBQ0MsY0FBYyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUM7SUFDM0U1QixjQUFBLENBQUE2QixTQUFTLENBQUNFLEtBQUssQ0FBQ1IsUUFBUSxDQUFDO0lBQ3pCSixNQUFNLENBQUNkLEtBQUssQ0FBQ00sUUFBUSxDQUFDLENBQUNxQixxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDL0NiLE1BQU0sQ0FBQ2QsS0FBSyxDQUFDTSxRQUFRLENBQUMsQ0FBQ3NCLG9CQUFvQixDQUFDLElBQUE5QixTQUFBLENBQUErQixZQUFZLEVBQUMzQixLQUFLLEVBQUVDLFFBQVEsQ0FBQyxDQUFDO0VBQzVFLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9