968fd7e6cc08f0123fb2928b8f635a89
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));
var _reactNative = require("@testing-library/react-native");
var _Home = _interopRequireDefault(require("../Home"));
var _actions = require("../../redux/actions");
var _hotels_response = _interopRequireDefault(require("./fixtures/hotels_response.json"));
var _Setup = _interopRequireDefault(require("../Setup"));
var mockStore = (0, _reduxMockStore.default)();
var store = mockStore({
  hotel: {
    hotels: _hotels_response.default.hotels
  }
});
describe('Test homepage screen', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    (0, _Setup.default)(<_Home.default hotels={_hotels_response.default.hotels} />, store);
  });
  afterEach(_reactNative.cleanup);
  it('fetches the hotels on mount', function () {
    var expectedAction = (0, _actions.getHotels)({
      q: '',
      page: 1
    });
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith(expectedAction);
  });
  it('should display the list of hotels', function () {
    expect(_reactNative.screen.getByTestId('search-box')).toBeDefined();
  });
  it('should render a list of hotels', function () {
    _hotels_response.default.hotels.forEach(function (hotel) {
      var hotelName = _reactNative.screen.getByText(hotel.name);
      var addressElement = _reactNative.screen.getByText(hotel.short_address);
      expect(hotelName).toBeDefined();
      expect(addressElement).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWR1eE1vY2tTdG9yZSIsIl9yZWFjdE5hdGl2ZSIsIl9Ib21lIiwiX2FjdGlvbnMiLCJfaG90ZWxzX3Jlc3BvbnNlIiwiX1NldHVwIiwibW9ja1N0b3JlIiwiY29uZmlndXJlU3RvcmUiLCJzdG9yZSIsImhvdGVsIiwiaG90ZWxzIiwiaG90ZWxzX3Jlc3BvbnNlIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiZGlzcGF0Y2giLCJqZXN0IiwiZm4iLCJTZXR1cCIsImFmdGVyRWFjaCIsImNsZWFudXAiLCJpdCIsImV4cGVjdGVkQWN0aW9uIiwiZ2V0SG90ZWxzIiwicSIsInBhZ2UiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInNjcmVlbiIsImdldEJ5VGVzdElkIiwidG9CZURlZmluZWQiLCJmb3JFYWNoIiwiaG90ZWxOYW1lIiwiZ2V0QnlUZXh0IiwibmFtZSIsImFkZHJlc3NFbGVtZW50Iiwic2hvcnRfYWRkcmVzcyJdLCJzb3VyY2VzIjpbImhvbWUudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tICdyZWR1eC1tb2NrLXN0b3JlJztcbmltcG9ydCB7Y2xlYW51cCwgc2NyZWVufSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCBIb21lIGZyb20gJy4uL0hvbWUnO1xuaW1wb3J0IHtnZXRIb3RlbHN9IGZyb20gJy4uLy4uL3JlZHV4L2FjdGlvbnMnO1xuaW1wb3J0IGhvdGVsc19yZXNwb25zZSBmcm9tICcuL2ZpeHR1cmVzL2hvdGVsc19yZXNwb25zZS5qc29uJztcbmltcG9ydCBTZXR1cCBmcm9tICcuLi9TZXR1cCc7XG5cbmxldCBtb2NrU3RvcmUgPSBjb25maWd1cmVTdG9yZSgpO1xuXG5jb25zdCBzdG9yZSA9IG1vY2tTdG9yZSh7XG4gIGhvdGVsOiB7XG4gICAgaG90ZWxzOiBob3RlbHNfcmVzcG9uc2UuaG90ZWxzLFxuICB9LFxufSk7XG5cbmRlc2NyaWJlKCdUZXN0IGhvbWVwYWdlIHNjcmVlbicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RvcmUuZGlzcGF0Y2ggPSBqZXN0LmZuKCk7XG4gICAgU2V0dXAoPEhvbWUgaG90ZWxzPXtob3RlbHNfcmVzcG9uc2UuaG90ZWxzfSAvPiwgc3RvcmUpO1xuICB9KTtcblxuICBhZnRlckVhY2goY2xlYW51cCk7XG5cbiAgaXQoJ2ZldGNoZXMgdGhlIGhvdGVscyBvbiBtb3VudCcsICgpID0+IHtcbiAgICBjb25zdCBleHBlY3RlZEFjdGlvbiA9IGdldEhvdGVscyh7cTogJycsIHBhZ2U6IDF9KTtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdGVkQWN0aW9uKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkaXNwbGF5IHRoZSBsaXN0IG9mIGhvdGVscycsICgpID0+IHtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdzZWFyY2gtYm94JykpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGEgbGlzdCBvZiBob3RlbHMnLCAoKSA9PiB7XG4gICAgaG90ZWxzX3Jlc3BvbnNlLmhvdGVscy5mb3JFYWNoKGhvdGVsID0+IHtcbiAgICAgIGNvbnN0IGhvdGVsTmFtZSA9IHNjcmVlbi5nZXRCeVRleHQoaG90ZWwubmFtZSk7XG4gICAgICBjb25zdCBhZGRyZXNzRWxlbWVudCA9IHNjcmVlbi5nZXRCeVRleHQoaG90ZWwuc2hvcnRfYWRkcmVzcyk7XG4gICAgICBleHBlY3QoaG90ZWxOYW1lKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGFkZHJlc3NFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxlQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFBRyxLQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxnQkFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sTUFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBSU8sU0FBUyxHQUFHLElBQUFDLHVCQUFjLEdBQUU7QUFFaEMsSUFBTUMsS0FBSyxHQUFHRixTQUFTLENBQUM7RUFDdEJHLEtBQUssRUFBRTtJQUNMQyxNQUFNLEVBQUVDLHdCQUFlLENBQUNEO0VBQzFCO0FBQ0YsQ0FBQyxDQUFDO0FBRUZFLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxZQUFNO0VBQ3JDQyxVQUFVLENBQUMsWUFBTTtJQUNmTCxLQUFLLENBQUNNLFFBQVEsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDMUIsSUFBQUMsY0FBSyxFQUFDLGVBQU0sTUFBTSxDQUFDLENBQUNOLHdCQUFlLENBQUNELE1BQU0sQ0FBQyxHQUFHLEVBQUVGLEtBQUssQ0FBQztFQUN4RCxDQUFDLENBQUM7RUFFRlUsU0FBUyxDQUFDQyxvQkFBTyxDQUFDO0VBRWxCQyxFQUFFLENBQUMsNkJBQTZCLEVBQUUsWUFBTTtJQUN0QyxJQUFNQyxjQUFjLEdBQUcsSUFBQUMsa0JBQVMsRUFBQztNQUFDQyxDQUFDLEVBQUUsRUFBRTtNQUFFQyxJQUFJLEVBQUU7SUFBQyxDQUFDLENBQUM7SUFDbERDLE1BQU0sQ0FBQ2pCLEtBQUssQ0FBQ00sUUFBUSxDQUFDLENBQUNZLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUMvQ0QsTUFBTSxDQUFDakIsS0FBSyxDQUFDTSxRQUFRLENBQUMsQ0FBQ2Esb0JBQW9CLENBQUNOLGNBQWMsQ0FBQztFQUM3RCxDQUFDLENBQUM7RUFFRkQsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07SUFDNUNLLE1BQU0sQ0FBQ0csbUJBQU0sQ0FBQ0MsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNDLFdBQVcsRUFBRTtFQUN4RCxDQUFDLENBQUM7RUFFRlYsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLFlBQU07SUFDekNULHdCQUFlLENBQUNELE1BQU0sQ0FBQ3FCLE9BQU8sQ0FBQyxVQUFBdEIsS0FBSyxFQUFJO01BQ3RDLElBQU11QixTQUFTLEdBQUdKLG1CQUFNLENBQUNLLFNBQVMsQ0FBQ3hCLEtBQUssQ0FBQ3lCLElBQUksQ0FBQztNQUM5QyxJQUFNQyxjQUFjLEdBQUdQLG1CQUFNLENBQUNLLFNBQVMsQ0FBQ3hCLEtBQUssQ0FBQzJCLGFBQWEsQ0FBQztNQUM1RFgsTUFBTSxDQUFDTyxTQUFTLENBQUMsQ0FBQ0YsV0FBVyxFQUFFO01BQy9CTCxNQUFNLENBQUNVLGNBQWMsQ0FBQyxDQUFDTCxXQUFXLEVBQUU7SUFDdEMsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=