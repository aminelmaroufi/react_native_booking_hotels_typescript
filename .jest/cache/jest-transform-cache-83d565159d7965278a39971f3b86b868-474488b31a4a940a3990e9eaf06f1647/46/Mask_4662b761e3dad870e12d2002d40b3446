29e18aa56f0d24d716496aafb3a35bc2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _extractTransform = _interopRequireDefault(require("../lib/extract/extractTransform"));
var _extractProps = require("../lib/extract/extractProps");
var _units = _interopRequireDefault(require("../lib/units"));
var _Shape2 = _interopRequireDefault(require("./Shape"));
var _NativeComponents = require("./NativeComponents");
var _jsxFileName = "/Users/wojciechlewicki/work/another/react-native-svg/src/elements/Mask.tsx";
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = (0, _getPrototypeOf2.default)(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return (0, _possibleConstructorReturn2.default)(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
var Mask = function (_Shape) {
  (0, _inherits2.default)(Mask, _Shape);
  var _super = _createSuper(Mask);
  function Mask() {
    (0, _classCallCheck2.default)(this, Mask);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Mask, [{
    key: "render",
    value: function render() {
      var props = this.props;
      var maskTransform = props.maskTransform,
        transform = props.transform,
        x = props.x,
        y = props.y,
        width = props.width,
        height = props.height,
        maskUnits = props.maskUnits,
        maskContentUnits = props.maskContentUnits,
        children = props.children;
      var maskProps = {
        x: x,
        y: y,
        width: width,
        height: height,
        maskTransform: (0, _extractTransform.default)(maskTransform || transform || props),
        maskUnits: maskUnits !== undefined ? _units.default[maskUnits] : 0,
        maskContentUnits: maskContentUnits !== undefined ? _units.default[maskContentUnits] : 1
      };
      return _react.default.createElement(_NativeComponents.RNSVGMask, (0, _extends2.default)({
        ref: this.refMethod
      }, (0, _extractProps.withoutXY)(this, props), maskProps, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 61,
          columnNumber: 7
        }
      }), children);
    }
  }]);
  return Mask;
}(_Shape2.default);
exports.default = Mask;
(0, _defineProperty2.default)(Mask, "displayName", 'Mask');
(0, _defineProperty2.default)(Mask, "defaultProps", {
  x: '0%',
  y: '0%',
  width: '100%',
  height: '100%'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9leHRyYWN0VHJhbnNmb3JtIiwiX2V4dHJhY3RQcm9wcyIsIl91bml0cyIsIl9TaGFwZTIiLCJfTmF0aXZlQ29tcG9uZW50cyIsIl9qc3hGaWxlTmFtZSIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YyIiwiZGVmYXVsdCIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiZSIsIk1hc2siLCJfU2hhcGUiLCJfaW5oZXJpdHMyIiwiX3N1cGVyIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsInByb3BzIiwibWFza1RyYW5zZm9ybSIsInRyYW5zZm9ybSIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJtYXNrVW5pdHMiLCJtYXNrQ29udGVudFVuaXRzIiwiY2hpbGRyZW4iLCJtYXNrUHJvcHMiLCJ1bmRlZmluZWQiLCJjcmVhdGVFbGVtZW50IiwiUk5TVkdNYXNrIiwiX2V4dGVuZHMyIiwicmVmIiwicmVmTWV0aG9kIiwid2l0aG91dFhZIiwiX19zZWxmIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJleHBvcnRzIiwiX2RlZmluZVByb3BlcnR5MiJdLCJzb3VyY2VzIjpbIk1hc2sudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZXh0cmFjdFRyYW5zZm9ybSBmcm9tICcuLi9saWIvZXh0cmFjdC9leHRyYWN0VHJhbnNmb3JtJztcbmltcG9ydCB7IHdpdGhvdXRYWSB9IGZyb20gJy4uL2xpYi9leHRyYWN0L2V4dHJhY3RQcm9wcyc7XG5pbXBvcnQge1xuICBDb2x1bW5NYWpvclRyYW5zZm9ybU1hdHJpeCxcbiAgQ29tbW9uUGF0aFByb3BzLFxuICBOdW1iZXJQcm9wLFxufSBmcm9tICcuLi9saWIvZXh0cmFjdC90eXBlcyc7XG5pbXBvcnQgdW5pdHMgZnJvbSAnLi4vbGliL3VuaXRzJztcbmltcG9ydCBTaGFwZSBmcm9tICcuL1NoYXBlJztcbmltcG9ydCB7IFJOU1ZHTWFzayB9IGZyb20gJy4vTmF0aXZlQ29tcG9uZW50cyc7XG5cbmV4cG9ydCB0eXBlIFRNYXNrVW5pdHMgPSAndXNlclNwYWNlT25Vc2UnIHwgJ29iamVjdEJvdW5kaW5nQm94JztcblxuZXhwb3J0IGludGVyZmFjZSBNYXNrUHJvcHMgZXh0ZW5kcyBDb21tb25QYXRoUHJvcHMge1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgaWQ/OiBzdHJpbmc7XG4gIHg/OiBOdW1iZXJQcm9wO1xuICB5PzogTnVtYmVyUHJvcDtcbiAgd2lkdGg/OiBOdW1iZXJQcm9wO1xuICBoZWlnaHQ/OiBOdW1iZXJQcm9wO1xuICBtYXNrVHJhbnNmb3JtPzogQ29sdW1uTWFqb3JUcmFuc2Zvcm1NYXRyaXggfCBzdHJpbmc7XG4gIG1hc2tVbml0cz86IFRNYXNrVW5pdHM7XG4gIG1hc2tDb250ZW50VW5pdHM/OiBUTWFza1VuaXRzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXNrIGV4dGVuZHMgU2hhcGU8TWFza1Byb3BzPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdNYXNrJztcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHg6ICcwJScsXG4gICAgeTogJzAlJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIG1hc2tUcmFuc2Zvcm0sXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgbWFza1VuaXRzLFxuICAgICAgbWFza0NvbnRlbnRVbml0cyxcbiAgICAgIGNoaWxkcmVuLFxuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCBtYXNrUHJvcHMgPSB7XG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgbWFza1RyYW5zZm9ybTogZXh0cmFjdFRyYW5zZm9ybShtYXNrVHJhbnNmb3JtIHx8IHRyYW5zZm9ybSB8fCBwcm9wcyksXG4gICAgICBtYXNrVW5pdHM6IG1hc2tVbml0cyAhPT0gdW5kZWZpbmVkID8gdW5pdHNbbWFza1VuaXRzXSA6IDAsXG4gICAgICBtYXNrQ29udGVudFVuaXRzOlxuICAgICAgICBtYXNrQ29udGVudFVuaXRzICE9PSB1bmRlZmluZWQgPyB1bml0c1ttYXNrQ29udGVudFVuaXRzXSA6IDEsXG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgPFJOU1ZHTWFza1xuICAgICAgICByZWY9e3RoaXMucmVmTWV0aG9kfVxuICAgICAgICB7Li4ud2l0aG91dFhZKHRoaXMsIHByb3BzKX1cbiAgICAgICAgey4uLm1hc2tQcm9wc31cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9STlNWR01hc2s+XG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGlCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxhQUFBLEdBQUFGLE9BQUE7QUFNQSxJQUFBRyxNQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxpQkFBQSxHQUFBTCxPQUFBO0FBQStDLElBQUFNLFlBQUE7QUFBQSxTQUFBQyxhQUFBQyxPQUFBO0VBQUEsSUFBQUMseUJBQUEsR0FBQUMseUJBQUE7RUFBQSxnQkFBQUMscUJBQUE7SUFBQSxJQUFBQyxLQUFBLE9BQUFDLGdCQUFBLENBQUFDLE9BQUEsRUFBQU4sT0FBQTtNQUFBTyxNQUFBO0lBQUEsSUFBQU4seUJBQUE7TUFBQSxJQUFBTyxTQUFBLE9BQUFILGdCQUFBLENBQUFDLE9BQUEsUUFBQUcsV0FBQTtNQUFBRixNQUFBLEdBQUFHLE9BQUEsQ0FBQUMsU0FBQSxDQUFBUCxLQUFBLEVBQUFRLFNBQUEsRUFBQUosU0FBQTtJQUFBO01BQUFELE1BQUEsR0FBQUgsS0FBQSxDQUFBUyxLQUFBLE9BQUFELFNBQUE7SUFBQTtJQUFBLFdBQUFFLDJCQUFBLENBQUFSLE9BQUEsUUFBQUMsTUFBQTtFQUFBO0FBQUE7QUFBQSxTQUFBTCwwQkFBQTtFQUFBLFdBQUFRLE9BQUEscUJBQUFBLE9BQUEsQ0FBQUMsU0FBQTtFQUFBLElBQUFELE9BQUEsQ0FBQUMsU0FBQSxDQUFBSSxJQUFBO0VBQUEsV0FBQUMsS0FBQTtFQUFBO0lBQUFDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBQyxPQUFBLENBQUFDLElBQUEsQ0FBQVYsT0FBQSxDQUFBQyxTQUFBLENBQUFNLE9BQUE7SUFBQTtFQUFBLFNBQUFJLENBQUE7SUFBQTtFQUFBO0FBQUE7QUFBQSxJQWdCMUJDLElBQUksYUFBQUMsTUFBQTtFQUFBLElBQUFDLFVBQUEsQ0FBQWxCLE9BQUEsRUFBQWdCLElBQUEsRUFBQUMsTUFBQTtFQUFBLElBQUFFLE1BQUEsR0FBQTFCLFlBQUEsQ0FBQXVCLElBQUE7RUFBQSxTQUFBQSxLQUFBO0lBQUEsSUFBQUksZ0JBQUEsQ0FBQXBCLE9BQUEsUUFBQWdCLElBQUE7SUFBQSxPQUFBRyxNQUFBLENBQUFaLEtBQUEsT0FBQUQsU0FBQTtFQUFBO0VBQUEsSUFBQWUsYUFBQSxDQUFBckIsT0FBQSxFQUFBZ0IsSUFBQTtJQUFBTSxHQUFBO0lBQUFDLEtBQUEsRUFVdkIsU0FBQUMsT0FBQSxFQUFTO01BQ1AsSUFBUUMsS0FBSyxHQUFLLElBQUksQ0FBZEEsS0FBSztNQUNiLElBQ0VDLGFBQWEsR0FTWEQsS0FBSyxDQVRQQyxhQUFhO1FBQ2JDLFNBQVMsR0FRUEYsS0FBSyxDQVJQRSxTQUFTO1FBQ1RDLENBQUMsR0FPQ0gsS0FBSyxDQVBQRyxDQUFDO1FBQ0RDLENBQUMsR0FNQ0osS0FBSyxDQU5QSSxDQUFDO1FBQ0RDLEtBQUssR0FLSEwsS0FBSyxDQUxQSyxLQUFLO1FBQ0xDLE1BQU0sR0FJSk4sS0FBSyxDQUpQTSxNQUFNO1FBQ05DLFNBQVMsR0FHUFAsS0FBSyxDQUhQTyxTQUFTO1FBQ1RDLGdCQUFnQixHQUVkUixLQUFLLENBRlBRLGdCQUFnQjtRQUNoQkMsUUFBUSxHQUNOVCxLQUFLLENBRFBTLFFBQVE7TUFFVixJQUFNQyxTQUFTLEdBQUc7UUFDaEJQLENBQUMsRUFBREEsQ0FBQztRQUNEQyxDQUFDLEVBQURBLENBQUM7UUFDREMsS0FBSyxFQUFMQSxLQUFLO1FBQ0xDLE1BQU0sRUFBTkEsTUFBTTtRQUNOTCxhQUFhLEVBQUUsSUFBQXZDLGlCQUFBLENBQUFhLE9BQWdCLEVBQUMwQixhQUFhLElBQUlDLFNBQVMsSUFBSUYsS0FBSyxDQUFDO1FBQ3BFTyxTQUFTLEVBQUVBLFNBQVMsS0FBS0ksU0FBUyxHQUFHL0MsTUFBQSxDQUFBVyxPQUFLLENBQUNnQyxTQUFTLENBQUMsR0FBRyxDQUFDO1FBQ3pEQyxnQkFBZ0IsRUFDZEEsZ0JBQWdCLEtBQUtHLFNBQVMsR0FBRy9DLE1BQUEsQ0FBQVcsT0FBSyxDQUFDaUMsZ0JBQWdCLENBQUMsR0FBRztNQUMvRCxDQUFDO01BQ0QsT0FDRWpELE1BQUEsQ0FBQWdCLE9BQUEsQ0FBQXFDLGFBQUEsQ0FBQzlDLGlCQUFBLENBQUErQyxTQUFTLE1BQUFDLFNBQUEsQ0FBQXZDLE9BQUE7UUFDUndDLEdBQUcsRUFBRSxJQUFJLENBQUNDO01BQVUsR0FDaEIsSUFBQXJELGFBQUEsQ0FBQXNELFNBQVMsRUFBQyxJQUFJLEVBQUVqQixLQUFLLENBQUMsRUFDdEJVLFNBQVM7UUFBQVEsTUFBQTtRQUFBQyxRQUFBO1VBQUFDLFFBQUEsRUFBQXJELFlBQUE7VUFBQXNELFVBQUE7VUFBQUMsWUFBQTtRQUFBO01BQUEsSUFFWmIsUUFBUSxDQUNDO0lBRWhCO0VBQUM7RUFBQSxPQUFBbEIsSUFBQTtBQUFBLEVBMUMrQjFCLE9BQUEsQ0FBQVUsT0FBSztBQUFBZ0QsT0FBQSxDQUFBaEQsT0FBQSxHQUFBZ0IsSUFBQTtBQUFBLElBQUFpQyxnQkFBQSxDQUFBakQsT0FBQSxFQUFsQmdCLElBQUksaUJBQ0YsTUFBTTtBQUFBLElBQUFpQyxnQkFBQSxDQUFBakQsT0FBQSxFQURSZ0IsSUFBSSxrQkFHRDtFQUNwQlksQ0FBQyxFQUFFLElBQUk7RUFDUEMsQ0FBQyxFQUFFLElBQUk7RUFDUEMsS0FBSyxFQUFFLE1BQU07RUFDYkMsTUFBTSxFQUFFO0FBQ1YsQ0FBQyJ9