02465ebc5a91651f8ccbdbb76faa57b5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var TabViewItem = function TabViewItem(_a) {
  var children = _a.children,
    props = __rest(_a, ["children"]);
  return _react.default.createElement(_reactNative.View, props, _react.default.isValidElement(children) && children);
};
var TabView = function TabView(_ref) {
  var children = _ref.children,
    onChange = _ref.onChange,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? 0 : _ref$value,
    _ref$animationType = _ref.animationType,
    animationType = _ref$animationType === void 0 ? 'spring' : _ref$animationType,
    _ref$animationConfig = _ref.animationConfig,
    animationConfig = _ref$animationConfig === void 0 ? {} : _ref$animationConfig;
  var _React$useRef = _react.default.useRef(new _reactNative.Animated.Value(0)),
    translateX = _React$useRef.current;
  var currentIndex = _react.default.useRef(value);
  var length = _react.default.Children.count(children);
  var onPanResponderRelease = function onPanResponderRelease(_, _ref2) {
    var dx = _ref2.dx,
      dy = _ref2.dy;
    if (dx > 0 && currentIndex.current <= 0 || dx < 0 && currentIndex.current >= length - 1) {
      return;
    }
    if (Math.abs(dy) > Math.abs(dx)) {
      return;
    }
    var position = dx / -_helpers.ScreenWidth;
    var next = position > value ? Math.ceil(position) : Math.floor(position);
    onChange === null || onChange === void 0 ? void 0 : onChange(currentIndex.current + next);
  };
  var _React$useRef2 = _react.default.useRef(_reactNative.PanResponder.create({
      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
        return true;
      },
      onPanResponderGrant: function onPanResponderGrant() {
        return true;
      },
      onPanResponderRelease: onPanResponderRelease
    })),
    panResponder = _React$useRef2.current;
  var animate = _react.default.useCallback(function () {
    _reactNative.Animated[animationType](translateX, (0, _extends2.default)({
      toValue: value,
      useNativeDriver: true
    }, animationConfig)).start();
  }, [translateX, value, animationType, animationConfig]);
  _react.default.useEffect(function () {
    animate();
    currentIndex.current = value;
  }, [animate, value]);
  return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({
    testID: "tabView-test",
    style: [styles.container, {
      width: _helpers.ScreenWidth * length,
      transform: [{
        translateX: translateX.interpolate({
          inputRange: [0, 1],
          outputRange: [0, -_helpers.ScreenWidth]
        })
      }]
    }]
  }, panResponder.panHandlers), _react.default.Children.map(children, function (child) {
    return _react.default.createElement(_reactNative.View, {
      style: styles.container
    }, child);
  }));
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'stretch',
    width: _helpers.ScreenWidth
  }
});
var TabViewComponent = (0, _extends2.default)((0, _config.withTheme)(TabView, 'TabView'), {
  Item: (0, _config.withTheme)(TabViewItem, 'TabViewItem')
});
var _default = TabViewComponent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,