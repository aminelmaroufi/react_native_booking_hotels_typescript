55614359a3a043e41564b795d5000c4b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Input = _interopRequireDefault(require("../input/Input"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ListItemInput = function ListItemInput(_a) {
  var inputStyle = _a.inputStyle,
    inputContainerStyle = _a.inputContainerStyle,
    containerStyle = _a.containerStyle,
    props = __rest(_a, ["inputStyle", "inputContainerStyle", "containerStyle"]);
  return _react.default.createElement(_Input.default, (0, _extends2.default)({
    renderErrorMessage: false
  }, props, {
    inputStyle: _reactNative.StyleSheet.flatten([styles.input, inputStyle]),
    inputContainerStyle: _reactNative.StyleSheet.flatten([styles.inputContainer, inputContainerStyle]),
    containerStyle: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
  }));
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    paddingRight: 0
  },
  inputContainer: {
    flex: 1,
    borderBottomWidth: 0,
    width: null,
    height: null
  },
  input: {
    flex: 1,
    textAlign: 'right',
    width: null,
    height: null
  }
});
var _default = (0, _config.withTheme)(ListItemInput, 'ListItemInput');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfSW5wdXQiLCJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkxpc3RJdGVtSW5wdXQiLCJfYSIsImlucHV0U3R5bGUiLCJpbnB1dENvbnRhaW5lclN0eWxlIiwiY29udGFpbmVyU3R5bGUiLCJwcm9wcyIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiX2V4dGVuZHMyIiwicmVuZGVyRXJyb3JNZXNzYWdlIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJzdHlsZXMiLCJpbnB1dCIsImlucHV0Q29udGFpbmVyIiwiY29udGFpbmVyIiwiY3JlYXRlIiwiZmxleCIsInBhZGRpbmdSaWdodCIsImJvcmRlckJvdHRvbVdpZHRoIiwid2lkdGgiLCJoZWlnaHQiLCJ0ZXh0QWxpZ24iLCJfZGVmYXVsdCIsIndpdGhUaGVtZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJMaXN0SXRlbUlucHV0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vaW5wdXQvSW5wdXQnO1xuY29uc3QgTGlzdEl0ZW1JbnB1dCA9IChfYSkgPT4ge1xuICAgIHZhciB7IGlucHV0U3R5bGUsIGlucHV0Q29udGFpbmVyU3R5bGUsIGNvbnRhaW5lclN0eWxlIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImlucHV0U3R5bGVcIiwgXCJpbnB1dENvbnRhaW5lclN0eWxlXCIsIFwiY29udGFpbmVyU3R5bGVcIl0pO1xuICAgIHJldHVybiAoPElucHV0IHJlbmRlckVycm9yTWVzc2FnZT17ZmFsc2V9IHsuLi5wcm9wc30gaW5wdXRTdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtzdHlsZXMuaW5wdXQsIGlucHV0U3R5bGVdKX0gaW5wdXRDb250YWluZXJTdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgIHN0eWxlcy5pbnB1dENvbnRhaW5lcixcbiAgICAgICAgICAgIGlucHV0Q29udGFpbmVyU3R5bGUsXG4gICAgICAgIF0pfSBjb250YWluZXJTdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtzdHlsZXMuY29udGFpbmVyLCBjb250YWluZXJTdHlsZV0pfS8+KTtcbn07XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgY29udGFpbmVyOiB7XG4gICAgICAgIGZsZXg6IDEsXG4gICAgICAgIHBhZGRpbmdSaWdodDogMCxcbiAgICB9LFxuICAgIGlucHV0Q29udGFpbmVyOiB7XG4gICAgICAgIGZsZXg6IDEsXG4gICAgICAgIGJvcmRlckJvdHRvbVdpZHRoOiAwLFxuICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgaGVpZ2h0OiBudWxsLFxuICAgIH0sXG4gICAgaW5wdXQ6IHtcbiAgICAgICAgZmxleDogMSxcbiAgICAgICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgaGVpZ2h0OiBudWxsLFxuICAgIH0sXG59KTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShMaXN0SXRlbUlucHV0LCAnTGlzdEl0ZW1JbnB1dCcpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQWRBLElBQUlJLE1BQU0sR0FBSSxVQUFRLFNBQUtBLE1BQU0sSUFBSyxVQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJQyxDQUFDLElBQUlILENBQUMsRUFBRSxJQUFJSSxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDLElBQUlGLENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQy9FRCxDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHSCxDQUFDLENBQUNHLENBQUMsQ0FBQztFQUNmLElBQUlILENBQUMsSUFBSSxJQUFJLElBQUksT0FBT0ksTUFBTSxDQUFDSyxxQkFBcUIsS0FBSyxVQUFVLEVBQy9ELEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRVAsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFxQixDQUFDVCxDQUFDLENBQUMsRUFBRVUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDcEUsSUFBSVQsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUlOLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDTyxvQkFBb0IsQ0FBQ0wsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsRUFDMUVSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxHQUFHVixDQUFDLENBQUNHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUM7RUFDekI7RUFDSixPQUFPUixDQUFDO0FBQ1osQ0FBQztBQUtELElBQU1XLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBSUMsRUFBRSxFQUFLO0VBQzFCLElBQU1DLFVBQVUsR0FBMENELEVBQUUsQ0FBdERDLFVBQVU7SUFBRUMsbUJBQW1CLEdBQXFCRixFQUFFLENBQTFDRSxtQkFBbUI7SUFBRUMsY0FBYyxHQUFLSCxFQUFFLENBQXJCRyxjQUFjO0lBQVNDLEtBQUssR0FBR25CLE1BQU0sQ0FBQ2UsRUFBRSxFQUFFLENBQUMsWUFBWSxFQUFFLHFCQUFxQixFQUFFLGdCQUFnQixDQUFDLENBQUM7RUFDekksT0FBUXJCLE1BQUEsQ0FBQTBCLE9BQUEsQ0FBQUMsYUFBQSxDQUFDdEIsTUFBQSxDQUFBcUIsT0FBSyxNQUFBRSxTQUFBLENBQUFGLE9BQUE7SUFBQ0csa0JBQWtCLEVBQUU7RUFBTSxHQUFLSixLQUFLO0lBQUVILFVBQVUsRUFBRVEsdUJBQVUsQ0FBQ0MsT0FBTyxDQUFDLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFWCxVQUFVLENBQUMsQ0FBRTtJQUFDQyxtQkFBbUIsRUFBRU8sdUJBQVUsQ0FBQ0MsT0FBTyxDQUFDLENBQ2pKQyxNQUFNLENBQUNFLGNBQWMsRUFDckJYLG1CQUFtQixDQUN0QixDQUFFO0lBQUNDLGNBQWMsRUFBRU0sdUJBQVUsQ0FBQ0MsT0FBTyxDQUFDLENBQUNDLE1BQU0sQ0FBQ0csU0FBUyxFQUFFWCxjQUFjLENBQUM7RUFBRSxHQUFFO0FBQ3JGLENBQUM7QUFDRCxJQUFNUSxNQUFNLEdBQUdGLHVCQUFVLENBQUNNLE1BQU0sQ0FBQztFQUM3QkQsU0FBUyxFQUFFO0lBQ1BFLElBQUksRUFBRSxDQUFDO0lBQ1BDLFlBQVksRUFBRTtFQUNsQixDQUFDO0VBQ0RKLGNBQWMsRUFBRTtJQUNaRyxJQUFJLEVBQUUsQ0FBQztJQUNQRSxpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCQyxLQUFLLEVBQUUsSUFBSTtJQUNYQyxNQUFNLEVBQUU7RUFDWixDQUFDO0VBQ0RSLEtBQUssRUFBRTtJQUNISSxJQUFJLEVBQUUsQ0FBQztJQUNQSyxTQUFTLEVBQUUsT0FBTztJQUNsQkYsS0FBSyxFQUFFLElBQUk7SUFDWEMsTUFBTSxFQUFFO0VBQ1o7QUFDSixDQUFDLENBQUM7QUFBQyxJQUFBRSxRQUFBLEdBQ1ksSUFBQUMsaUJBQVMsRUFBQ3hCLGFBQWEsRUFBRSxlQUFlLENBQUM7QUFBQXlCLE9BQUEsQ0FBQW5CLE9BQUEsR0FBQWlCLFFBQUEifQ==