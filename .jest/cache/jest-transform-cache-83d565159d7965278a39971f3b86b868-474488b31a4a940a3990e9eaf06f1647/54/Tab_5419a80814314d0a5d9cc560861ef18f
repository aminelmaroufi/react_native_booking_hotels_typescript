9e57b473c7320961c185a0dc89b39cb9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Tab = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _Button = _interopRequireDefault(require("../buttons/Button"));
var _config = require("../config");
var _color = _interopRequireDefault(require("color"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var TabItem = function TabItem(_a) {
  var _b, _c;
  var active = _a.active,
    theme = _a.theme,
    titleStyle = _a.titleStyle,
    containerStyle = _a.containerStyle,
    buttonStyle = _a.buttonStyle,
    variant = _a.variant,
    _a$iconPosition = _a.iconPosition,
    iconPosition = _a$iconPosition === void 0 ? 'top' : _a$iconPosition,
    title = _a.title,
    props = __rest(_a, ["active", "theme", "titleStyle", "containerStyle", "buttonStyle", "variant", "iconPosition", "title"]);
  return _react.default.createElement(_Button.default, (0, _extends2.default)({
    accessibilityRole: "tab",
    accessibilityState: {
      selected: active
    },
    accessibilityValue: typeof title === 'string' ? {
      text: title
    } : undefined,
    buttonStyle: [styles.buttonStyle, buttonStyle],
    titleStyle: [styles.titleStyle, {
      color: variant === 'primary' ? 'white' : (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.secondary,
      paddingVertical: !props.icon ? 8 : 2
    }, titleStyle],
    containerStyle: [styles.containerStyle, {
      backgroundColor: active ? (0, _color.default)((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.secondary).alpha(0.2).rgb().toString() : 'transparent'
    }, containerStyle],
    iconPosition: iconPosition,
    title: title
  }, props));
};
var TabContainer = function TabContainer(_a) {
  var _b, _c;
  var theme = _a.theme,
    children = _a.children,
    value = _a.value,
    _a$onChange = _a.onChange,
    onChange = _a$onChange === void 0 ? function () {} : _a$onChange,
    indicatorStyle = _a.indicatorStyle,
    disableIndicator = _a.disableIndicator,
    variant = _a.variant,
    props = __rest(_a, ["theme", "children", "value", "onChange", "indicatorStyle", "disableIndicator", "variant"]);
  var _React$useState = _react.default.useState({
      width: 0
    }),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    dim = _React$useState2[0],
    setDim = _React$useState2[1];
  var _React$useRef = _react.default.useRef(new _reactNative.Animated.Value(0)),
    animation = _React$useRef.current;
  _react.default.useEffect(function () {
    _reactNative.Animated.timing(animation, {
      toValue: value,
      useNativeDriver: true,
      duration: 170
    }).start();
  }, [animation, value]);
  var WIDTH = dim.width / _react.default.Children.count(children);
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, props, {
    accessibilityRole: "tablist",
    style: [styles.viewStyle, variant === 'primary' && {
      backgroundColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.primary
    }],
    onLayout: function onLayout(_ref) {
      var layout = _ref.nativeEvent.layout;
      return setDim(Object(layout));
    }
  }), _react.default.Children.map(children, function (child, index) {
    return _react.default.cloneElement(child, {
      onPress: function onPress() {
        return onChange(index);
      },
      active: index === value,
      variant: variant
    });
  }), !disableIndicator && _react.default.createElement(_reactNative.Animated.View, {
    style: [styles.indicator, {
      backgroundColor: (_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.secondary,
      transform: [{
        translateX: animation.interpolate({
          inputRange: [0, 1],
          outputRange: [0, WIDTH]
        })
      }]
    }, indicatorStyle]
  }, _react.default.createElement(_reactNative.View, {
    style: {
      width: WIDTH
    }
  }))));
};
var Tab = (0, _extends2.default)(TabContainer, {
  Item: TabItem
});
exports.Tab = Tab;
var _default = (0, _extends2.default)((0, _config.withTheme)(TabContainer, 'Tab'), {
  Item: (0, _config.withTheme)(TabItem, 'TabItem')
});
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  buttonStyle: {
    borderRadius: 0,
    backgroundColor: 'transparent'
  },
  titleStyle: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    textTransform: 'uppercase'
  },
  containerStyle: {
    flex: 1,
    borderRadius: 0
  },
  viewStyle: {
    flexDirection: 'row',
    position: 'relative'
  },
  indicator: {
    display: 'flex',
    position: 'absolute',
    height: 2,
    bottom: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,