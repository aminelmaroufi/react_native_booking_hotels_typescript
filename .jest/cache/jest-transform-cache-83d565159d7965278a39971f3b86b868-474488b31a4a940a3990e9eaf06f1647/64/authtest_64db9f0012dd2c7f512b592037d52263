2cd13ed6dc808135135c779bc16062f3
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var actionTypes_1 = __importDefault(require("../../../utils/actionTypes"));
var auth_1 = __importDefault(require("../auth"));
var user_1 = require("../../../models/user");
var defaultState = {
  fetching: false,
  isLoggedIn: false,
  message: '',
  error: false,
  user: user_1.emptyUser,
  success: false
};
var noAction = {
  type: '',
  payload: null
};
var error_message = 'Error from API';
var success_message = 'Succes message from API';
describe('Test auth reducer', function () {
  it('should return the initial state when state is undefined', function () {
    expect((0, auth_1.default)(undefined, noAction)).toEqual(defaultState);
  });
  it("should handle the 'API_CALL_REQUEST' action", function () {
    var expectedState = (0, _extends2.default)((0, _extends2.default)({}, defaultState), {
      fetching: true
    });
    var fecthPayload = {
      type: actionTypes_1.default.API_CALL_REQUEST,
      payload: (0, _extends2.default)((0, _extends2.default)({}, defaultState), {
        fetching: true
      })
    };
    expect((0, auth_1.default)(undefined, fecthPayload)).toEqual(expectedState);
  });
  it("should handle the 'API_CALL_SUCCESS' action", function () {
    var expectedState = (0, _extends2.default)((0, _extends2.default)({}, defaultState), {
      success: true
    });
    var fecthSuccessPayload = {
      type: actionTypes_1.default.API_CALL_SUCCESS,
      payload: {
        fetching: false,
        success: true
      }
    };
    expect((0, auth_1.default)(undefined, fecthSuccessPayload)).toEqual(expectedState);
  });
  it("should handle the 'API_CALL_FAILURE' action", function () {
    var expectedState = (0, _extends2.default)((0, _extends2.default)({}, defaultState), {
      error: true,
      message: error_message
    });
    var fecthFailurePayload = {
      type: actionTypes_1.default.API_CALL_FAILURE,
      payload: {
        fetching: false,
        error: true,
        message: error_message
      }
    };
    expect((0, auth_1.default)(undefined, fecthFailurePayload)).toEqual(expectedState);
  });
  it("should handle the 'SUCCESS_OPERATION' action", function () {
    var expectedState = (0, _extends2.default)((0, _extends2.default)({}, defaultState), {
      success: true,
      message: success_message
    });
    var fecthSuccessOperationPayload = {
      type: actionTypes_1.default.SUCCESS_OPERATION,
      payload: {
        fetching: false,
        success: true,
        message: success_message
      }
    };
    expect((0, auth_1.default)(undefined, fecthSuccessOperationPayload)).toEqual(expectedState);
  });
  it("should handle the 'CHECK_USER_SUCCESS' action for logged user", function () {
    var expectedState = (0, _extends2.default)((0, _extends2.default)({}, defaultState), {
      isLoggedIn: true,
      user: user_1.emptyUser
    });
    var checkUserSuccessPayload = {
      type: actionTypes_1.default.CHECK_USER_SUCCESS,
      payload: {
        isLoggedIn: true,
        user: user_1.emptyUser
      }
    };
    expect((0, auth_1.default)(undefined, checkUserSuccessPayload)).toEqual(expectedState);
  });
  it("should handle the 'CHECK_USER_SUCCESS' action for guest user", function () {
    var expectedState = (0, _extends2.default)((0, _extends2.default)({}, defaultState), {
      isLoggedIn: false,
      user: user_1.emptyUser
    });
    var checkUserSuccessPayload = {
      type: actionTypes_1.default.CHECK_USER_SUCCESS,
      payload: {
        isLoggedIn: false,
        user: null
      }
    };
    expect((0, auth_1.default)(undefined, checkUserSuccessPayload)).toEqual(expectedState);
  });
  it("should handle the 'LOGIN_SUCCESS' action", function () {
    var expectedState = (0, _extends2.default)((0, _extends2.default)({}, defaultState), {
      isLoggedIn: true,
      user: user_1.emptyUser
    });
    var loginSuccessPayload = {
      type: actionTypes_1.default.LOGIN_SUCCESS,
      payload: {
        isLoggedIn: true,
        user: user_1.emptyUser
      }
    };
    expect((0, auth_1.default)(undefined, loginSuccessPayload)).toEqual(expectedState);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,