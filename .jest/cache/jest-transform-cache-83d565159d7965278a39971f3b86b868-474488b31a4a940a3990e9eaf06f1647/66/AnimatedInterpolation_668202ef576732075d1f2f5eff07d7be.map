{"version":3,"names":["_interopRequireDefault","require","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_extends2","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","AnimatedNode","AnimatedWithChildren","NativeAnimatedHelper","invariant","normalizeColor","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","checkInfiniteRange","inputRange","checkValidInputRange","length","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","Infinity","colorToRgba","normalizedColor","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","value","number","i","push","interpolations","shouldRound","isRgbOrRgba","replace","val","Math","round","String","startsWith","arr","pattern","name","AnimatedInterpolation","_AnimatedWithChildren","_super","parent","_this","_parent","_config","_interpolation","key","__makeNative","__getValue","parentValue","__attach","__addChild","__detach","__removeChild","__transformDataType","transformDataType","__getNativeConfig","__DEV__","validateInterpolation","type","__createInterpolation","module","exports"],"sources":["AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nconst invariant = require('invariant');\nconst normalizeColor = require('../../StyleSheet/normalizeColor');\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType = {\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<number> | $ReadOnlyArray<string>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n};\n\nconst linear = t => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation(\n  config: InterpolationConfigType,\n): (input: number) => number | string {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  const outputRange: Array<number> = (config.outputRange: any);\n  checkInfiniteRange('outputRange', outputRange);\n\n  const inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange (' +\n      inputRange.length +\n      ') and outputRange (' +\n      outputRange.length +\n      ') must have the same length',\n  );\n\n  const easing = config.easing || linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    );\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input: string): string {\n  let normalizedColor = normalizeColor(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n\n  const r = (normalizedColor & 0xff000000) >>> 24;\n  const g = (normalizedColor & 0x00ff0000) >>> 16;\n  const b = (normalizedColor & 0x0000ff00) >>> 8;\n  const a = (normalizedColor & 0x000000ff) / 255;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(\n  config: InterpolationConfigType,\n): (input: number) => string {\n  let outputRange: Array<string> = (config.outputRange: any);\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */\n  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `value.match()` can return\n     * `null`. Need to guard against this possibility. */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  const interpolations = outputRange[0]\n    .match(stringShapeRegex)\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    /* $FlowFixMe[incompatible-call] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    .map((value, i) => {\n      return createInterpolation({\n        ...config,\n        outputRange: outputRanges[i],\n      });\n    });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  const shouldRound = isRgbOrRgba(outputRange[0]);\n\n  return input => {\n    let i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      let val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr: $ReadOnlyArray<string>) {\n  const pattern = arr[0].replace(stringShapeRegex, '');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      pattern === arr[i].replace(stringShapeRegex, ''),\n      'invalid pattern ' + arr[0] + ' and ' + arr[i],\n    );\n  }\n}\n\nfunction findRange(input: number, inputRange: $ReadOnlyArray<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      arr[i] >= arr[i - 1],\n      /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n       * below this comment, one or both of the operands may be something that\n       * doesn't cleanly convert to a string, like undefined, null, and object,\n       * etc. If you really mean this implicit string conversion, you can do\n       * something like String(myThing) */\n      'inputRange must be monotonically non-decreasing ' + arr,\n    );\n  }\n}\n\nfunction checkInfiniteRange(name: string, arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n     * below this comment, one or both of the operands may be something that\n     * doesn't cleanly convert to a string, like undefined, null, and object,\n     * etc. If you really mean this implicit string conversion, you can do\n     * something like String(myThing) */\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nclass AnimatedInterpolation extends AnimatedWithChildren {\n  // Export for testing.\n  static __createInterpolation: (\n    config: InterpolationConfigType,\n  ) => (input: number) => number | string = createInterpolation;\n\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType;\n  _interpolation: (input: number) => number | string;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative() {\n    this._parent.__makeNative();\n    super.__makeNative();\n  }\n\n  __getValue(): number | string {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._interpolation(parentValue);\n  }\n\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __transformDataType(range: Array<any>): Array<any> {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      /* $FlowFixMe[incompatible-call] (>=0.38.0) - Flow error detected during\n       * the deployment of v0.38.0. To see the error, remove this comment and\n       * run flow */\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n\nmodule.exports = AnimatedInterpolation;\n"],"mappings":"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"}