{"version":3,"names":["_react","_interopRequireWildcard","require","_Rect","_interopRequireDefault","_Circle","_Ellipse","_Polygon","_Polyline","_Line","_Svg","_Path","_G","_Text","_TSpan","_TextPath","_Use","_Image","_Symbol","_Defs","_LinearGradient","_RadialGradient","_Stop","_ClipPath","_Pattern","_Mask","_Marker","_jsxFileName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","tags","svg","circle","ellipse","g","text","tspan","textPath","path","polygon","polyline","line","rect","use","image","symbol","defs","linearGradient","radialGradient","stop","clipPath","pattern","mask","marker","exports","missingTag","SvgAst","_ref","ast","override","props","children","createElement","_extends2","__self","__source","fileName","lineNumber","columnNumber","err","console","error","bind","SvgXml","_props$onError","onError","xml","useMemo","_parse","fetchText","_x","_fetchText","_asyncToGenerator2","_regenerator","mark","_callee","uri","response","wrap","_callee$","_context","prev","next","fetch","sent","ok","abrupt","Error","status","SvgUri","_props$onError2","onLoad","_useState","useState","_useState2","_slicedToArray2","setXml","useEffect","then","data","catch","SvgFromXml","_Component","_inherits2","_super","_this","_classCallCheck2","_len","length","args","Array","_key","concat","_defineProperty2","_assertThisInitialized2","_createClass2","value","componentDidMount","parse","componentDidUpdate","prevProps","setState","render","state","Component","SvgFromUri","_Component2","_super2","_this2","_len2","_key2","_fetch","_callee2","_callee2$","_context2","t0","t1","t2","t3","t4","_x2","upperCase","_match","letter","toUpperCase","camelCase","phrase","replace","getStyle","string","style","declarations","split","filter","v","trim","i","declaration","_property","astToReact","index","Tag","map","repeat","str","toSpaces","tabs","locate","source","lines","nLines","column","before","slice","beforeExec","exec","beforeLine","after","afterExec","afterLine","pad","snippet","validNameCharacters","whitespace","quotemarks","middleware","currentElement","metadata","root","stack","message","_locate","test","neutral","char","push","openingTag","start","comment","end","cdata","closingTag","tag","getName","element","parent","getAttributes","styles","selfClosing","indexOf","pop","_currentElement","name","allowSpaces","getAttributeValue","isNaN","getQuotedAttributeValue","getUnquotedAttributeValue","quotemark","escaped","_ast","jsx"],"sources":["xml.tsx"],"sourcesContent":["import React, {\n  Component,\n  ComponentType,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport Rect from './elements/Rect';\nimport Circle from './elements/Circle';\nimport Ellipse from './elements/Ellipse';\nimport Polygon from './elements/Polygon';\nimport Polyline from './elements/Polyline';\nimport Line from './elements/Line';\nimport Svg, { SvgProps } from './elements/Svg';\nimport Path from './elements/Path';\nimport G from './elements/G';\nimport Text from './elements/Text';\nimport TSpan from './elements/TSpan';\nimport TextPath from './elements/TextPath';\nimport Use from './elements/Use';\nimport Image from './elements/Image';\nimport Symbol from './elements/Symbol';\nimport Defs from './elements/Defs';\nimport LinearGradient from './elements/LinearGradient';\nimport RadialGradient from './elements/RadialGradient';\nimport Stop from './elements/Stop';\nimport ClipPath from './elements/ClipPath';\nimport Pattern from './elements/Pattern';\nimport Mask from './elements/Mask';\nimport Marker from './elements/Marker';\n\nexport const tags: { [tag: string]: ComponentType } = {\n  svg: Svg,\n  circle: Circle,\n  ellipse: Ellipse,\n  g: G,\n  text: Text,\n  tspan: TSpan,\n  textPath: TextPath,\n  path: Path,\n  polygon: Polygon,\n  polyline: Polyline,\n  line: Line,\n  rect: Rect,\n  use: Use,\n  image: Image,\n  symbol: Symbol,\n  defs: Defs,\n  linearGradient: LinearGradient,\n  radialGradient: RadialGradient,\n  stop: Stop,\n  clipPath: ClipPath,\n  pattern: Pattern,\n  mask: Mask,\n  marker: Marker,\n};\n\nfunction missingTag() {\n  return null;\n}\n\nexport interface AST {\n  tag: string;\n  style?: Styles;\n  styles?: string;\n  priority?: Map<string, boolean | undefined>;\n  parent: AST | null;\n  children: (AST | string)[] | (JSX.Element | string)[];\n  props: {\n    [prop: string]: Styles | string | undefined;\n  };\n  Tag: ComponentType<React.PropsWithChildren<{}>>;\n}\n\nexport interface XmlAST extends AST {\n  children: (XmlAST | string)[];\n  parent: XmlAST | null;\n}\n\nexport interface JsxAST extends AST {\n  children: (JSX.Element | string)[];\n}\n\nexport type AdditionalProps = {\n  onError?: (error: Error) => void;\n  override?: Object;\n  onLoad?: () => void;\n};\n\nexport type UriProps = SvgProps & { uri: string | null } & AdditionalProps;\nexport type UriState = { xml: string | null };\n\nexport type XmlProps = SvgProps & { xml: string | null } & AdditionalProps;\nexport type XmlState = { ast: JsxAST | null };\n\nexport type AstProps = SvgProps & { ast: JsxAST | null } & AdditionalProps;\n\nexport function SvgAst({ ast, override }: AstProps) {\n  if (!ast) {\n    return null;\n  }\n  const { props, children } = ast;\n  return (\n    <Svg {...props} {...override}>\n      {children}\n    </Svg>\n  );\n}\n\nexport const err = console.error.bind(console);\n\nexport function SvgXml(props: XmlProps) {\n  const { onError = err, xml, override } = props;\n  const ast = useMemo<JsxAST | null>(\n    () => (xml !== null ? parse(xml) : null),\n    [xml],\n  );\n\n  try {\n    return <SvgAst ast={ast} override={override || props} />;\n  } catch (error) {\n    onError(error);\n    return null;\n  }\n}\n\nexport async function fetchText(uri: string) {\n  const response = await fetch(uri);\n  if (response.ok) {\n    return await response.text();\n  }\n  throw new Error(`Fetching ${uri} failed with status ${response.status}`);\n}\n\nexport function SvgUri(props: UriProps) {\n  const { onError = err, uri, onLoad } = props;\n  const [xml, setXml] = useState<string | null>(null);\n  useEffect(() => {\n    uri\n      ? fetchText(uri)\n          .then((data) => {\n            setXml(data);\n            onLoad?.();\n          })\n          .catch(onError)\n      : setXml(null);\n  }, [onError, uri, onLoad]);\n  return <SvgXml xml={xml} override={props} />;\n}\n\n// Extending Component is required for Animated support.\n\nexport class SvgFromXml extends Component<XmlProps, XmlState> {\n  state = { ast: null };\n  componentDidMount() {\n    this.parse(this.props.xml);\n  }\n  componentDidUpdate(prevProps: { xml: string | null }) {\n    const { xml } = this.props;\n    if (xml !== prevProps.xml) {\n      this.parse(xml);\n    }\n  }\n  parse(xml: string | null) {\n    try {\n      this.setState({ ast: xml ? parse(xml) : null });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  render() {\n    const {\n      props,\n      state: { ast },\n    } = this;\n    return <SvgAst ast={ast} override={props.override || props} />;\n  }\n}\n\nexport class SvgFromUri extends Component<UriProps, UriState> {\n  state = { xml: null };\n  componentDidMount() {\n    this.fetch(this.props.uri);\n  }\n  componentDidUpdate(prevProps: { uri: string | null }) {\n    const { uri } = this.props;\n    if (uri !== prevProps.uri) {\n      this.fetch(uri);\n    }\n  }\n  async fetch(uri: string | null) {\n    try {\n      this.setState({ xml: uri ? await fetchText(uri) : null });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  render() {\n    const {\n      props,\n      state: { xml },\n    } = this;\n    return <SvgFromXml xml={xml} override={props} />;\n  }\n}\n\nconst upperCase = (_match: string, letter: string) => letter.toUpperCase();\n\nexport const camelCase = (phrase: string) =>\n  phrase.replace(/[:-]([a-z])/g, upperCase);\n\nexport type Styles = { [property: string]: string };\n\nexport function getStyle(string: string): Styles {\n  const style: Styles = {};\n  const declarations = string.split(';').filter((v) => v.trim());\n  const { length } = declarations;\n  for (let i = 0; i < length; i++) {\n    const declaration = declarations[i];\n    if (declaration.length !== 0) {\n      const split = declaration.split(':');\n      const property = split[0];\n      const value = split[1];\n      style[camelCase(property.trim())] = value.trim();\n    }\n  }\n  return style;\n}\n\nexport function astToReact(\n  value: AST | string,\n  index: number,\n): JSX.Element | string {\n  if (typeof value === 'object') {\n    const { Tag, props, children } = value;\n    return (\n      <Tag key={index} {...props}>\n        {(children as (AST | string)[]).map(astToReact)}\n      </Tag>\n    );\n  }\n  return value;\n}\n\n// slimmed down parser based on https://github.com/Rich-Harris/svg-parser\n\nfunction repeat(str: string, i: number) {\n  let result = '';\n  while (i--) {\n    result += str;\n  }\n  return result;\n}\n\nconst toSpaces = (tabs: string) => repeat('  ', tabs.length);\n\nfunction locate(source: string, i: number) {\n  const lines = source.split('\\n');\n  const nLines = lines.length;\n  let column = i;\n  let line = 0;\n  for (; line < nLines; line++) {\n    const { length } = lines[line];\n    if (column >= length) {\n      column -= length;\n    } else {\n      break;\n    }\n  }\n  const before = source.slice(0, i).replace(/^\\t+/, toSpaces);\n  const beforeExec = /(^|\\n).*$/.exec(before);\n  const beforeLine = (beforeExec && beforeExec[0]) || '';\n  const after = source.slice(i);\n  const afterExec = /.*(\\n|$)/.exec(after);\n  const afterLine = afterExec && afterExec[0];\n  const pad = repeat(' ', beforeLine.length);\n  const snippet = `${beforeLine}${afterLine}\\n${pad}^`;\n  return { line, column, snippet };\n}\n\nconst validNameCharacters = /[a-zA-Z0-9:_-]/;\nconst whitespace = /[\\s\\t\\r\\n]/;\nconst quotemarks = /['\"]/;\n\nexport type Middleware = (ast: XmlAST) => XmlAST;\n\nexport function parse(source: string, middleware?: Middleware): JsxAST | null {\n  const length = source.length;\n  let currentElement: XmlAST | null = null;\n  let state = metadata;\n  let children = null;\n  let root: XmlAST | undefined;\n  let stack: XmlAST[] = [];\n\n  function error(message: string) {\n    const { line, column, snippet } = locate(source, i);\n    throw new Error(\n      `${message} (${line}:${column}). If this is valid SVG, it's probably a bug. Please raise an issue\\n\\n${snippet}`,\n    );\n  }\n\n  function metadata() {\n    while (\n      i + 1 < length &&\n      (source[i] !== '<' || !validNameCharacters.test(source[i + 1]))\n    ) {\n      i++;\n    }\n\n    return neutral();\n  }\n\n  function neutral() {\n    let text = '';\n    let char;\n    while (i < length && (char = source[i]) !== '<') {\n      text += char;\n      i += 1;\n    }\n\n    if (/\\S/.test(text)) {\n      children.push(text);\n    }\n\n    if (source[i] === '<') {\n      return openingTag;\n    }\n\n    return neutral;\n  }\n\n  function openingTag() {\n    const char = source[i];\n\n    if (char === '?') {\n      return neutral;\n    } // <?xml...\n\n    if (char === '!') {\n      const start = i + 1;\n      if (source.slice(start, i + 3) === '--') {\n        return comment;\n      }\n      const end = i + 8;\n      if (source.slice(start, end) === '[CDATA[') {\n        return cdata;\n      }\n      if (/doctype/i.test(source.slice(start, end))) {\n        return neutral;\n      }\n    }\n\n    if (char === '/') {\n      return closingTag;\n    }\n\n    const tag = getName();\n    const props: { [prop: string]: Styles | string | undefined } = {};\n    const element: XmlAST = {\n      tag,\n      props,\n      children: [],\n      parent: currentElement,\n      Tag: tags[tag] || missingTag,\n    };\n\n    if (currentElement) {\n      children.push(element);\n    } else {\n      root = element;\n    }\n\n    getAttributes(props);\n\n    const { style } = props;\n    if (typeof style === 'string') {\n      element.styles = style;\n      props.style = getStyle(style);\n    }\n\n    let selfClosing = false;\n\n    if (source[i] === '/') {\n      i += 1;\n      selfClosing = true;\n    }\n\n    if (source[i] !== '>') {\n      error('Expected >');\n    }\n\n    if (!selfClosing) {\n      currentElement = element;\n      ({ children } = element);\n      stack.push(element);\n    }\n\n    return neutral;\n  }\n\n  function comment() {\n    const index = source.indexOf('-->', i);\n    if (!~index) {\n      error('expected -->');\n    }\n\n    i = index + 2;\n    return neutral;\n  }\n\n  function cdata() {\n    const index = source.indexOf(']]>', i);\n    if (!~index) {\n      error('expected ]]>');\n    }\n\n    children.push(source.slice(i + 7, index));\n\n    i = index + 2;\n    return neutral;\n  }\n\n  function closingTag() {\n    const tag = getName();\n\n    if (!tag) {\n      error('Expected tag name');\n    }\n\n    if (currentElement && tag !== currentElement.tag) {\n      error(\n        `Expected closing tag </${tag}> to match opening tag <${currentElement.tag}>`,\n      );\n    }\n\n    if (source[i] !== '>') {\n      error('Expected >');\n    }\n\n    stack.pop();\n    currentElement = stack[stack.length - 1];\n    if (currentElement) {\n      ({ children } = currentElement);\n    }\n\n    return neutral;\n  }\n\n  function getName() {\n    let name = '';\n    let char;\n    while (i < length && validNameCharacters.test((char = source[i]))) {\n      name += char;\n      i += 1;\n    }\n\n    return name;\n  }\n\n  function getAttributes(props: {\n    [x: string]: Styles | string | number | boolean | undefined;\n    style?: string | Styles | undefined;\n  }) {\n    while (i < length) {\n      if (!whitespace.test(source[i])) {\n        return;\n      }\n      allowSpaces();\n\n      const name = getName();\n      if (!name) {\n        return;\n      }\n\n      let value: boolean | number | string = true;\n\n      allowSpaces();\n      if (source[i] === '=') {\n        i += 1;\n        allowSpaces();\n\n        value = getAttributeValue();\n        if (!isNaN(+value) && value.trim() !== '') {\n          value = +value;\n        }\n      }\n\n      props[camelCase(name)] = value;\n    }\n  }\n\n  function getAttributeValue(): string {\n    return quotemarks.test(source[i])\n      ? getQuotedAttributeValue()\n      : getUnquotedAttributeValue();\n  }\n\n  function getUnquotedAttributeValue() {\n    let value = '';\n    do {\n      const char = source[i];\n      if (char === ' ' || char === '>' || char === '/') {\n        return value;\n      }\n\n      value += char;\n      i += 1;\n    } while (i < length);\n\n    return value;\n  }\n\n  function getQuotedAttributeValue() {\n    const quotemark = source[i++];\n\n    let value = '';\n    let escaped = false;\n\n    while (i < length) {\n      const char = source[i++];\n      if (char === quotemark && !escaped) {\n        return value;\n      }\n\n      if (char === '\\\\' && !escaped) {\n        escaped = true;\n      }\n\n      value += escaped ? `\\\\${char}` : char;\n      escaped = false;\n    }\n\n    return value;\n  }\n\n  function allowSpaces() {\n    while (i < length && whitespace.test(source[i])) {\n      i += 1;\n    }\n  }\n\n  let i = 0;\n  while (i < length) {\n    if (!state) {\n      error('Unexpected character');\n    }\n    state = state();\n    i += 1;\n  }\n\n  if (state !== neutral) {\n    error('Unexpected end of input');\n  }\n\n  if (root) {\n    const xml: XmlAST = (middleware ? middleware(root) : root) || root;\n    const ast: (JSX.Element | string)[] = xml.children.map(astToReact);\n    const jsx: JsxAST = xml as JsxAST;\n    jsx.children = ast;\n    return jsx;\n  }\n\n  return null;\n}\n"],"mappings":"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"}