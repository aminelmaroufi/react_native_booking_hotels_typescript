37777860a5c24a1e1ba4ae423e5c181e
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var React = require('react');
var View = require('../Libraries/Components/View/View');
var requireNativeComponent = require('../Libraries/ReactNative/requireNativeComponent');
var RCTScrollView = requireNativeComponent('RCTScrollView');
function mockScrollView(BaseComponent) {
  var ScrollViewMock = function (_BaseComponent) {
    (0, _inherits2.default)(ScrollViewMock, _BaseComponent);
    var _super = _createSuper(ScrollViewMock);
    function ScrollViewMock() {
      (0, _classCallCheck2.default)(this, ScrollViewMock);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(ScrollViewMock, [{
      key: "render",
      value: function render() {
        return React.createElement(RCTScrollView, this.props, this.props.refreshControl, React.createElement(View, null, this.props.children));
      }
    }]);
    return ScrollViewMock;
  }(BaseComponent);
  return ScrollViewMock;
}
module.exports = mockScrollView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2luaGVyaXRzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiZGVmYXVsdCIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5Iiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiZSIsIlJlYWN0IiwiVmlldyIsInJlcXVpcmVOYXRpdmVDb21wb25lbnQiLCJSQ1RTY3JvbGxWaWV3IiwibW9ja1Njcm9sbFZpZXciLCJCYXNlQ29tcG9uZW50IiwiU2Nyb2xsVmlld01vY2siLCJfQmFzZUNvbXBvbmVudCIsIl9zdXBlciIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsInByb3BzIiwicmVmcmVzaENvbnRyb2wiLCJjaGlsZHJlbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJtb2NrU2Nyb2xsVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbi8qIGVzbGludC1lbnYgamVzdCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFZpZXcgPSByZXF1aXJlKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9WaWV3L1ZpZXcnKTtcblxuY29uc3QgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoJy4uL0xpYnJhcmllcy9SZWFjdE5hdGl2ZS9yZXF1aXJlTmF0aXZlQ29tcG9uZW50Jyk7XG5jb25zdCBSQ1RTY3JvbGxWaWV3OiAkRmxvd0ZpeE1lID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnUkNUU2Nyb2xsVmlldycpO1xuXG5mdW5jdGlvbiBtb2NrU2Nyb2xsVmlldyhCYXNlQ29tcG9uZW50OiAkRmxvd0ZpeE1lKSB7XG4gIGNsYXNzIFNjcm9sbFZpZXdNb2NrIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCk6IFJlYWN0LkVsZW1lbnQ8dHlwZW9mIFJDVFNjcm9sbFZpZXc+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxSQ1RTY3JvbGxWaWV3IHsuLi50aGlzLnByb3BzfT5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5yZWZyZXNoQ29udHJvbH1cbiAgICAgICAgICA8Vmlldz57dGhpcy5wcm9wcy5jaGlsZHJlbn08L1ZpZXc+XG4gICAgICAgIDwvUkNUU2Nyb2xsVmlldz5cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBTY3JvbGxWaWV3TW9jaztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSAobW9ja1Njcm9sbFZpZXc6ICRGbG93Rml4TWUpO1xuIl0sIm1hcHBpbmdzIjoiQUFZQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUcsVUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUksMkJBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLGdCQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxTQUFBTSxhQUFBQyxPQUFBLFFBQUFDLHlCQUFBLEdBQUFDLHlCQUFBLG9CQUFBQyxxQkFBQSxRQUFBQyxLQUFBLE9BQUFOLGdCQUFBLENBQUFPLE9BQUEsRUFBQUwsT0FBQSxHQUFBTSxNQUFBLE1BQUFMLHlCQUFBLFFBQUFNLFNBQUEsT0FBQVQsZ0JBQUEsQ0FBQU8sT0FBQSxRQUFBRyxXQUFBLEVBQUFGLE1BQUEsR0FBQUcsT0FBQSxDQUFBQyxTQUFBLENBQUFOLEtBQUEsRUFBQU8sU0FBQSxFQUFBSixTQUFBLFlBQUFELE1BQUEsR0FBQUYsS0FBQSxDQUFBUSxLQUFBLE9BQUFELFNBQUEsZ0JBQUFkLDJCQUFBLENBQUFRLE9BQUEsUUFBQUMsTUFBQTtBQUFBLFNBQUFKLDBCQUFBLGVBQUFPLE9BQUEscUJBQUFBLE9BQUEsQ0FBQUMsU0FBQSxvQkFBQUQsT0FBQSxDQUFBQyxTQUFBLENBQUFHLElBQUEsMkJBQUFDLEtBQUEsb0NBQUFDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBQyxPQUFBLENBQUFDLElBQUEsQ0FBQVQsT0FBQSxDQUFBQyxTQUFBLENBQUFLLE9BQUEsOENBQUFJLENBQUE7QUFFYixJQUFNQyxLQUFLLEdBQUczQixPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLElBQU00QixJQUFJLEdBQUc1QixPQUFPLENBQUMsbUNBQW1DLENBQUM7QUFFekQsSUFBTTZCLHNCQUFzQixHQUFHN0IsT0FBTyxDQUFDLGlEQUFpRCxDQUFDO0FBQ3pGLElBQU04QixhQUF5QixHQUFHRCxzQkFBc0IsQ0FBQyxlQUFlLENBQUM7QUFFekUsU0FBU0UsY0FBY0EsQ0FBQ0MsYUFBeUIsRUFBRTtFQUFBLElBQzNDQyxjQUFjLGFBQUFDLGNBQUE7SUFBQSxJQUFBL0IsVUFBQSxDQUFBUyxPQUFBLEVBQUFxQixjQUFBLEVBQUFDLGNBQUE7SUFBQSxJQUFBQyxNQUFBLEdBQUE3QixZQUFBLENBQUEyQixjQUFBO0lBQUEsU0FBQUEsZUFBQTtNQUFBLElBQUFoQyxnQkFBQSxDQUFBVyxPQUFBLFFBQUFxQixjQUFBO01BQUEsT0FBQUUsTUFBQSxDQUFBaEIsS0FBQSxPQUFBRCxTQUFBO0lBQUE7SUFBQSxJQUFBaEIsYUFBQSxDQUFBVSxPQUFBLEVBQUFxQixjQUFBO01BQUFHLEdBQUE7TUFBQUMsS0FBQSxFQUNsQixTQUFBQyxPQUFBLEVBQThDO1FBQzVDLE9BQ0VYLEtBQUEsQ0FBQVksYUFBQSxDQUFDVCxhQUFhLEVBQUssSUFBSSxDQUFDVSxLQUFLLEVBQzFCLElBQUksQ0FBQ0EsS0FBSyxDQUFDQyxjQUFjLEVBQzFCZCxLQUFBLENBQUFZLGFBQUEsQ0FBQ1gsSUFBSSxRQUFFLElBQUksQ0FBQ1ksS0FBSyxDQUFDRSxRQUFRLENBQVEsQ0FDcEI7TUFFcEI7SUFBQztJQUFBLE9BQUFULGNBQUE7RUFBQSxFQVIwQkQsYUFBYTtFQVUxQyxPQUFPQyxjQUFjO0FBQ3ZCO0FBRUFVLE1BQU0sQ0FBQ0MsT0FBTyxHQUFJYixjQUEyQiJ9