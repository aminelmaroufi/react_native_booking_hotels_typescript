7b7ca66afa813d7c8f34412369f5e500
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Image = _interopRequireDefault(require("../image/Image"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Accessory = function Accessory(_a) {
  var _a$size = _a.size,
    size = _a$size === void 0 ? 10 : _a$size,
    style = _a.style,
    _a$underlayColor = _a.underlayColor,
    underlayColor = _a$underlayColor === void 0 ? '#000' : _a$underlayColor,
    onPress = _a.onPress,
    onLongPress = _a.onLongPress,
    source = _a.source,
    props = __rest(_a, ["size", "style", "underlayColor", "onPress", "onLongPress", "source"]);
  return _react.default.createElement(_reactNative.TouchableHighlight, {
    style: [styles.accessory, {
      width: size,
      height: size,
      borderRadius: size / 2
    }, style],
    underlayColor: underlayColor,
    onPress: onPress,
    onLongPress: onLongPress
  }, _react.default.createElement(_reactNative.View, null, source ? _react.default.createElement(_Image.default, (0, _extends2.default)({
    source: source,
    style: {
      width: size,
      height: size,
      borderRadius: size / 2
    }
  }, props)) : _react.default.createElement(_Icon.default, (0, _extends2.default)({
    name: "mode-edit",
    type: "material",
    color: "#fff",
    size: size * 0.8
  }, props))));
};
var styles = _reactNative.StyleSheet.create({
  accessory: (0, _extends2.default)({
    position: 'absolute',
    bottom: 0,
    right: 0,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#aaa'
  }, _reactNative.Platform.select({
    android: {
      elevation: 1
    },
    default: {
      shadowColor: '#000',
      shadowOffset: {
        width: 1,
        height: 1
      },
      shadowRadius: 2,
      shadowOpacity: 0.5
    }
  }))
});
var _default = (0, _config.withTheme)(Accessory, 'AvatarAccessory');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfSW1hZ2UiLCJfSWNvbiIsIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWNjZXNzb3J5IiwiX2EiLCJfYSRzaXplIiwic2l6ZSIsInN0eWxlIiwiX2EkdW5kZXJsYXlDb2xvciIsInVuZGVybGF5Q29sb3IiLCJvblByZXNzIiwib25Mb25nUHJlc3MiLCJzb3VyY2UiLCJwcm9wcyIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiVG91Y2hhYmxlSGlnaGxpZ2h0Iiwic3R5bGVzIiwiYWNjZXNzb3J5Iiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJWaWV3IiwiX2V4dGVuZHMyIiwibmFtZSIsInR5cGUiLCJjb2xvciIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJwb3NpdGlvbiIsImJvdHRvbSIsInJpZ2h0IiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwiYmFja2dyb3VuZENvbG9yIiwiUGxhdGZvcm0iLCJzZWxlY3QiLCJhbmRyb2lkIiwiZWxldmF0aW9uIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJzaGFkb3dSYWRpdXMiLCJzaGFkb3dPcGFjaXR5IiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQWNjZXNzb3J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUb3VjaGFibGVIaWdobGlnaHQsIFZpZXcsIFBsYXRmb3JtLCBTdHlsZVNoZWV0LCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IEltYWdlIGZyb20gJy4uL2ltYWdlL0ltYWdlJztcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb25zL0ljb24nO1xuY29uc3QgQWNjZXNzb3J5ID0gKF9hKSA9PiB7XG4gICAgdmFyIHsgc2l6ZSA9IDEwLCBzdHlsZSwgdW5kZXJsYXlDb2xvciA9ICcjMDAwJywgb25QcmVzcywgb25Mb25nUHJlc3MsIHNvdXJjZSB9ID0gX2EsIHByb3BzID0gX19yZXN0KF9hLCBbXCJzaXplXCIsIFwic3R5bGVcIiwgXCJ1bmRlcmxheUNvbG9yXCIsIFwib25QcmVzc1wiLCBcIm9uTG9uZ1ByZXNzXCIsIFwic291cmNlXCJdKTtcbiAgICByZXR1cm4gKDxUb3VjaGFibGVIaWdobGlnaHQgc3R5bGU9e1tcbiAgICAgICAgICAgIHN0eWxlcy5hY2Nlc3NvcnksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogc2l6ZSAvIDIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgIF19IHVuZGVybGF5Q29sb3I9e3VuZGVybGF5Q29sb3J9IG9uUHJlc3M9e29uUHJlc3N9IG9uTG9uZ1ByZXNzPXtvbkxvbmdQcmVzc30+XG4gICAgICA8Vmlldz5cbiAgICAgICAge3NvdXJjZSA/ICg8SW1hZ2Ugc291cmNlPXtzb3VyY2V9IHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogc2l6ZSAvIDIsXG4gICAgICAgICAgICB9fSB7Li4ucHJvcHN9Lz4pIDogKDxJY29uIG5hbWU9XCJtb2RlLWVkaXRcIiB0eXBlPVwibWF0ZXJpYWxcIiBjb2xvcj1cIiNmZmZcIiBzaXplPXtzaXplICogMC44fSB7Li4ucHJvcHN9Lz4pfVxuICAgICAgPC9WaWV3PlxuICAgIDwvVG91Y2hhYmxlSGlnaGxpZ2h0Pik7XG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGFjY2Vzc29yeTogT2JqZWN0LmFzc2lnbih7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBib3R0b206IDAsIHJpZ2h0OiAwLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLCBiYWNrZ3JvdW5kQ29sb3I6ICcjYWFhJyB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICBhbmRyb2lkOiB7XG4gICAgICAgICAgICBlbGV2YXRpb246IDEsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAnIzAwMCcsXG4gICAgICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgd2lkdGg6IDEsIGhlaWdodDogMSB9LFxuICAgICAgICAgICAgc2hhZG93UmFkaXVzOiAyLFxuICAgICAgICAgICAgc2hhZG93T3BhY2l0eTogMC41LFxuICAgICAgICB9LFxuICAgIH0pKSxcbn0pO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEFjY2Vzc29yeSwgJ0F2YXRhckFjY2Vzc29yeScpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLEtBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQWZBLElBQUlLLE1BQU0sR0FBSSxVQUFRLFNBQUtBLE1BQU0sSUFBSyxVQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJQyxDQUFDLElBQUlILENBQUMsRUFBRSxJQUFJSSxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDLElBQUlGLENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQy9FRCxDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHSCxDQUFDLENBQUNHLENBQUMsQ0FBQztFQUNmLElBQUlILENBQUMsSUFBSSxJQUFJLElBQUksT0FBT0ksTUFBTSxDQUFDSyxxQkFBcUIsS0FBSyxVQUFVLEVBQy9ELEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRVAsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFxQixDQUFDVCxDQUFDLENBQUMsRUFBRVUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQU0sRUFBRUQsQ0FB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