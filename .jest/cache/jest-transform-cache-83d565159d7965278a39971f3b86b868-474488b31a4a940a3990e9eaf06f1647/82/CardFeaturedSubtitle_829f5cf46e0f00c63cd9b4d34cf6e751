658a4bafd8f9ad29ed5fcdc899d020d8
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _normalizeText = _interopRequireDefault(require("../helpers/normalizeText"));
var _config = require("../config");
var _Text = _interopRequireDefault(require("../text/Text"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var CardFeaturedSubtitle = function CardFeaturedSubtitle(_a) {
  var _b;
  var theme = _a.theme,
    style = _a.style,
    props = __rest(_a, ["theme", "style"]);
  return _react.default.createElement(_Text.default, (0, _extends2.default)({
    style: _reactNative.StyleSheet.flatten([(0, _extends2.default)({
      fontSize: (0, _normalizeText.default)(13),
      marginBottom: 8,
      color: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.white
    }, _reactNative.Platform.select({
      android: (0, _extends2.default)({}, _config.fonts.android.black),
      default: {
        fontWeight: '400'
      }
    })), style])
  }, props));
};
var _default = (0, _config.withTheme)(CardFeaturedSubtitle, 'CardFeaturedSubtitle');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9ub3JtYWxpemVUZXh0IiwiX2NvbmZpZyIsIl9UZXh0IiwiX19yZXN0IiwicyIsImUiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJDYXJkRmVhdHVyZWRTdWJ0aXRsZSIsIl9hIiwiX2IiLCJ0aGVtZSIsInN0eWxlIiwicHJvcHMiLCJkZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsIl9leHRlbmRzMiIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwiZm9udFNpemUiLCJub3JtYWxpemUiLCJtYXJnaW5Cb3R0b20iLCJjb2xvciIsImNvbG9ycyIsIndoaXRlIiwiUGxhdGZvcm0iLCJzZWxlY3QiLCJhbmRyb2lkIiwiZm9udHMiLCJibGFjayIsImZvbnRXZWlnaHQiLCJfZGVmYXVsdCIsIndpdGhUaGVtZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJDYXJkRmVhdHVyZWRTdWJ0aXRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUGxhdGZvcm0sIFN0eWxlU2hlZXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IG5vcm1hbGl6ZSBmcm9tICcuLi9oZWxwZXJzL25vcm1hbGl6ZVRleHQnO1xuaW1wb3J0IHsgZm9udHMsIHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgVGV4dCBmcm9tICcuLi90ZXh0L1RleHQnO1xuY29uc3QgQ2FyZEZlYXR1cmVkU3VidGl0bGUgPSAoX2EpID0+IHtcbiAgICB2YXIgX2I7XG4gICAgdmFyIHsgdGhlbWUsIHN0eWxlIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcInRoZW1lXCIsIFwic3R5bGVcIl0pO1xuICAgIHJldHVybiAoPFRleHQgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHsgZm9udFNpemU6IG5vcm1hbGl6ZSgxMyksIG1hcmdpbkJvdHRvbTogOCwgY29sb3I6IChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi53aGl0ZSB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICAgICAgICAgIGFuZHJvaWQ6IE9iamVjdC5hc3NpZ24oe30sIGZvbnRzLmFuZHJvaWQuYmxhY2spLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogJzQwMCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICBdKX0gey4uLnByb3BzfS8+KTtcbn07XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQ2FyZEZlYXR1cmVkU3VidGl0bGUsICdDYXJkRmVhdHVyZWRTdWJ0aXRsZScpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGNBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLE9BQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLEtBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQWZBLElBQUlLLE1BQU0sR0FBSSxVQUFRLFNBQUtBLE1BQU0sSUFBSyxVQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJQyxDQUFDLElBQUlILENBQUMsRUFBRSxJQUFJSSxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDLElBQUlGLENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQy9FRCxDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHSCxDQUFDLENBQUNHLENBQUMsQ0FBQztFQUNmLElBQUlILENBQUMsSUFBSSxJQUFJLElBQUksT0FBT0ksTUFBTSxDQUFDSyxxQkFBcUIsS0FBSyxVQUFVLEVBQy9ELEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRVAsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFxQixDQUFDVCxDQUFDLENBQUMsRUFBRVUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDcEUsSUFBSVQsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUlOLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDTyxvQkFBb0IsQ0FBQ0wsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsRUFDMUVSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxHQUFHVixDQUFDLENBQUNHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUM7RUFDekI7RUFDSixPQUFPUixDQUFDO0FBQ1osQ0FBQztBQU1ELElBQU1XLG9CQUFvQixHQUFHLFNBQXZCQSxvQkFBb0JBLENBQUlDLEVBQUUsRUFBSztFQUNqQyxJQUFJQyxFQUFFO0VBQ04sSUFBTUMsS0FBSyxHQUFZRixFQUFFLENBQW5CRSxLQUFLO0lBQUVDLEtBQUssR0FBS0gsRUFBRSxDQUFaRyxLQUFLO0lBQVNDLEtBQUssR0FBR25CLE1BQU0sQ0FBQ2UsRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0VBQ2pFLE9BQVF0QixNQUFBLENBQUEyQixPQUFBLENBQUFDLGFBQUEsQ0FBQ3RCLEtBQUEsQ0FBQXFCLE9BQUksTUFBQUUsU0FBQSxDQUFBRixPQUFBO0lBQUNGLEtBQUssRUFBRUssdUJBQVUsQ0FBQ0MsT0FBTyxDQUFDLENBQ2hDLElBQUFGLFNBQUEsQ0FBQUYsT0FBQSxFQUFjO01BQUVLLFFBQVEsRUFBRSxJQUFBQyxzQkFBUyxFQUFDLEVBQUUsQ0FBQztNQUFFQyxZQUFZLEVBQUUsQ0FBQztNQUFFQyxLQUFLLEVBQUUsQ0FBQ1osRUFBRSxHQUFHQyxLQUFLLEtBQUssSUFBSSxJQUFJQSxLQUFLLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEtBQUssQ0FBQ1ksTUFBTSxNQUFNLElBQUksSUFBSWIsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNjO0lBQU0sQ0FBQyxFQUFFQyxxQkFBUSxDQUFDQyxNQUFNLENBQUM7TUFDaE1DLE9BQU8sRUFBRSxJQUFBWCxTQUFBLENBQUFGLE9BQUEsRUFBYyxDQUFDLENBQUMsRUFBRWMsYUFBSyxDQUFDRCxPQUFPLENBQUNFLEtBQUssQ0FBQztNQUMvQ2YsT0FBTyxFQUFFO1FBQ0xnQixVQUFVLEVBQUU7TUFDaEI7SUFDSixDQUFDLENBQUMsQ0FBQyxFQUNIbEIsS0FBSyxDQUNSO0VBQUUsR0FBS0MsS0FBSyxFQUFHO0FBQ3hCLENBQUM7QUFBQyxJQUFBa0IsUUFBQSxHQUNhLElBQUFDLGlCQUFTLEVBQUN4QixvQkFBb0IsRUFBRSxzQkFBc0IsQ0FBQztBQUFBeUIsT0FBQSxDQUFBbkIsT0FBQSxHQUFBaUIsUUFBQSJ9