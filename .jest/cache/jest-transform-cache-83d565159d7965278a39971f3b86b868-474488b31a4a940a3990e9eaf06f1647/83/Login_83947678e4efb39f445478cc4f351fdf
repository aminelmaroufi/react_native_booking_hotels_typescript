a65ca505dc1e9f2b3e881a98e6ebae20
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var components_1 = require("@ui-kitten/components");
var react_native_elements_1 = require("react-native-elements");
var FontAwesome_1 = __importDefault(require("react-native-vector-icons/FontAwesome"));
var react_redux_1 = require("react-redux");
var actions_1 = require("../redux/actions");
var actionTypes_1 = require("../utils/actionTypes");
var Login = function Login() {
  var passwordRef = null;
  var dispatch = (0, react_redux_1.useDispatch)();
  var _ref = (0, react_1.useState)(''),
    _ref2 = (0, _slicedToArray2.default)(_ref, 2),
    email = _ref2[0],
    setEmail = _ref2[1];
  var _ref3 = (0, react_1.useState)(''),
    _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
    password = _ref4[0],
    setPassword = _ref4[1];
  var _ref5 = (0, react_1.useState)(''),
    _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
    selectedField = _ref6[0],
    setSelectedField = _ref6[1];
  var _ref7 = (0, react_1.useState)(true),
    _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
    secureTextEntry = _ref8[0],
    setSecureTextEntry = _ref8[1];
  var _ref9 = (0, react_1.useState)(null),
    _ref10 = (0, _slicedToArray2.default)(_ref9, 2),
    isValid = _ref10[0],
    setIsValid = _ref10[1];
  var _ref11 = (0, react_1.useState)(null),
    _ref12 = (0, _slicedToArray2.default)(_ref11, 2),
    emailIsValid = _ref12[0],
    setEmailIsValid = _ref12[1];
  var _ref13 = (0, react_1.useState)(null),
    _ref14 = (0, _slicedToArray2.default)(_ref13, 2),
    emailValueIsValid = _ref14[0],
    setEmailValueIsValid = _ref14[1];
  var _ref15 = (0, react_1.useState)(null),
    _ref16 = (0, _slicedToArray2.default)(_ref15, 2),
    pwdIsValid = _ref16[0],
    setPwdIsValid = _ref16[1];
  var renderPasswordIcon = function renderPasswordIcon() {
    return React.createElement(react_native_1.TouchableWithoutFeedback, {
      onPress: toggleSecureEntry
    }, React.createElement(FontAwesome_1.default, {
      name: secureTextEntry ? 'eye-slash' : 'eye',
      size: 20
    }));
  };
  var renderValidInputIcon = function renderValidInputIcon() {
    return React.createElement(react_native_1.TouchableWithoutFeedback, {
      onPress: toggleSecureEntry
    }, React.createElement(FontAwesome_1.default, {
      name: 'check-circle',
      size: 20,
      color: 'green'
    }));
  };
  var renderInvalidInputIcon = function renderInvalidInputIcon() {
    return React.createElement(react_native_1.TouchableWithoutFeedback, {
      onPress: toggleSecureEntry
    }, React.createElement(FontAwesome_1.default, {
      name: 'exclamation-circle',
      size: 20,
      color: '#ff375d'
    }));
  };
  var toggleSecureEntry = function toggleSecureEntry() {
    setSecureTextEntry(!secureTextEntry);
  };
  var updateFields = function updateFields(field, value) {
    if (field === 'email') {
      setEmail(value);
    } else {
      setPassword(value);
    }
    setSelectedField(field);
  };
  var validateFields = function validateFields() {
    switch (selectedField) {
      case 'email':
        {
          var emailValid = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email);
          if (email) {
            setEmailIsValid(true);
            if (email && !emailValid) {
              setEmailValueIsValid(false);
            } else if (emailValid) {
              setEmailValueIsValid(true);
            }
          } else {
            setEmailValueIsValid(null);
            setEmailIsValid(false);
          }
          break;
        }
      case 'password':
        {
          if (password) {
            setPwdIsValid(true);
          } else {
            setPwdIsValid(false);
          }
          break;
        }
      default:
        break;
    }
  };
  (0, react_1.useEffect)(function () {
    validateFields();
  }, [email, password]);
  var login = function login() {
    dispatch((0, actions_1.loginRequest)(email, password));
  };
  (0, react_1.useEffect)(function () {
    var validateForm = function validateForm() {
      if (pwdIsValid && emailIsValid && emailValueIsValid) {
        setIsValid(true);
      } else {
        setIsValid(false);
      }
    };
    validateForm();
  }, [emailIsValid, emailValueIsValid, pwdIsValid]);
  return React.createElement(components_1.Layout, {
    style: styles.container
  }, React.createElement(react_native_1.Image, {
    testID: "logo",
    source: require('../assets/logo.png'),
    style: styles.logo
  }), React.createElement(react_native_1.View, {
    style: styles.form
  }, React.createElement(react_native_1.View, {
    style: styles.inputContainer
  }, React.createElement(components_1.Input, {
    testID: "email",
    autoFocus: true,
    label: "Email Address",
    placeholder: "Place your email address",
    placeholderTextColor: "#000",
    keyboardType: "email-address",
    status: emailIsValid && emailValueIsValid ? 'success' : emailIsValid === false || emailValueIsValid === false ? 'danger' : 'basic',
    accessoryRight: emailIsValid && emailValueIsValid ? renderValidInputIcon : emailIsValid === false || emailValueIsValid === false ? renderInvalidInputIcon : null,
    value: email,
    onChangeText: function onChangeText(text) {
      return updateFields('email', text);
    },
    onSubmitEditing: function onSubmitEditing() {
      return passwordRef.focus();
    }
  }), emailIsValid === false && React.createElement(react_native_1.View, {
    style: styles.errorContainer
  }, React.createElement(FontAwesome_1.default, {
    name: "exclamation-triangle",
    color: '#ff375d',
    size: 8,
    style: styles.errorIcon
  }), React.createElement(react_native_1.Text, {
    style: styles.errorStyle
  }, actionTypes_1.LoginFormMessages.email)), emailValueIsValid === false && React.createElement(react_native_1.View, {
    style: styles.errorContainer
  }, React.createElement(FontAwesome_1.default, {
    name: "exclamation-triangle",
    color: '#ff375d',
    size: 8,
    style: styles.errorIcon
  }), React.createElement(react_native_1.Text, {
    style: styles.errorStyle
  }, actionTypes_1.LoginFormMessages.emailNotValid))), React.createElement(react_native_1.View, {
    style: styles.inputContainer
  }, React.createElement(components_1.Input, {
    testID: "password",
    ref: function ref(_ref17) {
      return passwordRef = _ref17;
    },
    label: "Password",
    placeholder: "Place your password",
    placeholderTextColor: "#000",
    secureTextEntry: secureTextEntry,
    accessoryRight: renderPasswordIcon,
    value: password,
    status: pwdIsValid ? 'success' : pwdIsValid === false ? 'danger' : 'basic',
    onChangeText: function onChangeText(text) {
      return updateFields('password', text);
    },
    onSubmitEditing: function onSubmitEditing() {
      return login();
    }
  }), pwdIsValid === false && React.createElement(react_native_1.View, {
    style: styles.errorContainer
  }, React.createElement(FontAwesome_1.default, {
    name: "exclamation-triangle",
    color: '#ff375d',
    size: 8,
    style: styles.errorIcon
  }), React.createElement(react_native_1.Text, {
    style: styles.errorStyle
  }, actionTypes_1.LoginFormMessages.password))), React.createElement(react_native_1.View, {
    style: styles.buttonContainer
  }, React.createElement(react_native_elements_1.Button, {
    testID: "login-btn",
    title: 'Login',
    containerStyle: {
      width: 'auto'
    },
    buttonStyle: styles.button,
    titleStyle: styles.textButton,
    type: "solid",
    disabled: !isValid,
    onPress: function onPress() {
      return login();
    }
  }))));
};
var styles = react_native_1.StyleSheet.create({
  container: {
    flex: 1,
    alignContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
    paddingTop: 40
  },
  logo: {
    height: 200,
    width: 400,
    marginBottom: 100
  },
  form: {
    flex: 1
  },
  row: {
    flexDirection: 'row',
    padding: 10
  },
  inputContainer: {
    width: 300,
    marginBottom: 25
  },
  textInput: {
    fontSize: 16
  },
  buttonContainer: {
    marginTop: 10
  },
  button: {
    backgroundColor: '#2756a1',
    borderRadius: 10,
    width: '100%',
    height: 50
  },
  textButton: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center'
  },
  errorContainer: {
    flexDirection: 'row',
    marginTop: 5,
    paddingLeft: 10
  },
  errorIcon: {
    paddingTop: 4
  },
  errorStyle: {
    fontSize: 12,
    marginLeft: 3,
    color: '#ff375d'
  }
});
exports.default = Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnRTdGFyIiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiY29tcG9uZW50c18xIiwicmVhY3RfbmF0aXZlX2VsZW1lbnRzXzEiLCJGb250QXdlc29tZV8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVhY3RfcmVkdXhfMSIsImFjdGlvbnNfMSIsImFjdGlvblR5cGVzXzEiLCJMb2dpbiIsInBhc3N3b3JkUmVmIiwiZGlzcGF0Y2giLCJ1c2VEaXNwYXRjaCIsIl9yZWYiLCJ1c2VTdGF0ZSIsIl9yZWYyIiwiX3NsaWNlZFRvQXJyYXkyIiwiZGVmYXVsdCIsImVtYWlsIiwic2V0RW1haWwiLCJfcmVmMyIsIl9yZWY0IiwicGFzc3dvcmQiLCJzZXRQYXNzd29yZCIsIl9yZWY1IiwiX3JlZjYiLCJzZWxlY3RlZEZpZWxkIiwic2V0U2VsZWN0ZWRGaWVsZCIsIl9yZWY3IiwiX3JlZjgiLCJzZWN1cmVUZXh0RW50cnkiLCJzZXRTZWN1cmVUZXh0RW50cnkiLCJfcmVmOSIsIl9yZWYxMCIsImlzVmFsaWQiLCJzZXRJc1ZhbGlkIiwiX3JlZjExIiwiX3JlZjEyIiwiZW1haWxJc1ZhbGlkIiwic2V0RW1haWxJc1ZhbGlkIiwiX3JlZjEzIiwiX3JlZjE0IiwiZW1haWxWYWx1ZUlzVmFsaWQiLCJzZXRFbWFpbFZhbHVlSXNWYWxpZCIsIl9yZWYxNSIsIl9yZWYxNiIsInB3ZElzVmFsaWQiLCJzZXRQd2RJc1ZhbGlkIiwicmVuZGVyUGFzc3dvcmRJY29uIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwiVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIiwib25QcmVzcyIsInRvZ2dsZVNlY3VyZUVudHJ5IiwibmFtZSIsInNpemUiLCJyZW5kZXJWYWxpZElucHV0SWNvbiIsImNvbG9yIiwicmVuZGVySW52YWxpZElucHV0SWNvbiIsInVwZGF0ZUZpZWxkcyIsImZpZWxkIiwidmFsdWUiLCJ2YWxpZGF0ZUZpZWxkcyIsImVtYWlsVmFsaWQiLCJ0ZXN0IiwidXNlRWZmZWN0IiwibG9naW4iLCJsb2dpblJlcXVlc3QiLCJ2YWxpZGF0ZUZvcm0iLCJMYXlvdXQiLCJzdHlsZSIsInN0eWxlcyIsImNvbnRhaW5lciIsIkltYWdlIiwidGVzdElEIiwic291cmNlIiwibG9nbyIsIlZpZXciLCJmb3JtIiwiaW5wdXRDb250YWluZXIiLCJJbnB1dCIsImF1dG9Gb2N1cyIsImxhYmVsIiwicGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlclRleHRDb2xvciIsImtleWJvYXJkVHlwZSIsInN0YXR1cyIsImFjY2Vzc29yeVJpZ2h0Iiwib25DaGFuZ2VUZXh0IiwidGV4dCIsIm9uU3VibWl0RWRpdGluZyIsImZvY3VzIiwiZXJyb3JDb250YWluZXIiLCJlcnJvckljb24iLCJUZXh0IiwiZXJyb3JTdHlsZSIsIkxvZ2luRm9ybU1lc3NhZ2VzIiwiZW1haWxOb3RWYWxpZCIsInJlZiIsImJ1dHRvbkNvbnRhaW5lciIsIkJ1dHRvbiIsInRpdGxlIiwiY29udGFpbmVyU3R5bGUiLCJ3aWR0aCIsImJ1dHRvblN0eWxlIiwiYnV0dG9uIiwidGl0bGVTdHlsZSIsInRleHRCdXR0b24iLCJ0eXBlIiwiZGlzYWJsZWQiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZmxleCIsImFsaWduQ29udGVudCIsImFsaWduSXRlbXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwYWRkaW5nVG9wIiwiaGVpZ2h0IiwibWFyZ2luQm90dG9tIiwicm93IiwiZmxleERpcmVjdGlvbiIsInBhZGRpbmciLCJ0ZXh0SW5wdXQiLCJmb250U2l6ZSIsIm1hcmdpblRvcCIsImJvcmRlclJhZGl1cyIsImZvbnRXZWlnaHQiLCJ0ZXh0QWxpZ24iLCJwYWRkaW5nTGVmdCIsIm1hcmdpbkxlZnQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL1VzZXJzL0FtaW5lL0Rlc2t0b3AvcHJvamVjdHMvQm9va2luZ0hvdGVsc0FwcC9zcmMvc2NyZWVucy9Mb2dpbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgU3R5bGVTaGVldCxcbiAgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLFxuICBUZXh0LFxuICBWaWV3LFxuICBJbWFnZSxcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7TGF5b3V0LCBJbnB1dH0gZnJvbSAnQHVpLWtpdHRlbi9jb21wb25lbnRzJztcbmltcG9ydCB7QnV0dG9ufSBmcm9tICdyZWFjdC1uYXRpdmUtZWxlbWVudHMnO1xuaW1wb3J0IEljb24gZnJvbSAncmVhY3QtbmF0aXZlLXZlY3Rvci1pY29ucy9Gb250QXdlc29tZSc7XG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjayc7XG5pbXBvcnQge3VzZURpc3BhdGNofSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1Jvb3RTdGF0ZX0gZnJvbSAnLi4vcmVkdXgvcmVkdWNlcnMnO1xuaW1wb3J0IHtsb2dpblJlcXVlc3R9IGZyb20gJy4uL3JlZHV4L2FjdGlvbnMnO1xuaW1wb3J0IHtMb2dpbkZvcm1NZXNzYWdlc30gZnJvbSAnLi4vdXRpbHMvYWN0aW9uVHlwZXMnO1xuXG5jb25zdCBMb2dpbjogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGxldCBwYXNzd29yZFJlZjogYW55ID0gbnVsbDtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBbZW1haWwsIHNldEVtYWlsXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3Bhc3N3b3JkLCBzZXRQYXNzd29yZF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtzZWxlY3RlZEZpZWxkLCBzZXRTZWxlY3RlZEZpZWxkXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3NlY3VyZVRleHRFbnRyeSwgc2V0U2VjdXJlVGV4dEVudHJ5XSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbaXNWYWxpZCwgc2V0SXNWYWxpZF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2VtYWlsSXNWYWxpZCwgc2V0RW1haWxJc1ZhbGlkXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbZW1haWxWYWx1ZUlzVmFsaWQsIHNldEVtYWlsVmFsdWVJc1ZhbGlkXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbcHdkSXNWYWxpZCwgc2V0UHdkSXNWYWxpZF0gPSB1c2VTdGF0ZShudWxsKTtcblxuICBjb25zdCByZW5kZXJQYXNzd29yZEljb24gPSAoKSA9PiAoXG4gICAgPFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayBvblByZXNzPXt0b2dnbGVTZWN1cmVFbnRyeX0+XG4gICAgICA8SWNvbiBuYW1lPXtzZWN1cmVUZXh0RW50cnkgPyAnZXllLXNsYXNoJyA6ICdleWUnfSBzaXplPXsyMH0gLz5cbiAgICA8L1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaz5cbiAgKTtcblxuICBjb25zdCByZW5kZXJWYWxpZElucHV0SWNvbiA9ICgpID0+IChcbiAgICA8VG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIG9uUHJlc3M9e3RvZ2dsZVNlY3VyZUVudHJ5fT5cbiAgICAgIDxJY29uIG5hbWU9eydjaGVjay1jaXJjbGUnfSBzaXplPXsyMH0gY29sb3I9eydncmVlbid9IC8+XG4gICAgPC9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2s+XG4gICk7XG5cbiAgY29uc3QgcmVuZGVySW52YWxpZElucHV0SWNvbiA9ICgpID0+IChcbiAgICA8VG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIG9uUHJlc3M9e3RvZ2dsZVNlY3VyZUVudHJ5fT5cbiAgICAgIDxJY29uIG5hbWU9eydleGNsYW1hdGlvbi1jaXJjbGUnfSBzaXplPXsyMH0gY29sb3I9eycjZmYzNzVkJ30gLz5cbiAgICA8L1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaz5cbiAgKTtcblxuICBjb25zdCB0b2dnbGVTZWN1cmVFbnRyeSA9ICgpID0+IHtcbiAgICBzZXRTZWN1cmVUZXh0RW50cnkoIXNlY3VyZVRleHRFbnRyeSk7XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlRmllbGRzID0gKGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoZmllbGQgPT09ICdlbWFpbCcpIHtcbiAgICAgIHNldEVtYWlsKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0UGFzc3dvcmQodmFsdWUpO1xuICAgIH1cbiAgICBzZXRTZWxlY3RlZEZpZWxkKGZpZWxkKTtcbiAgfTtcblxuICBjb25zdCB2YWxpZGF0ZUZpZWxkcyA9ICgpID0+IHtcbiAgICBzd2l0Y2ggKHNlbGVjdGVkRmllbGQpIHtcbiAgICAgIGNhc2UgJ2VtYWlsJzoge1xuICAgICAgICBjb25zdCBlbWFpbFZhbGlkID0gL15cXHcrKFtcXC4tXT9cXHcrKSpAXFx3KyhbXFwuLV0/XFx3KykqKFxcLlxcd3syLDN9KSskLy50ZXN0KFxuICAgICAgICAgIGVtYWlsLFxuICAgICAgICApO1xuICAgICAgICBpZiAoZW1haWwpIHtcbiAgICAgICAgICBzZXRFbWFpbElzVmFsaWQodHJ1ZSk7XG5cbiAgICAgICAgICBpZiAoZW1haWwgJiYgIWVtYWlsVmFsaWQpIHtcbiAgICAgICAgICAgIHNldEVtYWlsVmFsdWVJc1ZhbGlkKGZhbHNlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGVtYWlsVmFsaWQpIHtcbiAgICAgICAgICAgIHNldEVtYWlsVmFsdWVJc1ZhbGlkKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRFbWFpbFZhbHVlSXNWYWxpZChudWxsKTtcbiAgICAgICAgICBzZXRFbWFpbElzVmFsaWQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAncGFzc3dvcmQnOiB7XG4gICAgICAgIGlmIChwYXNzd29yZCkge1xuICAgICAgICAgIHNldFB3ZElzVmFsaWQodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0UHdkSXNWYWxpZChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB2YWxpZGF0ZUZpZWxkcygpO1xuICB9LCBbZW1haWwsIHBhc3N3b3JkXSk7XG5cbiAgY29uc3QgbG9naW4gPSAoKSA9PiB7XG4gICAgZGlzcGF0Y2gobG9naW5SZXF1ZXN0KGVtYWlsLCBwYXNzd29yZCkpO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdmFsaWRhdGVGb3JtID0gKCkgPT4ge1xuICAgICAgaWYgKHB3ZElzVmFsaWQgJiYgZW1haWxJc1ZhbGlkICYmIGVtYWlsVmFsdWVJc1ZhbGlkKSB7XG4gICAgICAgIHNldElzVmFsaWQodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRJc1ZhbGlkKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhbGlkYXRlRm9ybSgpO1xuICB9LCBbZW1haWxJc1ZhbGlkLCBlbWFpbFZhbHVlSXNWYWxpZCwgcHdkSXNWYWxpZF0pO1xuXG4gIHJldHVybiAoXG4gICAgPExheW91dCBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICA8SW1hZ2VcbiAgICAgICAgdGVzdElEPVwibG9nb1wiXG4gICAgICAgIHNvdXJjZT17cmVxdWlyZSgnLi4vYXNzZXRzL2xvZ28ucG5nJyl9XG4gICAgICAgIHN0eWxlPXtzdHlsZXMubG9nb31cbiAgICAgIC8+XG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmZvcm19PlxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmlucHV0Q29udGFpbmVyfT5cbiAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgIHRlc3RJRD1cImVtYWlsXCJcbiAgICAgICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICAgICAgbGFiZWw9XCJFbWFpbCBBZGRyZXNzXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiUGxhY2UgeW91ciBlbWFpbCBhZGRyZXNzXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyVGV4dENvbG9yPVwiIzAwMFwiXG4gICAgICAgICAgICBrZXlib2FyZFR5cGU9XCJlbWFpbC1hZGRyZXNzXCJcbiAgICAgICAgICAgIHN0YXR1cz17XG4gICAgICAgICAgICAgIGVtYWlsSXNWYWxpZCAmJiBlbWFpbFZhbHVlSXNWYWxpZFxuICAgICAgICAgICAgICAgID8gJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgICAgOiBlbWFpbElzVmFsaWQgPT09IGZhbHNlIHx8IGVtYWlsVmFsdWVJc1ZhbGlkID09PSBmYWxzZVxuICAgICAgICAgICAgICAgID8gJ2RhbmdlcidcbiAgICAgICAgICAgICAgICA6ICdiYXNpYydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjY2Vzc29yeVJpZ2h0PXtcbiAgICAgICAgICAgICAgZW1haWxJc1ZhbGlkICYmIGVtYWlsVmFsdWVJc1ZhbGlkXG4gICAgICAgICAgICAgICAgPyByZW5kZXJWYWxpZElucHV0SWNvblxuICAgICAgICAgICAgICAgIDogZW1haWxJc1ZhbGlkID09PSBmYWxzZSB8fCBlbWFpbFZhbHVlSXNWYWxpZCA9PT0gZmFsc2VcbiAgICAgICAgICAgICAgICA/IHJlbmRlckludmFsaWRJbnB1dEljb25cbiAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlPXtlbWFpbH1cbiAgICAgICAgICAgIG9uQ2hhbmdlVGV4dD17dGV4dCA9PiB1cGRhdGVGaWVsZHMoJ2VtYWlsJywgdGV4dCl9XG4gICAgICAgICAgICBvblN1Ym1pdEVkaXRpbmc9eygpID0+IHBhc3N3b3JkUmVmLmZvY3VzKCl9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7ZW1haWxJc1ZhbGlkID09PSBmYWxzZSAmJiAoXG4gICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmVycm9yQ29udGFpbmVyfT5cbiAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICBuYW1lPVwiZXhjbGFtYXRpb24tdHJpYW5nbGVcIlxuICAgICAgICAgICAgICAgIGNvbG9yPXsnI2ZmMzc1ZCd9XG4gICAgICAgICAgICAgICAgc2l6ZT17OH1cbiAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmVycm9ySWNvbn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5lcnJvclN0eWxlfT57TG9naW5Gb3JtTWVzc2FnZXMuZW1haWx9PC9UZXh0PlxuICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICl9XG4gICAgICAgICAge2VtYWlsVmFsdWVJc1ZhbGlkID09PSBmYWxzZSAmJiAoXG4gICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmVycm9yQ29udGFpbmVyfT5cbiAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICBuYW1lPVwiZXhjbGFtYXRpb24tdHJpYW5nbGVcIlxuICAgICAgICAgICAgICAgIGNvbG9yPXsnI2ZmMzc1ZCd9XG4gICAgICAgICAgICAgICAgc2l6ZT17OH1cbiAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmVycm9ySWNvbn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5lcnJvclN0eWxlfT5cbiAgICAgICAgICAgICAgICB7TG9naW5Gb3JtTWVzc2FnZXMuZW1haWxOb3RWYWxpZH1cbiAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvVmlldz5cbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5pbnB1dENvbnRhaW5lcn0+XG4gICAgICAgICAgPElucHV0XG4gICAgICAgICAgICB0ZXN0SUQ9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICByZWY9e3JlZiA9PiAocGFzc3dvcmRSZWYgPSByZWYpfVxuICAgICAgICAgICAgbGFiZWw9XCJQYXNzd29yZFwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlBsYWNlIHlvdXIgcGFzc3dvcmRcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXJUZXh0Q29sb3I9XCIjMDAwXCJcbiAgICAgICAgICAgIHNlY3VyZVRleHRFbnRyeT17c2VjdXJlVGV4dEVudHJ5fVxuICAgICAgICAgICAgYWNjZXNzb3J5UmlnaHQ9e3JlbmRlclBhc3N3b3JkSWNvbn1cbiAgICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cbiAgICAgICAgICAgIHN0YXR1cz17XG4gICAgICAgICAgICAgIHB3ZElzVmFsaWQgPyAnc3VjY2VzcycgOiBwd2RJc1ZhbGlkID09PSBmYWxzZSA/ICdkYW5nZXInIDogJ2Jhc2ljJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25DaGFuZ2VUZXh0PXt0ZXh0ID0+IHVwZGF0ZUZpZWxkcygncGFzc3dvcmQnLCB0ZXh0KX1cbiAgICAgICAgICAgIG9uU3VibWl0RWRpdGluZz17KCkgPT4gbG9naW4oKX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtwd2RJc1ZhbGlkID09PSBmYWxzZSAmJiAoXG4gICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmVycm9yQ29udGFpbmVyfT5cbiAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICBuYW1lPVwiZXhjbGFtYXRpb24tdHJpYW5nbGVcIlxuICAgICAgICAgICAgICAgIGNvbG9yPXsnI2ZmMzc1ZCd9XG4gICAgICAgICAgICAgICAgc2l6ZT17OH1cbiAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmVycm9ySWNvbn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5lcnJvclN0eWxlfT5cbiAgICAgICAgICAgICAgICB7TG9naW5Gb3JtTWVzc2FnZXMucGFzc3dvcmR9XG4gICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1ZpZXc+XG5cbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5idXR0b25Db250YWluZXJ9PlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIHRlc3RJRD1cImxvZ2luLWJ0blwiXG4gICAgICAgICAgICB0aXRsZT17J0xvZ2luJ31cbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlPXt7d2lkdGg6ICdhdXRvJ319XG4gICAgICAgICAgICBidXR0b25TdHlsZT17c3R5bGVzLmJ1dHRvbn1cbiAgICAgICAgICAgIHRpdGxlU3R5bGU9e3N0eWxlcy50ZXh0QnV0dG9ufVxuICAgICAgICAgICAgdHlwZT1cInNvbGlkXCJcbiAgICAgICAgICAgIGRpc2FibGVkPXshaXNWYWxpZH1cbiAgICAgICAgICAgIG9uUHJlc3M9eygpID0+IGxvZ2luKCl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9WaWV3PlxuICAgIDwvTGF5b3V0PlxuICApO1xufTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBmbGV4OiAxLFxuICAgIGFsaWduQ29udGVudDogJ2NlbnRlcicsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXG4gICAgLy8gcGFkZGluZzogMTAsXG4gICAgcGFkZGluZ1RvcDogNDAsXG4gIH0sXG4gIGxvZ286IHtcbiAgICBoZWlnaHQ6IDIwMCxcbiAgICB3aWR0aDogNDAwLFxuICAgIG1hcmdpbkJvdHRvbTogMTAwLFxuICB9LFxuICBmb3JtOiB7XG4gICAgZmxleDogMSxcbiAgfSxcbiAgcm93OiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgcGFkZGluZzogMTAsXG4gIH0sXG4gIGlucHV0Q29udGFpbmVyOiB7XG4gICAgd2lkdGg6IDMwMCxcbiAgICBtYXJnaW5Cb3R0b206IDI1LFxuICB9LFxuICB0ZXh0SW5wdXQ6IHtcbiAgICBmb250U2l6ZTogMTYsXG4gIH0sXG4gIGJ1dHRvbkNvbnRhaW5lcjoge21hcmdpblRvcDogMTB9LFxuICBidXR0b246IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMjc1NmExJyxcbiAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiA1MCxcbiAgfSxcbiAgdGV4dEJ1dHRvbjoge1xuICAgIGNvbG9yOiAnI2ZmZicsXG4gICAgZm9udFNpemU6IDE2LFxuICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIH0sXG4gIGVycm9yQ29udGFpbmVyOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgbWFyZ2luVG9wOiA1LFxuICAgIHBhZGRpbmdMZWZ0OiAxMCxcbiAgfSxcbiAgZXJyb3JJY29uOiB7XG4gICAgcGFkZGluZ1RvcDogNCxcbiAgfSxcbiAgZXJyb3JTdHlsZToge1xuICAgIGZvbnRTaXplOiAxMixcbiAgICBtYXJnaW5MZWZ0OiAzLFxuICAgIGNvbG9yOiAnI2ZmMzc1ZCcsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgTG9naW47XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLFlBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQU9BLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLHVCQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxhQUFBLEdBQUFDLGVBQUEsQ0FBQUwsT0FBQTtBQUVBLElBQUFNLGFBQUEsR0FBQU4sT0FBQTtBQUVBLElBQUFPLFNBQUEsR0FBQVAsT0FBQTtBQUNBLElBQUFRLGFBQUEsR0FBQVIsT0FBQTtBQUVBLElBQU1T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