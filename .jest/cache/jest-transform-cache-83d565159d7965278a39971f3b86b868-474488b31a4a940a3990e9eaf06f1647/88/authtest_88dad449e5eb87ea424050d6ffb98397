991222c8deb17b1f9202e23007a3d48e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _actionTypes = _interopRequireDefault(require("../../../utils/actionTypes"));
var _auth = _interopRequireDefault(require("../auth"));
var _user = require("../../../models/user");
var defaultState = {
  fetching: false,
  isLoggedIn: false,
  message: '',
  error: false,
  user: _user.emptyUser,
  success: false
};
var noAction = {
  type: '',
  payload: null
};
var error_message = 'Error from API';
var success_message = 'Succes message from API';
describe('Test auth reducer', function () {
  it('should return the initial state when state is undefined', function () {
    expect((0, _auth.default)(undefined, noAction)).toEqual(defaultState);
  });
  it("should handle the 'API_CALL_REQUEST' action", function () {
    var expectedState = (0, _extends2.default)({}, defaultState, {
      fetching: true
    });
    var fecthPayload = {
      type: _actionTypes.default.API_CALL_REQUEST,
      payload: (0, _extends2.default)({}, defaultState, {
        fetching: true
      })
    };
    expect((0, _auth.default)(undefined, fecthPayload)).toEqual(expectedState);
  });
  it("should handle the 'API_CALL_SUCCESS' action", function () {
    var expectedState = (0, _extends2.default)({}, defaultState, {
      success: true
    });
    var fecthSuccessPayload = {
      type: _actionTypes.default.API_CALL_SUCCESS,
      payload: {
        fetching: false,
        success: true
      }
    };
    expect((0, _auth.default)(undefined, fecthSuccessPayload)).toEqual(expectedState);
  });
  it("should handle the 'API_CALL_FAILURE' action", function () {
    var expectedState = (0, _extends2.default)({}, defaultState, {
      error: true,
      message: error_message
    });
    var fecthFailurePayload = {
      type: _actionTypes.default.API_CALL_FAILURE,
      payload: {
        fetching: false,
        error: true,
        message: error_message
      }
    };
    expect((0, _auth.default)(undefined, fecthFailurePayload)).toEqual(expectedState);
  });
  it("should handle the 'SUCCESS_OPERATION' action", function () {
    var expectedState = (0, _extends2.default)({}, defaultState, {
      success: true,
      message: success_message
    });
    var fecthSuccessOperationPayload = {
      type: _actionTypes.default.SUCCESS_OPERATION,
      payload: {
        fetching: false,
        success: true,
        message: success_message
      }
    };
    expect((0, _auth.default)(undefined, fecthSuccessOperationPayload)).toEqual(expectedState);
  });
  it("should handle the 'CHECK_USER_SUCCESS' action for logged user", function () {
    var expectedState = (0, _extends2.default)({}, defaultState, {
      isLoggedIn: true,
      user: _user.emptyUser
    });
    var checkUserSuccessPayload = {
      type: _actionTypes.default.CHECK_USER_SUCCESS,
      payload: {
        isLoggedIn: true,
        user: _user.emptyUser
      }
    };
    expect((0, _auth.default)(undefined, checkUserSuccessPayload)).toEqual(expectedState);
  });
  it("should handle the 'CHECK_USER_SUCCESS' action for guest user", function () {
    var expectedState = (0, _extends2.default)({}, defaultState, {
      isLoggedIn: false,
      user: _user.emptyUser
    });
    var checkUserSuccessPayload = {
      type: _actionTypes.default.CHECK_USER_SUCCESS,
      payload: {
        isLoggedIn: false,
        user: null
      }
    };
    expect((0, _auth.default)(undefined, checkUserSuccessPayload)).toEqual(expectedState);
  });
  it("should handle the 'LOGIN_SUCCESS' action", function () {
    var expectedState = (0, _extends2.default)({}, defaultState, {
      isLoggedIn: true,
      user: _user.emptyUser
    });
    var loginSuccessPayload = {
      type: _actionTypes.default.LOGIN_SUCCESS,
      payload: {
        isLoggedIn: true,
        user: _user.emptyUser
      }
    };
    expect((0, _auth.default)(undefined, loginSuccessPayload)).toEqual(expectedState);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,