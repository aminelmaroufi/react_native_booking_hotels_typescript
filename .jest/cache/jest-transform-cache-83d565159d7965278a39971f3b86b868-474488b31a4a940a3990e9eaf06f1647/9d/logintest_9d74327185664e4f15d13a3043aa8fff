5d71a10a35e6dabb3c0a2b677713a552
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var store_1 = __importDefault(require("../../redux/store"));
var Login_1 = __importDefault(require("../Login"));
var actions_1 = require("../../redux/actions");
var Setup_1 = __importDefault(require("../Setup"));
var store = (0, store_1.default)();
var email = 'test@test.com';
var password = 'Azerty123@@';
describe('Test Login Component', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    (0, Setup_1.default)((0, _jsxRuntime.jsx)(Login_1.default, {}), store);
  });
  afterEach(react_native_1.cleanup);
  it('should render all form element', function () {
    expect(react_native_1.screen.getByTestId('logo')).toBeDefined();
    expect(react_native_1.screen.getByTestId('email')).toBeDefined();
    expect(react_native_1.screen.getByTestId('password')).toBeDefined();
    var loginBtn = react_native_1.screen.getByTestId('login-btn');
    expect(loginBtn).toBeDefined();
  });
  it('should enable login button after entereing valid email and password value', function () {
    var emailInput = react_native_1.screen.getByTestId('email');
    var passwordInput = react_native_1.screen.getByTestId('password');
    var loginBtn = react_native_1.screen.getByTestId('login-btn');
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', true);
    react_native_1.fireEvent.changeText(emailInput, email);
    react_native_1.fireEvent.changeText(passwordInput, password);
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', false);
    react_native_1.fireEvent.press(loginBtn);
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith((0, actions_1.loginRequest)(email, password));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwic3RvcmVfMSIsIkxvZ2luXzEiLCJhY3Rpb25zXzEiLCJTZXR1cF8xIiwic3RvcmUiLCJkZWZhdWx0IiwiZW1haWwiLCJwYXNzd29yZCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImRpc3BhdGNoIiwiamVzdCIsImZuIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJhZnRlckVhY2giLCJjbGVhbnVwIiwiaXQiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsInRvQmVEZWZpbmVkIiwibG9naW5CdG4iLCJlbWFpbElucHV0IiwicGFzc3dvcmRJbnB1dCIsInByb3BzIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwidG9IYXZlUHJvcGVydHkiLCJmaXJlRXZlbnQiLCJjaGFuZ2VUZXh0IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImxvZ2luUmVxdWVzdCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9BbWluZS9EZXNrdG9wL3Byb2plY3RzL0Jvb2tpbmdIb3RlbHNBcHAvc3JjL3NjcmVlbnMvX190ZXN0c19fL2xvZ2luLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7Y2xlYW51cCwgZmlyZUV2ZW50LCBzY3JlZW59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tICcuLi8uLi9yZWR1eC9zdG9yZSc7XG5pbXBvcnQgTG9naW4gZnJvbSAnLi4vTG9naW4nO1xuaW1wb3J0IHtsb2dpblJlcXVlc3R9IGZyb20gJy4uLy4uL3JlZHV4L2FjdGlvbnMnO1xuaW1wb3J0IFNldHVwIGZyb20gJy4uL1NldHVwJztcblxubGV0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoKTtcblxuY29uc3QgZW1haWwgPSAndGVzdEB0ZXN0LmNvbSc7XG5jb25zdCBwYXNzd29yZCA9ICdBemVydHkxMjNAQCc7XG5cbmRlc2NyaWJlKCdUZXN0IExvZ2luIENvbXBvbmVudCcsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RvcmUuZGlzcGF0Y2ggPSBqZXN0LmZuKCk7XG4gICAgU2V0dXAoPExvZ2luIC8+LCBzdG9yZSk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaChjbGVhbnVwKTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhbGwgZm9ybSBlbGVtZW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvZ28nKSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdlbWFpbCcpKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Bhc3N3b3JkJykpLnRvQmVEZWZpbmVkKCk7XG5cbiAgICBjb25zdCBsb2dpbkJ0biA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9naW4tYnRuJyk7XG5cbiAgICBleHBlY3QobG9naW5CdG4pLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZW5hYmxlIGxvZ2luIGJ1dHRvbiBhZnRlciBlbnRlcmVpbmcgdmFsaWQgZW1haWwgYW5kIHBhc3N3b3JkIHZhbHVlJywgKCkgPT4ge1xuICAgIGNvbnN0IGVtYWlsSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2VtYWlsJyk7XG4gICAgY29uc3QgcGFzc3dvcmRJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgncGFzc3dvcmQnKTtcbiAgICBjb25zdCBsb2dpbkJ0biA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9naW4tYnRuJyk7XG5cbiAgICBleHBlY3QobG9naW5CdG4ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlKS50b0hhdmVQcm9wZXJ0eSgnZGlzYWJsZWQnLCB0cnVlKTtcblxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGVtYWlsSW5wdXQsIGVtYWlsKTtcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChwYXNzd29yZElucHV0LCBwYXNzd29yZCk7XG5cbiAgICBleHBlY3QobG9naW5CdG4ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlKS50b0hhdmVQcm9wZXJ0eSgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgZmlyZUV2ZW50LnByZXNzKGxvZ2luQnRuKTtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGxvZ2luUmVxdWVzdChlbWFpbCwgcGFzc3dvcmQpKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUgsZUFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSixlQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxTQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxPQUFBLEdBQUFOLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUlNLEtBQUssR0FBRyxJQUFBSixPQUFBLENBQUFLLE9BQWMsR0FBRTtBQUU1QixJQUFNQyxLQUFLLEdBQUcsZUFBZTtBQUM3QixJQUFNQyxRQUFRLEdBQUcsYUFBYTtBQUU5QkMsUUFBUSxDQUFDLHNCQUFzQixFQUFFLFlBQUs7RUFDcENDLFVBQVUsQ0FBQyxZQUFLO0lBQ2RMLEtBQUssQ0FBQ00sUUFBUSxHQUFHQyxJQUFJLENBQUNDLEVBQUUsRUFBRTtJQUMxQixJQUFBVCxPQUFBLENBQUFFLE9BQUssRUFBQyxJQUFBUSxXQUFBLENBQUFDLEdBQUEsRUFBQ2IsT0FBQSxDQUFBSSxPQUFLLEtBQUcsRUFBRUQsS0FBSyxDQUFDO0VBQ3pCLENBQUMsQ0FBQztFQUVGVyxTQUFTLENBQUNoQixjQUFBLENBQUFpQixPQUFPLENBQUM7RUFFbEJDLEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFLO0lBQ3hDQyxNQUFNLENBQUNuQixjQUFBLENBQUFvQixNQUFNLENBQUNDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDQyxXQUFXLEVBQUU7SUFDaERILE1BQU0sQ0FBQ25CLGNBQUEsQ0FBQW9CLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUNDLFdBQVcsRUFBRTtJQUNqREgsTUFBTSxDQUFDbkIsY0FBQSxDQUFBb0IsTUFBTSxDQUFDQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxFQUFFO0lBRXBELElBQU1DLFFBQVEsR0FBR3ZCLGNBQUEsQ0FBQW9CLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUVoREYsTUFBTSxDQUFDSSxRQUFRLENBQUMsQ0FBQ0QsV0FBVyxFQUFFO0VBQ2hDLENBQUMsQ0FBQztFQUVGSixFQUFFLENBQUMsMkVBQTJFLEVBQUUsWUFBSztJQUNuRixJQUFNTSxVQUFVLEdBQUd4QixjQUFBLENBQUFvQixNQUFNLENBQUNDLFdBQVcsQ0FBQyxPQUFPLENBQUM7SUFDOUMsSUFBTUksYUFBYSxHQUFHekIsY0FBQSxDQUFBb0IsTUFBTSxDQUFDQyxXQUFXLENBQUMsVUFBVSxDQUFDO0lBQ3BELElBQU1FLFFBQVEsR0FBR3ZCLGNBQUEsQ0FBQW9CLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUVoREYsTUFBTSxDQUFDSSxRQUFRLENBQUNHLEtBQUssQ0FBQ0Msa0JBQWtCLENBQUMsQ0FBQ0MsY0FBYyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUM7SUFFMUU1QixjQUFBLENBQUE2QixTQUFTLENBQUNDLFVBQVUsQ0FBQ04sVUFBVSxFQUFFakIsS0FBSyxDQUFDO0lBQ3ZDUCxjQUFBLENBQUE2QixTQUFTLENBQUNDLFVBQVUsQ0FBQ0wsYUFBYSxFQUFFakIsUUFBUSxDQUFDO0lBRTdDVyxNQUFNLENBQUNJLFFBQVEsQ0FBQ0csS0FBSyxDQUFDQyxrQkFBa0IsQ0FBQyxDQUFDQyxjQUFjLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQztJQUMzRTVCLGNBQUEsQ0FBQTZCLFNBQVMsQ0FBQ0UsS0FBSyxDQUFDUixRQUFRLENBQUM7SUFDekJKLE1BQU0sQ0FBQ2QsS0FBSyxDQUFDTSxRQUFRLENBQUMsQ0FBQ3FCLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUMvQ2IsTUFBTSxDQUFDZCxLQUFLLENBQUNNLFFBQVEsQ0FBQyxDQUFDc0Isb0JBQW9CLENBQUMsSUFBQTlCLFNBQUEsQ0FBQStCLFlBQVksRUFBQzNCLEtBQUssRUFBRUMsUUFBUSxDQUFDLENBQUM7RUFDNUUsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=