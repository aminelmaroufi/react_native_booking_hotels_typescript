{"version":3,"names":["react_1","__importDefault","require","react_native_1","store_1","Login_1","actions_1","Setup_1","store","default","email","password","describe","beforeEach","dispatch","jest","fn","_jsxRuntime","jsx","afterEach","cleanup","it","expect","screen","getByTestId","toBeDefined","loginBtn","emailInput","passwordInput","props","accessibilityState","toHaveProperty","fireEvent","changeText","press","toHaveBeenCalledTimes","toHaveBeenCalledWith","loginRequest"],"sources":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/screens/__tests__/login.test.tsx"],"sourcesContent":["import React from 'react';\n\nimport {cleanup, fireEvent, screen} from '@testing-library/react-native';\nimport configureStore from '../../redux/store';\nimport Login from '../Login';\nimport {loginRequest} from '../../redux/actions';\nimport Setup from '../Setup';\n\nlet store = configureStore();\n\nconst email = 'test@test.com';\nconst password = 'Azerty123@@';\n\ndescribe('Test Login Component', () => {\n  beforeEach(() => {\n    store.dispatch = jest.fn();\n    Setup(<Login />, store);\n  });\n\n  afterEach(cleanup);\n\n  it('should render all form element', () => {\n    expect(screen.getByTestId('logo')).toBeDefined();\n    expect(screen.getByTestId('email')).toBeDefined();\n    expect(screen.getByTestId('password')).toBeDefined();\n\n    const loginBtn = screen.getByTestId('login-btn');\n\n    expect(loginBtn).toBeDefined();\n  });\n\n  it('should enable login button after entereing valid email and password value', () => {\n    const emailInput = screen.getByTestId('email');\n    const passwordInput = screen.getByTestId('password');\n    const loginBtn = screen.getByTestId('login-btn');\n\n    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', true);\n\n    fireEvent.changeText(emailInput, email);\n    fireEvent.changeText(passwordInput, password);\n\n    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', false);\n    fireEvent.press(loginBtn);\n    expect(store.dispatch).toHaveBeenCalledTimes(1);\n    expect(store.dispatch).toHaveBeenCalledWith(loginRequest(email, password));\n  });\n});\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAC,cAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAH,eAAA,CAAAC,OAAA;AACA,IAAAG,OAAA,GAAAJ,eAAA,CAAAC,OAAA;AACA,IAAAI,SAAA,GAAAJ,OAAA;AACA,IAAAK,OAAA,GAAAN,eAAA,CAAAC,OAAA;AAEA,IAAIM,KAAK,GAAG,IAAAJ,OAAA,CAAAK,OAAc,GAAE;AAE5B,IAAMC,KAAK,GAAG,eAAe;AAC7B,IAAMC,QAAQ,GAAG,aAAa;AAE9BC,QAAQ,CAAC,sBAAsB,EAAE,YAAK;EACpCC,UAAU,CAAC,YAAK;IACdL,KAAK,CAACM,QAAQ,GAAGC,IAAI,CAACC,EAAE,EAAE;IAC1B,IAAAT,OAAA,CAAAE,OAAK,EAAC,IAAAQ,WAAA,CAAAC,GAAA,EAACb,OAAA,CAAAI,OAAK,KAAG,EAAED,KAAK,CAAC;EACzB,CAAC,CAAC;EAEFW,SAAS,CAAChB,cAAA,CAAAiB,OAAO,CAAC;EAElBC,EAAE,CAAC,gCAAgC,EAAE,YAAK;IACxCC,MAAM,CAACnB,cAAA,CAAAoB,MAAM,CAACC,WAAW,CAAC,MAAM,CAAC,CAAC,CAACC,WAAW,EAAE;IAChDH,MAAM,CAACnB,cAAA,CAAAoB,MAAM,CAACC,WAAW,CAAC,OAAO,CAAC,CAAC,CAACC,WAAW,EAAE;IACjDH,MAAM,CAACnB,cAAA,CAAAoB,MAAM,CAACC,WAAW,CAAC,UAAU,CAAC,CAAC,CAACC,WAAW,EAAE;IAEpD,IAAMC,QAAQ,GAAGvB,cAAA,CAAAoB,MAAM,CAACC,WAAW,CAAC,WAAW,CAAC;IAEhDF,MAAM,CAACI,QAAQ,CAAC,CAACD,WAAW,EAAE;EAChC,CAAC,CAAC;EAEFJ,EAAE,CAAC,2EAA2E,EAAE,YAAK;IACnF,IAAMM,UAAU,GAAGxB,cAAA,CAAAoB,MAAM,CAACC,WAAW,CAAC,OAAO,CAAC;IAC9C,IAAMI,aAAa,GAAGzB,cAAA,CAAAoB,MAAM,CAACC,WAAW,CAAC,UAAU,CAAC;IACpD,IAAME,QAAQ,GAAGvB,cAAA,CAAAoB,MAAM,CAACC,WAAW,CAAC,WAAW,CAAC;IAEhDF,MAAM,CAACI,QAAQ,CAACG,KAAK,CAACC,kBAAkB,CAAC,CAACC,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC;IAE1E5B,cAAA,CAAA6B,SAAS,CAACC,UAAU,CAACN,UAAU,EAAEjB,KAAK,CAAC;IACvCP,cAAA,CAAA6B,SAAS,CAACC,UAAU,CAACL,aAAa,EAAEjB,QAAQ,CAAC;IAE7CW,MAAM,CAACI,QAAQ,CAACG,KAAK,CAACC,kBAAkB,CAAC,CAACC,cAAc,CAAC,UAAU,EAAE,KAAK,CAAC;IAC3E5B,cAAA,CAAA6B,SAAS,CAACE,KAAK,CAACR,QAAQ,CAAC;IACzBJ,MAAM,CAACd,KAAK,CAACM,QAAQ,CAAC,CAACqB,qBAAqB,CAAC,CAAC,CAAC;IAC/Cb,MAAM,CAACd,KAAK,CAACM,QAAQ,CAAC,CAACsB,oBAAoB,CAAC,IAAA9B,SAAA,CAAA+B,YAAY,EAAC3B,KAAK,EAAEC,QAAQ,CAAC,CAAC;EAC5E,CAAC,CAAC;AACJ,CAAC,CAAC"}