{"version":3,"names":["_react","_interopRequireWildcard","require","_xml","_cssTree","_cssSelect","_interopRequireDefault","_jsxFileName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","isTag","node","getParent","parent","getChildren","children","getName","elem","tag","getText","_node","getAttributeValue","name","props","removeSubsets","nodes","idx","length","ancestor","replace","includes","splice","existsOne","predicate","elems","some","getSiblings","hasAttrib","findOne","i","l","findAll","undefined","j","push","cssSelectOpts","xmlMode","adapter","flattenToSelectors","cssAst","selectors","walk","visit","enter","rule","_ref","type","prelude","atrule","each","item","_ref2","pseudos","_ref3","pseudoItem","list","childType","filterByMqs","filter","_ref4","atPrelude","first","mq","query","generate","useMqs","filterByPseudos","_ref5","usePseudos","List","fromArray","map","pseudo","data","cleanPseudos","forEach","_ref6","remove","specificity","selector","A","B","C","toLowerCase","charAt","compareSpecificity","aSpecificity","bSpecificity","selectorWithSpecificity","bySelectorSpecificity","a","b","pass","arr","len","chk","dbl","r","li","ri","exec","buffer","Array","tmp","sortSelectors","specs","s","declarationParseProps","context","parseValue","CSSStyleDeclaration","ast","styles","style","priority","Map","declarations","parse","_ref7","property","value","important","trim","camelCase","styleError","Error","message","console","warn","parseError","initStyle","selectedEl","closestElem","elemName","parseProps","parseCustomProperty","inlineStyles","document","styleElements","_iterator","_createForOfIteratorHelperLoose","_step","done","element","styleString","join","selectorsMq","selectorsPseudo","sortedSelectors","reverse","_iterator2","_step2","_ref8","selectorStr","_ret","matched","_ref9","camel","val","_iterator3","_step3","_element","current","selectError","SyntaxError","exports","SvgCss","xml","override","useMemo","createElement","SvgAst","__self","__source","fileName","lineNumber","columnNumber","SvgCssUri","uri","_props$onError","onError","err","_useState","useState","_useState2","_slicedToArray2","setXml","useEffect","fetchText","then","catch","SvgWithCss","_Component","_inherits2","_super","_this","_classCallCheck2","_len","args","_key","concat","_defineProperty2","_assertThisInitialized2","_createClass2","componentDidMount","componentDidUpdate","prevProps","setState","error","render","state","Component","SvgWithCssUri","_Component2","_super2","_this2","_len2","_key2","fetch","_fetch","_asyncToGenerator2","_regenerator","mark","_callee","wrap","_callee$","_context","prev","next","t0","t1","sent","t2","t3","t4","stop","_x"],"sources":["css.tsx"],"sourcesContent":["import React, { Component, useEffect, useMemo, useState } from 'react';\nimport {\n  camelCase,\n  err,\n  fetchText,\n  JsxAST,\n  Middleware,\n  parse,\n  Styles,\n  SvgAst,\n  UriProps,\n  UriState,\n  XmlAST,\n  XmlProps,\n  XmlState,\n} from './xml';\nimport csstree, {\n  Atrule,\n  AtrulePrelude,\n  CssNode,\n  Declaration,\n  DeclarationList,\n  List,\n  ListItem,\n  PseudoClassSelector,\n  Rule,\n  Selector,\n  SelectorList,\n} from 'css-tree';\nimport cssSelect, { Options } from 'css-select';\n\n/*\n * Style element inlining experiment based on SVGO\n * https://github.com/svg/svgo/blob/11f9c797411a8de966aacc4cb83dbb3e471757bc/plugins/inlineStyles.js\n * */\n\n/**\n * DOMUtils API for rnsvg AST (used by css-select)\n */\n// is the node a tag?\n// isTag: ( node:Node ) => isTag:Boolean\nfunction isTag(node: XmlAST | string): node is XmlAST {\n  return typeof node === 'object';\n}\n\n// get the parent of the node\n// getParent: ( node:Node ) => parentNode:Node\n// returns null when no parent exists\nfunction getParent(node: XmlAST | string): XmlAST {\n  return ((typeof node === 'object' && node.parent) || null) as XmlAST;\n}\n\n// get the node's children\n// getChildren: ( node:Node ) => children:[Node]\nfunction getChildren(node: XmlAST | string): Array<XmlAST | string> {\n  return (typeof node === 'object' && node.children) || [];\n}\n\n// get the name of the tag'\n// getName: ( elem:ElementNode ) => tagName:String\nfunction getName(elem: XmlAST): string {\n  return elem.tag;\n}\n\n// get the text content of the node, and its children if it has any\n// getText: ( node:Node ) => text:String\n// returns empty string when there is no text\nfunction getText(_node: XmlAST | string): string {\n  return '';\n}\n\n// get the attribute value\n// getAttributeValue: ( elem:ElementNode, name:String ) => value:String\n// returns null when attribute doesn't exist\nfunction getAttributeValue(elem: XmlAST, name: string): string {\n  return (elem.props[name] || null) as string;\n}\n\n// takes an array of nodes, and removes any duplicates, as well as any nodes\n// whose ancestors are also in the array\nfunction removeSubsets(nodes: Array<XmlAST | string>): Array<XmlAST | string> {\n  let idx = nodes.length,\n    node,\n    ancestor,\n    replace;\n\n  // Check if each node (or one of its ancestors) is already contained in the\n  // array.\n  while (--idx > -1) {\n    node = ancestor = nodes[idx];\n\n    // Temporarily remove the node under consideration\n    delete nodes[idx];\n    replace = true;\n\n    while (ancestor) {\n      if (nodes.includes(ancestor)) {\n        replace = false;\n        nodes.splice(idx, 1);\n        break;\n      }\n      ancestor = (typeof ancestor === 'object' && ancestor.parent) || null;\n    }\n\n    // If the node has been found to be unique, re-insert it.\n    if (replace) {\n      nodes[idx] = node;\n    }\n  }\n\n  return nodes;\n}\n\n// does at least one of passed element nodes pass the test predicate?\nfunction existsOne(\n  predicate: (v: XmlAST) => boolean,\n  elems: Array<XmlAST | string>,\n): boolean {\n  return elems.some(\n    (elem) =>\n      typeof elem === 'object' &&\n      (predicate(elem) || existsOne(predicate, elem.children)),\n  );\n}\n\n/*\n  get the siblings of the node. Note that unlike jQuery's `siblings` method,\n  this is expected to include the current node as well\n*/\nfunction getSiblings(node: XmlAST | string): Array<XmlAST | string> {\n  const parent = typeof node === 'object' && node.parent;\n  return (parent && parent.children) || [];\n}\n\n// does the element have the named attribute?\nfunction hasAttrib(elem: XmlAST, name: string): boolean {\n  return elem.props.hasOwnProperty(name);\n}\n\n// finds the first node in the array that matches the test predicate, or one\n// of its children\nfunction findOne(\n  predicate: (v: XmlAST) => boolean,\n  elems: Array<XmlAST | string>,\n): XmlAST | null {\n  let elem: XmlAST | null = null;\n\n  for (let i = 0, l = elems.length; i < l && !elem; i++) {\n    const node = elems[i];\n    if (typeof node === 'string') {\n    } else if (predicate(node)) {\n      elem = node;\n    } else {\n      const { children } = node;\n      if (children.length !== 0) {\n        elem = findOne(predicate, children);\n      }\n    }\n  }\n\n  return elem;\n}\n\n// finds all of the element nodes in the array that match the test predicate,\n// as well as any of their children that match it\nfunction findAll(\n  predicate: (v: XmlAST) => boolean,\n  nodes: Array<XmlAST | string>,\n  result: Array<XmlAST> = [],\n): Array<XmlAST> {\n  for (let i = 0, j = nodes.length; i < j; i++) {\n    const node = nodes[i];\n    if (typeof node !== 'object') {\n      continue;\n    }\n    if (predicate(node)) {\n      result.push(node);\n    }\n    const { children } = node;\n    if (children.length !== 0) {\n      findAll(predicate, children, result);\n    }\n  }\n\n  return result;\n}\n\nconst cssSelectOpts: Options<XmlAST | string, XmlAST> = {\n  xmlMode: true,\n  adapter: {\n    removeSubsets,\n    existsOne,\n    getSiblings,\n    hasAttrib,\n    findOne,\n    findAll,\n    isTag,\n    getParent,\n    getChildren,\n    getName,\n    getText,\n    getAttributeValue,\n  },\n};\n\ntype FlatPseudoSelector = {\n  item: ListItem<CssNode>;\n  list: List<CssNode>;\n};\ntype FlatPseudoSelectorList = FlatPseudoSelector[];\ntype FlatSelector = {\n  item: ListItem<CssNode>;\n  atrule: Atrule | null;\n  rule: CssNode;\n  pseudos: FlatPseudoSelectorList;\n};\ntype FlatSelectorList = FlatSelector[];\n\n/**\n * Flatten a CSS AST to a selectors list.\n *\n * @param {Object} cssAst css-tree AST to flatten\n * @param {Array} selectors\n */\nfunction flattenToSelectors(cssAst: CssNode, selectors: FlatSelectorList) {\n  csstree.walk(cssAst, {\n    visit: 'Rule',\n    enter(rule: CssNode) {\n      const { type, prelude } = rule as Rule;\n      if (type !== 'Rule') {\n        return;\n      }\n      const atrule = this.atrule;\n      (prelude as SelectorList).children.each((node, item) => {\n        const { children } = node as Selector;\n        const pseudos: FlatPseudoSelectorList = [];\n        selectors.push({\n          item,\n          atrule,\n          rule,\n          pseudos,\n        });\n        children.each(({ type: childType }, pseudoItem, list) => {\n          if (\n            childType === 'PseudoClassSelector' ||\n            childType === 'PseudoElementSelector'\n          ) {\n            pseudos.push({\n              item: pseudoItem,\n              list,\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * Filter selectors by Media Query.\n *\n * @param {Array} selectors to filter\n * @return {Array} Filtered selectors that match the passed media queries\n */\nfunction filterByMqs(selectors: FlatSelectorList) {\n  return selectors.filter(({ atrule }) => {\n    if (atrule === null) {\n      return true;\n    }\n    const { name, prelude } = atrule;\n    const atPrelude = prelude as AtrulePrelude;\n    const first = atPrelude && atPrelude.children.first();\n    const mq = first && first.type === 'MediaQueryList';\n    const query = mq ? csstree.generate(atPrelude) : name;\n    return useMqs.includes(query);\n  });\n}\n// useMqs Array with strings of media queries that should pass (<name> <expression>)\nconst useMqs = ['', 'screen'];\n\n/**\n * Filter selectors by the pseudo-elements and/or -classes they contain.\n *\n * @param {Array} selectors to filter\n * @return {Array} Filtered selectors that match the passed pseudo-elements and/or -classes\n */\nfunction filterByPseudos(selectors: FlatSelectorList) {\n  return selectors.filter(({ pseudos }) =>\n    usePseudos.includes(\n      csstree.generate({\n        type: 'Selector',\n        children: new List<CssNode>().fromArray(\n          pseudos.map((pseudo) => pseudo.item.data),\n        ),\n      }),\n    ),\n  );\n}\n// usePseudos Array with strings of single or sequence of pseudo-elements and/or -classes that should pass\nconst usePseudos = [''];\n\n/**\n * Remove pseudo-elements and/or -classes from the selectors for proper matching.\n *\n * @param {Array} selectors to clean\n * @return {Array} Selectors without pseudo-elements and/or -classes\n */\nfunction cleanPseudos(selectors: FlatSelectorList) {\n  selectors.forEach(({ pseudos }) =>\n    pseudos.forEach((pseudo) => pseudo.list.remove(pseudo.item)),\n  );\n}\n\ntype Specificity = [number, number, number];\nfunction specificity(selector: Selector): Specificity {\n  let A = 0;\n  let B = 0;\n  let C = 0;\n\n  selector.children.each(function walk(node: CssNode) {\n    switch (node.type) {\n      case 'SelectorList':\n      case 'Selector':\n        node.children.each(walk);\n        break;\n\n      case 'IdSelector':\n        A++;\n        break;\n\n      case 'ClassSelector':\n      case 'AttributeSelector':\n        B++;\n        break;\n\n      case 'PseudoClassSelector':\n        switch (node.name.toLowerCase()) {\n          case 'not':\n            const children = (node as PseudoClassSelector).children;\n            children && children.each(walk);\n            break;\n\n          case 'before':\n          case 'after':\n          case 'first-line':\n          case 'first-letter':\n            C++;\n            break;\n\n          // TODO: support for :nth-*(.. of <SelectorList>), :matches(), :has()\n\n          default:\n            B++;\n        }\n        break;\n\n      case 'PseudoElementSelector':\n        C++;\n        break;\n\n      case 'TypeSelector':\n        // ignore universal selector\n        const { name } = node;\n        if (name.charAt(name.length - 1) !== '*') {\n          C++;\n        }\n        break;\n    }\n  });\n\n  return [A, B, C];\n}\n\n/**\n * Compares two selector specificities.\n * extracted from https://github.com/keeganstreet/specificity/blob/master/specificity.js#L211\n *\n * @param {Array} aSpecificity Specificity of selector A\n * @param {Array} bSpecificity Specificity of selector B\n * @return {Number} Score of selector specificity A compared to selector specificity B\n */\nfunction compareSpecificity(\n  aSpecificity: Specificity,\n  bSpecificity: Specificity,\n): number {\n  for (let i = 0; i < 4; i += 1) {\n    if (aSpecificity[i] < bSpecificity[i]) {\n      return -1;\n    } else if (aSpecificity[i] > bSpecificity[i]) {\n      return 1;\n    }\n  }\n  return 0;\n}\n\ntype Spec = {\n  selector: FlatSelector;\n  specificity: Specificity;\n};\nfunction selectorWithSpecificity(selector: FlatSelector): Spec {\n  return {\n    selector,\n    specificity: specificity(selector.item.data as Selector),\n  };\n}\n\n/**\n * Compare two simple selectors.\n *\n * @param {Object} a Simple selector A\n * @param {Object} b Simple selector B\n * @return {Number} Score of selector A compared to selector B\n */\nfunction bySelectorSpecificity(a: Spec, b: Spec): number {\n  return compareSpecificity(a.specificity, b.specificity);\n}\n\n// Run a single pass with the given chunk size.\nfunction pass(arr: Spec[], len: number, chk: number, result: Spec[]) {\n  // Step size / double chunk size.\n  const dbl = chk * 2;\n  // Bounds of the left and right chunks.\n  let l, r, e;\n  // Iterators over the left and right chunk.\n  let li, ri;\n\n  // Iterate over pairs of chunks.\n  let i = 0;\n  for (l = 0; l < len; l += dbl) {\n    r = l + chk;\n    e = r + chk;\n    if (r > len) {\n      r = len;\n    }\n    if (e > len) {\n      e = len;\n    }\n\n    // Iterate both chunks in parallel.\n    li = l;\n    ri = r;\n    while (true) {\n      // Compare the chunks.\n      if (li < r && ri < e) {\n        // This works for a regular `sort()` compatible comparator,\n        // but also for a simple comparator like: `a > b`\n        if (bySelectorSpecificity(arr[li], arr[ri]) <= 0) {\n          result[i++] = arr[li++];\n        } else {\n          result[i++] = arr[ri++];\n        }\n      }\n      // Nothing to compare, just flush what's left.\n      else if (li < r) {\n        result[i++] = arr[li++];\n      } else if (ri < e) {\n        result[i++] = arr[ri++];\n      }\n      // Both iterators are at the chunk ends.\n      else {\n        break;\n      }\n    }\n  }\n}\n\n// Execute the sort using the input array and a second buffer as work space.\n// Returns one of those two, containing the final result.\nfunction exec(arr: Spec[], len: number): Spec[] {\n  // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.\n  // Chunks are the size of the left or right hand in merge sort.\n  // Stop when the left-hand covers all of the array.\n  let buffer = new Array(len);\n  for (let chk = 1; chk < len; chk *= 2) {\n    pass(arr, len, chk, buffer);\n    const tmp = arr;\n    arr = buffer;\n    buffer = tmp;\n  }\n  return arr;\n}\n\n/**\n * Sort selectors stably by their specificity.\n *\n * @param {Array} selectors to be sorted\n * @return {Array} Stable sorted selectors\n */\nfunction sortSelectors(selectors: FlatSelectorList) {\n  // Short-circuit when there's nothing to sort.\n  const len = selectors.length;\n  if (len <= 1) {\n    return selectors;\n  }\n  const specs = selectors.map(selectorWithSpecificity);\n  return exec(specs, len).map((s) => s.selector);\n}\n\nconst declarationParseProps = {\n  context: 'declarationList',\n  parseValue: false,\n};\nfunction CSSStyleDeclaration(ast: XmlAST) {\n  const { props, styles } = ast;\n  if (!props.style) {\n    props.style = {};\n  }\n  const style = props.style as Styles;\n  const priority = new Map();\n  ast.style = style;\n  ast.priority = priority;\n  if (!styles || styles.length === 0) {\n    return;\n  }\n  try {\n    const declarations = csstree.parse(\n      styles,\n      declarationParseProps,\n    ) as DeclarationList;\n    declarations.children.each((node) => {\n      try {\n        const { property, value, important } = node as Declaration;\n        const name = property.trim();\n        priority.set(name, important);\n        style[camelCase(name)] = csstree.generate(value).trim();\n      } catch (styleError) {\n        if (\n          styleError instanceof Error &&\n          styleError.message !== 'Unknown node type: undefined'\n        ) {\n          console.warn(\n            \"Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr('style').value. Error details: \" +\n              styleError,\n          );\n        }\n      }\n    });\n  } catch (parseError) {\n    console.warn(\n      \"Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr('style').value. Error details: \" +\n        parseError,\n    );\n  }\n}\n\ninterface StyledAST extends XmlAST {\n  style: Styles;\n  priority: Map<string, boolean | undefined>;\n}\nfunction initStyle(selectedEl: XmlAST): StyledAST {\n  if (!selectedEl.style) {\n    CSSStyleDeclaration(selectedEl);\n  }\n  return selectedEl as StyledAST;\n}\n\n/**\n * Find the closest ancestor of the current element.\n * @param node\n * @param elemName\n * @return {?Object}\n */\nfunction closestElem(node: XmlAST, elemName: string) {\n  let elem: XmlAST | null = node;\n  while ((elem = elem.parent) && elem.tag !== elemName) {}\n  return elem;\n}\n\nconst parseProps = {\n  parseValue: false,\n  parseCustomProperty: false,\n};\n\n/**\n * Moves + merges styles from style elements to element styles\n *\n * Options\n *   useMqs (default: ['', 'screen'])\n *     what media queries to be used\n *     empty string element for styles outside media queries\n *\n *   usePseudos (default: [''])\n *     what pseudo-classes/-elements to be used\n *     empty string element for all non-pseudo-classes and/or -elements\n *\n * @param {Object} document document element\n *\n * @author strarsis <strarsis@gmail.com>\n * @author modified by: msand <msand@abo.fi>\n */\nexport const inlineStyles: Middleware = function inlineStyles(\n  document: XmlAST,\n) {\n  // collect <style/>s\n  const styleElements = cssSelect('style', document, cssSelectOpts);\n\n  //no <styles/>s, nothing to do\n  if (styleElements.length === 0) {\n    return document;\n  }\n\n  const selectors: FlatSelectorList = [];\n\n  for (let element of styleElements) {\n    const { children } = element;\n    if (!children.length || closestElem(element, 'foreignObject')) {\n      // skip empty <style/>s or <foreignObject> content.\n      continue;\n    }\n\n    // collect <style/>s and their css ast\n    try {\n      const styleString = children.join('');\n      flattenToSelectors(csstree.parse(styleString, parseProps), selectors);\n    } catch (parseError) {\n      console.warn(\n        'Warning: Parse error of styles of <style/> element, skipped. Error details: ' +\n          parseError,\n      );\n    }\n  }\n\n  // filter for mediaqueries to be used or without any mediaquery\n  const selectorsMq = filterByMqs(selectors);\n\n  // filter for pseudo elements to be used\n  const selectorsPseudo = filterByPseudos(selectorsMq);\n\n  // remove PseudoClass from its SimpleSelector for proper matching\n  cleanPseudos(selectorsPseudo);\n\n  // stable sort selectors\n  const sortedSelectors = sortSelectors(selectorsPseudo).reverse();\n\n  // match selectors\n  for (let { rule, item } of sortedSelectors) {\n    if (rule === null) {\n      continue;\n    }\n    const selectorStr = csstree.generate(item.data);\n    try {\n      // apply <style/> to matched elements\n      const matched = cssSelect(selectorStr, document, cssSelectOpts).map(\n        initStyle,\n      );\n\n      if (matched.length === 0) {\n        continue;\n      }\n      csstree.walk(rule, {\n        visit: 'Declaration',\n        enter(node: CssNode) {\n          const { property, value, important } = node as Declaration;\n          // existing inline styles have higher priority\n          // no inline styles, external styles,                                    external styles used\n          // inline styles,    external styles same   priority as inline styles,   inline   styles used\n          // inline styles,    external styles higher priority than inline styles, external styles used\n          const name = property.trim();\n          const camel = camelCase(name);\n          const val = csstree.generate(value).trim();\n          for (let element of matched) {\n            const { style, priority } = element;\n            const current = priority.get(name);\n            if (current === undefined || current < important) {\n              priority.set(name, important as boolean);\n              style[camel] = val;\n            }\n          }\n        },\n      });\n    } catch (selectError) {\n      if (selectError instanceof SyntaxError) {\n        console.warn(\n          'Warning: Syntax error when trying to select \\n\\n' +\n            selectorStr +\n            '\\n\\n, skipped. Error details: ' +\n            selectError,\n        );\n        continue;\n      }\n      throw selectError;\n    }\n  }\n\n  return document;\n};\n\nexport function SvgCss(props: XmlProps) {\n  const { xml, override } = props;\n  const ast = useMemo<JsxAST | null>(\n    () => (xml !== null ? parse(xml, inlineStyles) : null),\n    [xml],\n  );\n  return <SvgAst ast={ast} override={override || props} />;\n}\n\nexport function SvgCssUri(props: UriProps) {\n  const { uri, onError = err } = props;\n  const [xml, setXml] = useState<string | null>(null);\n  useEffect(() => {\n    uri ? fetchText(uri).then(setXml).catch(onError) : setXml(null);\n  }, [onError, uri]);\n  return <SvgCss xml={xml} override={props} />;\n}\n\n// Extending Component is required for Animated support.\n\nexport class SvgWithCss extends Component<XmlProps, XmlState> {\n  state = { ast: null };\n  componentDidMount() {\n    this.parse(this.props.xml);\n  }\n  componentDidUpdate(prevProps: { xml: string | null }) {\n    const { xml } = this.props;\n    if (xml !== prevProps.xml) {\n      this.parse(xml);\n    }\n  }\n  parse(xml: string | null) {\n    try {\n      this.setState({ ast: xml ? parse(xml, inlineStyles) : null });\n    } catch (e) {\n      this.props.onError ? this.props.onError(e as Error) : console.error(e);\n    }\n  }\n  render() {\n    const {\n      props,\n      state: { ast },\n    } = this;\n    return <SvgAst ast={ast} override={props.override || props} />;\n  }\n}\n\nexport class SvgWithCssUri extends Component<UriProps, UriState> {\n  state = { xml: null };\n  componentDidMount() {\n    this.fetch(this.props.uri);\n  }\n  componentDidUpdate(prevProps: { uri: string | null }) {\n    const { uri } = this.props;\n    if (uri !== prevProps.uri) {\n      this.fetch(uri);\n    }\n  }\n  async fetch(uri: string | null) {\n    try {\n      this.setState({ xml: uri ? await fetchText(uri) : null });\n    } catch (e) {\n      this.props.onError ? this.props.onError(e as Error) : console.error(e);\n    }\n  }\n  render() {\n    const {\n      props,\n      state: { xml },\n    } = this;\n    return <SvgWithCss xml={xml} override={props} />;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,IAAA,GAAAD,OAAA;AAeA,IAAAE,QAAA,GAAAH,uBAAA,CAAAC,OAAA;AAaA,IAAAG,UAAA,GAAAC,sBAAA,CAAAJ,OAAA;AAAgD,IAAAK,YAAA;AAAA,SAAAC,yBAAAC,WAAA;EAAA,WAAAC,OAAA;EAAA,IAAAC,iBAAA,OAAAD,OAAA;EAAA,IAAAE,gBAAA,OAAAF,OAAA;EAAA,QAAAF,wBAAA,YAAAA,yBAAAC,WAAA;IAAA,OAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA;EAAA,GAAAF,WAAA;AAAA;AAAA,SAAAR,wBAAAY,GAAA,EAAAJ,WAAA;EAAA,KAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA;IAAA,OAAAD,GAAA;EAAA;EAAA,IAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA;IAAA;MAAAE,OAAA,EAAAF;IAAA;EAAA;EAAA,IAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA;EAAA,IAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA;IAAA,OAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA;EAAA;EAAA,IAAAM,MAAA;EAAA,IAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA;EAAA,SAAAC,GAAA,IAAAX,GAAA;IAAA,IAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA;MAAA,IAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA;MAAA,IAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA;QAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA;MAAA;QAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA;MAAA;IAAA;EAAA;EAAAL,MAAA,CAAAJ,OAAA,GAAAF,GAAA;EAAA,IAAAG,KAAA;IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA;EAAA;EAAA,OAAAA,MAAA;AAAA;AAAA,SAAAW,aAAAC,OAAA;EAAA,IAAAC,yBAAA,GAAAC,yBAAA;EAAA,gBAAAC,qBAAA;IAAA,IAAAC,KAAA,OAAAC,gBAAA,CAAArB,OAAA,EAAAgB,OAAA;MAAAM,MAAA;IAAA,IAAAL,yBAAA;MAAA,IAAAM,SAAA,OAAAF,gBAAA,CAAArB,OAAA,QAAAwB,WAAA;MAAAF,MAAA,GAAAG,OAAA,CAAAC,SAAA,CAAAN,KAAA,EAAAO,SAAA,EAAAJ,SAAA;IAAA;MAAAD,MAAA,GAAAF,KAAA,CAAAQ,KAAA,OAAAD,SAAA;IAAA;IAAA,WAAAE,2BAAA,CAAA7B,OAAA,QAAAsB,MAAA;EAAA;AAAA;AAAA,SAAAJ,0BAAA;EAAA,WAAAO,OAAA,qBAAAA,OAAA,CAAAC,SAAA;EAAA,IAAAD,OAAA,CAAAC,SAAA,CAAAI,IAAA;EAAA,WAAAC,KAAA;EAAA;IAAAC,OAAA,CAAAtB,SAAA,CAAAuB,OAAA,CAAArB,IAAA,CAAAa,OAAA,CAAAC,SAAA,CAAAM,OAAA;IAAA;EAAA,SAAAE,CAAA;IAAA;EAAA;AAAA;AAYhD,SAASC,KAAKA,CAACC,IAAqB,EAAkB;EACpD,OAAO,OAAOA,IAAI,KAAK,QAAQ;AACjC;AAKA,SAASC,SAASA,CAACD,IAAqB,EAAU;EAChD,OAAS,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACE,MAAM,IAAK,IAAI;AAC3D;AAIA,SAASC,WAAWA,CAACH,IAAqB,EAA0B;EAClE,OAAQ,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACI,QAAQ,IAAK,EAAE;AAC1D;AAIA,SAASC,OAAOA,CAACC,IAAY,EAAU;EACrC,OAAOA,IAAI,CAACC,GAAG;AACjB;AAKA,SAASC,OAAOA,CAACC,KAAsB,EAAU;EAC/C,OAAO,EAAE;AACX;AAKA,SAASC,iBAAiBA,CAACJ,IAAY,EAAEK,IAAY,EAAU;EAC7D,OAAQL,IAAI,CAACM,KAAK,CAACD,IAAI,CAAC,IAAI,IAAI;AAClC;AAIA,SAASE,aAAaA,CAACC,KAA6B,EAA0B;EAC5E,IAAIC,GAAG,GAAGD,KAAK,CAACE,MAAM;IACpBhB,IAAI;IACJiB,QAAQ;IACRC,OAAO;EAIT,OAAO,EAAEH,GAAG,GAAG,CAAC,CAAC,EAAE;IACjBf,IAAI,GAAGiB,QAAQ,GAAGH,KAAK,CAACC,GAAG,CAAC;IAG5B,OAAOD,KAAK,CAACC,GAAG,CAAC;IACjBG,OAAO,GAAG,IAAI;IAEd,OAAOD,QAAQ,EAAE;MACf,IAAIH,KAAK,CAACK,QAAQ,CAACF,QAAQ,CAAC,EAAE;QAC5BC,OAAO,GAAG,KAAK;QACfJ,KAAK,CAACM,MAAM,CAACL,GAAG,EAAE,CAAC,CAAC;QACpB;MACF;MACAE,QAAQ,GAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,CAACf,MAAM,IAAK,IAAI;IACtE;IAGA,IAAIgB,OAAO,EAAE;MACXJ,KAAK,CAACC,GAAG,CAAC,GAAGf,IAAI;IACnB;EACF;EAEA,OAAOc,KAAK;AACd;AAGA,SAASO,SAASA,CAChBC,SAAiC,EACjCC,KAA6B,EACpB;EACT,OAAOA,KAAK,CAACC,IAAI,CACf,UAAClB,IAAI;IAAA,OACH,OAAOA,IAAI,KAAK,QAAQ,KACvBgB,SAAS,CAAChB,IAAI,CAAC,IAAIe,SAAS,CAACC,SAAS,EAAEhB,IAAI,CAACF,QAAQ,CAAC,CAAC;EAAA,EAC3D;AACH;AAMA,SAASqB,WAAWA,CAACzB,IAAqB,EAA0B;EAClE,IAAME,MAAM,GAAG,OAAOF,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACE,MAAM;EACtD,OAAQA,MAAM,IAAIA,MAAM,CAACE,QAAQ,IAAK,EAAE;AAC1C;AAGA,SAASsB,SAASA,CAACpB,IAAY,EAAEK,IAAY,EAAW;EACtD,OAAOL,IAAI,CAACM,KAAK,CAACrC,cAAc,CAACoC,IAAI,CAAC;AACxC;AAIA,SAASgB,OAAOA,CACdL,SAAiC,EACjCC,KAA6B,EACd;EACf,IAAIjB,IAAmB,GAAG,IAAI;EAE9B,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGN,KAAK,CAACP,MAAM,EAAEY,CAAC,GAAGC,CAAC,IAAI,CAACvB,IAAI,EAAEsB,CAAC,EAAE,EAAE;IACrD,IAAM5B,IAAI,GAAGuB,KAAK,CAACK,CAAC,CAAC;IACrB,IAAI,OAAO5B,IAAI,KAAK,QAAQ,EAAE,CAC9B,CAAC,MAAM,IAAIsB,SAAS,CAACtB,IAAI,CAAC,EAAE;MAC1BM,IAAI,GAAGN,IAAI;IACb,CAAC,MAAM;MACL,IAAQI,QAAQ,GAAKJ,IAAI,CAAjBI,QAAQ;MAChB,IAAIA,QAAQ,CAACY,MAAM,KAAK,CAAC,EAAE;QACzBV,IAAI,GAAGqB,OAAO,CAACL,SAAS,EAAElB,QAAQ,CAAC;MACrC;IACF;EACF;EAEA,OAAOE,IAAI;AACb;AAIA,SAASwB,OAAOA,CACdR,SAAiC,EACjCR,KAA6B,EAEd;EAAA,IADf5B,MAAqB,GAAAK,SAAA,CAAAyB,MAAA,QAAAzB,SAAA,QAAAwC,SAAA,GAAAxC,SAAA,MAAG,EAAE;EAE1B,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEI,CAAC,GAAGlB,KAAK,CAACE,MAAM,EAAEY,CAAC,GAAGI,CAAC,EAAEJ,CAAC,EAAE,EAAE;IAC5C,IAAM5B,IAAI,GAAGc,KAAK,CAACc,CAAC,CAAC;IACrB,IAAI,OAAO5B,IAAI,KAAK,QAAQ,EAAE;MAC5B;IACF;IACA,IAAIsB,SAAS,CAACtB,IAAI,CAAC,EAAE;MACnBd,MAAM,CAAC+C,IAAI,CAACjC,IAAI,CAAC;IACnB;IACA,IAAQI,QAAQ,GAAKJ,IAAI,CAAjBI,QAAQ;IAChB,IAAIA,QAAQ,CAACY,MAAM,KAAK,CAAC,EAAE;MACzBc,OAAO,CAACR,SAAS,EAAElB,QAAQ,EAAElB,MAAM,CAAC;IACtC;EACF;EAEA,OAAOA,MAAM;AACf;AAEA,IAAMgD,aAA+C,GAAG;EACtDC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACPvB,aAAa,EAAbA,aAAa;IACbQ,SAAS,EAATA,SAAS;IACTI,WAAW,EAAXA,WAAW;IACXC,SAAS,EAATA,SAAS;IACTC,OAAO,EAAPA,OAAO;IACPG,OAAO,EAAPA,OAAO;IACP/B,KAAK,EAALA,KAAK;IACLE,SAAS,EAATA,SAAS;IACTE,WAAW,EAAXA,WAAW;IACXE,OAAO,EAAPA,OAAO;IACPG,OAAO,EAAPA,OAAO;IACPE,iBAAiB,EAAjBA;EACF;AACF,CAAC;AAqBD,SAAS2B,kBAAkBA,CAACC,MAAe,EAAEC,SAA2B,EAAE;EACxEtF,QAAA,CAAAW,OAAO,CAAC4E,IAAI,CAACF,MAAM,EAAE;IACnBG,KAAK,EAAE,MAAM;IACbC,KAAK,WAAAA,MAACC,IAAa,EAAE;MACnB,IAAAC,IAAA,GAA0BD,IAAI;QAAtBE,IAAI,GAAAD,IAAA,CAAJC,IAAI;QAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO;MACrB,IAAID,IAAI,KAAK,MAAM,EAAE;QACnB;MACF;MACA,IAAME,MAAM,GAAG,IAAI,CAACA,MAAM;MACzBD,OAAO,CAAkB1C,QAAQ,CAAC4C,IAAI,CAAC,UAAChD,IAAI,EAAEiD,IAAI,EAAK;QACtD,IAAAC,KAAA,GAAqBlD,IAAI;UAAjBI,QAAQ,GAAA8C,KAAA,CAAR9C,QAAQ;QAChB,IAAM+C,OAA+B,GAAG,EAAE;QAC1CZ,SAAS,CAACN,IAAI,CAAC;UACbgB,IAAI,EAAJA,IAAI;UACJF,MAAM,EAANA,MAAM;UACNJ,IAAI,EAAJA,IAAI;UACJQ,OAAO,EAAPA;QACF,CAAC,CAAC;QACF/C,QAAQ,CAAC4C,IAAI,CAAC,UAAAI,KAAA,EAAsBC,UAAU,EAAEC,IAAI,EAAK;UAAA,IAAlCC,SAAS,GAAAH,KAAA,CAAfP,IAAI;UACnB,IACEU,SAAS,KAAK,qBAAqB,IACnCA,SAAS,KAAK,uBAAuB,EACrC;YACAJ,OAAO,CAAClB,IAAI,CAAC;cACXgB,IAAI,EAAEI,UAAU;cAChBC,IAAI,EAAJA;YACF,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;AACJ;AAQA,SAASE,WAAWA,CAACjB,SAA2B,EAAE;EAChD,OAAOA,SAAS,CAACkB,MAAM,CAAC,UAAAC,KAAA,EAAgB;IAAA,IAAbX,MAAM,GAAAW,KAAA,CAANX,MAAM;IAC/B,IAAIA,MAAM,KAAK,IAAI,EAAE;MACnB,OAAO,IAAI;IACb;IACA,IAAQpC,IAAI,GAAcoC,MAAM,CAAxBpC,IAAI;MAAEmC,OAAO,GAAKC,MAAM,CAAlBD,OAAO;IACrB,IAAMa,SAAS,GAAGb,OAAwB;IAC1C,IAAMc,KAAK,GAAGD,SAAS,IAAIA,SAAS,CAACvD,QAAQ,CAACwD,KAAK,EAAE;IACrD,IAAMC,EAAE,GAAGD,KAAK,IAAIA,KAAK,CAACf,IAAI,KAAK,gBAAgB;IACnD,IAAMiB,KAAK,GAAGD,EAAE,GAAG5G,QAAA,CAAAW,OAAO,CAACmG,QAAQ,CAACJ,SAAS,CAAC,GAAGhD,IAAI;IACrD,OAAOqD,MAAM,CAAC7C,QAAQ,CAAC2C,KAAK,CAAC;EAC/B,CAAC,CAAC;AACJ;AAEA,IAAME,MAAM,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC;AAQ7B,SAASC,eAAeA,CAAC1B,SAA2B,EAAE;EACpD,OAAOA,SAAS,CAACkB,MAAM,CAAC,UAAAS,KAAA;IAAA,IAAGf,OAAO,GAAAe,KAAA,CAAPf,OAAO;IAAA,OAChCgB,UAAU,CAAChD,QAAQ,CACjBlE,QAAA,CAAAW,OAAO,CAACmG,QAAQ,CAAC;MACflB,IAAI,EAAE,UAAU;MAChBzC,QAAQ,EAAE,IAAInD,QAAA,CAAAmH,IAAI,EAAW,CAACC,SAAS,CACrClB,OAAO,CAACmB,GAAG,CAAC,UAACC,MAAM;QAAA,OAAKA,MAAM,CAACtB,IAAI,CAACuB,IAAI;MAAA,EAAC;IAE7C,CAAC,CAAC,CACH;EAAA,EACF;AACH;AAEA,IAAML,UAAU,GAAG,CAAC,EAAE,CAAC;AAQvB,SAASM,YAAYA,CAAClC,SAA2B,EAAE;EACjDA,SAAS,CAACmC,OAAO,CAAC,UAAAC,KAAA;IAAA,IAAGxB,OAAO,GAAAwB,KAAA,CAAPxB,OAAO;IAAA,OAC1BA,OAAO,CAACuB,OAAO,CAAC,UAACH,MAAM;MAAA,OAAKA,MAAM,CAACjB,IAAI,CAACsB,MAAM,CAACL,MAAM,CAACtB,IAAI,CAAC;IAAA,EAAC;EAAA,EAC7D;AACH;AAGA,SAAS4B,WAAWA,CAACC,QAAkB,EAAe;EACpD,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;EAETH,QAAQ,CAAC1E,QAAQ,CAAC4C,IAAI,CAAC,SAASR,IAAIA,CAACxC,IAAa,EAAE;IAClD,QAAQA,IAAI,CAAC6C,IAAI;MACf,KAAK,cAAc;MACnB,KAAK,UAAU;QACb7C,IAAI,CAACI,QAAQ,CAAC4C,IAAI,CAACR,IAAI,CAAC;QACxB;MAEF,KAAK,YAAY;QACfuC,CAAC,EAAE;QACH;MAEF,KAAK,eAAe;MACpB,KAAK,mBAAmB;QACtBC,CAAC,EAAE;QACH;MAEF,KAAK,qBAAqB;QACxB,QAAQhF,IAAI,CAACW,IAAI,CAACuE,WAAW,EAAE;UAC7B,KAAK,KAAK;YACR,IAAM9E,QAAQ,GAAIJ,IAAI,CAAyBI,QAAQ;YACvDA,QAAQ,IAAIA,QAAQ,CAAC4C,IAAI,CAACR,IAAI,CAAC;YAC/B;UAEF,KAAK,QAAQ;UACb,KAAK,OAAO;UACZ,KAAK,YAAY;UACjB,KAAK,cAAc;YACjByC,CAAC,EAAE;YACH;UAIF;YACED,CAAC,EAAE;QAAC;QAER;MAEF,KAAK,uBAAuB;QAC1BC,CAAC,EAAE;QACH;MAEF,KAAK,cAAc;QAEjB,IAAQtE,IAAI,GAAKX,IAAI,CAAbW,IAAI;QACZ,IAAIA,IAAI,CAACwE,MAAM,CAACxE,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;UACxCiE,CAAC,EAAE;QACL;QACA;IAAM;EAEZ,CAAC,CAAC;EAEF,OAAO,CAACF,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;AAClB;AAUA,SAASG,kBAAkBA,CACzBC,YAAyB,EACzBC,YAAyB,EACjB;EACR,KAAK,IAAI1D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC7B,IAAIyD,YAAY,CAACzD,CAAC,CAAC,GAAG0D,YAAY,CAAC1D,CAAC,CAAC,EAAE;MACrC,OAAO,CAAC,CAAC;IACX,CAAC,MAAM,IAAIyD,YAAY,CAACzD,CAAC,CAAC,GAAG0D,YAAY,CAAC1D,CAAC,CAAC,EAAE;MAC5C,OAAO,CAAC;IACV;EACF;EACA,OAAO,CAAC;AACV;AAMA,SAAS2D,uBAAuBA,CAACT,QAAsB,EAAQ;EAC7D,OAAO;IACLA,QAAQ,EAARA,QAAQ;IACRD,WAAW,EAAEA,WAAW,CAACC,QAAQ,CAAC7B,IAAI,CAACuB,IAAI;EAC7C,CAAC;AACH;AASA,SAASgB,qBAAqBA,CAACC,CAAO,EAAEC,CAAO,EAAU;EACvD,OAAON,kBAAkB,CAACK,CAAC,CAACZ,WAAW,EAAEa,CAAC,CAACb,WAAW,CAAC;AACzD;AAGA,SAASc,IAAIA,CAACC,GAAW,EAAEC,GAAW,EAAEC,GAAW,EAAE5G,MAAc,EAAE;EAEnE,IAAM6G,GAAG,GAAGD,GAAG,GAAG,CAAC;EAEnB,IAAIjE,CAAC,EAAEmE,CAAC,EAAElG,CAAC;EAEX,IAAImG,EAAE,EAAEC,EAAE;EAGV,IAAItE,CAAC,GAAG,CAAC;EACT,KAAKC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgE,GAAG,EAAEhE,CAAC,IAAIkE,GAAG,EAAE;IAC7BC,CAAC,GAAGnE,CAAC,GAAGiE,GAAG;IACXhG,CAAC,GAAGkG,CAAC,GAAGF,GAAG;IACX,IAAIE,CAAC,GAAGH,GAAG,EAAE;MACXG,CAAC,GAAGH,GAAG;IACT;IACA,IAAI/F,CAAC,GAAG+F,GAAG,EAAE;MACX/F,CAAC,GAAG+F,GAAG;IACT;IAGAI,EAAE,GAAGpE,CAAC;IACNqE,EAAE,GAAGF,CAAC;IACN,OAAO,IAAI,EAAE;MAEX,IAAIC,EAAE,GAAGD,CAAC,IAAIE,EAAE,GAAGpG,CAAC,EAAE;QAGpB,IAAI0F,qBAAqB,CAACI,GAAG,CAACK,EAAE,CAAC,EAAEL,GAAG,CAACM,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE;UAChDhH,MAAM,CAAC0C,CAAC,EAAE,CAAC,GAAGgE,GAAG,CAACK,EAAE,EAAE,CAAC;QACzB,CAAC,MAAM;UACL/G,MAAM,CAAC0C,CAAC,EAAE,CAAC,GAAGgE,GAAG,CAACM,EAAE,EAAE,CAAC;QACzB;MACF,CAAC,MAEI,IAAID,EAAE,GAAGD,CAAC,EAAE;QACf9G,MAAM,CAAC0C,CAAC,EAAE,CAAC,GAAGgE,GAAG,CAACK,EAAE,EAAE,CAAC;MACzB,CAAC,MAAM,IAAIC,EAAE,GAAGpG,CAAC,EAAE;QACjBZ,MAAM,CAAC0C,CAAC,EAAE,CAAC,GAAGgE,GAAG,CAACM,EAAE,EAAE,CAAC;MACzB,CAAC,MAEI;QACH;MACF;IACF;EACF;AACF;AAIA,SAASC,IAAIA,CAACP,GAAW,EAAEC,GAAW,EAAU;EAI9C,IAAIO,MAAM,GAAG,IAAIC,KAAK,CAACR,GAAG,CAAC;EAC3B,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGD,GAAG,EAAEC,GAAG,IAAI,CAAC,EAAE;IACrCH,IAAI,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEM,MAAM,CAAC;IAC3B,IAAME,GAAG,GAAGV,GAAG;IACfA,GAAG,GAAGQ,MAAM;IACZA,MAAM,GAAGE,GAAG;EACd;EACA,OAAOV,GAAG;AACZ;AAQA,SAASW,aAAaA,CAAChE,SAA2B,EAAE;EAElD,IAAMsD,GAAG,GAAGtD,SAAS,CAACvB,MAAM;EAC5B,IAAI6E,GAAG,IAAI,CAAC,EAAE;IACZ,OAAOtD,SAAS;EAClB;EACA,IAAMiE,KAAK,GAAGjE,SAAS,CAAC+B,GAAG,CAACiB,uBAAuB,CAAC;EACpD,OAAOY,IAAI,CAACK,KAAK,EAAEX,GAAG,CAAC,CAACvB,GAAG,CAAC,UAACmC,CAAC;IAAA,OAAKA,CAAC,CAAC3B,QAAQ;EAAA,EAAC;AAChD;AAEA,IAAM4B,qBAAqB,GAAG;EAC5BC,OAAO,EAAE,iBAAiB;EAC1BC,UAAU,EAAE;AACd,CAAC;AACD,SAASC,mBAAmBA,CAACC,GAAW,EAAE;EACxC,IAAQlG,KAAK,GAAakG,GAAG,CAArBlG,KAAK;IAAEmG,MAAM,GAAKD,GAAG,CAAdC,MAAM;EACrB,IAAI,CAACnG,KAAK,CAACoG,KAAK,EAAE;IAChBpG,KAAK,CAACoG,KAAK,GAAG,CAAC,CAAC;EAClB;EACA,IAAMA,KAAK,GAAGpG,KAAK,CAACoG,KAAe;EACnC,IAAMC,QAAQ,GAAG,IAAIC,GAAG,EAAE;EAC1BJ,GAAG,CAACE,KAAK,GAAGA,KAAK;EACjBF,GAAG,CAACG,QAAQ,GAAGA,QAAQ;EACvB,IAAI,CAACF,MAAM,IAAIA,MAAM,CAAC/F,MAAM,KAAK,CAAC,EAAE;IAClC;EACF;EACA,IAAI;IACF,IAAMmG,YAAY,GAAGlK,QAAA,CAAAW,OAAO,CAACwJ,KAAK,CAChCL,MAAM,EACNL,qBAAqB,CACH;IACpBS,YAAY,CAAC/G,QAAQ,CAAC4C,IAAI,CAAC,UAAChD,IAAI,EAAK;MACnC,IAAI;QACF,IAAAqH,KAAA,GAAuCrH,IAAI;UAAnCsH,QAAQ,GAAAD,KAAA,CAARC,QAAQ;UAAEC,KAAK,GAAAF,KAAA,CAALE,KAAK;UAAEC,SAAS,GAAAH,KAAA,CAATG,SAAS;QAClC,IAAM7G,IAAI,GAAG2G,QAAQ,CAACG,IAAI,EAAE;QAC5BR,QAAQ,CAACvI,GAAG,CAACiC,IAAI,EAAE6G,SAAS,CAAC;QAC7BR,KAAK,CAAC,IAAAhK,IAAA,CAAA0K,SAAS,EAAC/G,IAAI,CAAC,CAAC,GAAG1D,QAAA,CAAAW,OAAO,CAACmG,QAAQ,CAACwD,KAAK,CAAC,CAACE,IAAI,EAAE;MACzD,CAAE,QAAOE,UAAU,EAAE;QACnB,IACEA,UAAU,YAAYC,KAAK,IAC3BD,UAAU,CAACE,OAAO,KAAK,8BAA8B,EACrD;UACAC,OAAO,CAACC,IAAI,CACV,mLAAmL,GACjLJ,UAAU,CACb;QACH;MACF;IACF,CAAC,CAAC;EACJ,CAAE,QAAOK,UAAU,EAAE;IACnBF,OAAO,CAACC,IAAI,CACV,mLAAmL,GACjLC,UAAU,CACb;EACH;AACF;AAMA,SAASC,SAASA,CAACC,UAAkB,EAAa;EAChD,IAAI,CAACA,UAAU,CAAClB,KAAK,EAAE;IACrBH,mBAAmB,CAACqB,UAAU,CAAC;EACjC;EACA,OAAOA,UAAU;AACnB;AAQA,SAASC,WAAWA,CAACnI,IAAY,EAAEoI,QAAgB,EAAE;EACnD,IAAI9H,IAAmB,GAAGN,IAAI;EAC9B,OAAO,CAACM,IAAI,GAAGA,IAAI,CAACJ,MAAM,KAAKI,IAAI,CAACC,GAAG,KAAK6H,QAAQ,EAAE,CAAC;EACvD,OAAO9H,IAAI;AACb;AAEA,IAAM+H,UAAU,GAAG;EACjBzB,UAAU,EAAE,KAAK;EACjB0B,mBAAmB,EAAE;AACvB,CAAC;AAmBM,IAAMC,YAAwB,GAAG,SAASA,YAAYA,CAC3DC,QAAgB,EAChB;EAEA,IAAMC,aAAa,GAAG,IAAAvL,UAAA,CAAAU,OAAS,EAAC,OAAO,EAAE4K,QAAQ,EAAEtG,aAAa,CAAC;EAGjE,IAAIuG,aAAa,CAACzH,MAAM,KAAK,CAAC,EAAE;IAC9B,OAAOwH,QAAQ;EACjB;EAEA,IAAMjG,SAA2B,GAAG,EAAE;EAEtC,SAAAmG,SAAA,GAAAC,+BAAA,CAAoBF,aAAa,GAAAG,KAAA,IAAAA,KAAA,GAAAF,SAAA,IAAAG,IAAA,GAAE;IAAA,IAA1BC,OAAO,GAAAF,KAAA,CAAArB,KAAA;IACd,IAAQnH,QAAQ,GAAK0I,OAAO,CAApB1I,QAAQ;IAChB,IAAI,CAACA,QAAQ,CAACY,MAAM,IAAImH,WAAW,CAACW,OAAO,EAAE,eAAe,CAAC,EAAE;MAE7D;IACF;IAGA,IAAI;MACF,IAAMC,WAAW,GAAG3I,QAAQ,CAAC4I,IAAI,CAAC,EAAE,CAAC;MACrC3G,kBAAkB,CAACpF,QAAA,CAAAW,OAAO,CAACwJ,KAAK,CAAC2B,WAAW,EAAEV,UAAU,CAAC,EAAE9F,SAAS,CAAC;IACvE,CAAE,QAAOyF,UAAU,EAAE;MACnBF,OAAO,CAACC,IAAI,CACV,8EAA8E,GAC5EC,UAAU,CACb;IACH;EACF;EAGA,IAAMiB,WAAW,GAAGzF,WAAW,CAACjB,SAAS,CAAC;EAG1C,IAAM2G,eAAe,GAAGjF,eAAe,CAACgF,WAAW,CAAC;EAGpDxE,YAAY,CAACyE,eAAe,CAAC;EAG7B,IAAMC,eAAe,GAAG5C,aAAa,CAAC2C,eAAe,CAAC,CAACE,OAAO,EAAE;EAGhE,SAAAC,UAAA,GAAAV,+BAAA,CAA2BQ,eAAe,GAAAG,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAR,IAAA,GAAE;IAAA,IAA5CU,KAAA,GAAAD,MAAA,CAAA/B,KAAA;IAA4C,IAAjC5E,IAAI,GAAA4G,KAAA,CAAJ5G,IAAI;IAAA,IAAEM,IAAI,GAAAsG,KAAA,CAAJtG,IAAI;IACnB,IAAIN,IAAI,KAAK,IAAI,EAAE;MACjB;IACF;IACA,IAAM6G,WAAW,GAAGvM,QAAA,CAAAW,OAAO,CAACmG,QAAQ,CAACd,IAAI,CAACuB,IAAI,CAAC;IAC/C,IAAI;MAAA,IAAAiF,IAAA;QAEF,IAAMC,OAAO,GAAG,IAAAxM,UAAA,CAAAU,OAAS,EAAC4L,WAAW,EAAEhB,QAAQ,EAAEtG,aAAa,CAAC,CAACoC,GAAG,CACjE2D,SAAS,CACV;QAED,IAAIyB,OAAO,CAAC1I,MAAM,KAAK,CAAC,EAAE;UACxB;QACF;QACA/D,QAAA,CAAAW,OAAO,CAAC4E,IAAI,CAACG,IAAI,EAAE;UACjBF,KAAK,EAAE,aAAa;UACpBC,KAAK,WAAAA,MAAC1C,IAAa,EAAE;YACnB,IAAA2J,KAAA,GAAuC3J,IAAI;cAAnCsH,QAAQ,GAAAqC,KAAA,CAARrC,QAAQ;cAAEC,KAAK,GAAAoC,KAAA,CAALpC,KAAK;cAAEC,SAAS,GAAAmC,KAAA,CAATnC,SAAS;YAKlC,IAAM7G,IAAI,GAAG2G,QAAQ,CAACG,IAAI,EAAE;YAC5B,IAAMmC,KAAK,GAAG,IAAA5M,IAAA,CAAA0K,SAAS,EAAC/G,IAAI,CAAC;YAC7B,IAAMkJ,GAAG,GAAG5M,QAAA,CAAAW,OAAO,CAACmG,QAAQ,CAACwD,KAAK,CAAC,CAACE,IAAI,EAAE;YAC1C,SAAAqC,UAAA,GAAAnB,+BAAA,CAAoBe,OAAO,GAAAK,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAjB,IAAA,GAAE;cAAA,IAApBmB,QAAO,GAAAD,MAAA,CAAAxC,KAAA;cACd,IAAQP,KAAK,GAAegD,QAAO,CAA3BhD,KAAK;gBAAEC,QAAQ,GAAK+C,QAAO,CAApB/C,QAAQ;cACvB,IAAMgD,OAAO,GAAGhD,QAAQ,CAAClJ,GAAG,CAAC4C,IAAI,CAAC;cAClC,IAAIsJ,OAAO,KAAKlI,SAAS,IAAIkI,OAAO,GAAGzC,SAAS,EAAE;gBAChDP,QAAQ,CAACvI,GAAG,CAACiC,IAAI,EAAE6G,SAAS,CAAY;gBACxCR,KAAK,CAAC4C,KAAK,CAAC,GAAGC,GAAG;cACpB;YACF;UACF;QACF,CAAC,CAAC;MAAC;MAAA,IAAAJ,IAAA,iBAtBD;IAuBJ,CAAE,QAAOS,WAAW,EAAE;MACpB,IAAIA,WAAW,YAAYC,WAAW,EAAE;QACtCrC,OAAO,CAACC,IAAI,CACV,kDAAkD,GAChDyB,WAAW,GACX,gCAAgC,GAChCU,WAAW,CACd;QACD;MACF;MACA,MAAMA,WAAW;IACnB;EACF;EAEA,OAAO1B,QAAQ;AACjB,CAAC;AAAC4B,OAAA,CAAA7B,YAAA,GAAAA,YAAA;AAEK,SAAS8B,MAAMA,CAACzJ,KAAe,EAAE;EACtC,IAAQ0J,GAAG,GAAe1J,KAAK,CAAvB0J,GAAG;IAAEC,QAAQ,GAAK3J,KAAK,CAAlB2J,QAAQ;EACrB,IAAMzD,GAAG,GAAG,IAAAjK,MAAA,CAAA2N,OAAO,EACjB;IAAA,OAAOF,GAAG,KAAK,IAAI,GAAG,IAAAtN,IAAA,CAAAoK,KAAK,EAACkD,GAAG,EAAE/B,YAAY,CAAC,GAAG,IAAI;EAAA,CAAC,EACtD,CAAC+B,GAAG,CAAC,CACN;EACD,OAAOzN,MAAA,CAAAe,OAAA,CAAA6M,aAAA,CAACzN,IAAA,CAAA0N,MAAM;IAAC5D,GAAG,EAAEA,GAAI;IAACyD,QAAQ,EAAEA,QAAQ,IAAI3J,KAAM;IAAA+J,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAzN,YAAA;MAAA0N,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAG;AAC1D;AAEO,SAASC,SAASA,CAACpK,KAAe,EAAE;EACzC,IAAQqK,GAAG,GAAoBrK,KAAK,CAA5BqK,GAAG;IAAAC,cAAA,GAAoBtK,KAAK,CAAvBuK,OAAO;IAAPA,OAAO,GAAAD,cAAA,cAAGlO,IAAA,CAAAoO,GAAG,GAAAF,cAAA;EAC1B,IAAAG,SAAA,GAAsB,IAAAxO,MAAA,CAAAyO,QAAQ,EAAgB,IAAI,CAAC;IAAAC,UAAA,OAAAC,eAAA,CAAA5N,OAAA,EAAAyN,SAAA;IAA5Cf,GAAG,GAAAiB,UAAA;IAAEE,MAAM,GAAAF,UAAA;EAClB,IAAA1O,MAAA,CAAA6O,SAAS,EAAC,YAAM;IACdT,GAAG,GAAG,IAAAjO,IAAA,CAAA2O,SAAS,EAACV,GAAG,CAAC,CAACW,IAAI,CAACH,MAAM,CAAC,CAACI,KAAK,CAACV,OAAO,CAAC,GAAGM,MAAM,CAAC,IAAI,CAAC;EACjE,CAAC,EAAE,CAACN,OAAO,EAAEF,GAAG,CAAC,CAAC;EAClB,OAAOpO,MAAA,CAAAe,OAAA,CAAA6M,aAAA,CAACJ,MAAM;IAACC,GAAG,EAAEA,GAAI;IAACC,QAAQ,EAAE3J,KAAM;IAAA+J,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAzN,YAAA;MAAA0N,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAG;AAC9C;AAAC,IAIYe,UAAU,aAAAC,UAAA;EAAA,IAAAC,UAAA,CAAApO,OAAA,EAAAkO,UAAA,EAAAC,UAAA;EAAA,IAAAE,MAAA,GAAAtN,YAAA,CAAAmN,UAAA;EAAA,SAAAA,WAAA;IAAA,IAAAI,KAAA;IAAA,IAAAC,gBAAA,CAAAvO,OAAA,QAAAkO,UAAA;IAAA,SAAAM,IAAA,GAAA7M,SAAA,CAAAyB,MAAA,EAAAqL,IAAA,OAAAhG,KAAA,CAAA+F,IAAA,GAAAE,IAAA,MAAAA,IAAA,GAAAF,IAAA,EAAAE,IAAA;MAAAD,IAAA,CAAAC,IAAA,IAAA/M,SAAA,CAAA+M,IAAA;IAAA;IAAAJ,KAAA,GAAAD,MAAA,CAAAzN,IAAA,CAAAgB,KAAA,CAAAyM,MAAA,SAAAM,MAAA,CAAAF,IAAA;IAAA,IAAAG,gBAAA,CAAA5O,OAAA,MAAA6O,uBAAA,CAAA7O,OAAA,EAAAsO,KAAA,YACb;MAAEpF,GAAG,EAAE;IAAK,CAAC;IAAA,OAAAoF,KAAA;EAAA;EAAA,IAAAQ,aAAA,CAAA9O,OAAA,EAAAkO,UAAA;IAAAzN,GAAA;IAAAkJ,KAAA,EACrB,SAAAoF,kBAAA,EAAoB;MAClB,IAAI,CAACvF,KAAK,CAAC,IAAI,CAACxG,KAAK,CAAC0J,GAAG,CAAC;IAC5B;EAAC;IAAAjM,GAAA;IAAAkJ,KAAA,EACD,SAAAqF,mBAAmBC,SAAiC,EAAE;MACpD,IAAQvC,GAAG,GAAK,IAAI,CAAC1J,KAAK,CAAlB0J,GAAG;MACX,IAAIA,GAAG,KAAKuC,SAAS,CAACvC,GAAG,EAAE;QACzB,IAAI,CAAClD,KAAK,CAACkD,GAAG,CAAC;MACjB;IACF;EAAC;IAAAjM,GAAA;IAAAkJ,KAAA,EACD,SAAAH,MAAMkD,GAAkB,EAAE;MACxB,IAAI;QACF,IAAI,CAACwC,QAAQ,CAAC;UAAEhG,GAAG,EAAEwD,GAAG,GAAG,IAAAtN,IAAA,CAAAoK,KAAK,EAACkD,GAAG,EAAE/B,YAAY,CAAC,GAAG;QAAK,CAAC,CAAC;MAC/D,CAAE,QAAOzI,CAAC,EAAE;QACV,IAAI,CAACc,KAAK,CAACuK,OAAO,GAAG,IAAI,CAACvK,KAAK,CAACuK,OAAO,CAACrL,CAAC,CAAU,GAAGgI,OAAO,CAACiF,KAAK,CAACjN,CAAC,CAAC;MACxE;IACF;EAAC;IAAAzB,GAAA;IAAAkJ,KAAA,EACD,SAAAyF,OAAA,EAAS;MACP,IACEpM,KAAK,GAEH,IAAI,CAFNA,KAAK;QACIkG,GAAG,GACV,IAAI,CADNmG,KAAK,CAAInG,GAAG;MAEd,OAAOjK,MAAA,CAAAe,OAAA,CAAA6M,aAAA,CAACzN,IAAA,CAAA0N,MAAM;QAAC5D,GAAG,EAAEA,GAAI;QAACyD,QAAQ,EAAE3J,KAAK,CAAC2J,QAAQ,IAAI3J,KAAM;QAAA+J,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAzN,YAAA;UAAA0N,UAAA;UAAAC,YAAA;QAAA;MAAA,EAAG;IAChE;EAAC;EAAA,OAAAe,UAAA;AAAA,EAxB6BjP,MAAA,CAAAqQ,SAAS;AAAA9C,OAAA,CAAA0B,UAAA,GAAAA,UAAA;AAAA,IA2B5BqB,aAAa,aAAAC,WAAA;EAAA,IAAApB,UAAA,CAAApO,OAAA,EAAAuP,aAAA,EAAAC,WAAA;EAAA,IAAAC,OAAA,GAAA1O,YAAA,CAAAwO,aAAA;EAAA,SAAAA,cAAA;IAAA,IAAAG,MAAA;IAAA,IAAAnB,gBAAA,CAAAvO,OAAA,QAAAuP,aAAA;IAAA,SAAAI,KAAA,GAAAhO,SAAA,CAAAyB,MAAA,EAAAqL,IAAA,OAAAhG,KAAA,CAAAkH,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAAnB,IAAA,CAAAmB,KAAA,IAAAjO,SAAA,CAAAiO,KAAA;IAAA;IAAAF,MAAA,GAAAD,OAAA,CAAA7O,IAAA,CAAAgB,KAAA,CAAA6N,OAAA,SAAAd,MAAA,CAAAF,IAAA;IAAA,IAAAG,gBAAA,CAAA5O,OAAA,MAAA6O,uBAAA,CAAA7O,OAAA,EAAA0P,MAAA,YAChB;MAAEhD,GAAG,EAAE;IAAK,CAAC;IAAA,OAAAgD,MAAA;EAAA;EAAA,IAAAZ,aAAA,CAAA9O,OAAA,EAAAuP,aAAA;IAAA9O,GAAA;IAAAkJ,KAAA,EACrB,SAAAoF,kBAAA,EAAoB;MAClB,IAAI,CAACc,KAAK,CAAC,IAAI,CAAC7M,KAAK,CAACqK,GAAG,CAAC;IAC5B;EAAC;IAAA5M,GAAA;IAAAkJ,KAAA,EACD,SAAAqF,mBAAmBC,SAAiC,EAAE;MACpD,IAAQ5B,GAAG,GAAK,IAAI,CAACrK,KAAK,CAAlBqK,GAAG;MACX,IAAIA,GAAG,KAAK4B,SAAS,CAAC5B,GAAG,EAAE;QACzB,IAAI,CAACwC,KAAK,CAACxC,GAAG,CAAC;MACjB;IACF;EAAC;IAAA5M,GAAA;IAAAkJ,KAAA;MAAA,IAAAmG,MAAA,OAAAC,kBAAA,CAAA/P,OAAA,EAAAgQ,YAAA,CAAAhQ,OAAA,CAAAiQ,IAAA,CACD,SAAAC,QAAY7C,GAAkB;QAAA,OAAA2C,YAAA,CAAAhQ,OAAA,CAAAmQ,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAG,EAAA,GAE1B,IAAI;cAAA,KAAiBnD,GAAG;gBAAAgD,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OAAS,IAAAnR,IAAA,CAAA2O,SAAS,EAACV,GAAG,CAAC;YAAA;cAAAgD,QAAA,CAAAI,EAAA,GAAAJ,QAAA,CAAAK,IAAA;cAAAL,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAI,EAAA,GAAG,IAAK;YAAA;cAAAJ,QAAA,CAAAM,EAAA,GAAAN,QAAA,CAAAI,EAAA;cAAAJ,QAAA,CAAAO,EAAA;gBAAvClE,GAAG,EAAA2D,QAAA,CAAAM;cAAA;cAAAN,QAAA,CAAAG,EAAA,CAAdtB,QAAQ,CAAAtO,IAAA,CAAAyP,QAAA,CAAAG,EAAA,EAAAH,QAAA,CAAAO,EAAA;cAAAP,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAQ,EAAA,GAAAR,QAAA;cAEb,IAAI,CAACrN,KAAK,CAACuK,OAAO,GAAG,IAAI,CAACvK,KAAK,CAACuK,OAAO,CAAA8C,QAAA,CAAAQ,EAAA,CAAY,GAAG3G,OAAO,CAACiF,KAAK,CAAAkB,QAAA,CAAAQ,EAAA,CAAG;YACxE;YAAA;cAAA,OAAAR,QAAA,CAAAS,IAAA;UAAA;QAAA,GAAAZ,OAAA;MAAA,CACD;MAAA,SAAAL,MAAAkB,EAAA;QAAA,OAAAjB,MAAA,CAAAlO,KAAA,OAAAD,SAAA;MAAA;MAAA,OAAAkO,KAAA;IAAA;EAAA;IAAApP,GAAA;IAAAkJ,KAAA,EACD,SAAAyF,OAAA,EAAS;MACP,IACEpM,KAAK,GAEH,IAAI,CAFNA,KAAK;QACI0J,GAAG,GACV,IAAI,CADN2C,KAAK,CAAI3C,GAAG;MAEd,OAAOzN,MAAA,CAAAe,OAAA,CAAA6M,aAAA,CAACqB,UAAU;QAACxB,GAAG,EAAEA,GAAI;QAACC,QAAQ,EAAE3J,KAAM;QAAA+J,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAzN,YAAA;UAAA0N,UAAA;UAAAC,YAAA;QAAA;MAAA,EAAG;IAClD;EAAC;EAAA,OAAAoC,aAAA;AAAA,EAxBgCtQ,MAAA,CAAAqQ,SAAS;AAAA9C,OAAA,CAAA+C,aAAA,GAAAA,aAAA"}