e185e7c7a92e385c14cb946c96126b57
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.check_user_request = check_user_request;
exports.default = watchAuthRequest;
exports.login_request = login_request;
exports.save_account = save_account;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _effects = require("redux-saga/effects");
var _actionTypes = _interopRequireDefault(require("../../utils/actionTypes"));
var _native = require("@react-navigation/native");
var _api = require("../../api");
var _actions = require("../../redux/actions");
var RootNavigation = _interopRequireWildcard(require("../../navigation/rootNavigation"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var _marked = _regenerator.default.mark(check_user_request),
  _marked2 = _regenerator.default.mark(save_account),
  _marked3 = _regenerator.default.mark(login_request),
  _marked4 = _regenerator.default.mark(watchAuthRequest);
function check_user_request() {
  var response, data;
  return _regenerator.default.wrap(function check_user_request$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        _context.prev = 0;
        _context.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        _context.next = 5;
        return (0, _effects.call)(_api.checkUser);
      case 5:
        response = _context.sent;
        data = response.data;
        if (!data.ok) {
          _context.next = 17;
          break;
        }
        if (!data.result.user) {
          _context.next = 13;
          break;
        }
        _context.next = 11;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        }), (0, _effects.put)({
          type: _actionTypes.default.CHECK_USER_SUCCESS,
          payload: {
            user: data.result.user
          }
        })]);
      case 11:
        _context.next = 15;
        break;
      case 13:
        _context.next = 15;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        });
      case 15:
        _context.next = 19;
        break;
      case 17:
        _context.next = 19;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 19:
        _context.next = 25;
        break;
      case 21:
        _context.prev = 21;
        _context.t0 = _context["catch"](0);
        _context.next = 25;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context.t0 === 'string' ? _context.t0 : _context.t0.message
          }
        });
      case 25:
      case "end":
        return _context.stop();
    }
  }, _marked, null, [[0, 21]]);
}
function save_account(action) {
  var user, response, data;
  return _regenerator.default.wrap(function save_account$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        _context2.prev = 0;
        _context2.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        user = action.account;
        delete user._id;
        _context2.next = 7;
        return (0, _effects.call)(_api.saveAccount, action.account);
      case 7:
        response = _context2.sent;
        data = response.data;
        if (!data.ok) {
          _context2.next = 14;
          break;
        }
        _context2.next = 12;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.SUCCESS_OPERATION,
          payload: {
            message: data.result.message
          }
        }), (0, _effects.put)({
          type: _actionTypes.default.CREATE_ACCOUNT_SUCCESS,
          payload: {
            user: data.result.user
          }
        }), (0, _effects.put)(_native.CommonActions.goBack()), (0, _effects.put)(_native.CommonActions.navigate({
          name: 'Login'
        }))]);
      case 12:
        _context2.next = 16;
        break;
      case 14:
        _context2.next = 16;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 16:
        _context2.next = 22;
        break;
      case 18:
        _context2.prev = 18;
        _context2.t0 = _context2["catch"](0);
        _context2.next = 22;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context2.t0 === 'string' ? _context2.t0 : _context2.t0.message
          }
        });
      case 22:
      case "end":
        return _context2.stop();
    }
  }, _marked2, null, [[0, 18]]);
}
function login_request(action) {
  var response, data;
  return _regenerator.default.wrap(function login_request$(_context3) {
    while (1) switch (_context3.prev = _context3.next) {
      case 0:
        _context3.prev = 0;
        _context3.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        _context3.next = 5;
        return (0, _effects.call)(_api.login, action.email, action.password);
      case 5:
        response = _context3.sent;
        data = response.data;
        if (!data.ok) {
          _context3.next = 13;
          break;
        }
        _context3.next = 10;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        }), (0, _effects.put)({
          type: _actionTypes.default.LOGIN_SUCCESS,
          payload: {
            user: data.result.user
          }
        }), (0, _effects.put)((0, _actions.navigateToScreen)('Overview', {}))]);
      case 10:
        RootNavigation.navigate('Overview', {});
        _context3.next = 15;
        break;
      case 13:
        _context3.next = 15;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 15:
        _context3.next = 21;
        break;
      case 17:
        _context3.prev = 17;
        _context3.t0 = _context3["catch"](0);
        _context3.next = 21;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context3.t0 === 'string' ? _context3.t0 : _context3.t0.message
          }
        });
      case 21:
      case "end":
        return _context3.stop();
    }
  }, _marked3, null, [[0, 17]]);
}
function watchAuthRequest() {
  return _regenerator.default.wrap(function watchAuthRequest$(_context4) {
    while (1) switch (_context4.prev = _context4.next) {
      case 0:
        _context4.next = 2;
        return (0, _effects.all)([(0, _effects.takeLatest)(_actionTypes.default.SAVE_ACCOUNT_REQUEST, save_account), (0, _effects.takeLatest)(_actionTypes.default.LOGIN_REQUEST, login_request), (0, _effects.takeLatest)(_actionTypes.default.CHECK_USER_REQUEST, check_user_request)]);
      case 2:
      case "end":
        return _context4.stop();
    }
  }, _marked4);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,