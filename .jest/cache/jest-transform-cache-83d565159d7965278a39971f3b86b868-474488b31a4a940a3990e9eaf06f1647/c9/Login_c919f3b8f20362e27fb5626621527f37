32368a665f89362307aac76926bcd876
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _jsxRuntime = require("react/jsx-runtime");
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var components_1 = require("@ui-kitten/components");
var react_native_elements_1 = require("react-native-elements");
var FontAwesome_1 = __importDefault(require("react-native-vector-icons/FontAwesome"));
var react_redux_1 = require("react-redux");
var actions_1 = require("../redux/actions");
var actionTypes_1 = require("../utils/actionTypes");
var Login = function Login() {
  var passwordRef = null;
  var dispatch = (0, react_redux_1.useDispatch)();
  var _ref = (0, react_1.useState)(''),
    _ref2 = (0, _slicedToArray2.default)(_ref, 2),
    email = _ref2[0],
    setEmail = _ref2[1];
  var _ref3 = (0, react_1.useState)(''),
    _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
    password = _ref4[0],
    setPassword = _ref4[1];
  var _ref5 = (0, react_1.useState)(''),
    _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
    selectedField = _ref6[0],
    setSelectedField = _ref6[1];
  var _ref7 = (0, react_1.useState)(true),
    _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
    secureTextEntry = _ref8[0],
    setSecureTextEntry = _ref8[1];
  var _ref9 = (0, react_1.useState)(null),
    _ref10 = (0, _slicedToArray2.default)(_ref9, 2),
    isValid = _ref10[0],
    setIsValid = _ref10[1];
  var _ref11 = (0, react_1.useState)(null),
    _ref12 = (0, _slicedToArray2.default)(_ref11, 2),
    emailIsValid = _ref12[0],
    setEmailIsValid = _ref12[1];
  var _ref13 = (0, react_1.useState)(null),
    _ref14 = (0, _slicedToArray2.default)(_ref13, 2),
    emailValueIsValid = _ref14[0],
    setEmailValueIsValid = _ref14[1];
  var _ref15 = (0, react_1.useState)(null),
    _ref16 = (0, _slicedToArray2.default)(_ref15, 2),
    pwdIsValid = _ref16[0],
    setPwdIsValid = _ref16[1];
  var renderPasswordIcon = function renderPasswordIcon() {
    return (0, _jsxRuntime.jsx)(react_native_1.TouchableWithoutFeedback, {
      onPress: toggleSecureEntry,
      children: (0, _jsxRuntime.jsx)(FontAwesome_1.default, {
        name: secureTextEntry ? 'eye-slash' : 'eye',
        size: 20
      })
    });
  };
  var renderValidInputIcon = function renderValidInputIcon() {
    return (0, _jsxRuntime.jsx)(react_native_1.TouchableWithoutFeedback, {
      onPress: toggleSecureEntry,
      children: (0, _jsxRuntime.jsx)(FontAwesome_1.default, {
        name: 'check-circle',
        size: 20,
        color: 'green'
      })
    });
  };
  var renderInvalidInputIcon = function renderInvalidInputIcon() {
    return (0, _jsxRuntime.jsx)(react_native_1.TouchableWithoutFeedback, {
      onPress: toggleSecureEntry,
      children: (0, _jsxRuntime.jsx)(FontAwesome_1.default, {
        name: 'exclamation-circle',
        size: 20,
        color: '#ff375d'
      })
    });
  };
  var toggleSecureEntry = function toggleSecureEntry() {
    setSecureTextEntry(!secureTextEntry);
  };
  var updateFields = function updateFields(field, value) {
    if (field === 'email') {
      setEmail(value);
    } else {
      setPassword(value);
    }
    setSelectedField(field);
  };
  var validateFields = function validateFields() {
    switch (selectedField) {
      case 'email':
        {
          var emailValid = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email);
          if (email) {
            setEmailIsValid(true);
            if (email && !emailValid) {
              setEmailValueIsValid(false);
            } else if (emailValid) {
              setEmailValueIsValid(true);
            }
          } else {
            setEmailValueIsValid(null);
            setEmailIsValid(false);
          }
          break;
        }
      case 'password':
        {
          if (password) {
            setPwdIsValid(true);
          } else {
            setPwdIsValid(false);
          }
          break;
        }
      default:
        break;
    }
  };
  (0, react_1.useEffect)(function () {
    validateFields();
  }, [email, password]);
  var login = function login() {
    dispatch((0, actions_1.loginRequest)(email, password));
  };
  (0, react_1.useEffect)(function () {
    var validateForm = function validateForm() {
      if (pwdIsValid && emailIsValid && emailValueIsValid) {
        setIsValid(true);
      } else {
        setIsValid(false);
      }
    };
    validateForm();
  }, [emailIsValid, emailValueIsValid, pwdIsValid]);
  return (0, _jsxRuntime.jsxs)(components_1.Layout, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(react_native_1.Image, {
      testID: "logo",
      source: require('../assets/logo.png'),
      style: styles.logo
    }), (0, _jsxRuntime.jsxs)(react_native_1.View, {
      style: styles.form,
      children: [(0, _jsxRuntime.jsxs)(react_native_1.View, {
        style: styles.inputContainer,
        children: [(0, _jsxRuntime.jsx)(components_1.Input, {
          testID: "email",
          autoFocus: true,
          label: "Email Address",
          placeholder: "Place your email address",
          placeholderTextColor: "#000",
          keyboardType: "email-address",
          status: emailIsValid && emailValueIsValid ? 'success' : emailIsValid === false || emailValueIsValid === false ? 'danger' : 'basic',
          accessoryRight: emailIsValid && emailValueIsValid ? renderValidInputIcon : emailIsValid === false || emailValueIsValid === false ? renderInvalidInputIcon : null,
          value: email,
          onChangeText: function onChangeText(text) {
            return updateFields('email', text);
          },
          onSubmitEditing: function onSubmitEditing() {
            return passwordRef.focus();
          }
        }), emailIsValid === false && (0, _jsxRuntime.jsxs)(react_native_1.View, {
          style: styles.errorContainer,
          children: [(0, _jsxRuntime.jsx)(FontAwesome_1.default, {
            name: "exclamation-triangle",
            color: '#ff375d',
            size: 8,
            style: styles.errorIcon
          }), (0, _jsxRuntime.jsx)(react_native_1.Text, {
            style: styles.errorStyle,
            children: actionTypes_1.LoginFormMessages.email
          })]
        }), emailValueIsValid === false && (0, _jsxRuntime.jsxs)(react_native_1.View, {
          style: styles.errorContainer,
          children: [(0, _jsxRuntime.jsx)(FontAwesome_1.default, {
            name: "exclamation-triangle",
            color: '#ff375d',
            size: 8,
            style: styles.errorIcon
          }), (0, _jsxRuntime.jsx)(react_native_1.Text, {
            style: styles.errorStyle,
            children: actionTypes_1.LoginFormMessages.emailNotValid
          })]
        })]
      }), (0, _jsxRuntime.jsxs)(react_native_1.View, {
        style: styles.inputContainer,
        children: [(0, _jsxRuntime.jsx)(components_1.Input, {
          testID: "password",
          ref: function ref(_ref17) {
            return passwordRef = _ref17;
          },
          label: "Password",
          placeholder: "Place your password",
          placeholderTextColor: "#000",
          secureTextEntry: secureTextEntry,
          accessoryRight: renderPasswordIcon,
          value: password,
          status: pwdIsValid ? 'success' : pwdIsValid === false ? 'danger' : 'basic',
          onChangeText: function onChangeText(text) {
            return updateFields('password', text);
          },
          onSubmitEditing: function onSubmitEditing() {
            return login();
          }
        }), pwdIsValid === false && (0, _jsxRuntime.jsxs)(react_native_1.View, {
          style: styles.errorContainer,
          children: [(0, _jsxRuntime.jsx)(FontAwesome_1.default, {
            name: "exclamation-triangle",
            color: '#ff375d',
            size: 8,
            style: styles.errorIcon
          }), (0, _jsxRuntime.jsx)(react_native_1.Text, {
            style: styles.errorStyle,
            children: actionTypes_1.LoginFormMessages.password
          })]
        })]
      }), (0, _jsxRuntime.jsx)(react_native_1.View, {
        style: styles.buttonContainer,
        children: (0, _jsxRuntime.jsx)(react_native_elements_1.Button, {
          testID: "login-btn",
          title: 'Login',
          containerStyle: {
            width: 'auto'
          },
          buttonStyle: styles.button,
          titleStyle: styles.textButton,
          type: "solid",
          disabled: !isValid,
          onPress: function onPress() {
            return login();
          }
        })
      })]
    })]
  });
};
var styles = react_native_1.StyleSheet.create({
  container: {
    flex: 1,
    alignContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
    paddingTop: 40
  },
  logo: {
    height: 200,
    width: 400,
    marginBottom: 100
  },
  form: {
    flex: 1
  },
  row: {
    flexDirection: 'row',
    padding: 10
  },
  inputContainer: {
    width: 300,
    marginBottom: 25
  },
  textInput: {
    fontSize: 16
  },
  buttonContainer: {
    marginTop: 10
  },
  button: {
    backgroundColor: '#2756a1',
    borderRadius: 10,
    width: '100%',
    height: 50
  },
  textButton: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center'
  },
  errorContainer: {
    flexDirection: 'row',
    marginTop: 5,
    paddingLeft: 10
  },
  errorIcon: {
    paddingTop: 4
  },
  errorStyle: {
    fontSize: 12,
    marginLeft: 3,
    color: '#ff375d'
  }
});
exports.default = Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,