b3b2e9ee2464277de58e54e0671fddfe
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AnimatedInterpolation = require('./AnimatedInterpolation');
var AnimatedNode = require('./AnimatedNode');
var AnimatedWithChildren = require('./AnimatedWithChildren');
var AnimatedDiffClamp = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedDiffClamp, _AnimatedWithChildren);
  var _super = _createSuper(AnimatedDiffClamp);
  function AnimatedDiffClamp(a, min, max) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedDiffClamp);
    _this = _super.call(this);
    _this._a = a;
    _this._min = min;
    _this._max = max;
    _this._value = _this._lastValue = _this._a.__getValue();
    return _this;
  }
  (0, _createClass2.default)(AnimatedDiffClamp, [{
    key: "__makeNative",
    value: function __makeNative() {
      this._a.__makeNative();
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDiffClamp.prototype), "__makeNative", this).call(this);
    }
  }, {
    key: "interpolate",
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      var value = this._a.__getValue();
      var diff = value - this._lastValue;
      this._lastValue = value;
      this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
      return this._value;
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this._a.__addChild(this);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      this._a.__removeChild(this);
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDiffClamp.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      return {
        type: 'diffclamp',
        input: this._a.__getNativeTag(),
        min: this._min,
        max: this._max
      };
    }
  }]);
  return AnimatedDiffClamp;
}(AnimatedWithChildren);
module.exports = AnimatedDiffClamp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2dldDIiLCJfaW5oZXJpdHMyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJkZWZhdWx0IiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwiQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIiwiQW5pbWF0ZWROb2RlIiwiQW5pbWF0ZWRXaXRoQ2hpbGRyZW4iLCJBbmltYXRlZERpZmZDbGFtcCIsIl9BbmltYXRlZFdpdGhDaGlsZHJlbiIsIl9zdXBlciIsImEiLCJtaW4iLCJtYXgiLCJfdGhpcyIsIl9hIiwiX21pbiIsIl9tYXgiLCJfdmFsdWUiLCJfbGFzdFZhbHVlIiwiX19nZXRWYWx1ZSIsImtleSIsInZhbHVlIiwiX19tYWtlTmF0aXZlIiwiaW50ZXJwb2xhdGUiLCJjb25maWciLCJkaWZmIiwiTWF0aCIsIl9fYXR0YWNoIiwiX19hZGRDaGlsZCIsIl9fZGV0YWNoIiwiX19yZW1vdmVDaGlsZCIsIl9fZ2V0TmF0aXZlQ29uZmlnIiwidHlwZSIsImlucHV0IiwiX19nZXROYXRpdmVUYWciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQW5pbWF0ZWREaWZmQ2xhbXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQW5pbWF0ZWRJbnRlcnBvbGF0aW9uID0gcmVxdWlyZSgnLi9BbmltYXRlZEludGVycG9sYXRpb24nKTtcbmNvbnN0IEFuaW1hdGVkTm9kZSA9IHJlcXVpcmUoJy4vQW5pbWF0ZWROb2RlJyk7XG5jb25zdCBBbmltYXRlZFdpdGhDaGlsZHJlbiA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRXaXRoQ2hpbGRyZW4nKTtcblxuaW1wb3J0IHR5cGUge0ludGVycG9sYXRpb25Db25maWdUeXBlfSBmcm9tICcuL0FuaW1hdGVkSW50ZXJwb2xhdGlvbic7XG5cbmNsYXNzIEFuaW1hdGVkRGlmZkNsYW1wIGV4dGVuZHMgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4ge1xuICBfYTogQW5pbWF0ZWROb2RlO1xuICBfbWluOiBudW1iZXI7XG4gIF9tYXg6IG51bWJlcjtcbiAgX3ZhbHVlOiBudW1iZXI7XG4gIF9sYXN0VmFsdWU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihhOiBBbmltYXRlZE5vZGUsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9hID0gYTtcbiAgICB0aGlzLl9taW4gPSBtaW47XG4gICAgdGhpcy5fbWF4ID0gbWF4O1xuICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5fbGFzdFZhbHVlID0gdGhpcy5fYS5fX2dldFZhbHVlKCk7XG4gIH1cblxuICBfX21ha2VOYXRpdmUoKSB7XG4gICAgdGhpcy5fYS5fX21ha2VOYXRpdmUoKTtcbiAgICBzdXBlci5fX21ha2VOYXRpdmUoKTtcbiAgfVxuXG4gIGludGVycG9sYXRlKGNvbmZpZzogSW50ZXJwb2xhdGlvbkNvbmZpZ1R5cGUpOiBBbmltYXRlZEludGVycG9sYXRpb24ge1xuICAgIHJldHVybiBuZXcgQW5pbWF0ZWRJbnRlcnBvbGF0aW9uKHRoaXMsIGNvbmZpZyk7XG4gIH1cblxuICBfX2dldFZhbHVlKCk6IG51bWJlciB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLl9hLl9fZ2V0VmFsdWUoKTtcbiAgICBjb25zdCBkaWZmID0gdmFsdWUgLSB0aGlzLl9sYXN0VmFsdWU7XG4gICAgdGhpcy5fbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5fdmFsdWUgPSBNYXRoLm1pbihNYXRoLm1heCh0aGlzLl92YWx1ZSArIGRpZmYsIHRoaXMuX21pbiksIHRoaXMuX21heCk7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgX19hdHRhY2goKTogdm9pZCB7XG4gICAgdGhpcy5fYS5fX2FkZENoaWxkKHRoaXMpO1xuICB9XG5cbiAgX19kZXRhY2goKTogdm9pZCB7XG4gICAgdGhpcy5fYS5fX3JlbW92ZUNoaWxkKHRoaXMpO1xuICAgIHN1cGVyLl9fZGV0YWNoKCk7XG4gIH1cblxuICBfX2dldE5hdGl2ZUNvbmZpZygpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZGlmZmNsYW1wJyxcbiAgICAgIGlucHV0OiB0aGlzLl9hLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICBtaW46IHRoaXMuX21pbixcbiAgICAgIG1heDogdGhpcy5fbWF4LFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBbmltYXRlZERpZmZDbGFtcDtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFHLEtBQUEsR0FBQUosc0JBQUEsQ0FB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