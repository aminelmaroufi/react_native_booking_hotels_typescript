ff45c63024c2236d603e09b9d7232c03
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var actionTypes_1 = __importDefault(require("../../utils/actionTypes"));
var user_1 = require("../../models/user");
var initialState = {
  fetching: false,
  isLoggedIn: false,
  message: '',
  error: false,
  user: user_1.emptyUser,
  success: false
};
function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;
  switch (action.type) {
    case actionTypes_1.default.API_CALL_REQUEST:
      return (0, _extends2.default)((0, _extends2.default)({}, state), {
        fetching: true,
        success: false,
        error: false,
        message: ''
      });
    case actionTypes_1.default.API_CALL_SUCCESS:
      return (0, _extends2.default)((0, _extends2.default)({}, state), {
        fetching: false,
        success: true
      });
    case actionTypes_1.default.API_CALL_FAILURE:
      return (0, _extends2.default)((0, _extends2.default)({}, state), {
        fetching: false,
        error: true,
        message: action.payload.message
      });
    case actionTypes_1.default.SUCCESS_OPERATION:
      return (0, _extends2.default)((0, _extends2.default)({}, state), {
        fetching: false,
        success: true,
        message: action.payload.message
      });
    case actionTypes_1.default.CHECK_USER_SUCCESS:
      return (0, _extends2.default)((0, _extends2.default)({}, state), {
        user: action.payload.user ? action.payload.user : user_1.emptyUser,
        isLoggedIn: action.payload.user ? true : false
      });
    case actionTypes_1.default.CREATE_ACCOUNT_SUCCESS:
      return (0, _extends2.default)((0, _extends2.default)({}, state), {
        user: action.payload.user
      });
    case actionTypes_1.default.LOGIN_SUCCESS:
      return (0, _extends2.default)((0, _extends2.default)({}, state), {
        user: action.payload.user,
        isLoggedIn: true
      });
    case actionTypes_1.default.ADD_CARD_SUCCESS:
      return (0, _extends2.default)((0, _extends2.default)({}, state), {
        user: (0, _extends2.default)((0, _extends2.default)({}, state.user), {
          cards: [].concat((0, _toConsumableArray2.default)(state.user.cards), [action.payload.card])
        })
      });
    case actionTypes_1.default.SET_DEFAULT_CARD:
      var cards = state.user.cards.filter(function (c) {
        return c.id !== action.payload.card.id;
      });
      cards.unshift(action.payload.card);
      return (0, _extends2.default)((0, _extends2.default)({}, state), {
        user: (0, _extends2.default)((0, _extends2.default)({}, state.user), {
          cards: cards
        })
      });
    default:
      return state;
  }
}
exports.default = reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhY3Rpb25UeXBlc18xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInVzZXJfMSIsImluaXRpYWxTdGF0ZSIsImZldGNoaW5nIiwiaXNMb2dnZWRJbiIsIm1lc3NhZ2UiLCJlcnJvciIsInVzZXIiLCJlbXB0eVVzZXIiLCJzdWNjZXNzIiwicmVkdWNlciIsInN0YXRlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiYWN0aW9uIiwidHlwZSIsImRlZmF1bHQiLCJBUElfQ0FMTF9SRVFVRVNUIiwiX2V4dGVuZHMyIiwiQVBJX0NBTExfU1VDQ0VTUyIsIkFQSV9DQUxMX0ZBSUxVUkUiLCJwYXlsb2FkIiwiU1VDQ0VTU19PUEVSQVRJT04iLCJDSEVDS19VU0VSX1NVQ0NFU1MiLCJDUkVBVEVfQUNDT1VOVF9TVUNDRVNTIiwiTE9HSU5fU1VDQ0VTUyIsIkFERF9DQVJEX1NVQ0NFU1MiLCJjYXJkcyIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJjYXJkIiwiU0VUX0RFRkFVTFRfQ0FSRCIsImZpbHRlciIsImMiLCJpZCIsInVuc2hpZnQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL1VzZXJzL0FtaW5lL0Rlc2t0b3AvcHJvamVjdHMvQm9va2luZ0hvdGVsc0FwcC9zcmMvcmVkdXgvcmVkdWNlcnMvYXV0aC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQWN0aW9uVHlwZXMgZnJvbSAnLi4vLi4vdXRpbHMvYWN0aW9uVHlwZXMnO1xuaW1wb3J0IHthdXRoQWN0aW9ucywgQXV0aFN0YXRlfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQge2VtcHR5VXNlcn0gZnJvbSAnLi4vLi4vbW9kZWxzL3VzZXInO1xuXG5jb25zdCBpbml0aWFsU3RhdGU6IEF1dGhTdGF0ZSA9IHtcbiAgZmV0Y2hpbmc6IGZhbHNlLFxuICBpc0xvZ2dlZEluOiBmYWxzZSxcbiAgbWVzc2FnZTogJycsXG4gIGVycm9yOiBmYWxzZSxcbiAgdXNlcjogZW1wdHlVc2VyLFxuICBzdWNjZXNzOiBmYWxzZSxcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IGF1dGhBY3Rpb25zKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFjdGlvblR5cGVzLkFQSV9DQUxMX1JFUVVFU1Q6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZmV0Y2hpbmc6IHRydWUsXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6ICcnLFxuICAgICAgfTtcbiAgICBjYXNlIEFjdGlvblR5cGVzLkFQSV9DQUxMX1NVQ0NFU1M6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgfTtcbiAgICBjYXNlIEFjdGlvblR5cGVzLkFQSV9DQUxMX0ZBSUxVUkU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgICBlcnJvcjogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogYWN0aW9uLnBheWxvYWQubWVzc2FnZSxcbiAgICAgIH07XG4gICAgY2FzZSBBY3Rpb25UeXBlcy5TVUNDRVNTX09QRVJBVElPTjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBmZXRjaGluZzogZmFsc2UsXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6IGFjdGlvbi5wYXlsb2FkLm1lc3NhZ2UsXG4gICAgICB9O1xuICAgIGNhc2UgQWN0aW9uVHlwZXMuQ0hFQ0tfVVNFUl9TVUNDRVNTOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHVzZXI6IGFjdGlvbi5wYXlsb2FkLnVzZXIgPyBhY3Rpb24ucGF5bG9hZC51c2VyIDogZW1wdHlVc2VyLFxuICAgICAgICBpc0xvZ2dlZEluOiBhY3Rpb24ucGF5bG9hZC51c2VyID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgfTtcbiAgICBjYXNlIEFjdGlvblR5cGVzLkNSRUFURV9BQ0NPVU5UX1NVQ0NFU1M6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdXNlcjogYWN0aW9uLnBheWxvYWQudXNlcixcbiAgICAgIH07XG4gICAgY2FzZSBBY3Rpb25UeXBlcy5MT0dJTl9TVUNDRVNTOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHVzZXI6IGFjdGlvbi5wYXlsb2FkLnVzZXIsXG4gICAgICAgIGlzTG9nZ2VkSW46IHRydWUsXG4gICAgICB9O1xuICAgIGNhc2UgQWN0aW9uVHlwZXMuQUREX0NBUkRfU1VDQ0VTUzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgLi4uc3RhdGUudXNlcixcbiAgICAgICAgICBjYXJkczogWy4uLnN0YXRlLnVzZXIuY2FyZHMsIGFjdGlvbi5wYXlsb2FkLmNhcmRdLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBjYXNlIEFjdGlvblR5cGVzLlNFVF9ERUZBVUxUX0NBUkQ6XG4gICAgICBsZXQgY2FyZHMgPSBzdGF0ZS51c2VyLmNhcmRzLmZpbHRlcihjID0+IGMuaWQgIT09IGFjdGlvbi5wYXlsb2FkLmNhcmQuaWQpO1xuICAgICAgY2FyZHMudW5zaGlmdChhY3Rpb24ucGF5bG9hZC5jYXJkKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgLi4uc3RhdGUudXNlcixcbiAgICAgICAgICBjYXJkczogY2FyZHMsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4g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