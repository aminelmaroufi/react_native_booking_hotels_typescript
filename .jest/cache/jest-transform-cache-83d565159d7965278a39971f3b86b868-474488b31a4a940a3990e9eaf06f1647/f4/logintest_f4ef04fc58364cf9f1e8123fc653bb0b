5ea3274073a4085f2951e705213952bf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _store = _interopRequireDefault(require("../../redux/store"));
var _Login = _interopRequireDefault(require("../Login"));
var _actions = require("../../redux/actions");
var _Setup = _interopRequireDefault(require("../Setup"));
var _jsxRuntime = require("react/jsx-runtime");
var store = (0, _store.default)();
var email = 'test@test.com';
var password = 'Azerty123@@';
describe('Test Login Component', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    (0, _Setup.default)((0, _jsxRuntime.jsx)(_Login.default, {}), store);
  });
  afterEach(_reactNative.cleanup);
  it('should render all form element', function () {
    expect(_reactNative.screen.getByTestId('logo')).toBeDefined();
    expect(_reactNative.screen.getByTestId('email')).toBeDefined();
    expect(_reactNative.screen.getByTestId('password')).toBeDefined();
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn).toBeDefined();
  });
  it('should enable login button after entereing valid email and password value', function () {
    var emailInput = _reactNative.screen.getByTestId('email');
    var passwordInput = _reactNative.screen.getByTestId('password');
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', true);
    _reactNative.fireEvent.changeText(emailInput, email);
    _reactNative.fireEvent.changeText(passwordInput, password);
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', false);
    _reactNative.fireEvent.press(loginBtn);
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith((0, _actions.loginRequest)(email, password));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9zdG9yZSIsIl9Mb2dpbiIsIl9hY3Rpb25zIiwiX1NldHVwIiwiX2pzeFJ1bnRpbWUiLCJzdG9yZSIsImNvbmZpZ3VyZVN0b3JlIiwiZW1haWwiLCJwYXNzd29yZCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImRpc3BhdGNoIiwiamVzdCIsImZuIiwiU2V0dXAiLCJqc3giLCJkZWZhdWx0IiwiYWZ0ZXJFYWNoIiwiY2xlYW51cCIsIml0IiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlRGVmaW5lZCIsImxvZ2luQnRuIiwiZW1haWxJbnB1dCIsInBhc3N3b3JkSW5wdXQiLCJwcm9wcyIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsInRvSGF2ZVByb3BlcnR5IiwiZmlyZUV2ZW50IiwiY2hhbmdlVGV4dCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJsb2dpblJlcXVlc3QiXSwic291cmNlcyI6WyJsb2dpbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge2NsZWFudXAsIGZpcmVFdmVudCwgc2NyZWVufSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAnLi4vLi4vcmVkdXgvc3RvcmUnO1xuaW1wb3J0IExvZ2luIGZyb20gJy4uL0xvZ2luJztcbmltcG9ydCB7bG9naW5SZXF1ZXN0fSBmcm9tICcuLi8uLi9yZWR1eC9hY3Rpb25zJztcbmltcG9ydCBTZXR1cCBmcm9tICcuLi9TZXR1cCc7XG5cbmxldCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKCk7XG5cbmNvbnN0IGVtYWlsID0gJ3Rlc3RAdGVzdC5jb20nO1xuY29uc3QgcGFzc3dvcmQgPSAnQXplcnR5MTIzQEAnO1xuXG5kZXNjcmliZSgnVGVzdCBMb2dpbiBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHN0b3JlLmRpc3BhdGNoID0gamVzdC5mbigpO1xuICAgIFNldHVwKDxMb2dpbiAvPiwgc3RvcmUpO1xuICB9KTtcblxuICBhZnRlckVhY2goY2xlYW51cCk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYWxsIGZvcm0gZWxlbWVudCcsICgpID0+IHtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdsb2dvJykpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnZW1haWwnKSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdwYXNzd29yZCcpKS50b0JlRGVmaW5lZCgpO1xuXG4gICAgY29uc3QgbG9naW5CdG4gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvZ2luLWJ0bicpO1xuXG4gICAgZXhwZWN0KGxvZ2luQnRuKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGVuYWJsZSBsb2dpbiBidXR0b24gYWZ0ZXIgZW50ZXJlaW5nIHZhbGlkIGVtYWlsIGFuZCBwYXNzd29yZCB2YWx1ZScsICgpID0+IHtcbiAgICBjb25zdCBlbWFpbElucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdlbWFpbCcpO1xuICAgIGNvbnN0IHBhc3N3b3JkSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Bhc3N3b3JkJyk7XG4gICAgY29uc3QgbG9naW5CdG4gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvZ2luLWJ0bicpO1xuXG4gICAgZXhwZWN0KGxvZ2luQnRuLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZSkudG9IYXZlUHJvcGVydHkoJ2Rpc2FibGVkJywgdHJ1ZSk7XG5cbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChlbWFpbElucHV0LCBlbWFpbCk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQocGFzc3dvcmRJbnB1dCwgcGFzc3dvcmQpO1xuXG4gICAgZXhwZWN0KGxvZ2luQnRuLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZSkudG9IYXZlUHJvcGVydHkoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhsb2dpbkJ0bik7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChsb2dpblJlcXVlc3QoZW1haWwsIHBhc3N3b3JkKSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxNQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBNkIsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBRTdCLElBQUlPLEtBQUssR0FBRyxJQUFBQyxjQUFjLEdBQUU7QUFFNUIsSUFBTUMsS0FBSyxHQUFHLGVBQWU7QUFDN0IsSUFBTUMsUUFBUSxHQUFHLGFBQWE7QUFFOUJDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxZQUFNO0VBQ3JDQyxVQUFVLENBQUMsWUFBTTtJQUNmTCxLQUFLLENBQUNNLFFBQVEsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDMUIsSUFBQUMsY0FBSyxFQUFDLElBQUFWLFdBQUEsQ0FBQVcsR0FBQSxFQUFDZCxNQUFBLENBQUFlLE9BQUssS0FBRyxFQUFFWCxLQUFLLENBQUM7RUFDekIsQ0FBQyxDQUFDO0VBRUZZLFNBQVMsQ0FBQ0Msb0JBQU8sQ0FBQztFQUVsQkMsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLFlBQU07SUFDekNDLE1BQU0sQ0FBQ0MsbUJBQU0sQ0FBQ0MsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUNDLFdBQVcsRUFBRTtJQUNoREgsTUFBTSxDQUFDQyxtQkFBTSxDQUFDQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxFQUFFO0lBQ2pESCxNQUFNLENBQUNDLG1CQUFNLENBQUNDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDQyxXQUFXLEVBQUU7SUFFcEQsSUFBTUMsUUFBUSxHQUFHSCxtQkFBTSxDQUFDQyxXQUFXLENBQUMsV0FBVyxDQUFDO0lBRWhERixNQUFNLENBQUNJLFFBQVEsQ0FBQyxDQUFDRCxXQUFXLEVBQUU7RUFDaEMsQ0FBQyxDQUFDO0VBRUZKLEVBQUUsQ0FBQywyRUFBMkUsRUFBRSxZQUFNO0lBQ3BGLElBQU1NLFVBQVUsR0FBR0osbUJBQU0sQ0FBQ0MsV0FBVyxDQUFDLE9BQU8sQ0FBQztJQUM5QyxJQUFNSSxhQUFhLEdBQUdMLG1CQUFNLENBQUNDLFdBQVcsQ0FBQyxVQUFVLENBQUM7SUFDcEQsSUFBTUUsUUFBUSxHQUFHSCxtQkFBTSxDQUFDQyxXQUFXLENBQUMsV0FBVyxDQUFDO0lBRWhERixNQUFNLENBQUNJLFFBQVEsQ0FBQ0csS0FBSyxDQUFDQyxrQkFBa0IsQ0FBQyxDQUFDQyxjQUFjLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQztJQUUxRUMsc0JBQVMsQ0FBQ0MsVUFBVSxDQUFDTixVQUFVLEVBQUVsQixLQUFLLENBQUM7SUFDdkN1QixzQkFBUyxDQUFDQyxVQUFVLENBQUNMLGFBQWEsRUFBRWxCLFFBQVEsQ0FBQztJQUU3Q1ksTUFBTSxDQUFDSSxRQUFRLENBQUNHLEtBQUssQ0FBQ0Msa0JBQWtCLENBQUMsQ0FBQ0MsY0FBYyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUM7SUFDM0VDLHNCQUFTLENBQUNFLEtBQUssQ0FBQ1IsUUFBUSxDQUFDO0lBQ3pCSixNQUFNLENBQUNmLEtBQUssQ0FBQ00sUUFBUSxDQUFDLENBQUNzQixxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDL0NiLE1BQU0sQ0FBQ2YsS0FBSyxDQUFDTSxRQUFRLENBQUMsQ0FBQ3VCLG9CQUFvQixDQUFDLElBQUFDLHFCQUFZLEVBQUM1QixLQUFLLEVBQUVDLFFBQVEsQ0FBQyxDQUFDO0VBQzVFLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9