1bf2c5f638b739b48feed74a23ff7a80
'use strict';

function stiffnessFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}
function dampingFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}
function fromOrigamiTensionAndFriction(tension, friction) {
  return {
    stiffness: stiffnessFromOrigamiValue(tension),
    damping: dampingFromOrigamiValue(friction)
  };
}
function fromBouncinessAndSpeed(bounciness, speed) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }
  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }
  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }
  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }
  function b3Friction1(x) {
    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }
  function b3Friction2(x) {
    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
  }
  function b3Friction3(x) {
    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }
  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }
  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
  return {
    stiffness: stiffnessFromOrigamiValue(bouncyTension),
    damping: dampingFromOrigamiValue(bouncyFriction)
  };
}
module.exports = {
  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed: fromBouncinessAndSpeed
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlIiwib1ZhbHVlIiwiZGFtcGluZ0Zyb21PcmlnYW1pVmFsdWUiLCJmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbiIsInRlbnNpb24iLCJmcmljdGlvbiIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJmcm9tQm91bmNpbmVzc0FuZFNwZWVkIiwiYm91bmNpbmVzcyIsInNwZWVkIiwibm9ybWFsaXplIiwidmFsdWUiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJwcm9qZWN0Tm9ybWFsIiwibiIsInN0YXJ0IiwiZW5kIiwibGluZWFySW50ZXJwb2xhdGlvbiIsInQiLCJxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uIiwiYjNGcmljdGlvbjEiLCJ4IiwiTWF0aCIsInBvdyIsImIzRnJpY3Rpb24yIiwiYjNGcmljdGlvbjMiLCJiM05vYm91bmNlIiwiYiIsInMiLCJib3VuY3lUZW5zaW9uIiwiYm91bmN5RnJpY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiU3ByaW5nQ29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG50eXBlIFNwcmluZ0NvbmZpZ1R5cGUgPSB7XG4gIHN0aWZmbmVzczogbnVtYmVyLFxuICBkYW1waW5nOiBudW1iZXIsXG4gIC4uLlxufTtcblxuZnVuY3Rpb24gc3RpZmZuZXNzRnJvbU9yaWdhbWlWYWx1ZShvVmFsdWUpIHtcbiAgcmV0dXJuIChvVmFsdWUgLSAzMCkgKiAzLjYyICsgMTk0O1xufVxuXG5mdW5jdGlvbiBkYW1waW5nRnJvbU9yaWdhbWlWYWx1ZShvVmFsdWUpIHtcbiAgcmV0dXJuIChvVmFsdWUgLSA4KSAqIDMgKyAyNTtcbn1cblxuZnVuY3Rpb24gZnJvbU9yaWdhbWlUZW5zaW9uQW5kRnJpY3Rpb24oXG4gIHRlbnNpb246IG51bWJlcixcbiAgZnJpY3Rpb246IG51bWJlcixcbik6IFNwcmluZ0NvbmZpZ1R5cGUge1xuICByZXR1cm4ge1xuICAgIHN0aWZmbmVzczogc3RpZmZuZXNzRnJvbU9yaWdhbWlWYWx1ZSh0ZW5zaW9uKSxcbiAgICBkYW1waW5nOiBkYW1waW5nRnJvbU9yaWdhbWlWYWx1ZShmcmljdGlvbiksXG4gIH07XG59XG5cbmZ1bmN0aW9uIGZyb21Cb3VuY2luZXNzQW5kU3BlZWQoXG4gIGJvdW5jaW5lc3M6IG51bWJlcixcbiAgc3BlZWQ6IG51bWJlcixcbik6IFNwcmluZ0NvbmZpZ1R5cGUge1xuICBmdW5jdGlvbiBub3JtYWxpemUodmFsdWUsIHN0YXJ0VmFsdWUsIGVuZFZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAtIHN0YXJ0VmFsdWUpIC8gKGVuZFZhbHVlIC0gc3RhcnRWYWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9qZWN0Tm9ybWFsKG4sIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3RhcnQgKyBuICogKGVuZCAtIHN0YXJ0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVhckludGVycG9sYXRpb24odCwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiB0ICogZW5kICsgKDEgLSB0KSAqIHN0YXJ0O1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhZHJhdGljT3V0SW50ZXJwb2xhdGlvbih0LCBzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGxpbmVhckludGVycG9sYXRpb24oMiAqIHQgLSB0ICogdCwgc3RhcnQsIGVuZCk7XG4gIH1cblxuICBmdW5jdGlvbiBiM0ZyaWN0aW9uMSh4KSB7XG4gICAgcmV0dXJuIDAuMDAwNyAqIE1hdGgucG93KHgsIDMpIC0gMC4wMzEgKiBNYXRoLnBvdyh4LCAyKSArIDAuNjQgKiB4ICsgMS4yODtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24yKHgpIHtcbiAgICByZXR1cm4gMC4wMDAwNDQgKiBNYXRoLnBvdyh4LCAzKSAtIDAuMDA2ICogTWF0aC5wb3coeCwgMikgKyAwLjM2ICogeCArIDI7XG4gIH1cblxuICBmdW5jdGlvbiBiM0ZyaWN0aW9uMyh4KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDAuMDAwMDAwNDUgKiBNYXRoLnBvdyh4LCAzKSAtXG4gICAgICAwLjAwMDMzMiAqIE1hdGgucG93KHgsIDIpICtcbiAgICAgIDAuMTA3OCAqIHggK1xuICAgICAgNS44NFxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBiM05vYm91bmNlKHRlbnNpb24pIHtcbiAgICBpZiAodGVuc2lvbiA8PSAxOCkge1xuICAgICAgcmV0dXJuIGIzRnJpY3Rpb24xKHRlbnNpb24pO1xuICAgIH0gZWxzZSBpZiAodGVuc2lvbiA+IDE4ICYmIHRlbnNpb24gPD0gNDQpIHtcbiAgICAgIHJldHVybiBiM0ZyaWN0aW9uMih0ZW5zaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGIzRnJpY3Rpb24zKHRlbnNpb24pO1xuICAgIH1cbiAgfVxuXG4gIGxldCBiID0gbm9ybWFsaXplKGJvdW5jaW5lc3MgLyAxLjcsIDAsIDIwKTtcbiAgYiA9IHByb2plY3ROb3JtYWwoYiwgMCwgMC44KTtcbiAgY29uc3QgcyA9IG5vcm1hbGl6ZShzcGVlZCAvIDEuNywgMCwgMjApO1xuICBjb25zdCBib3VuY3lUZW5zaW9uID0gcHJvamVjdE5vcm1hbChzLCAwLjUsIDIwMCk7XG4gIGNvbnN0IGJvdW5jeUZyaWN0aW9uID0gcXVhZHJhdGljT3V0SW50ZXJwb2xhdGlvbihcbiAgICBiLFxuICAgIGIzTm9ib3VuY2UoYm91bmN5VGVuc2lvbiksXG4gICAgMC4wMSxcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIHN0aWZmbmVzczogc3RpZmZuZXNzRnJvbU9yaWdhbWlWYWx1ZShib3VuY3lUZW5zaW9uKSxcbiAgICBkYW1waW5nOiBkYW1waW5nRnJvbU9yaWdhbWlWYWx1ZShib3VuY3lGcmljdGlvbiksXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbixcbiAgZnJvbUJvdW5jaW5lc3NBbmRTcGVlZCxcbn07XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBUVosU0FBU0EseUJBQXlCQSxDQUFDQyxNQUFNLEVBQUU7RUFDekMsT0FBTyxDQUFDQSxNQUFNLEdBQUcsRUFBRSxJQUFJLElBQUksR0FBRyxHQUFHO0FBQ25DO0FBRUEsU0FBU0MsdUJBQXVCQSxDQUFDRCxNQUFNLEVBQUU7RUFDdkMsT0FBTyxDQUFDQSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQzlCO0FBRUEsU0FBU0UsNkJBQTZCQSxDQUNwQ0MsT0FBZSxFQUNmQyxRQUFnQixFQUNFO0VBQ2xCLE9BQU87SUFDTEMsU0FBUyxFQUFFTix5QkFBeUIsQ0FBQ0ksT0FBTyxDQUFDO0lBQzdDRyxPQUFPLEVBQUVMLHVCQUF1QixDQUFDRyxRQUFRO0VBQzNDLENBQUM7QUFDSDtBQUVBLFNBQVNHLHNCQUFzQkEsQ0FDN0JDLFVBQWtCLEVBQ2xCQyxLQUFhLEVBQ0s7RUFDbEIsU0FBU0MsU0FBU0EsQ0FBQ0MsS0FBSyxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsRUFBRTtJQUM5QyxPQUFPLENBQUNGLEtBQUssR0FBR0MsVUFBVSxLQUFLQyxRQUFRLEdBQUdELFVBQVUsQ0FBQztFQUN2RDtFQUVBLFNBQVNFLGFBQWFBLENBQUNDLENBQUMsRUFBRUMsS0FBSyxFQUFFQyxHQUFHLEVBQUU7SUFDcEMsT0FBT0QsS0FBSyxHQUFHRCxDQUFDLElBQUlFLEdBQUcsR0FBR0QsS0FBSyxDQUFDO0VBQ2xDO0VBRUEsU0FBU0UsbUJBQW1CQSxDQUFDQyxDQUFD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