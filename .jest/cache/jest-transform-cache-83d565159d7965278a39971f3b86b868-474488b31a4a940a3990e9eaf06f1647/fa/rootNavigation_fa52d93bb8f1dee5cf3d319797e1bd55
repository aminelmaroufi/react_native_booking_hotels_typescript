e8d17b66922114ec7279b805d385a7f3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pop = exports.navigationRef = exports.navigate = void 0;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var navigationRef = React.createRef();
exports.navigationRef = navigationRef;
var navigate = function navigate(name, params) {
  var _navigationRef$curren;
  (_navigationRef$curren = navigationRef.current) == null ? void 0 : _navigationRef$curren.navigate(name, params);
};
exports.navigate = navigate;
var pop = function pop(n) {
  var _navigationRef$curren2;
  (_navigationRef$curren2 = navigationRef.current) == null ? void 0 : _navigationRef$curren2.pop(n);
};
exports.pop = pop;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJuYXZpZ2F0aW9uUmVmIiwiY3JlYXRlUmVmIiwiZXhwb3J0cyIsIm5hdmlnYXRlIiwibmFtZSIsInBhcmFtcyIsIl9uYXZpZ2F0aW9uUmVmJGN1cnJlbiIsImN1cnJlbnQiLCJwb3AiLCJuIiwiX25hdmlnYXRpb25SZWYkY3VycmVuMiJdLCJzb3VyY2VzIjpbInJvb3ROYXZpZ2F0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGNvbnN0IG5hdmlnYXRpb25SZWY6IFJlYWN0LlJlZjxhbnk+ID0gUmVhY3QuY3JlYXRlUmVmKCk7XG5cbmV4cG9ydCBjb25zdCBuYXZpZ2F0ZSA9IChuYW1lOiBzdHJpbmcsIHBhcmFtczogb2JqZWN0KSA9PiB7XG4gIG5hdmlnYXRpb25SZWYuY3VycmVudD8ubmF2aWdhdGUobmFtZSwgcGFyYW1zKTtcbn07XG5cbmV4cG9ydCBjb25zdCBwb3AgPSAobjogbnVtYmVyKSA9PiB7XG4gIG5hdmlnYXRpb25SZWYuY3VycmVudD8ucG9wKG4pO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQStCLFNBQUFDLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBSCx3QkFBQU8sR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBLDRCQUFBRSxPQUFBLEVBQUFGLEdBQUEsVUFBQUcsS0FBQSxHQUFBUix3QkFBQSxDQUFBQyxXQUFBLE9BQUFPLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFKLEdBQUEsWUFBQUcsS0FBQSxDQUFBRSxHQUFBLENBQUFMLEdBQUEsU0FBQU0sTUFBQSxXQUFBQyxxQkFBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxHQUFBLElBQUFYLEdBQUEsUUFBQVcsR0FBQSxrQkFBQUgsTUFBQSxDQUFBSSxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBZCxHQUFBLEVBQUFXLEdBQUEsU0FBQUksSUFBQSxHQUFBUixxQkFBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFWLEdBQUEsRUFBQVcsR0FBQSxjQUFBSSxJQUFBLEtBQUFBLElBQUEsQ0FBQVYsR0FBQSxJQUFBVSxJQUFBLENBQUFDLEdBQUEsS0FBQVIsTUFBQSxDQUFBQyxjQUFBLENBQUFILE1BQUEsRUFBQUssR0FBQSxFQUFBSSxJQUFBLFlBQUFULE1BQUEsQ0FBQUssR0FBQSxJQUFBWCxHQUFBLENBQUFXLEdBQUEsU0FBQUwsTUFBQSxDQUFBSixPQUFBLEdBQUFGLEdBQUEsTUFBQUcsS0FBQSxJQUFBQSxLQUFBLENBQUFhLEdBQUEsQ0FBQWhCLEdBQUEsRUFBQU0sTUFBQSxZQUFBQSxNQUFBO0FBRXhCLElBQU1XLGFBQTZCLEdBQUd6QixLQUFLLENBQUMwQixTQUFTLEVBQUU7QUFBQ0MsT0FBQSxDQUFBRixhQUFBLEdBQUFBLGFBQUE7QUFFeEQsSUFBTUcsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQUlDLElBQVksRUFBRUMsTUFBYyxFQUFLO0VBQUEsSUFBQUMscUJBQUE7RUFDeEQsQ0FBQUEscUJBQUEsR0FBQU4sYUFBYSxDQUFDTyxPQUFPLHFCQUFyQkQscUJBQUEsQ0FBdUJILFFBQVEsQ0FBQ0MsSUFBSSxFQUFFQyxNQUFNLENBQUM7QUFDL0MsQ0FBQztBQUFDSCxPQUFBLENBQUFDLFFBQUEsR0FBQUEsUUFBQTtBQUVLLElBQU1LLEdBQUcsR0FBRyxTQUFOQSxHQUFHQSxDQUFJQyxDQUFTLEVBQUs7RUFBQSxJQUFBQyxzQkFBQTtFQUNoQyxDQUFBQSxzQkFBQSxHQUFBVixhQUFhLENBQUNPLE9BQU8scUJBQXJCRyxzQkFBQSxDQUF1QkYsR0FBRyxDQUFDQyxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUFDUCxPQUFBLENBQUFNLEdBQUEsR0FBQUEsR0FBQSJ9