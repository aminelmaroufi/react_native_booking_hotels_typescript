f81bde1271fdbc1553d44eccac0fff76
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extractResponder;
var _reactNative = require("react-native");
var responderKeys = Object.keys(_reactNative.PanResponder.create({}).panHandlers);
var numResponderKeys = responderKeys.length;
function extractResponder(o, props, ref) {
  var onPress = props.onPress,
    disabled = props.disabled,
    onPressIn = props.onPressIn,
    onPressOut = props.onPressOut,
    onLongPress = props.onLongPress,
    delayPressIn = props.delayPressIn,
    delayPressOut = props.delayPressOut,
    delayLongPress = props.delayLongPress,
    pointerEvents = props.pointerEvents;
  var responsible = false;
  for (var i = 0; i < numResponderKeys; i++) {
    var key = responderKeys[i];
    var value = props[key];
    if (value) {
      responsible = true;
      o[key] = value;
    }
  }
  if (pointerEvents) {
    o.pointerEvents = pointerEvents;
  }
  var hasTouchableProperty = disabled != null || onPress || onPressIn || onPressOut || onLongPress || delayPressIn || delayPressOut || delayLongPress;
  if (hasTouchableProperty) {
    responsible = true;
    o.onResponderMove = ref.touchableHandleResponderMove;
    o.onResponderGrant = ref.touchableHandleResponderGrant;
    o.onResponderRelease = ref.touchableHandleResponderRelease;
    o.onResponderTerminate = ref.touchableHandleResponderTerminate;
    o.onStartShouldSetResponder = ref.touchableHandleStartShouldSetResponder;
    o.onResponderTerminationRequest = ref.touchableHandleResponderTerminationRequest;
  }
  if (responsible) {
    o.responsible = true;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwicmVzcG9uZGVyS2V5cyIsIk9iamVjdCIsImtleXMiLCJQYW5SZXNwb25kZXIiLCJjcmVhdGUiLCJwYW5IYW5kbGVycyIsIm51bVJlc3BvbmRlcktleXMiLCJsZW5ndGgiLCJleHRyYWN0UmVzcG9uZGVyIiwibyIsInByb3BzIiwicmVmIiwib25QcmVzcyIsImRpc2FibGVkIiwib25QcmVzc0luIiwib25QcmVzc091dCIsIm9uTG9uZ1ByZXNzIiwiZGVsYXlQcmVzc0luIiwiZGVsYXlQcmVzc091dCIsImRlbGF5TG9uZ1ByZXNzIiwicG9pbnRlckV2ZW50cyIsInJlc3BvbnNpYmxlIiwiaSIsImtleSIsInZhbHVlIiwiaGFzVG91Y2hhYmxlUHJvcGVydHkiLCJvblJlc3BvbmRlck1vdmUiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJNb3ZlIiwib25SZXNwb25kZXJHcmFudCIsInRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlckdyYW50Iiwib25SZXNwb25kZXJSZWxlYXNlIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyUmVsZWFzZSIsIm9uUmVzcG9uZGVyVGVybWluYXRlIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRlIiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlciIsInRvdWNoYWJsZUhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwib25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QiXSwic291cmNlcyI6WyJleHRyYWN0UmVzcG9uZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhblJlc3BvbmRlciB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQge1xuICBleHRyYWN0ZWRQcm9wcyxcbiAgUmVzcG9uZGVySW5zdGFuY2VQcm9wcyxcbiAgUmVzcG9uZGVyUHJvcHMsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCByZXNwb25kZXJLZXlzID0gT2JqZWN0LmtleXMoUGFuUmVzcG9uZGVyLmNyZWF0ZSh7fSkucGFuSGFuZGxlcnMpO1xuY29uc3QgbnVtUmVzcG9uZGVyS2V5cyA9IHJlc3BvbmRlcktleXMubGVuZ3RoO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRyYWN0UmVzcG9uZGVyKFxuICBvOiBleHRyYWN0ZWRQcm9wcyxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgcHJvcHM6IHsgW3g6IHN0cmluZ106IGFueSB9ICYgUmVzcG9uZGVyUHJvcHMsXG4gIHJlZjogUmVzcG9uZGVySW5zdGFuY2VQcm9wcyxcbikge1xuICBjb25zdCB7XG4gICAgb25QcmVzcyxcbiAgICBkaXNhYmxlZCxcbiAgICBvblByZXNzSW4sXG4gICAgb25QcmVzc091dCxcbiAgICBvbkxvbmdQcmVzcyxcbiAgICBkZWxheVByZXNzSW4sXG4gICAgZGVsYXlQcmVzc091dCxcbiAgICBkZWxheUxvbmdQcmVzcyxcbiAgICBwb2ludGVyRXZlbnRzLFxuICB9ID0gcHJvcHM7XG5cbiAgbGV0IHJlc3BvbnNpYmxlID0gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUmVzcG9uZGVyS2V5czsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0gcmVzcG9uZGVyS2V5c1tpXTtcbiAgICBjb25zdCB2YWx1ZSA9IHByb3BzW2tleV07XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICByZXNwb25zaWJsZSA9IHRydWU7XG4gICAgICBvW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAocG9pbnRlckV2ZW50cykge1xuICAgIG8ucG9pbnRlckV2ZW50cyA9IHBvaW50ZXJFdmVudHM7XG4gIH1cblxuICBjb25zdCBoYXNUb3VjaGFibGVQcm9wZXJ0eSA9XG4gICAgZGlzYWJsZWQgIT0gbnVsbCB8fFxuICAgIG9uUHJlc3MgfHxcbiAgICBvblByZXNzSW4gfHxcbiAgICBvblByZXNzT3V0IHx8XG4gICAgb25Mb25nUHJlc3MgfHxcbiAgICBkZWxheVByZXNzSW4gfHxcbiAgICBkZWxheVByZXNzT3V0IHx8XG4gICAgZGVsYXlMb25nUHJlc3M7XG5cbiAgaWYgKGhhc1RvdWNoYWJsZVByb3BlcnR5KSB7XG4gICAgcmVzcG9uc2libGUgPSB0cnVlO1xuICAgIG8ub25SZXNwb25kZXJNb3ZlID0gcmVmLnRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlck1vdmU7XG4gICAgby5vblJlc3BvbmRlckdyYW50ID0gcmVmLnRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlckdyYW50O1xuICAgIG8ub25SZXNwb25kZXJSZWxlYXNlID0gcmVmLnRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclJlbGVhc2U7XG4gICAgby5vblJlc3BvbmRlclRlcm1pbmF0ZSA9IHJlZi50b3VjaGFibGVIYW5kbGVSZXNwb25kZXJUZXJtaW5hdGU7XG4gICAgby5vblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyID0gcmVmLnRvdWNoYWJsZUhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyO1xuICAgIG8ub25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QgPVxuICAgICAgcmVmLnRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDtcbiAgfVxuXG4gIGlmIChyZXNwb25zaWJsZSkge1xuICAgIG8ucmVzcG9uc2libGUgPSB0cnVlO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQU9BLElBQU1DLGFBQWEsR0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNKLFlBQUEsQ0FBQUssWUFBWSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDO0FBQ3RFLElBQU1DLGdCQUFnQixHQUFHTixhQUFhLENBQUNPLE1BQU07QUFFOUIsU0FBU0MsZ0JBQWdCQSxDQUN0Q0MsQ0FBaUIsRUFFakJDLEtBQTRDLEVBQzVDQyxHQUEyQixFQUMzQjtFQUNBLElBQ0VDLE9BQU8sR0FTTEYsS0FBSyxDQVRQRSxPQUFPO0lBQ1BDLFFBQVEsR0FRTkgsS0FBSyxDQVJQRyxRQUFRO0lBQ1JDLFNBQVMsR0FPUEosS0FBSyxDQVBQSSxTQUFTO0lBQ1RDLFVBQVUsR0FNUkwsS0FBSyxDQU5QSyxVQUFVO0lBQ1ZDLFdBQVcsR0FLVE4sS0FBSyxDQUxQTSxXQUFXO0lBQ1hDLFlBQVksR0FJVlAsS0FBSyxDQUpQTyxZQUFZO0lBQ1pDLGFBQWEsR0FHWFIsS0FBSyxDQUhQUSxhQUFhO0lBQ2JDLGNBQWMsR0FFWlQsS0FBSyxDQUZQUyxjQUFjO0lBQ2RDLGFBQWEsR0FDWFYsS0FBSyxDQURQVSxhQUFhO0VBR2YsSUFBSUMsV0FBVyxHQUFHLEtBQUs7RUFDdkIsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdoQixnQkFBZ0IsRUFBRWdCLENBQUMsRUFBRSxFQUFFO0lBQ3pDLElBQU1DLEdBQUcsR0FBR3ZCLGFBQWEsQ0FBQ3NCLENBQUMsQ0FBQztJQUM1QixJQUFNRSxLQUFLLEdBQUdkLEtBQUssQ0FBQ2EsR0FBRyxDQUFDO0lBQ3hCLElBQUlDLEtBQUssRUFBRTtNQUNUSCxXQUFXLEdBQUcsSUFBSTtNQUNsQlosQ0FBQyxDQUFDYyxHQUFHLENBQUMsR0FBR0MsS0FBSztJQUNoQjtFQUNGO0VBRUEsSUFBSUosYUFBYSxFQUFFO0lBQ2pCWCxDQUFDLENBQUNXLGFBQWEsR0FBR0EsYUFBYTtFQUNqQztFQUVBLElBQU1LLG9CQUFvQixHQUN4QlosUUFBUSxJQUFJLElBQUksSUFDaEJELE9BQU8sSUFDUEUsU0FBUyxJQUNUQyxVQUFVLElBQ1ZDLFdBQVcsSUFDWEMsWUFBWSxJQUNaQyxhQUFhLElBQ2JDLGNBQWM7RUFFaEIsSUFBSU0sb0JBQW9CLEVBQUU7SUFDeEJKLFdBQVcsR0FBRyxJQUFJO0lBQ2xCWixDQUFDLENBQUNpQixlQUFlLEdBQUdmLEdBQUcsQ0FBQ2dCLDRCQUE0QjtJQUNwRGxCLENBQUMsQ0FBQ21CLGdCQUFnQixHQUFHakIsR0FBRyxDQUFDa0IsNkJBQTZCO0lBQ3REcEIsQ0FBQyxDQUFDcUIsa0JBQWtCLEdBQUduQixHQUFHLENBQUNvQiwrQkFBK0I7SUFDMUR0QixDQUFDLENBQUN1QixvQkFBb0IsR0FBR3JCLEdBQUcsQ0FBQ3NCLGlDQUFpQztJQUM5RHhCLENBQUMsQ0FBQ3lCLHlCQUF5QixHQUFHdkIsR0FBRyxDQUFDd0Isc0NBQXNDO0lBQ3hFMUIsQ0FBQyxDQUFDMkIsNkJBQTZCLEdBQzdCekIsR0FBRyxDQUFDMEIsMENBQTBDO0VBQ2xEO0VBRUEsSUFBSWhCLFdBQVcsRUFBRTtJQUNmWixDQUFDLENBQUNZLFdBQVcsR0FBRyxJQUFJO0VBQ3RCO0FBQ0YifQ==