d89f9ee4b638b78ae529ca9e6db9ef9c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _store = _interopRequireDefault(require("../../redux/store"));
var _Login = _interopRequireDefault(require("../Login"));
var _actions = require("../../redux/actions");
var _Setup = _interopRequireDefault(require("../Setup"));
var store = (0, _store.default)();
var email = 'test@test.com';
var password = 'Azerty123@@';
describe('Test Login Component', function () {
  beforeEach(function () {
    store.dispatch = jest.fn();
    (0, _Setup.default)(_react.default.createElement(_Login.default, null), store);
  });
  afterEach(_reactNative.cleanup);
  it('should render all form element', function () {
    expect(_reactNative.screen.getByTestId('logo')).toBeDefined();
    expect(_reactNative.screen.getByTestId('email')).toBeDefined();
    expect(_reactNative.screen.getByTestId('password')).toBeDefined();
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn).toBeDefined();
  });
  it('should enable login button after entereing valid email and password value', function () {
    var emailInput = _reactNative.screen.getByTestId('email');
    var passwordInput = _reactNative.screen.getByTestId('password');
    var loginBtn = _reactNative.screen.getByTestId('login-btn');
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', true);
    _reactNative.fireEvent.changeText(emailInput, email);
    _reactNative.fireEvent.changeText(passwordInput, password);
    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', false);
    _reactNative.fireEvent.press(loginBtn);
    expect(store.dispatch).toHaveBeenCalledTimes(1);
    expect(store.dispatch).toHaveBeenCalledWith((0, _actions.loginRequest)(email, password));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9zdG9yZSIsIl9Mb2dpbiIsIl9hY3Rpb25zIiwiX1NldHVwIiwic3RvcmUiLCJjb25maWd1cmVTdG9yZSIsImVtYWlsIiwicGFzc3dvcmQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJkaXNwYXRjaCIsImplc3QiLCJmbiIsIlNldHVwIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJhZnRlckVhY2giLCJjbGVhbnVwIiwiaXQiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsInRvQmVEZWZpbmVkIiwibG9naW5CdG4iLCJlbWFpbElucHV0IiwicGFzc3dvcmRJbnB1dCIsInByb3BzIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwidG9IYXZlUHJvcGVydHkiLCJmaXJlRXZlbnQiLCJjaGFuZ2VUZXh0IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImxvZ2luUmVxdWVzdCJdLCJzb3VyY2VzIjpbImxvZ2luLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7Y2xlYW51cCwgZmlyZUV2ZW50LCBzY3JlZW59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tICcuLi8uLi9yZWR1eC9zdG9yZSc7XG5pbXBvcnQgTG9naW4gZnJvbSAnLi4vTG9naW4nO1xuaW1wb3J0IHtsb2dpblJlcXVlc3R9IGZyb20gJy4uLy4uL3JlZHV4L2FjdGlvbnMnO1xuaW1wb3J0IFNldHVwIGZyb20gJy4uL1NldHVwJztcblxubGV0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoKTtcblxuY29uc3QgZW1haWwgPSAndGVzdEB0ZXN0LmNvbSc7XG5jb25zdCBwYXNzd29yZCA9ICdBemVydHkxMjNAQCc7XG5cbmRlc2NyaWJlKCdUZXN0IExvZ2luIENvbXBvbmVudCcsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RvcmUuZGlzcGF0Y2ggPSBqZXN0LmZuKCk7XG4gICAgU2V0dXAoPExvZ2luIC8+LCBzdG9yZSk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaChjbGVhbnVwKTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhbGwgZm9ybSBlbGVtZW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvZ28nKSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdlbWFpbCcpKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Bhc3N3b3JkJykpLnRvQmVEZWZpbmVkKCk7XG5cbiAgICBjb25zdCBsb2dpbkJ0biA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9naW4tYnRuJyk7XG5cbiAgICBleHBlY3QobG9naW5CdG4pLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZW5hYmxlIGxvZ2luIGJ1dHRvbiBhZnRlciBlbnRlcmVpbmcgdmFsaWQgZW1haWwgYW5kIHBhc3N3b3JkIHZhbHVlJywgKCkgPT4ge1xuICAgIGNvbnN0IGVtYWlsSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2VtYWlsJyk7XG4gICAgY29uc3QgcGFzc3dvcmRJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgncGFzc3dvcmQnKTtcbiAgICBjb25zdCBsb2dpbkJ0biA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9naW4tYnRuJyk7XG5cbiAgICBleHBlY3QobG9naW5CdG4ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlKS50b0hhdmVQcm9wZXJ0eSgnZGlzYWJsZWQnLCB0cnVlKTtcblxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGVtYWlsSW5wdXQsIGVtYWlsKTtcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChwYXNzd29yZElucHV0LCBwYXNzd29yZCk7XG5cbiAgICBleHBlY3QobG9naW5CdG4ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlKS50b0hhdmVQcm9wZXJ0eSgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgZmlyZUV2ZW50LnByZXNzKGxvZ2luQnRuKTtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGxvZ2luUmVxdWVzdChlbWFpbCwgcGFzc3dvcmQpKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksUUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssTUFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBSU0sS0FBSyxHQUFHLElBQUFDLGNBQWMsR0FBRTtBQUU1QixJQUFNQyxLQUFLLEdBQUcsZUFBZTtBQUM3QixJQUFNQyxRQUFRLEdBQUcsYUFBYTtBQUU5QkMsUUFBUSxDQUFDLHNCQUFzQixFQUFFLFlBQU07RUFDckNDLFVBQVUsQ0FBQyxZQUFNO0lBQ2ZMLEtBQUssQ0FBQ00sUUFBUSxHQUFHQyxJQUFJLENBQUNDLEVBQUUsRUFBRTtJQUMxQixJQUFBQyxjQUFLLEVBQUNqQixNQUFBLENBQUFrQixPQUFBLENBQUFDLGFBQUEsQ0FBQ2QsTUFBQSxDQUFBYSxPQUFLLE9BQUcsRUFBRVYsS0FBSyxDQUFDO0VBQ3pCLENBQUMsQ0FBQztFQUVGWSxTQUFTLENBQUNDLG9CQUFPLENBQUM7RUFFbEJDLEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFNO0lBQ3pDQyxNQUFNLENBQUNDLG1CQUFNLENBQUNDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDQyxXQUFXLEVBQUU7SUFDaERILE1BQU0sQ0FBQ0MsbUJBQU0sQ0FBQ0MsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUNDLFdBQVcsRUFBRTtJQUNqREgsTUFBTSxDQUFDQyxtQkFBTSxDQUFDQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxFQUFFO0lBRXBELElBQU1DLFFBQVEsR0FBR0gsbUJBQU0sQ0FBQ0MsV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUVoREYsTUFBTSxDQUFDSSxRQUFRLENBQUMsQ0FBQ0QsV0FBVyxFQUFFO0VBQ2hDLENBQUMsQ0FBQztFQUVGSixFQUFFLENBQUMsMkVBQTJFLEVBQUUsWUFBTTtJQUNwRixJQUFNTSxVQUFVLEdBQUdKLG1CQUFNLENBQUNDLFdBQVcsQ0FBQyxPQUFPLENBQUM7SUFDOUMsSUFBTUksYUFBYSxHQUFHTCxtQkFBTSxDQUFDQyxXQUFXLENBQUMsVUFBVSxDQUFDO0lBQ3BELElBQU1FLFFBQVEsR0FBR0gsbUJBQU0sQ0FBQ0MsV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUVoREYsTUFBTSxDQUFDSSxRQUFRLENBQUNHLEtBQUssQ0FBQ0Msa0JBQWtCLENBQUMsQ0FBQ0MsY0FBYyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUM7SUFFMUVDLHNCQUFTLENBQUNDLFVBQVUsQ0FBQ04sVUFBVSxFQUFFbEIsS0FBSyxDQUFDO0lBQ3ZDdUIsc0JBQVMsQ0FBQ0MsVUFBVSxDQUFDTCxhQUFhLEVBQUVsQixRQUFRLENBQUM7SUFFN0NZLE1BQU0sQ0FBQ0ksUUFBUSxDQUFDRyxLQUFLLENBQUNDLGtCQUFrQixDQUFDLENBQUNDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDO0lBQzNFQyxzQkFBUyxDQUFDRSxLQUFLLENBQUNSLFFBQVEsQ0FBQztJQUN6QkosTUFBTSxDQUFDZixLQUFLLENBQUNNLFFBQVEsQ0FBQyxDQUFDc0IscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBQy9DYixNQUFNLENBQUNmLEtBQUssQ0FBQ00sUUFBUSxDQUFDLENBQUN1QixvQkFBb0IsQ0FBQyxJQUFBQyxxQkFBWSxFQUFDNUIsS0FBSyxFQUFFQyxRQUFRLENBQUMsQ0FBQztFQUM1RSxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==