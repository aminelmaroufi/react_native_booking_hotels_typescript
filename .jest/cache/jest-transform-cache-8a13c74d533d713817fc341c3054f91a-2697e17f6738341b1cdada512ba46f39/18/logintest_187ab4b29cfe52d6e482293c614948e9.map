{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_store","_Login","_actions","_Setup","store","configureStore","email","password","describe","beforeEach","dispatch","jest","fn","Setup","default","createElement","afterEach","cleanup","it","expect","screen","getByTestId","toBeDefined","loginBtn","emailInput","passwordInput","props","accessibilityState","toHaveProperty","fireEvent","changeText","press","toHaveBeenCalledTimes","toHaveBeenCalledWith","loginRequest"],"sources":["login.test.tsx"],"sourcesContent":["import React from 'react';\n\nimport {cleanup, fireEvent, screen} from '@testing-library/react-native';\nimport configureStore from '../../redux/store';\nimport Login from '../Login';\nimport {loginRequest} from '../../redux/actions';\nimport Setup from '../Setup';\n\nlet store = configureStore();\n\nconst email = 'test@test.com';\nconst password = 'Azerty123@@';\n\ndescribe('Test Login Component', () => {\n  beforeEach(() => {\n    store.dispatch = jest.fn();\n    Setup(<Login />, store);\n  });\n\n  afterEach(cleanup);\n\n  it('should render all form element', () => {\n    expect(screen.getByTestId('logo')).toBeDefined();\n    expect(screen.getByTestId('email')).toBeDefined();\n    expect(screen.getByTestId('password')).toBeDefined();\n\n    const loginBtn = screen.getByTestId('login-btn');\n\n    expect(loginBtn).toBeDefined();\n  });\n\n  it('should enable login button after entereing valid email and password value', () => {\n    const emailInput = screen.getByTestId('email');\n    const passwordInput = screen.getByTestId('password');\n    const loginBtn = screen.getByTestId('login-btn');\n\n    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', true);\n\n    fireEvent.changeText(emailInput, email);\n    fireEvent.changeText(passwordInput, password);\n\n    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', false);\n    fireEvent.press(loginBtn);\n    expect(store.dispatch).toHaveBeenCalledTimes(1);\n    expect(store.dispatch).toHaveBeenCalledWith(loginRequest(email, password));\n  });\n});\n"],"mappings":";;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,MAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,QAAA,GAAAJ,OAAA;AACA,IAAAK,MAAA,GAAAN,sBAAA,CAAAC,OAAA;AAEA,IAAIM,KAAK,GAAG,IAAAC,cAAc,GAAE;AAE5B,IAAMC,KAAK,GAAG,eAAe;AAC7B,IAAMC,QAAQ,GAAG,aAAa;AAE9BC,QAAQ,CAAC,sBAAsB,EAAE,YAAM;EACrCC,UAAU,CAAC,YAAM;IACfL,KAAK,CAACM,QAAQ,GAAGC,IAAI,CAACC,EAAE,EAAE;IAC1B,IAAAC,cAAK,EAACjB,MAAA,CAAAkB,OAAA,CAAAC,aAAA,CAACd,MAAA,CAAAa,OAAK,OAAG,EAAEV,KAAK,CAAC;EACzB,CAAC,CAAC;EAEFY,SAAS,CAACC,oBAAO,CAAC;EAElBC,EAAE,CAAC,gCAAgC,EAAE,YAAM;IACzCC,MAAM,CAACC,mBAAM,CAACC,WAAW,CAAC,MAAM,CAAC,CAAC,CAACC,WAAW,EAAE;IAChDH,MAAM,CAACC,mBAAM,CAACC,WAAW,CAAC,OAAO,CAAC,CAAC,CAACC,WAAW,EAAE;IACjDH,MAAM,CAACC,mBAAM,CAACC,WAAW,CAAC,UAAU,CAAC,CAAC,CAACC,WAAW,EAAE;IAEpD,IAAMC,QAAQ,GAAGH,mBAAM,CAACC,WAAW,CAAC,WAAW,CAAC;IAEhDF,MAAM,CAACI,QAAQ,CAAC,CAACD,WAAW,EAAE;EAChC,CAAC,CAAC;EAEFJ,EAAE,CAAC,2EAA2E,EAAE,YAAM;IACpF,IAAMM,UAAU,GAAGJ,mBAAM,CAACC,WAAW,CAAC,OAAO,CAAC;IAC9C,IAAMI,aAAa,GAAGL,mBAAM,CAACC,WAAW,CAAC,UAAU,CAAC;IACpD,IAAME,QAAQ,GAAGH,mBAAM,CAACC,WAAW,CAAC,WAAW,CAAC;IAEhDF,MAAM,CAACI,QAAQ,CAACG,KAAK,CAACC,kBAAkB,CAAC,CAACC,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC;IAE1EC,sBAAS,CAACC,UAAU,CAACN,UAAU,EAAElB,KAAK,CAAC;IACvCuB,sBAAS,CAACC,UAAU,CAACL,aAAa,EAAElB,QAAQ,CAAC;IAE7CY,MAAM,CAACI,QAAQ,CAACG,KAAK,CAACC,kBAAkB,CAAC,CAACC,cAAc,CAAC,UAAU,EAAE,KAAK,CAAC;IAC3EC,sBAAS,CAACE,KAAK,CAACR,QAAQ,CAAC;IACzBJ,MAAM,CAACf,KAAK,CAACM,QAAQ,CAAC,CAACsB,qBAAqB,CAAC,CAAC,CAAC;IAC/Cb,MAAM,CAACf,KAAK,CAACM,QAAQ,CAAC,CAACuB,oBAAoB,CAAC,IAAAC,qBAAY,EAAC5B,KAAK,EAAEC,QAAQ,CAAC,CAAC;EAC5E,CAAC,CAAC;AACJ,CAAC,CAAC"}