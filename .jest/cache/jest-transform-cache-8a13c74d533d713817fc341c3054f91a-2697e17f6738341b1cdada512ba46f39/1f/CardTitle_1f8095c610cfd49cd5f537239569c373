22c6f80bd7fc13046b5f919b8d5ace98
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _normalizeText = _interopRequireDefault(require("../helpers/normalizeText"));
var _config = require("../config");
var _Text = _interopRequireDefault(require("../text/Text"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var CardTitle = function CardTitle(_a) {
  var _b;
  var style = _a.style,
    theme = _a.theme,
    props = __rest(_a, ["style", "theme"]);
  return _react.default.createElement(_Text.default, (0, _extends2.default)({
    testID: "cardTitle",
    style: _reactNative.StyleSheet.flatten([(0, _extends2.default)((0, _extends2.default)({
      fontSize: (0, _normalizeText.default)(14),
      color: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey1
    }, _reactNative.Platform.select({
      android: (0, _extends2.default)({}, _config.fonts.android.black),
      default: {
        fontWeight: 'bold'
      }
    })), {
      textAlign: 'center',
      marginBottom: 15
    }), style])
  }, props));
};
var _default = (0, _config.withTheme)(CardTitle, 'CardTitle');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9ub3JtYWxpemVUZXh0IiwiX2NvbmZpZyIsIl9UZXh0IiwiX19yZXN0IiwicyIsImUiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJDYXJkVGl0bGUiLCJfYSIsIl9iIiwic3R5bGUiLCJ0aGVtZSIsInByb3BzIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJfZXh0ZW5kczIiLCJ0ZXN0SUQiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsImZvbnRTaXplIiwibm9ybWFsaXplIiwiY29sb3IiLCJjb2xvcnMiLCJncmV5MSIsIlBsYXRmb3JtIiwic2VsZWN0IiwiYW5kcm9pZCIsImZvbnRzIiwiYmxhY2siLCJmb250V2VpZ2h0IiwidGV4dEFsaWduIiwibWFyZ2luQm90dG9tIiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQ2FyZFRpdGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQbGF0Zm9ybSwgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgbm9ybWFsaXplIGZyb20gJy4uL2hlbHBlcnMvbm9ybWFsaXplVGV4dCc7XG5pbXBvcnQgeyBmb250cywgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCBUZXh0IGZyb20gJy4uL3RleHQvVGV4dCc7XG5jb25zdCBDYXJkVGl0bGUgPSAoX2EpID0+IHtcbiAgICB2YXIgX2I7XG4gICAgdmFyIHsgc3R5bGUsIHRoZW1lIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcInN0eWxlXCIsIFwidGhlbWVcIl0pO1xuICAgIHJldHVybiAoPFRleHQgdGVzdElEPVwiY2FyZFRpdGxlXCIgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBmb250U2l6ZTogbm9ybWFsaXplKDE0KSwgY29sb3I6IChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5ncmV5MSB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICAgICAgICAgIGFuZHJvaWQ6IE9iamVjdC5hc3NpZ24oe30sIGZvbnRzLmFuZHJvaWQuYmxhY2spLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSksIHsgdGV4dEFsaWduOiAnY2VudGVyJywgbWFyZ2luQm90dG9tOiAxNSB9KSxcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICBdKX0gey4uLnByb3BzfS8+KTtcbn07XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQ2FyZFRpdGxlLCAnQ2FyZFRpdGxlJyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBV0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsY0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksS0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBZkEsSUFBSUssTUFBTSxHQUFJLFVBQVEsU0FBS0EsTUFBTSxJQUFLLFVBQVVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ2xELElBQUlDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDVixLQUFLLElBQUlDLENBQUMsSUFBSUgsQ0FBQyxFQUFFLElBQUlJLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1AsQ0FBQyxFQUFFRyxDQUFDLENBQUMsSUFBSUYsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDL0VELENBQUMsQ0FBQ0MsQ0FBQyxDQUFDLEdBQUdILENBQUMsQ0FBQ0csQ0FBQyxDQUFDO0VBQ2YsSUFBSUgsQ0FBQyxJQUFJLElBQUksSUFBSSxPQUFPSSxNQUFNLENBQUNLLHFCQUFxQixLQUFLLFVBQVUsRUFDL0QsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFUCxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0sscUJBQXFCLENBQUNULENBQUMsQ0FBQyxFQUFFVSxDQUFDLEdBQUdQLENBQUMsQ0FBQ1EsTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRTtJQUNwRSxJQUFJVCxDQUFDLENBQUNPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSU4sTUFBTSxDQUFDQyxTQUFTLENBQUNPLG9CQUFvQixDQUFDTCxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxFQUMxRVIsQ0FBQyxDQUFDQyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEdBQUdWLENBQUMsQ0FBQ0csQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQztFQUN6QjtFQUNKLE9BQU9SLENBQUM7QUFDWixDQUFDO0FBTUQsSUFBTVcsU0FBUyxHQUFHLFNBQVpBLFNBQVNBLENBQUlDLEVBQUUsRUFBSztFQUN0QixJQUFJQyxFQUFFO0VBQ04sSUFBTUMsS0FBSyxHQUFZRixFQUFFLENBQW5CRSxLQUFLO0lBQUVDLEtBQUssR0FBS0gsRUFBRSxDQUFaRyxLQUFLO0lBQVNDLEtBQUssR0FBR25CLE1BQU0sQ0FBQ2UsRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0VBQ2pFLE9BQVF0QixNQUFBLENBQUEyQixPQUFBLENBQUFDLGFBQUEsQ0FBQ3RCLEtBQUEsQ0FBQXFCLE9BQUksTUFBQUUsU0FBQSxDQUFBRixPQUFBO0lBQUNHLE1BQU0sRUFBQyxXQUFXO0lBQUNOLEtBQUssRUFBRU8sdUJBQVUsQ0FBQ0MsT0FBTyxDQUFDLENBQ25ELElBQUFILFNBQUEsQ0FBQUYsT0FBQSxFQUFjLElBQUFFLFNBQUEsQ0FBQUYsT0FBQSxFQUFjO01BQUVNLFFBQVEsRUFBRSxJQUFBQyxzQkFBUyxFQUFDLEVBQUUsQ0FBQztNQUFFQyxLQUFLLEVBQUUsQ0FBQ1osRUFBRSxHQUFHRSxLQUFLLEtBQUssSUFBSSxJQUFJQSxLQUFLLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEtBQUssQ0FBQ1csTUFBTSxNQUFNLElBQUksSUFBSWIsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNjO0lBQU0sQ0FBQyxFQUFFQyxxQkFBUSxDQUFDQyxNQUFNLENBQUM7TUFDN0xDLE9BQU8sRUFBRSxJQUFBWCxTQUFBLENBQUFGLE9BQUEsRUFBYyxDQUFDLENBQUMsRUFBRWMsYUFBSyxDQUFDRCxPQUFPLENBQUNFLEtBQUssQ0FBQztNQUMvQ2YsT0FBTyxFQUFFO1FBQ0xnQixVQUFVLEVBQUU7TUFDaEI7SUFDSixDQUFDLENBQUMsQ0FBQyxFQUFFO01BQUVDLFNBQVMsRUFBRSxRQUFRO01BQUVDLFlBQVksRUFBRTtJQUFHLENBQUMsQ0FBQyxFQUMvQ3JCLEtBQUssQ0FDUjtFQUFFLEdBQUtFLEtBQUssRUFBRztBQUN4QixDQUFDO0FBQUMsSUFBQW9CLFFBQUEsR0FDYSxJQUFBQyxpQkFBUyxFQUFDMUIsU0FBUyxFQUFFLFdBQVcsQ0FBQztBQUFBMkIsT0FBQSxDQUFBckIsT0FBQSxHQUFBbUIsUUFBQSJ9