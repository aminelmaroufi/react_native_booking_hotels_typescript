{"version":3,"names":["_react","_interopRequireWildcard","require","_xml","_cssTree","_cssSelect","_interopRequireDefault","isTag","node","getParent","parent","getChildren","children","getName","elem","tag","getText","_node","getAttributeValue","name","props","removeSubsets","nodes","idx","length","ancestor","replace","includes","splice","existsOne","predicate","elems","some","getSiblings","hasAttrib","hasOwnProperty","findOne","i","l","findAll","result","arguments","undefined","j","push","adapter","cssSelectOpts","xmlMode","querySelectorAll","query","default","flattenToSelectors","cssAst","selectors","walk","visit","enter","rule","_ref","type","prelude","atrule","each","item","_ref2","pseudos","_ref3","pseudoItem","list","childType","filterByMqs","filter","_ref4","atPrelude","first","mq","generate","useMqs","filterByPseudos","_ref5","usePseudos","List","fromArray","map","pseudo","data","cleanPseudos","forEach","_ref6","remove","specificity","selector","A","B","C","toLowerCase","charAt","compareSpecificity","aSpecificity","bSpecificity","selectorWithSpecificity","bySelectorSpecificity","a","b","pass","arr","len","chk","dbl","r","e","li","ri","exec","buffer","Array","tmp","sortSelectors","specs","s","declarationParseProps","context","parseValue","CSSStyleDeclaration","ast","styles","style","priority","Map","declarations","parse","_ref7","property","value","important","trim","set","camelCase","styleError","message","console","warn","parseError","initStyle","selectedEl","closestElem","elemName","parseProps","parseCustomProperty","inlineStyles","document","styleElements","_iterator","_isArray","isArray","_i","Symbol","iterator","_ref8","next","done","_element","_children","styleString","join","selectorsMq","selectorsPseudo","sortedSelectors","reverse","_iterator2","_isArray2","_i2","_ref10","_ref11","_rule","_item","_selectorStr","_ret","matched","_ref12","camel","val","_iterator3","_isArray3","_i3","_ref13","_element3","_style","_priority","_current","get","selectError","constructor","SyntaxError","SvgCss","xml","override","useMemo","createElement","SvgAst","__source","fileName","_jsxFileName","lineNumber","SvgCssUri","uri","_useState","useState","_useState2","_slicedToArray2","setXml","useEffect","fetchText","then","catch","err","SvgWithCss","prevProps","setState","error","state","Component","SvgWithCssUri","fetch","_context","t4"],"sources":["css.tsx"],"sourcesContent":["import React, { Component, useEffect, useMemo, useState } from 'react';\nimport {\n  camelCase,\n  err,\n  fetchText,\n  JsxAST,\n  Middleware,\n  parse,\n  Styles,\n  SvgAst,\n  UriProps,\n  UriState,\n  XmlAST,\n  XmlProps,\n  XmlState,\n} from './xml';\nimport csstree, {\n  Atrule,\n  AtrulePrelude,\n  CssNode,\n  Declaration,\n  DeclarationList,\n  List,\n  ListItem,\n  PseudoClassSelector,\n  Rule,\n  Selector,\n  SelectorList,\n} from 'css-tree';\nimport cssSelect, { Adapter, Options, Predicate, Query } from 'css-select';\n\n/*\n * Style element inlining experiment based on SVGO\n * https://github.com/svg/svgo/blob/11f9c797411a8de966aacc4cb83dbb3e471757bc/plugins/inlineStyles.js\n * */\n\n/**\n * DOMUtils API for rnsvg AST (used by css-select)\n */\n// is the node a tag?\n// isTag: ( node:Node ) => isTag:Boolean\nfunction isTag(node: XmlAST | string): node is XmlAST {\n  return typeof node === 'object';\n}\n\n// get the parent of the node\n// getParent: ( node:Node ) => parentNode:Node\n// returns null when no parent exists\nfunction getParent(node: XmlAST | string): XmlAST {\n  return ((typeof node === 'object' && node.parent) || null) as XmlAST;\n}\n\n// get the node's children\n// getChildren: ( node:Node ) => children:[Node]\nfunction getChildren(node: XmlAST | string): Array<XmlAST | string> {\n  return (typeof node === 'object' && node.children) || [];\n}\n\n// get the name of the tag'\n// getName: ( elem:ElementNode ) => tagName:String\nfunction getName(elem: XmlAST): string {\n  return elem.tag;\n}\n\n// get the text content of the node, and its children if it has any\n// getText: ( node:Node ) => text:String\n// returns empty string when there is no text\nfunction getText(_node: XmlAST | string): string {\n  return '';\n}\n\n// get the attribute value\n// getAttributeValue: ( elem:ElementNode, name:String ) => value:String\n// returns null when attribute doesn't exist\nfunction getAttributeValue(elem: XmlAST, name: string): string {\n  return (elem.props[name] || null) as string;\n}\n\n// takes an array of nodes, and removes any duplicates, as well as any nodes\n// whose ancestors are also in the array\nfunction removeSubsets(nodes: Array<XmlAST | string>): Array<XmlAST | string> {\n  let idx = nodes.length,\n    node,\n    ancestor,\n    replace;\n\n  // Check if each node (or one of its ancestors) is already contained in the\n  // array.\n  while (--idx > -1) {\n    node = ancestor = nodes[idx];\n\n    // Temporarily remove the node under consideration\n    delete nodes[idx];\n    replace = true;\n\n    while (ancestor) {\n      if (nodes.includes(ancestor)) {\n        replace = false;\n        nodes.splice(idx, 1);\n        break;\n      }\n      ancestor = (typeof ancestor === 'object' && ancestor.parent) || null;\n    }\n\n    // If the node has been found to be unique, re-insert it.\n    if (replace) {\n      nodes[idx] = node;\n    }\n  }\n\n  return nodes;\n}\n\n// does at least one of passed element nodes pass the test predicate?\nfunction existsOne(\n  predicate: Predicate<XmlAST>,\n  elems: Array<XmlAST | string>,\n): boolean {\n  return elems.some(\n    elem =>\n      typeof elem === 'object' &&\n      (predicate(elem) || existsOne(predicate, elem.children)),\n  );\n}\n\n/*\n  get the siblings of the node. Note that unlike jQuery's `siblings` method,\n  this is expected to include the current node as well\n*/\nfunction getSiblings(node: XmlAST | string): Array<XmlAST | string> {\n  const parent = typeof node === 'object' && node.parent;\n  return (parent && parent.children) || [];\n}\n\n// does the element have the named attribute?\nfunction hasAttrib(elem: XmlAST, name: string): boolean {\n  return elem.props.hasOwnProperty(name);\n}\n\n// finds the first node in the array that matches the test predicate, or one\n// of its children\nfunction findOne(\n  predicate: Predicate<XmlAST>,\n  elems: Array<XmlAST | string>,\n): XmlAST | undefined {\n  let elem: XmlAST | undefined;\n\n  for (let i = 0, l = elems.length; i < l && !elem; i++) {\n    const node = elems[i];\n    if (typeof node === 'string') {\n    } else if (predicate(node)) {\n      elem = node;\n    } else {\n      const { children } = node;\n      if (children.length !== 0) {\n        elem = findOne(predicate, children);\n      }\n    }\n  }\n\n  return elem;\n}\n\n// finds all of the element nodes in the array that match the test predicate,\n// as well as any of their children that match it\nfunction findAll(\n  predicate: Predicate<XmlAST>,\n  nodes: Array<XmlAST | string>,\n  result: Array<XmlAST> = [],\n): Array<XmlAST> {\n  for (let i = 0, j = nodes.length; i < j; i++) {\n    const node = nodes[i];\n    if (typeof node !== 'object') {\n      continue;\n    }\n    if (predicate(node)) {\n      result.push(node);\n    }\n    const { children } = node;\n    if (children.length !== 0) {\n      findAll(predicate, children, result);\n    }\n  }\n\n  return result;\n}\n\nconst adapter: Adapter<XmlAST | string, XmlAST> = {\n  removeSubsets,\n  existsOne,\n  getSiblings,\n  hasAttrib,\n  findOne,\n  findAll,\n  isTag,\n  getParent,\n  getChildren,\n  getName,\n  getText,\n  getAttributeValue,\n};\n\nconst cssSelectOpts: Options<XmlAST | string, XmlAST> = {\n  xmlMode: true,\n  adapter,\n};\n\n/**\n * Evaluate a string of CSS selectors against the element and returns matched elements.\n *\n * @param {Query} query can be either a CSS selector string or a compiled query function.\n * @param {Array<XmlAST> | XmlAST} elems Elements to query. If it is an element, its children will be queried.\n * @return {Array<XmlAST>} All matching elements.\n */\nfunction querySelectorAll(query: Query, elems: XmlAST | XmlAST[]): XmlAST[] {\n  return cssSelect(query, elems, cssSelectOpts);\n}\n\ntype FlatPseudoSelector = {\n  item: ListItem<CssNode>;\n  list: List<CssNode>;\n};\ntype FlatPseudoSelectorList = FlatPseudoSelector[];\ntype FlatSelector = {\n  item: ListItem<CssNode>;\n  atrule: Atrule | null;\n  rule: CssNode;\n  pseudos: FlatPseudoSelectorList;\n};\ntype FlatSelectorList = FlatSelector[];\n\n/**\n * Flatten a CSS AST to a selectors list.\n *\n * @param {Object} cssAst css-tree AST to flatten\n * @param {Array} selectors\n */\nfunction flattenToSelectors(cssAst: CssNode, selectors: FlatSelectorList) {\n  csstree.walk(cssAst, {\n    visit: 'Rule',\n    enter(rule: CssNode) {\n      const { type, prelude } = rule as Rule;\n      if (type !== 'Rule') {\n        return;\n      }\n      const atrule = this.atrule;\n      (prelude as SelectorList).children.each((node, item) => {\n        const { children } = node as Selector;\n        const pseudos: FlatPseudoSelectorList = [];\n        selectors.push({\n          item,\n          atrule,\n          rule,\n          pseudos,\n        });\n        children.each(({ type: childType }, pseudoItem, list) => {\n          if (\n            childType === 'PseudoClassSelector' ||\n            childType === 'PseudoElementSelector'\n          ) {\n            pseudos.push({\n              item: pseudoItem,\n              list,\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * Filter selectors by Media Query.\n *\n * @param {Array} selectors to filter\n * @return {Array} Filtered selectors that match the passed media queries\n */\nfunction filterByMqs(selectors: FlatSelectorList) {\n  return selectors.filter(({ atrule }) => {\n    if (atrule === null) {\n      return true;\n    }\n    const { name, prelude } = atrule;\n    const atPrelude = prelude as AtrulePrelude;\n    const first = atPrelude && atPrelude.children.first();\n    const mq = first && first.type === 'MediaQueryList';\n    const query = mq ? csstree.generate(atPrelude) : name;\n    return useMqs.includes(query);\n  });\n}\n// useMqs Array with strings of media queries that should pass (<name> <expression>)\nconst useMqs = ['', 'screen'];\n\n/**\n * Filter selectors by the pseudo-elements and/or -classes they contain.\n *\n * @param {Array} selectors to filter\n * @return {Array} Filtered selectors that match the passed pseudo-elements and/or -classes\n */\nfunction filterByPseudos(selectors: FlatSelectorList) {\n  return selectors.filter(({ pseudos }) =>\n    usePseudos.includes(\n      csstree.generate({\n        type: 'Selector',\n        children: new List<CssNode>().fromArray(\n          pseudos.map(pseudo => pseudo.item.data),\n        ),\n      }),\n    ),\n  );\n}\n// usePseudos Array with strings of single or sequence of pseudo-elements and/or -classes that should pass\nconst usePseudos = [''];\n\n/**\n * Remove pseudo-elements and/or -classes from the selectors for proper matching.\n *\n * @param {Array} selectors to clean\n * @return {Array} Selectors without pseudo-elements and/or -classes\n */\nfunction cleanPseudos(selectors: FlatSelectorList) {\n  selectors.forEach(({ pseudos }) =>\n    pseudos.forEach(pseudo => pseudo.list.remove(pseudo.item)),\n  );\n}\n\ntype Specificity = [number, number, number];\nfunction specificity(selector: Selector): Specificity {\n  let A = 0;\n  let B = 0;\n  let C = 0;\n\n  selector.children.each(function walk(node: CssNode) {\n    switch (node.type) {\n      case 'SelectorList':\n      case 'Selector':\n        node.children.each(walk);\n        break;\n\n      case 'IdSelector':\n        A++;\n        break;\n\n      case 'ClassSelector':\n      case 'AttributeSelector':\n        B++;\n        break;\n\n      case 'PseudoClassSelector':\n        switch (node.name.toLowerCase()) {\n          case 'not':\n            const children = (node as PseudoClassSelector).children;\n            children && children.each(walk);\n            break;\n\n          case 'before':\n          case 'after':\n          case 'first-line':\n          case 'first-letter':\n            C++;\n            break;\n\n          // TODO: support for :nth-*(.. of <SelectorList>), :matches(), :has()\n\n          default:\n            B++;\n        }\n        break;\n\n      case 'PseudoElementSelector':\n        C++;\n        break;\n\n      case 'TypeSelector':\n        // ignore universal selector\n        const { name } = node;\n        if (name.charAt(name.length - 1) !== '*') {\n          C++;\n        }\n        break;\n    }\n  });\n\n  return [A, B, C];\n}\n\n/**\n * Compares two selector specificities.\n * extracted from https://github.com/keeganstreet/specificity/blob/master/specificity.js#L211\n *\n * @param {Array} aSpecificity Specificity of selector A\n * @param {Array} bSpecificity Specificity of selector B\n * @return {Number} Score of selector specificity A compared to selector specificity B\n */\nfunction compareSpecificity(\n  aSpecificity: Specificity,\n  bSpecificity: Specificity,\n): number {\n  for (let i = 0; i < 4; i += 1) {\n    if (aSpecificity[i] < bSpecificity[i]) {\n      return -1;\n    } else if (aSpecificity[i] > bSpecificity[i]) {\n      return 1;\n    }\n  }\n  return 0;\n}\n\ntype Spec = {\n  selector: FlatSelector;\n  specificity: Specificity;\n};\nfunction selectorWithSpecificity(selector: FlatSelector): Spec {\n  return {\n    selector,\n    specificity: specificity(selector.item.data as Selector),\n  };\n}\n\n/**\n * Compare two simple selectors.\n *\n * @param {Object} a Simple selector A\n * @param {Object} b Simple selector B\n * @return {Number} Score of selector A compared to selector B\n */\nfunction bySelectorSpecificity(a: Spec, b: Spec): number {\n  return compareSpecificity(a.specificity, b.specificity);\n}\n\n// Run a single pass with the given chunk size.\nfunction pass(arr: Spec[], len: number, chk: number, result: Spec[]) {\n  // Step size / double chunk size.\n  const dbl = chk * 2;\n  // Bounds of the left and right chunks.\n  let l, r, e;\n  // Iterators over the left and right chunk.\n  let li, ri;\n\n  // Iterate over pairs of chunks.\n  let i = 0;\n  for (l = 0; l < len; l += dbl) {\n    r = l + chk;\n    e = r + chk;\n    if (r > len) {\n      r = len;\n    }\n    if (e > len) {\n      e = len;\n    }\n\n    // Iterate both chunks in parallel.\n    li = l;\n    ri = r;\n    while (true) {\n      // Compare the chunks.\n      if (li < r && ri < e) {\n        // This works for a regular `sort()` compatible comparator,\n        // but also for a simple comparator like: `a > b`\n        if (bySelectorSpecificity(arr[li], arr[ri]) <= 0) {\n          result[i++] = arr[li++];\n        } else {\n          result[i++] = arr[ri++];\n        }\n      }\n      // Nothing to compare, just flush what's left.\n      else if (li < r) {\n        result[i++] = arr[li++];\n      } else if (ri < e) {\n        result[i++] = arr[ri++];\n      }\n      // Both iterators are at the chunk ends.\n      else {\n        break;\n      }\n    }\n  }\n}\n\n// Execute the sort using the input array and a second buffer as work space.\n// Returns one of those two, containing the final result.\nfunction exec(arr: Spec[], len: number): Spec[] {\n  // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.\n  // Chunks are the size of the left or right hand in merge sort.\n  // Stop when the left-hand covers all of the array.\n  let buffer = new Array(len);\n  for (let chk = 1; chk < len; chk *= 2) {\n    pass(arr, len, chk, buffer);\n    const tmp = arr;\n    arr = buffer;\n    buffer = tmp;\n  }\n  return arr;\n}\n\n/**\n * Sort selectors stably by their specificity.\n *\n * @param {Array} selectors to be sorted\n * @return {Array} Stable sorted selectors\n */\nfunction sortSelectors(selectors: FlatSelectorList) {\n  // Short-circuit when there's nothing to sort.\n  const len = selectors.length;\n  if (len <= 1) {\n    return selectors;\n  }\n  const specs = selectors.map(selectorWithSpecificity);\n  return exec(specs, len).map(s => s.selector);\n}\n\nconst declarationParseProps = {\n  context: 'declarationList',\n  parseValue: false,\n};\nfunction CSSStyleDeclaration(ast: XmlAST) {\n  const { props, styles } = ast;\n  if (!props.style) {\n    props.style = {};\n  }\n  const style = props.style as Styles;\n  const priority = new Map();\n  ast.style = style;\n  ast.priority = priority;\n  if (!styles || styles.length === 0) {\n    return;\n  }\n  try {\n    const declarations = csstree.parse(\n      styles,\n      declarationParseProps,\n    ) as DeclarationList;\n    declarations.children.each(node => {\n      try {\n        const { property, value, important } = node as Declaration;\n        const name = property.trim();\n        priority.set(name, important);\n        style[camelCase(name)] = csstree.generate(value).trim();\n      } catch (styleError) {\n        if (styleError.message !== 'Unknown node type: undefined') {\n          console.warn(\n            \"Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr('style').value. Error details: \" +\n              styleError,\n          );\n        }\n      }\n    });\n  } catch (parseError) {\n    console.warn(\n      \"Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr('style').value. Error details: \" +\n        parseError,\n    );\n  }\n}\n\ninterface StyledAST extends XmlAST {\n  style: Styles;\n  priority: Map<string, boolean | undefined>;\n}\nfunction initStyle(selectedEl: XmlAST): StyledAST {\n  if (!selectedEl.style) {\n    CSSStyleDeclaration(selectedEl);\n  }\n  return selectedEl as StyledAST;\n}\n\n/**\n * Find the closest ancestor of the current element.\n * @param node\n * @param elemName\n * @return {?Object}\n */\nfunction closestElem(node: XmlAST, elemName: string) {\n  let elem: XmlAST | null = node;\n  while ((elem = elem.parent) && elem.tag !== elemName) {}\n  return elem;\n}\n\nconst parseProps = {\n  parseValue: false,\n  parseCustomProperty: false,\n};\n\n/**\n * Moves + merges styles from style elements to element styles\n *\n * Options\n *   useMqs (default: ['', 'screen'])\n *     what media queries to be used\n *     empty string element for styles outside media queries\n *\n *   usePseudos (default: [''])\n *     what pseudo-classes/-elements to be used\n *     empty string element for all non-pseudo-classes and/or -elements\n *\n * @param {Object} document document element\n *\n * @author strarsis <strarsis@gmail.com>\n * @author modified by: msand <msand@abo.fi>\n */\nexport const inlineStyles: Middleware = function inlineStyles(\n  document: XmlAST,\n) {\n  // collect <style/>s\n  const styleElements = querySelectorAll('style', document);\n\n  //no <styles/>s, nothing to do\n  if (styleElements.length === 0) {\n    return document;\n  }\n\n  const selectors: FlatSelectorList = [];\n\n  for (let element of styleElements) {\n    const { children } = element;\n    if (!children.length || closestElem(element, 'foreignObject')) {\n      // skip empty <style/>s or <foreignObject> content.\n      continue;\n    }\n\n    // collect <style/>s and their css ast\n    try {\n      const styleString = children.join('');\n      flattenToSelectors(csstree.parse(styleString, parseProps), selectors);\n    } catch (parseError) {\n      console.warn(\n        'Warning: Parse error of styles of <style/> element, skipped. Error details: ' +\n          parseError,\n      );\n    }\n  }\n\n  // filter for mediaqueries to be used or without any mediaquery\n  const selectorsMq = filterByMqs(selectors);\n\n  // filter for pseudo elements to be used\n  const selectorsPseudo = filterByPseudos(selectorsMq);\n\n  // remove PseudoClass from its SimpleSelector for proper matching\n  cleanPseudos(selectorsPseudo);\n\n  // stable sort selectors\n  const sortedSelectors = sortSelectors(selectorsPseudo).reverse();\n\n  // match selectors\n  for (let { rule, item } of sortedSelectors) {\n    if (rule === null) {\n      continue;\n    }\n    const selectorStr = csstree.generate(item.data);\n    try {\n      // apply <style/> to matched elements\n      const matched = querySelectorAll(selectorStr, document).map(initStyle);\n      if (matched.length === 0) {\n        continue;\n      }\n      csstree.walk(rule, {\n        visit: 'Declaration',\n        enter(node: CssNode) {\n          const { property, value, important } = node as Declaration;\n          // existing inline styles have higher priority\n          // no inline styles, external styles,                                    external styles used\n          // inline styles,    external styles same   priority as inline styles,   inline   styles used\n          // inline styles,    external styles higher priority than inline styles, external styles used\n          const name = property.trim();\n          const camel = camelCase(name);\n          const val = csstree.generate(value).trim();\n          for (let element of matched) {\n            const { style, priority } = element;\n            const current = priority.get(name);\n            if (current === undefined || current < important) {\n              priority.set(name, important as boolean);\n              style[camel] = val;\n            }\n          }\n        },\n      });\n    } catch (selectError) {\n      if (selectError.constructor === SyntaxError) {\n        console.warn(\n          'Warning: Syntax error when trying to select \\n\\n' +\n            selectorStr +\n            '\\n\\n, skipped. Error details: ' +\n            selectError,\n        );\n        continue;\n      }\n      throw selectError;\n    }\n  }\n\n  return document;\n};\n\nexport function SvgCss(props: XmlProps) {\n  const { xml, override } = props;\n  const ast = useMemo<JsxAST | null>(\n    () => (xml !== null ? parse(xml, inlineStyles) : null),\n    [xml],\n  );\n  return <SvgAst ast={ast} override={override || props} />;\n}\n\nexport function SvgCssUri(props: UriProps) {\n  const { uri } = props;\n  const [xml, setXml] = useState<string | null>(null);\n  useEffect(() => {\n    uri\n      ? fetchText(uri)\n          .then(setXml)\n          .catch(err)\n      : setXml(null);\n  }, [uri]);\n  return <SvgCss xml={xml} override={props} />;\n}\n\n// Extending Component is required for Animated support.\n\nexport class SvgWithCss extends Component<XmlProps, XmlState> {\n  state = { ast: null };\n  componentDidMount() {\n    this.parse(this.props.xml);\n  }\n  componentDidUpdate(prevProps: { xml: string | null }) {\n    const { xml } = this.props;\n    if (xml !== prevProps.xml) {\n      this.parse(xml);\n    }\n  }\n  parse(xml: string | null) {\n    try {\n      this.setState({ ast: xml ? parse(xml, inlineStyles) : null });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  render() {\n    const {\n      props,\n      state: { ast },\n    } = this;\n    return <SvgAst ast={ast} override={props.override || props} />;\n  }\n}\n\nexport class SvgWithCssUri extends Component<UriProps, UriState> {\n  state = { xml: null };\n  componentDidMount() {\n    this.fetch(this.props.uri);\n  }\n  componentDidUpdate(prevProps: { uri: string | null }) {\n    const { uri } = this.props;\n    if (uri !== prevProps.uri) {\n      this.fetch(uri);\n    }\n  }\n  async fetch(uri: string | null) {\n    try {\n      this.setState({ xml: uri ? await fetchText(uri) : null });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  render() {\n    const {\n      props,\n      state: { xml },\n    } = this;\n    return <SvgWithCss xml={xml} override={props} />;\n  }\n}\n"],"mappings":"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"}