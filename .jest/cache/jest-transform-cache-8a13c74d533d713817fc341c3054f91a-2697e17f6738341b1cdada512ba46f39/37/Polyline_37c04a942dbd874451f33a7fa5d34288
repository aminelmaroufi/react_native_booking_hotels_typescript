73ea9df7cc04087dfca77bdd83d40a35
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _Path = _interopRequireDefault(require("./Path"));
var _Shape2 = _interopRequireDefault(require("./Shape"));
var _extractPolyPoints = _interopRequireDefault(require("../lib/extract/extractPolyPoints"));
var _jsxFileName = "/Users/wojciechlewicki/work/another/react-native-svg/src/elements/Polyline.tsx";
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = (0, _getPrototypeOf2.default)(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return (0, _possibleConstructorReturn2.default)(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
var Polyline = function (_Shape) {
  (0, _inherits2.default)(Polyline, _Shape);
  var _super = _createSuper(Polyline);
  function Polyline() {
    var _this;
    (0, _classCallCheck2.default)(this, Polyline);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setNativeProps", function (props) {
      var points = props.points;
      if (points) {
        props.d = "M" + (0, _extractPolyPoints.default)(points);
      }
      _this.root && _this.root.setNativeProps(props);
    });
    return _this;
  }
  (0, _createClass2.default)(Polyline, [{
    key: "render",
    value: function render() {
      var props = this.props;
      var points = props.points;
      return _react.default.createElement(_Path.default, (0, _extends2.default)({
        ref: this.refMethod,
        d: points && "M" + (0, _extractPolyPoints.default)(points)
      }, props, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 36,
          columnNumber: 7
        }
      }));
    }
  }]);
  return Polyline;
}(_Shape2.default);
exports.default = Polyline;
(0, _defineProperty2.default)(Polyline, "displayName", 'Polyline');
(0, _defineProperty2.default)(Polyline, "defaultProps", {
  points: ''
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9QYXRoIiwiX1NoYXBlMiIsIl9leHRyYWN0UG9seVBvaW50cyIsIl9qc3hGaWxlTmFtZSIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YyIiwiZGVmYXVsdCIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiZSIsIlBvbHlsaW5lIiwiX1NoYXBlIiwiX2luaGVyaXRzMiIsIl9zdXBlciIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9sZW4iLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0IiwiX2RlZmluZVByb3BlcnR5MiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyIiwicHJvcHMiLCJwb2ludHMiLCJkIiwicm9vdCIsInNldE5hdGl2ZVByb3BzIiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsIl9leHRlbmRzMiIsInJlZiIsInJlZk1ldGhvZCIsIl9fc2VsZiIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlBvbHlsaW5lLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFBhdGggZnJvbSAnLi9QYXRoJztcbmltcG9ydCBTaGFwZSBmcm9tICcuL1NoYXBlJztcbmltcG9ydCB7IENvbW1vblBhdGhQcm9wcywgTnVtYmVyUHJvcCB9IGZyb20gJy4uL2xpYi9leHRyYWN0L3R5cGVzJztcbmltcG9ydCBleHRyYWN0UG9seVBvaW50cyBmcm9tICcuLi9saWIvZXh0cmFjdC9leHRyYWN0UG9seVBvaW50cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9seWxpbmVQcm9wcyBleHRlbmRzIENvbW1vblBhdGhQcm9wcyB7XG4gIG9wYWNpdHk/OiBOdW1iZXJQcm9wO1xuICBwb2ludHM/OiBzdHJpbmcgfCBSZWFkb25seUFycmF5PE51bWJlclByb3A+O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2x5bGluZSBleHRlbmRzIFNoYXBlPFBvbHlsaW5lUHJvcHM+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1BvbHlsaW5lJztcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHBvaW50czogJycsXG4gIH07XG5cbiAgc2V0TmF0aXZlUHJvcHMgPSAoXG4gICAgcHJvcHM6IE9iamVjdCAmIHtcbiAgICAgIHBvaW50cz86IHN0cmluZyB8IE51bWJlclByb3BbXTtcbiAgICAgIGQ/OiBzdHJpbmc7XG4gICAgfSxcbiAgKSA9PiB7XG4gICAgY29uc3QgeyBwb2ludHMgfSA9IHByb3BzO1xuICAgIGlmIChwb2ludHMpIHtcbiAgICAgIHByb3BzLmQgPSBgTSR7ZXh0cmFjdFBvbHlQb2ludHMocG9pbnRzKX1gO1xuICAgIH1cbiAgICB0aGlzLnJvb3QgJiYgdGhpcy5yb290LnNldE5hdGl2ZVByb3BzKHByb3BzKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7IHBvaW50cyB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxQYXRoXG4gICAgICAgIHJlZj17dGhpcy5yZWZNZXRob2QgYXMgKGluc3RhbmNlOiBQYXRoIHwgbnVsbCkgPT4gdm9pZH1cbiAgICAgICAgZD17cG9pbnRzICYmIGBNJHtleHRyYWN0UG9seVBvaW50cyhwb2ludHMpfWB9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRyxrQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQWlFLElBQUFJLFlBQUE7QUFBQSxTQUFBQyxhQUFBQyxPQUFBO0VBQUEsSUFBQUMseUJBQUEsR0FBQUMseUJBQUE7RUFBQSxnQkFBQUMscUJBQUE7SUFBQSxJQUFBQyxLQUFBLE9BQUFDLGdCQUFBLENBQUFDLE9BQUEsRUFBQU4sT0FBQTtNQUFBTyxNQUFBO0lBQUEsSUFBQU4seUJBQUE7TUFBQSxJQUFBTyxTQUFBLE9BQUFILGdCQUFBLENBQUFDLE9BQUEsUUFBQUcsV0FBQTtNQUFBRixNQUFBLEdBQUFHLE9BQUEsQ0FBQUMsU0FBQSxDQUFBUCxLQUFBLEVBQUFRLFNBQUEsRUFBQUosU0FBQTtJQUFBO01BQUFELE1BQUEsR0FBQUgsS0FBQSxDQUFBUyxLQUFBLE9BQUFELFNBQUE7SUFBQTtJQUFBLFdBQUFFLDJCQUFBLENBQUFSLE9BQUEsUUFBQUMsTUFBQTtFQUFBO0FBQUE7QUFBQSxTQUFBTCwwQkFBQTtFQUFBLFdBQUFRLE9BQUEscUJBQUFBLE9BQUEsQ0FBQUMsU0FBQTtFQUFBLElBQUFELE9BQUEsQ0FBQUMsU0FBQSxDQUFBSSxJQUFBO0VBQUEsV0FBQUMsS0FBQTtFQUFBO0lBQUFDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBQyxPQUFBLENBQUFDLElBQUEsQ0FBQVYsT0FBQSxDQUFBQyxTQUFBLENBQUFNLE9BQUE7SUFBQTtFQUFBLFNBQUFJLENBQUE7SUFBQTtFQUFBO0FBQUE7QUFBQSxJQU81Q0MsUUFBUSxhQUFBQyxNQUFBO0VBQUEsSUFBQUMsVUFBQSxDQUFBbEIsT0FBQSxFQUFBZ0IsUUFBQSxFQUFBQyxNQUFBO0VBQUEsSUFBQUUsTUFBQSxHQUFBMUIsWUFBQSxDQUFBdUIsUUFBQTtFQUFBLFNBQUFBLFNBQUE7SUFBQSxJQUFBSSxLQUFBO0lBQUEsSUFBQUMsZ0JBQUEsQ0FBQXJCLE9BQUEsUUFBQWdCLFFBQUE7SUFBQSxTQUFBTSxJQUFBLEdBQUFoQixTQUFBLENBQUFpQixNQUFBLEVBQUFDLElBQUEsT0FBQUMsS0FBQSxDQUFBSCxJQUFBLEdBQUFJLElBQUEsTUFBQUEsSUFBQSxHQUFBSixJQUFBLEVBQUFJLElBQUE7TUFBQUYsSUFBQSxDQUFBRSxJQUFBLElBQUFwQixTQUFBLENBQUFvQixJQUFBO0lBQUE7SUFBQU4sS0FBQSxHQUFBRCxNQUFBLENBQUFMLElBQUEsQ0FBQVAsS0FBQSxDQUFBWSxNQUFBLFNBQUFRLE1BQUEsQ0FBQUgsSUFBQTtJQUFBLElBQUFJLGdCQUFBLENBQUE1QixPQUFBLE1BQUE2Qix1QkFBQSxDQUFBN0IsT0FBQSxFQUFBb0IsS0FBQSxxQkFPVixVQUNmVSxLQUdDLEVBQ0U7TUFDSCxJQUFRQyxNQUFNLEdBQUtELEtBQUssQ0FBaEJDLE1BQU07TUFDZCxJQUFJQSxNQUFNLEVBQUU7UUFDVkQsS0FBSyxDQUFDRSxDQUFDLFNBQU8sSUFBQXpDLGtCQUFBLENBQUFTLE9BQWlCLEVBQUMrQixNQUFNLENBQUc7TUFDM0M7TUFDQVgsS0FBQSxDQUFLYSxJQUFJLElBQUliLEtBQUEsQ0FBS2EsSUFBSSxDQUFDQyxjQUFjLENBQUNKLEtBQUssQ0FBQztJQUM5QyxDQUFDO0lBQUEsT0FBQVYsS0FBQTtFQUFBO0VBQUEsSUFBQWUsYUFBQSxDQUFBbkMsT0FBQSxFQUFBZ0IsUUFBQTtJQUFBb0IsR0FBQTtJQUFBQyxLQUFBLEVBRUQsU0FBQUMsT0FBQSxFQUFTO01BQ1AsSUFBUVIsS0FBSyxHQUFLLElBQUksQ0FBZEEsS0FBSztNQUNiLElBQVFDLE1BQU0sR0FBS0QsS0FBSyxDQUFoQkMsTUFBTTtNQUNkLE9BQ0U3QyxNQUFBLENBQUFjLE9BQUEsQ0FBQXVDLGFBQUEsQ0FBQ2xELEtBQUEsQ0FBQVcsT0FBSSxNQUFBd0MsU0FBQSxDQUFBeEMsT0FBQTtRQUNIeUMsR0FBRyxFQUFFLElBQUksQ0FBQ0MsU0FBNkM7UUFDdkRWLENBQUMsRUFBRUQsTUFBTSxVQUFRLElBQUF4QyxrQkFBQSxDQUFBUyxPQUFpQixFQUFDK0IsTUFBTTtNQUFJLEdBQ3pDRCxLQUFLO1FBQUFhLE1BQUE7UUFBQUMsUUFBQTtVQUFBQyxRQUFBLEVBQUFyRCxZQUFBO1VBQUFzRCxVQUFBO1VBQUFDLFlBQUE7UUFBQTtNQUFBLEdBQ1Q7SUFFTjtFQUFDO0VBQUEsT0FBQS9CLFFBQUE7QUFBQSxFQTlCbUMxQixPQUFBLENBQUFVLE9BQUs7QUFBQWdELE9BQUEsQ0FBQWhELE9BQUEsR0FBQWdCLFFBQUE7QUFBQSxJQUFBWSxnQkFBQSxDQUFBNUIsT0FBQSxFQUF0QmdCLFFBQVEsaUJBQ04sVUFBVTtBQUFBLElBQUFZLGdCQUFBLENBQUE1QixPQUFBLEVBRFpnQixRQUFRLGtCQUdMO0VBQ3BCZSxNQUFNLEVBQUU7QUFDVixDQUFDIn0=