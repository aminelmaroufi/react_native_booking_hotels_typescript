f97aa9eea451a500004aee4d0653baa8
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BottomSheet = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _config = require("../config");
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var BottomSheet = function BottomSheet(_a) {
  var containerStyle = _a.containerStyle,
    _a$isVisible = _a.isVisible,
    isVisible = _a$isVisible === void 0 ? false : _a$isVisible,
    _a$modalProps = _a.modalProps,
    modalProps = _a$modalProps === void 0 ? {} : _a$modalProps,
    children = _a.children,
    props = __rest(_a, ["containerStyle", "isVisible", "modalProps", "children"]);
  return _react.default.createElement(_reactNative.Modal, (0, _extends2.default)({
    animationType: "slide",
    transparent: true,
    visible: isVisible
  }, modalProps), _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaView, (0, _extends2.default)({
    style: _reactNative.StyleSheet.flatten([styles.safeAreaView, containerStyle && containerStyle])
  }, props), _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.ScrollView, null, children))));
};
exports.BottomSheet = BottomSheet;
var styles = _reactNative.StyleSheet.create({
  safeAreaView: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.2)',
    flexDirection: 'column-reverse'
  },
  listContainer: {
    backgroundColor: 'white'
  }
});
var _default = (0, _config.withTheme)(BottomSheet, 'BottomSheet');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZVNhZmVBcmVhQ29udGV4dCIsIl9jb25maWciLCJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkJvdHRvbVNoZWV0IiwiX2EiLCJjb250YWluZXJTdHlsZSIsIl9hJGlzVmlzaWJsZSIsImlzVmlzaWJsZSIsIl9hJG1vZGFsUHJvcHMiLCJtb2RhbFByb3BzIiwiY2hpbGRyZW4iLCJwcm9wcyIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiTW9kYWwiLCJfZXh0ZW5kczIiLCJhbmltYXRpb25UeXBlIiwidHJhbnNwYXJlbnQiLCJ2aXNpYmxlIiwiU2FmZUFyZWFWaWV3Iiwic3R5bGUiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlcyIsInNhZmVBcmVhVmlldyIsIlZpZXciLCJTY3JvbGxWaWV3IiwiZXhwb3J0cyIsImNyZWF0ZSIsImZsZXgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmbGV4RGlyZWN0aW9uIiwibGlzdENvbnRhaW5lciIsIl9kZWZhdWx0Iiwid2l0aFRoZW1lIl0sInNvdXJjZXMiOlsiQm90dG9tU2hlZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1vZGFsLCBWaWV3LCBTdHlsZVNoZWV0LCBTY3JvbGxWaWV3LCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBTYWZlQXJlYVZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUtc2FmZS1hcmVhLWNvbnRleHQnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29uZmlnJztcbmNvbnN0IEJvdHRvbVNoZWV0ID0gKF9hKSA9PiB7XG4gICAgdmFyIHsgY29udGFpbmVyU3R5bGUsIGlzVmlzaWJsZSA9IGZhbHNlLCBtb2RhbFByb3BzID0ge30sIGNoaWxkcmVuIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImNvbnRhaW5lclN0eWxlXCIsIFwiaXNWaXNpYmxlXCIsIFwibW9kYWxQcm9wc1wiLCBcImNoaWxkcmVuXCJdKTtcbiAgICByZXR1cm4gKDxNb2RhbCBhbmltYXRpb25UeXBlPVwic2xpZGVcIiB0cmFuc3BhcmVudD17dHJ1ZX0gdmlzaWJsZT17aXNWaXNpYmxlfSB7Li4ubW9kYWxQcm9wc30+XG4gICAgICA8U2FmZUFyZWFWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgc3R5bGVzLnNhZmVBcmVhVmlldyxcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlICYmIGNvbnRhaW5lclN0eWxlLFxuICAgICAgICBdKX0gey4uLnByb3BzfT5cbiAgICAgICAgPFZpZXc+XG4gICAgICAgICAgPFNjcm9sbFZpZXc+e2NoaWxkcmVufTwvU2Nyb2xsVmlldz5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9TYWZlQXJlYVZpZXc+XG4gICAgPC9Nb2RhbD4pO1xufTtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBzYWZlQXJlYVZpZXc6IHtcbiAgICAgICAgZmxleDogMSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjIpJyxcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJyxcbiAgICB9LFxuICAgIGxpc3RDb250YWluZXI6IHsgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnIH0sXG59KTtcbmV4cG9ydCB7IEJvdHRvbVNoZWV0IH07XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQm90dG9tU2hlZXQsICdCb3R0b21TaGVldCcpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLDJCQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxPQUFBLEdBQUFILE9BQUE7QUFkQSxJQUFJSSxNQUFNLEdBQUksVUFBUSxTQUFLQSxNQUFNLElBQUssVUFBVUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFDbEQsSUFBSUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNWLEtBQUssSUFBSUMsQ0FBQyxJQUFJSCxDQUFDLEVBQUUsSUFBSUksTUFBTSxDQUFDQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQyxJQUFJRixDQUFDLENBQUNPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUMvRUQsQ0FBQyxDQUFD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