ad6e9c1be9bd5ccc5fbc4b9fe505a2a3
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Divider = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _theme = _interopRequireDefault(require("../config/theme"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var _a, _b;
var Divider = function Divider(_a) {
  var color = _a.color,
    _a$inset = _a.inset,
    inset = _a$inset === void 0 ? false : _a$inset,
    _a$insetType = _a.insetType,
    insetType = _a$insetType === void 0 ? 'left' : _a$insetType,
    _a$orientation = _a.orientation,
    orientation = _a$orientation === void 0 ? 'horizontal' : _a$orientation,
    style = _a.style,
    subHeader = _a.subHeader,
    subHeaderStyle = _a.subHeaderStyle,
    theme = _a.theme,
    width = _a.width,
    rest = __rest(_a, ["color", "inset", "insetType", "orientation", "style", "subHeader", "subHeaderStyle", "theme", "width"]);
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.View, (0, _extends2.default)({
    style: _reactNative.StyleSheet.flatten([styles.divider, style, inset && (insetType === 'left' ? styles.leftInset : insetType === 'right' ? styles.rightInset : (0, _extends2.default)((0, _extends2.default)({}, styles.leftInset), styles.rightInset)), orientation === 'vertical' && styles.vertical, width && (orientation === 'horizontal' ? {
      borderBottomWidth: width
    } : {
      borderRightWidth: width
    }), color && (orientation === 'horizontal' ? {
      borderBottomColor: color
    } : {
      borderRightColor: color
    })])
  }, rest)), subHeader && orientation === 'horizontal' ? _react.default.createElement(_reactNative.Text, {
    style: _reactNative.StyleSheet.flatten([styles.subHeader, subHeaderStyle, inset && styles.leftInset])
  }, subHeader) : null);
};
exports.Divider = Divider;
var styles = _reactNative.StyleSheet.create({
  divider: {
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
    borderBottomColor: (_a = _theme.default === null || _theme.default === void 0 ? void 0 : _theme.default.colors) === null || _a === void 0 ? void 0 : _a.divider
  },
  leftInset: {
    marginLeft: 72
  },
  rightInset: {
    marginRight: 72
  },
  vertical: {
    borderRightWidth: _reactNative.StyleSheet.hairlineWidth,
    borderRightColor: (_b = _theme.default === null || _theme.default === void 0 ? void 0 : _theme.default.colors) === null || _b === void 0 ? void 0 : _b.divider,
    height: 'auto',
    alignSelf: 'stretch'
  },
  subHeader: {
    includeFontPadding: false
  }
});
var _default = (0, _config.withTheme)(Divider, 'Divider');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,