7674b558065f31c19a8f0e189ac90a35
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FeaturedTile = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var _Text = _interopRequireDefault(require("../text/Text"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var renderText = function renderText(content, defaultProps, style) {
  return (0, _helpers.renderNode)(_Text.default, content, (0, _extends2.default)((0, _extends2.default)({}, defaultProps), {
    style: _reactNative.StyleSheet.flatten([style, defaultProps && defaultProps.style])
  }));
};
var FeaturedTile = function FeaturedTile(props) {
  var title = props.title,
    icon = props.icon,
    caption = props.caption,
    imageSrc = props.imageSrc,
    containerStyle = props.containerStyle,
    imageContainerStyle = props.imageContainerStyle,
    overlayContainerStyle = props.overlayContainerStyle,
    iconContainerStyle = props.iconContainerStyle,
    titleStyle = props.titleStyle,
    captionStyle = props.captionStyle,
    _props$ImageComponent = props.ImageComponent,
    ImageComponent = _props$ImageComponent === void 0 ? _config.BackgroundImage : _props$ImageComponent,
    _props$imageProps = props.imageProps,
    imageProps = _props$imageProps === void 0 ? {} : _props$imageProps,
    attributes = __rest(props, ["title", "icon", "caption", "imageSrc", "containerStyle", "imageContainerStyle", "overlayContainerStyle", "iconContainerStyle", "titleStyle", "captionStyle", "ImageComponent", "imageProps"]);
  var _props$width = props.width,
    width = _props$width === void 0 ? _reactNative.Dimensions.get('window').width : _props$width,
    _props$height = props.height,
    height = _props$height === void 0 ? width * 0.8 : _props$height;
  var styles = _reactNative.StyleSheet.create({
    container: {
      width: width,
      height: height
    },
    imageContainer: {
      alignItems: 'center',
      justifyContent: 'center',
      width: width,
      height: height
    },
    overlayContainer: {
      flex: 1,
      alignItems: 'center',
      alignSelf: 'stretch',
      justifyContent: 'center',
      paddingLeft: 25,
      paddingRight: 25,
      paddingTop: 45,
      paddingBottom: 40,
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    text: {
      color: '#ffffff',
      backgroundColor: 'rgba(0,0,0,0)',
      marginBottom: 15,
      textAlign: 'center'
    },
    iconContainer: {
      justifyContent: 'center',
      alignItems: 'center',
      alignSelf: 'center'
    }
  });
  return _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([styles.container, containerStyle && containerStyle])
  }), _react.default.createElement(ImageComponent, (0, _extends2.default)({
    resizeMode: "cover"
  }, imageProps, {
    source: imageSrc,
    style: _reactNative.StyleSheet.flatten([styles.imageContainer, imageContainerStyle && imageContainerStyle])
  }), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.overlayContainer, overlayContainerStyle && overlayContainerStyle])
  }, _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle && iconContainerStyle])
  }, icon && _react.default.createElement(_Icon.default, icon)), _react.default.createElement(_Text.default, {
    testID: "featuredTileTitle",
    h4: !titleStyle || !('fontSize' in titleStyle),
    style: _reactNative.StyleSheet.flatten([styles.text, titleStyle && titleStyle])
  }, title), renderText(caption, {
    style: captionStyle
  }, styles.text))));
};
exports.FeaturedTile = FeaturedTile;
var _default = (0, _config.withTheme)(FeaturedTile, 'FeaturedTile');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfaGVscGVycyIsIl9UZXh0IiwiX0ljb24iLCJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInJlbmRlclRleHQiLCJjb250ZW50IiwiZGVmYXVsdFByb3BzIiwic3R5bGUiLCJyZW5kZXJOb2RlIiwiVGV4dCIsIl9leHRlbmRzMiIsImRlZmF1bHQiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsIkZlYXR1cmVkVGlsZSIsInByb3BzIiwidGl0bGUiLCJpY29uIiwiY2FwdGlvbiIsImltYWdlU3JjIiwiY29udGFpbmVyU3R5bGUiLCJpbWFnZUNvbnRhaW5lclN0eWxlIiwib3ZlcmxheUNvbnRhaW5lclN0eWxlIiwiaWNvbkNvbnRhaW5lclN0eWxlIiwidGl0bGVTdHlsZSIsImNhcHRpb25TdHlsZSIsIl9wcm9wcyRJbWFnZUNvbXBvbmVudCIsIkltYWdlQ29tcG9uZW50IiwiQmFja2dyb3VuZEltYWdlIiwiX3Byb3BzJGltYWdlUHJvcHMiLCJpbWFnZVByb3BzIiwiYXR0cmlidXRlcyIsIl9wcm9wcyR3aWR0aCIsIndpZHRoIiwiRGltZW5zaW9ucyIsImdldCIsIl9wcm9wcyRoZWlnaHQiLCJoZWlnaHQiLCJzdHlsZXMiLCJjcmVhdGUiLCJjb250YWluZXIiLCJpbWFnZUNvbnRhaW5lciIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsIm92ZXJsYXlDb250YWluZXIiLCJmbGV4IiwiYWxpZ25TZWxmIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwidGV4dCIsImNvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwibWFyZ2luQm90dG9tIiwidGV4dEFsaWduIiwiaWNvbkNvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJUb3VjaGFibGVPcGFjaXR5IiwicmVzaXplTW9kZSIsInNvdXJjZSIsIlZpZXciLCJ0ZXN0SUQiLCJoNCIsImV4cG9ydHMiLCJfZGVmYXVsdCIsIndpdGhUaGVtZSJdLCJzb3VyY2VzIjpbIkZlYXR1cmVkVGlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVG91Y2hhYmxlT3BhY2l0eSwgVmlldywgU3R5bGVTaGVldCwgRGltZW5zaW9ucywgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgQmFja2dyb3VuZEltYWdlLCB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgcmVuZGVyTm9kZSB9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IFRleHQgZnJvbSAnLi4vdGV4dC9UZXh0JztcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb25zL0ljb24nO1xuY29uc3QgcmVuZGVyVGV4dCA9IChjb250ZW50LCBkZWZhdWx0UHJvcHMsIHN0eWxlKSA9PiByZW5kZXJOb2RlKFRleHQsIGNvbnRlbnQsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFByb3BzKSwgeyBzdHlsZTogU3R5bGVTaGVldC5mbGF0dGVuKFtzdHlsZSwgZGVmYXVsdFByb3BzICYmIGRlZmF1bHRQcm9wcy5zdHlsZV0pIH0pKTtcbmNvbnN0IEZlYXR1cmVkVGlsZSA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgdGl0bGUsIGljb24sIGNhcHRpb24sIGltYWdlU3JjLCBjb250YWluZXJTdHlsZSwgaW1hZ2VDb250YWluZXJTdHlsZSwgb3ZlcmxheUNvbnRhaW5lclN0eWxlLCBpY29uQ29udGFpbmVyU3R5bGUsIHRpdGxlU3R5bGUsIGNhcHRpb25TdHlsZSwgSW1hZ2VDb21wb25lbnQgPSBCYWNrZ3JvdW5kSW1hZ2UsIGltYWdlUHJvcHMgPSB7fSB9ID0gcHJvcHMsIGF0dHJpYnV0ZXMgPSBfX3Jlc3QocHJvcHMsIFtcInRpdGxlXCIsIFwiaWNvblwiLCBcImNhcHRpb25cIiwgXCJpbWFnZVNyY1wiLCBcImNvbnRhaW5lclN0eWxlXCIsIFwiaW1hZ2VDb250YWluZXJTdHlsZVwiLCBcIm92ZXJsYXlDb250YWluZXJTdHlsZVwiLCBcImljb25Db250YWluZXJTdHlsZVwiLCBcInRpdGxlU3R5bGVcIiwgXCJjYXB0aW9uU3R5bGVcIiwgXCJJbWFnZUNvbXBvbmVudFwiLCBcImltYWdlUHJvcHNcIl0pO1xuICAgIGNvbnN0IHsgd2lkdGggPSBEaW1lbnNpb25zLmdldCgnd2luZG93Jykud2lkdGgsIGhlaWdodCA9IHdpZHRoICogMC44LCB9ID0gcHJvcHM7XG4gICAgY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgICAgICBjb250YWluZXI6IHtcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICB9LFxuICAgICAgICBpbWFnZUNvbnRhaW5lcjoge1xuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgfSxcbiAgICAgICAgb3ZlcmxheUNvbnRhaW5lcjoge1xuICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgYWxpZ25TZWxmOiAnc3RyZXRjaCcsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nTGVmdDogMjUsXG4gICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDI1LFxuICAgICAgICAgICAgcGFkZGluZ1RvcDogNDUsXG4gICAgICAgICAgICBwYWRkaW5nQm90dG9tOiA0MCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICB9LFxuICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICBjb2xvcjogJyNmZmZmZmYnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IDE1LFxuICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbkNvbnRhaW5lcjoge1xuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiAoPFRvdWNoYWJsZU9wYWNpdHkgey4uLmF0dHJpYnV0ZXN9IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICBzdHlsZXMuY29udGFpbmVyLFxuICAgICAgICBjb250YWluZXJTdHlsZSAmJiBjb250YWluZXJTdHlsZSxcbiAgICBdKX0+XG4gICAgICA8SW1hZ2VDb21wb25lbnQgcmVzaXplTW9kZT1cImNvdmVyXCIgey4uLmltYWdlUHJvcHN9IHNvdXJjZT17aW1hZ2VTcmN9IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICBzdHlsZXMuaW1hZ2VDb250YWluZXIsXG4gICAgICAgIGltYWdlQ29udGFpbmVyU3R5bGUgJiYgaW1hZ2VDb250YWluZXJTdHlsZSxcbiAgICBdKX0+XG4gICAgICAgIDxWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICBzdHlsZXMub3ZlcmxheUNvbnRhaW5lcixcbiAgICAgICAgb3ZlcmxheUNvbnRhaW5lclN0eWxlICYmIG92ZXJsYXlDb250YWluZXJTdHlsZSxcbiAgICBdKX0+XG4gICAgICAgICAgPFZpZXcgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgIHN0eWxlcy5pY29uQ29udGFpbmVyLFxuICAgICAgICBpY29uQ29udGFpbmVyU3R5bGUgJiYgaWNvbkNvbnRhaW5lclN0eWxlLFxuICAgIF0pfT5cbiAgICAgICAgICAgIHtpY29uICYmIDxJY29uIHsuLi5pY29ufS8+fVxuICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJmZWF0dXJlZFRpbGVUaXRsZVwiIGg0PXshdGl0bGVTdHlsZSB8fCAhKCdmb250U2l6ZScgaW4gdGl0bGVTdHlsZSl9IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW3N0eWxlcy50ZXh0LCB0aXRsZVN0eWxlICYmIHRpdGxlU3R5bGVdKX0+XG4gICAgICAgICAgICB7dGl0bGV9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIHtyZW5kZXJUZXh0KGNhcHRpb24sIHsgc3R5bGU6IGNhcHRpb25TdHlsZSB9LCBzdHlsZXMudGV4dCl9XG4gICAgICAgIDwvVmlldz5cbiAgICAgIDwvSW1hZ2VDb21wb25lbnQ+XG4gICAgPC9Ub3VjaGFibGVPcGFjaXR5Pik7XG59O1xuZXhwb3J0IHsgRmVhdHVyZWRUaWxlIH07XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoRmVhdHVyZWRUaWxlLCAnRmVhdHVyZWRUaWxlJyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBV0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsUUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksS0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssS0FBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBaEJBLElBQUlNLE1BQU0sR0FBSSxVQUFRLFNBQUtBLE1BQU0sSUFBSyxVQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJQyxDQUFDLElBQUlILENBQUMsRUFBRSxJQUFJSSxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDLElBQUlGLENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQy9FRCxDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHSCxDQUFDLENBQUNHLENBQUMsQ0FB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