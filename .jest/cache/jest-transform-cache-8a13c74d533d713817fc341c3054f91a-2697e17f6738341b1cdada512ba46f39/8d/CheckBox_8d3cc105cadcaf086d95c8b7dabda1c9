e000124fc782af6cd246c46407dad520
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CheckBox = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _Text = _interopRequireDefault(require("../text/Text"));
var _CheckBoxIcon = _interopRequireDefault(require("./CheckBoxIcon"));
var _config = require("../config");
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var CheckBox = function CheckBox(props) {
  var _a, _b;
  var theme = props.theme,
    rest = __rest(props, ["theme"]);
  var _rest$Component = rest.Component,
    Component = _rest$Component === void 0 ? _reactNative.TouchableOpacity : _rest$Component,
    _rest$checked = rest.checked,
    checked = _rest$checked === void 0 ? false : _rest$checked,
    _rest$iconRight = rest.iconRight,
    iconRight = _rest$iconRight === void 0 ? false : _rest$iconRight,
    title = rest.title,
    _rest$titleProps = rest.titleProps,
    titleProps = _rest$titleProps === void 0 ? {} : _rest$titleProps,
    _rest$center = rest.center,
    center = _rest$center === void 0 ? false : _rest$center,
    _rest$right = rest.right,
    right = _rest$right === void 0 ? false : _rest$right,
    containerStyle = rest.containerStyle,
    textStyle = rest.textStyle,
    wrapperStyle = rest.wrapperStyle,
    onPress = rest.onPress,
    onLongPress = rest.onLongPress,
    checkedTitle = rest.checkedTitle,
    fontFamily = rest.fontFamily,
    _rest$checkedColor = rest.checkedColor,
    checkedColor = _rest$checkedColor === void 0 ? (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.primary : _rest$checkedColor,
    attributes = __rest(rest, ["Component", "checked", "iconRight", "title", "titleProps", "center", "right", "containerStyle", "textStyle", "wrapperStyle", "onPress", "onLongPress", "checkedTitle", "fontFamily", "checkedColor"]);
  var accessibilityState = {
    checked: !!checked
  };
  return _react.default.createElement(Component, (0, _extends2.default)({
    accessibilityRole: "checkbox",
    accessibilityState: accessibilityState,
    testID: "checkbox"
  }, attributes, {
    onLongPress: onLongPress,
    onPress: onPress,
    style: _reactNative.StyleSheet.flatten([styles.container, title && styles.containerHasTitle, containerStyle && containerStyle])
  }), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.wrapper, right && {
      justifyContent: 'flex-end'
    }, center && {
      justifyContent: 'center'
    }, wrapperStyle && wrapperStyle])
  }, !iconRight && _react.default.createElement(_CheckBoxIcon.default, (0, _extends2.default)({}, props, {
    checkedColor: checkedColor
  })), _react.default.isValidElement(title) ? title : title !== '' && title && _react.default.createElement(_Text.default, (0, _extends2.default)({
    testID: "checkboxTitle",
    style: _reactNative.StyleSheet.flatten([(0, _extends2.default)({
      marginLeft: 10,
      marginRight: 10,
      color: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey1
    }, _reactNative.Platform.select({
      android: (0, _extends2.default)({}, _config.fonts.android.bold),
      default: {
        fontWeight: 'bold'
      }
    })), textStyle && textStyle, fontFamily && {
      fontFamily: fontFamily
    }])
  }, titleProps), checked ? checkedTitle || title : title), iconRight && _react.default.createElement(_CheckBoxIcon.default, (0, _extends2.default)({}, props, {
    checkedColor: checkedColor
  }))));
};
exports.CheckBox = CheckBox;
var styles = _reactNative.StyleSheet.create({
  wrapper: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  container: {
    margin: 5,
    marginLeft: 10,
    marginRight: 10,
    padding: 10
  },
  containerHasTitle: {
    borderWidth: 1,
    borderRadius: 3,
    backgroundColor: '#fafafa',
    borderColor: '#ededed'
  }
});
var _default = (0, _config.withTheme)(CheckBox, 'CheckBox');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,