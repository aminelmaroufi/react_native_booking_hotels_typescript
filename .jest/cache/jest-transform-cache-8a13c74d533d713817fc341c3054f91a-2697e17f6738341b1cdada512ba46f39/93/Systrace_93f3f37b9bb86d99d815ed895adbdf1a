8da010c0459fc057c99e7b3b0987f8d9
'use strict';

var invariant = require('invariant');
var TRACE_TAG_REACT_APPS = 1 << 17;
var TRACE_TAG_JS_VM_CALLS = 1 << 27;
var _enabled = false;
var _asyncCookie = 0;
var _markStack = [];
var _markStackIndex = -1;
var _canInstallReactHook = false;
var REACT_MARKER = "\u269B";
var userTimingPolyfill = __DEV__ ? {
  mark: function mark(markName) {
    if (_enabled) {
      _markStackIndex++;
      _markStack[_markStackIndex] = markName;
      var systraceLabel = markName;
      if (markName[0] === REACT_MARKER) {
        var indexOfId = markName.lastIndexOf(' (#');
        var cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;
        systraceLabel = markName.slice(2, cutoffIndex);
      }
      Systrace.beginEvent(systraceLabel);
    }
  },
  measure: function measure(measureName, startMark, endMark) {
    if (_enabled) {
      invariant(typeof measureName === 'string' && typeof startMark === 'string' && typeof endMark === 'undefined', 'Only performance.measure(string, string) overload is supported.');
      var topMark = _markStack[_markStackIndex];
      invariant(startMark === topMark, 'There was a mismatching performance.measure() call. ' + 'Expected "%s" but got "%s."', topMark, startMark);
      _markStackIndex--;
      Systrace.endEvent();
    }
  },
  clearMarks: function clearMarks(markName) {
    if (_enabled) {
      if (_markStackIndex === -1) {
        return;
      }
      if (markName === _markStack[_markStackIndex]) {
        if (userTimingPolyfill != null) {
          userTimingPolyfill.measure(markName, markName);
        }
      }
    }
  },
  clearMeasures: function clearMeasures() {}
} : null;
function installPerformanceHooks(polyfill) {
  if (polyfill) {
    if (global.performance === undefined) {
      global.performance = {};
    }
    Object.keys(polyfill).forEach(function (methodName) {
      if (typeof global.performance[methodName] !== 'function') {
        global.performance[methodName] = polyfill[methodName];
      }
    });
  }
}
var Systrace = {
  installReactHook: function installReactHook() {
    if (_enabled) {
      if (__DEV__) {
        installPerformanceHooks(userTimingPolyfill);
      }
    }
    _canInstallReactHook = true;
  },
  setEnabled: function setEnabled(enabled) {
    if (_enabled !== enabled) {
      if (__DEV__) {
        if (enabled) {
          global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JS_VM_CALLS);
        } else {
          global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JS_VM_CALLS);
        }
        if (_canInstallReactHook) {
          if (enabled) {
            installPerformanceHooks(userTimingPolyfill);
          }
        }
      }
      _enabled = enabled;
    }
  },
  isEnabled: function isEnabled() {
    return _enabled;
  },
  beginEvent: function beginEvent(profileName, args) {
    if (_enabled) {
      var profileNameString = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileNameString, args);
    }
  },
  endEvent: function endEvent() {
    if (_enabled) {
      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
    }
  },
  beginAsyncEvent: function beginAsyncEvent(profileName) {
    var cookie = _asyncCookie;
    if (_enabled) {
      _asyncCookie++;
      var profileNameString = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileNameString, cookie);
    }
    return cookie;
  },
  endAsyncEvent: function endAsyncEvent(profileName, cookie) {
    if (_enabled) {
      var profileNameString = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileNameString, cookie);
    }
  },
  counterEvent: function counterEvent(profileName, value) {
    if (_enabled) {
      var profileNameString = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileNameString, value);
    }
  }
};
if (__DEV__) {
  global[(global.__METRO_GLOBAL_PREFIX__ || '') + '__SYSTRACE'] = Systrace;
}
module.exports = Systrace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiVFJBQ0VfVEFHX1JFQUNUX0FQUFMiLCJUUkFDRV9UQUdfSlNfVk1fQ0FMTFMiLCJfZW5hYmxlZCIsIl9hc3luY0Nvb2tpZSIsIl9tYXJrU3RhY2siLCJfbWFya1N0YWNrSW5kZXgiLCJfY2FuSW5zdGFsbFJlYWN0SG9vayIsIlJFQUNUX01BUktFUiIsInVzZXJUaW1pbmdQb2x5ZmlsbCIsIl9fREVWX18iLCJtYXJrIiwibWFya05hbWUiLCJzeXN0cmFjZUxhYmVsIiwiaW5kZXhPZklkIiwibGFzdEluZGV4T2YiLCJjdXRvZmZJbmRleCIsImxlbmd0aCIsInNsaWNlIiwiU3lzdHJhY2UiLCJiZWdpbkV2ZW50IiwibWVhc3VyZSIsIm1lYXN1cmVOYW1lIiwic3RhcnRNYXJrIiwiZW5kTWFyayIsInRvcE1hcmsiLCJlbmRFdmVudCIsImNsZWFyTWFya3MiLCJjbGVhck1lYXN1cmVzIiwiaW5zdGFsbFBlcmZvcm1hbmNlSG9va3MiLCJwb2x5ZmlsbCIsImdsb2JhbCIsInBlcmZvcm1hbmNlIiwidW5kZWZpbmVkIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJtZXRob2ROYW1lIiwiaW5zdGFsbFJlYWN0SG9vayIsInNldEVuYWJsZWQiLCJlbmFibGVkIiwibmF0aXZlVHJhY2VCZWdpbkxlZ2FjeSIsIm5hdGl2ZVRyYWNlRW5kTGVnYWN5IiwiaXNFbmFibGVkIiwicHJvZmlsZU5hbWUiLCJhcmdzIiwicHJvZmlsZU5hbWVTdHJpbmciLCJuYXRpdmVUcmFjZUJlZ2luU2VjdGlvbiIsIm5hdGl2ZVRyYWNlRW5kU2VjdGlvbiIsImJlZ2luQXN5bmNFdmVudCIsImNvb2tpZSIsIm5hdGl2ZVRyYWNlQmVnaW5Bc3luY1NlY3Rpb24iLCJlbmRBc3luY0V2ZW50IiwibmF0aXZlVHJhY2VFbmRBc3luY1NlY3Rpb24iLCJjb3VudGVyRXZlbnQiLCJ2YWx1ZSIsIm5hdGl2ZVRyYWNlQ291bnRlciIsIl9fTUVUUk9fR0xPQkFMX1BSRUZJWF9fIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlN5c3RyYWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuY29uc3QgVFJBQ0VfVEFHX1JFQUNUX0FQUFMgPSAxIDw8IDE3OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2VcbmNvbnN0IFRSQUNFX1RBR19KU19WTV9DQUxMUyA9IDEgPDwgMjc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYml0d2lzZVxuXG5sZXQgX2VuYWJsZWQgPSBmYWxzZTtcbmxldCBfYXN5bmNDb29raWUgPSAwO1xuY29uc3QgX21hcmtTdGFjayA9IFtdO1xubGV0IF9tYXJrU3RhY2tJbmRleCA9IC0xO1xubGV0IF9jYW5JbnN0YWxsUmVhY3RIb29rID0gZmFsc2U7XG5cbi8vIEltcGxlbWVudHMgYSBzdWJzZXQgb2YgVXNlciBUaW1pbmcgQVBJIG5lY2Vzc2FyeSBmb3IgUmVhY3QgbWVhc3VyZW1lbnRzLlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VzZXJfVGltaW5nX0FQSVxuY29uc3QgUkVBQ1RfTUFSS0VSID0gJ1xcdTI2OUInO1xuY29uc3QgdXNlclRpbWluZ1BvbHlmaWxsID0gX19ERVZfX1xuICA/IHtcbiAgICAgIG1hcmsobWFya05hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAoX2VuYWJsZWQpIHtcbiAgICAgICAgICBfbWFya1N0YWNrSW5kZXgrKztcbiAgICAgICAgICBfbWFya1N0YWNrW19tYXJrU3RhY2tJbmRleF0gPSBtYXJrTmFtZTtcbiAgICAgICAgICBsZXQgc3lzdHJhY2VMYWJlbCA9IG1hcmtOYW1lO1xuICAgICAgICAgIC8vIFNpbmNlIHBlcmYgbWVhc3VyZW1lbnRzIGFyZSBhIHNoYXJlZCBuYW1lc3BhY2UgaW4gVXNlciBUaW1pbmcgQVBJLFxuICAgICAgICAgIC8vIHdlIHByZWZpeCBhbGwgUmVhY3QgcmVzdWx0cyB3aXRoIGEgUmVhY3QgZW1vamkuXG4gICAgICAgICAgaWYgKG1hcmtOYW1lWzBdID09PSBSRUFDVF9NQVJLRVIpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgY29taW5nIGZyb20gUmVhY3QuXG4gICAgICAgICAgICAvLyBSZW1vdmluZyBjb21wb25lbnQgSURzIGtlZXBzIHRyYWNlIGNvbG9ycyBzdGFibGUuXG4gICAgICAgICAgICBjb25zdCBpbmRleE9mSWQgPSBtYXJrTmFtZS5sYXN0SW5kZXhPZignICgjJyk7XG4gICAgICAgICAgICBjb25zdCBjdXRvZmZJbmRleCA9IGluZGV4T2ZJZCAhPT0gLTEgPyBpbmRleE9mSWQgOiBtYXJrTmFtZS5sZW5ndGg7XG4gICAgICAgICAgICAvLyBBbHNvIGN1dCBvZmYgdGhlIGVtb2ppIGJlY2F1c2UgaXQgYnJlYWtzIFN5c3RyYWNlXG4gICAgICAgICAgICBzeXN0cmFjZUxhYmVsID0gbWFya05hbWUuc2xpY2UoMiwgY3V0b2ZmSW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBTeXN0cmFjZS5iZWdpbkV2ZW50KHN5c3RyYWNlTGFiZWwpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbWVhc3VyZShtZWFzdXJlTmFtZTogc3RyaW5nLCBzdGFydE1hcms6ID9zdHJpbmcsIGVuZE1hcms6ID9zdHJpbmcpIHtcbiAgICAgICAgaWYgKF9lbmFibGVkKSB7XG4gICAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgICAgdHlwZW9mIG1lYXN1cmVOYW1lID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICB0eXBlb2Ygc3RhcnRNYXJrID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICB0eXBlb2YgZW5kTWFyayA9PT0gJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAnT25seSBwZXJmb3JtYW5jZS5tZWFzdXJlKHN0cmluZywgc3RyaW5nKSBvdmVybG9hZCBpcyBzdXBwb3J0ZWQuJyxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHRvcE1hcmsgPSBfbWFya1N0YWNrW19tYXJrU3RhY2tJbmRleF07XG4gICAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgICAgc3RhcnRNYXJrID09PSB0b3BNYXJrLFxuICAgICAgICAgICAgJ1RoZXJlIHdhcyBhIG1pc21hdGNoaW5nIHBlcmZvcm1hbmNlLm1lYXN1cmUoKSBjYWxsLiAnICtcbiAgICAgICAgICAgICAgJ0V4cGVjdGVkIFwiJXNcIiBidXQgZ290IFwiJXMuXCInLFxuICAgICAgICAgICAgdG9wTWFyayxcbiAgICAgICAgICAgIHN0YXJ0TWFyayxcbiAgICAgICAgICApO1xuICAgICAgICAgIF9tYXJrU3RhY2tJbmRleC0tO1xuICAgICAgICAgIC8vIFdlIGNhbid0IHVzZSBtb3JlIGRlc2NyaXB0aXZlIG1lYXN1cmVOYW1lIGJlY2F1c2UgU3lzdHJhY2UgZG9lc24ndFxuICAgICAgICAgIC8vIGxldCB1cyBlZGl0IGxhYmVscyBwb3N0IGZhY3R1bS5cbiAgICAgICAgICBTeXN0cmFjZS5lbmRFdmVudCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY2xlYXJNYXJrcyhtYXJrTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGlmIChfZW5hYmxlZCkge1xuICAgICAgICAgIGlmIChfbWFya1N0YWNrSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXJrTmFtZSA9PT0gX21hcmtTdGFja1tfbWFya1N0YWNrSW5kZXhdKSB7XG4gICAgICAgICAgICAvLyBSZWFjdCB1c2VzIHRoaXMgZm9yIFwiY2FuY2VsbGluZ1wiIHN0YXJ0ZWQgbWVhc3VyZW1lbnRzLlxuICAgICAgICAgICAgLy8gU3lzdHJhY2UgZG9lc24ndCBzdXBwb3J0IGRlbGV0aW5nIG1lYXN1cmVtZW50cywgc28gd2UganVzdCBzdG9wIHRoZW0uXG4gICAgICAgICAgICBpZiAodXNlclRpbWluZ1BvbHlmaWxsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgdXNlclRpbWluZ1BvbHlmaWxsLm1lYXN1cmUobWFya05hbWUsIG1hcmtOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjbGVhck1lYXN1cmVzKCkge1xuICAgICAgICAvLyBSZWFjdCBjYWxscyB0aGlzIHRvIGF2b2lkIG1lbW9yeSBsZWFrcyBpbiBicm93c2VycywgYnV0IHdlIGRvbid0IGtlZXBcbiAgICAgICAgLy8gbWVhc3VyZW1lbnRzIGFueXdheS5cbiAgICAgIH0sXG4gICAgfVxuICA6IG51bGw7XG5cbmZ1bmN0aW9uIGluc3RhbGxQZXJmb3JtYW5jZUhvb2tzKHBvbHlmaWxsKSB7XG4gIGlmIChwb2x5ZmlsbCkge1xuICAgIGlmIChnbG9iYWwucGVyZm9ybWFuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZ2xvYmFsLnBlcmZvcm1hbmNlID0ge307XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMocG9seWZpbGwpLmZvckVhY2gobWV0aG9kTmFtZSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGdsb2JhbC5wZXJmb3JtYW5jZVttZXRob2ROYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBnbG9iYWwucGVyZm9ybWFuY2VbbWV0aG9kTmFtZV0gPSBwb2x5ZmlsbFttZXRob2ROYW1lXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5jb25zdCBTeXN0cmFjZSA9IHtcbiAgaW5zdGFsbFJlYWN0SG9vaygpIHtcbiAgICBpZiAoX2VuYWJsZWQpIHtcbiAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGluc3RhbGxQZXJmb3JtYW5jZUhvb2tzKHVzZXJUaW1pbmdQb2x5ZmlsbCk7XG4gICAgICB9XG4gICAgfVxuICAgIF9jYW5JbnN0YWxsUmVhY3RIb29rID0gdHJ1ZTtcbiAgfSxcblxuICBzZXRFbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICBpZiAoX2VuYWJsZWQgIT09IGVuYWJsZWQpIHtcbiAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgZ2xvYmFsLm5hdGl2ZVRyYWNlQmVnaW5MZWdhY3kgJiZcbiAgICAgICAgICAgIGdsb2JhbC5uYXRpdmVUcmFjZUJlZ2luTGVnYWN5KFRSQUNFX1RBR19KU19WTV9DQUxMUyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2xvYmFsLm5hdGl2ZVRyYWNlRW5kTGVnYWN5ICYmXG4gICAgICAgICAgICBnbG9iYWwubmF0aXZlVHJhY2VFbmRMZWdhY3koVFJBQ0VfVEFHX0pTX1ZNX0NBTExTKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2Nhbkluc3RhbGxSZWFjdEhvb2spIHtcbiAgICAgICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICAgICAgaW5zdGFsbFBlcmZvcm1hbmNlSG9va3ModXNlclRpbWluZ1BvbHlmaWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF9lbmFibGVkID0gZW5hYmxlZDtcbiAgICB9XG4gIH0sXG5cbiAgaXNFbmFibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBfZW5hYmxlZDtcbiAgfSxcblxuICAvKipcbiAgICogYmVnaW5FdmVudC9lbmRFdmVudCBmb3Igc3RhcnRpbmcgYW5kIHRoZW4gZW5kaW5nIGEgcHJvZmlsZSB3aXRoaW4gdGhlIHNhbWUgY2FsbCBzdGFjayBmcmFtZVxuICAgKiovXG4gIGJlZ2luRXZlbnQoXG4gICAgcHJvZmlsZU5hbWU/OiBzdHJpbmcgfCAoKCkgPT4gc3RyaW5nKSxcbiAgICBhcmdzPzoge1tzdHJpbmddOiBzdHJpbmcsIC4uLn0sXG4gICkge1xuICAgIGlmIChfZW5hYmxlZCkge1xuICAgICAgY29uc3QgcHJvZmlsZU5hbWVTdHJpbmcgPVxuICAgICAgICB0eXBlb2YgcHJvZmlsZU5hbWUgPT09ICdmdW5jdGlvbicgPyBwcm9maWxlTmFtZSgpIDogcHJvZmlsZU5hbWU7XG4gICAgICBnbG9iYWwubmF0aXZlVHJhY2VCZWdpblNlY3Rpb24oXG4gICAgICAgIFRSQUNFX1RBR19SRUFDVF9BUFBTLFxuICAgICAgICBwcm9maWxlTmFtZVN0cmluZyxcbiAgICAgICAgYXJncyxcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIGVuZEV2ZW50KCkge1xuICAgIGlmIChfZW5hYmxlZCkge1xuICAgICAgZ2xvYmFsLm5hdGl2ZVRyYWNlRW5kU2VjdGlvbihUUkFDRV9UQUdfUkVBQ1RfQVBQUyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBiZWdpbkFzeW5jRXZlbnQvZW5kQXN5bmNFdmVudCBmb3Igc3RhcnRpbmcgYW5kIHRoZW4gZW5kaW5nIGEgcHJvZmlsZSB3aGVyZSB0aGUgZW5kIGNhbiBlaXRoZXJcbiAgICogb2NjdXIgb24gYW5vdGhlciB0aHJlYWQgb3Igb3V0IG9mIHRoZSBjdXJyZW50IHN0YWNrIGZyYW1lLCBlZyBhd2FpdFxuICAgKiB0aGUgcmV0dXJuZWQgY29va2llIHZhcmlhYmxlIHNob3VsZCBiZSB1c2VkIGFzIGlucHV0IGludG8gdGhlIGVuZEFzeW5jRXZlbnQgY2FsbCB0byBlbmQgdGhlIHByb2ZpbGVcbiAgICoqL1xuICBiZWdpbkFzeW5jRXZlbnQocHJvZmlsZU5hbWU/OiBzdHJpbmcgfCAoKCkgPT4gc3RyaW5nKSk6IG51bWJlciB7XG4gICAgY29uc3QgY29va2llID0gX2FzeW5jQ29va2llO1xuICAgIGlmIChfZW5hYmxlZCkge1xuICAgICAgX2FzeW5jQ29va2llKys7XG4gICAgICBjb25zdCBwcm9maWxlTmFtZVN0cmluZyA9XG4gICAgICAgIHR5cGVvZiBwcm9maWxlTmFtZSA9PT0gJ2Z1bmN0aW9uJyA/IHByb2ZpbGVOYW1lKCkgOiBwcm9maWxlTmFtZTtcbiAgICAgIGdsb2JhbC5uYXRpdmVUcmFjZUJlZ2luQXN5bmNTZWN0aW9uKFxuICAgICAgICBUUkFDRV9UQUdfUkVBQ1RfQVBQUyxcbiAgICAgICAgcHJvZmlsZU5hbWVTdHJpbmcsXG4gICAgICAgIGNvb2tpZSxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjb29raWU7XG4gIH0sXG5cbiAgZW5kQXN5bmNFdmVudChwcm9maWxlTmFtZT86IHN0cmluZyB8ICgoKSA9PiBzdHJpbmcpLCBjb29raWU/OiBudW1iZXIpIHtcbiAgICBpZiAoX2VuYWJsZWQpIHtcbiAgICAgIGNvbnN0IHByb2ZpbGVOYW1lU3RyaW5nID1cbiAgICAgICAgdHlwZW9mIHByb2ZpbGVOYW1lID09PSAnZnVuY3Rpb24nID8gcHJvZmlsZU5hbWUoKSA6IHByb2ZpbGVOYW1lO1xuICAgICAgZ2xvYmFsLm5hdGl2ZVRyYWNlRW5kQXN5bmNTZWN0aW9uKFxuICAgICAgICBUUkFDRV9UQUdfUkVBQ1RfQVBQUyxcbiAgICAgICAgcHJvZmlsZU5hbWVTdHJpbmcsXG4gICAgICAgIGNvb2tpZSxcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBjb3VudGVyRXZlbnQgcmVnaXN0ZXJzIHRoZSB2YWx1ZSB0byB0aGUgcHJvZmlsZU5hbWUgb24gdGhlIHN5c3RyYWNlIHRpbWVsaW5lXG4gICAqKi9cbiAgY291bnRlckV2ZW50KHByb2ZpbGVOYW1lPzogc3RyaW5nIHwgKCgpID0+IHN0cmluZyksIHZhbHVlPzogbnVtYmVyKSB7XG4gICAgaWYgKF9lbmFibGVkKSB7XG4gICAgICBjb25zdCBwcm9maWxlTmFtZVN0cmluZyA9XG4gICAgICAgIHR5cGVvZiBwcm9maWxlTmFtZSA9PT0gJ2Z1bmN0aW9uJyA/IHByb2ZpbGVOYW1lKCkgOiBwcm9maWxlTmFtZTtcbiAgICAgIGdsb2JhbC5uYXRpdmVUcmFjZUNvdW50ZXIgJiZcbiAgICAgICAgZ2xvYmFsLm5hdGl2ZVRyYWNlQ291bnRlcihcbiAgICAgICAgICBUUkFDRV9UQUdfUkVBQ1RfQVBQUyxcbiAgICAgICAgICBwcm9maWxlTmFtZVN0cmluZyxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgKTtcbiAgICB9XG4gIH0sXG59O1xuXG5pZiAoX19ERVZfXykge1xuICAvLyBUaGUgbWV0cm8gcmVxdWlyZSBwb2x5ZmlsbCBjYW4gbm90IGhhdmUgZGVwZW5kZW5jaWVzICh0cnVlIGZvciBhbGwgcG9seWZpbGxzKS5cbiAgLy8gRW5zdXJlIHRoYXQgYFN5c3RyYWNlYCBpcyBhdmFpbGFibGUgaW4gcG9seWZpbGwgYnkgZXhwb3NpbmcgaXQgZ2xvYmFsbHkuXG4gIGdsb2JhbFsoZ2xvYmFsLl9fTUVUUk9fR0xPQkFMX1BSRUZJWF9fIHx8ICcnKSArICdfX1NZU1RSQUNFJ10gPSBTeXN0cmFjZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTeXN0cmFjZTtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFFWixJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFFdEMsSUFBTUMsb0JBQW9CLEdBQUcsQ0FBQyxJQUFJLEVBQUU7QUFDcEMsSUFBTUMscUJBQXFCLEdBQUcsQ0FBQyxJQUFJLEVBQUU7QUFFckMsSUFBSUMsUUFBUSxHQUFHLEtBQUs7QUFDcEIsSUFBSUMsWUFBWSxHQUFHLENBQUM7QUFDcEIsSUFBTUMsVUFBVSxHQUFHLEVBQUU7QUFDckIsSUFBSUMsZUFBZSxHQUFHLENBQUMsQ0FBQztBQUN4QixJQUFJQyxvQkFBb0IsR0FBRyxLQUFLO0FBSWhDLElBQU1DLFlBQVksR0FBRyxRQUFRO0FBQzdCLElBQU1DLGtCQUFrQixHQUFHQyxPQUFPLEdBQzlCO0VBQ0VDLElBQUks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