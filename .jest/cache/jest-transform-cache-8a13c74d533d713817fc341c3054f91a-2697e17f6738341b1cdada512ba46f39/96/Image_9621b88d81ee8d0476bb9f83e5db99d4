4cf479c884a893febd24052b437a2bc8
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _extractViewBox = require("../lib/extract/extractViewBox");
var _extractProps = require("../lib/extract/extractProps");
var _Shape2 = _interopRequireDefault(require("./Shape"));
var _NativeComponents = require("./NativeComponents");
var _jsxFileName = "/Users/wojciechlewicki/work/another/react-native-svg/src/elements/Image.tsx";
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = (0, _getPrototypeOf2.default)(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return (0, _possibleConstructorReturn2.default)(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
var spacesRegExp = /\s+/;
var SvgImage = function (_Shape) {
  (0, _inherits2.default)(SvgImage, _Shape);
  var _super = _createSuper(SvgImage);
  function SvgImage() {
    (0, _classCallCheck2.default)(this, SvgImage);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(SvgImage, [{
    key: "render",
    value: function render() {
      var props = this.props;
      var preserveAspectRatio = props.preserveAspectRatio,
        x = props.x,
        y = props.y,
        width = props.width,
        height = props.height,
        xlinkHref = props.xlinkHref,
        _props$href = props.href,
        href = _props$href === void 0 ? xlinkHref : _props$href;
      var modes = preserveAspectRatio ? preserveAspectRatio.trim().split(spacesRegExp) : [];
      var align = modes[0];
      var meetOrSlice = modes[1];
      var imageProps = {
        x: x,
        y: y,
        width: width,
        height: height,
        meetOrSlice: _extractViewBox.meetOrSliceTypes[meetOrSlice] || 0,
        align: _extractViewBox.alignEnum[align] || 'xMidYMid',
        src: !href ? null : _reactNative.Image.resolveAssetSource(typeof href === 'string' ? {
          uri: href
        } : href)
      };
      return _react.default.createElement(_NativeComponents.RNSVGImage, (0, _extends2.default)({
        ref: this.refMethod
      }, (0, _extractProps.withoutXY)(this, props), imageProps, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 78,
          columnNumber: 7
        }
      }));
    }
  }]);
  return SvgImage;
}(_Shape2.default);
exports.default = SvgImage;
(0, _defineProperty2.default)(SvgImage, "displayName", 'Image');
(0, _defineProperty2.default)(SvgImage, "defaultProps", {
  x: 0,
  y: 0,
  width: 0,
  height: 0,
  preserveAspectRatio: 'xMidYMid meet'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9leHRyYWN0Vmlld0JveCIsIl9leHRyYWN0UHJvcHMiLCJfU2hhcGUyIiwiX05hdGl2ZUNvbXBvbmVudHMiLCJfanN4RmlsZU5hbWUiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mMiIsImRlZmF1bHQiLCJyZXN1bHQiLCJOZXdUYXJnZXQiLCJjb25zdHJ1Y3RvciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsImUiLCJzcGFjZXNSZWdFeHAiLCJTdmdJbWFnZSIsIl9TaGFwZSIsIl9pbmhlcml0czIiLCJfc3VwZXIiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwicmVuZGVyIiwicHJvcHMiLCJwcmVzZXJ2ZUFzcGVjdFJhdGlvIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsInhsaW5rSHJlZiIsIl9wcm9wcyRocmVmIiwiaHJlZiIsIm1vZGVzIiwidHJpbSIsInNwbGl0IiwiYWxpZ24iLCJtZWV0T3JTbGljZSIsImltYWdlUHJvcHMiLCJtZWV0T3JTbGljZVR5cGVzIiwiYWxpZ25FbnVtIiwic3JjIiwiSW1hZ2UiLCJyZXNvbHZlQXNzZXRTb3VyY2UiLCJ1cmkiLCJjcmVhdGVFbGVtZW50IiwiUk5TVkdJbWFnZSIsIl9leHRlbmRzMiIsInJlZiIsInJlZk1ldGhvZCIsIndpdGhvdXRYWSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiZXhwb3J0cyIsIl9kZWZpbmVQcm9wZXJ0eTIiXSwic291cmNlcyI6WyJJbWFnZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEltYWdlLCBJbWFnZVByb3BzIGFzIFJOSW1hZ2VQcm9wcyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBhbGlnbkVudW0sIG1lZXRPclNsaWNlVHlwZXMgfSBmcm9tICcuLi9saWIvZXh0cmFjdC9leHRyYWN0Vmlld0JveCc7XG5pbXBvcnQgeyB3aXRob3V0WFkgfSBmcm9tICcuLi9saWIvZXh0cmFjdC9leHRyYWN0UHJvcHMnO1xuaW1wb3J0IHtcbiAgQ2xpcFByb3BzLFxuICBDb21tb25NYXNrUHJvcHMsXG4gIE5hdGl2ZVByb3BzLFxuICBOdW1iZXJQcm9wLFxuICBSZXNwb25kZXJQcm9wcyxcbiAgVG91Y2hhYmxlUHJvcHMsXG59IGZyb20gJy4uL2xpYi9leHRyYWN0L3R5cGVzJztcbmltcG9ydCBTaGFwZSBmcm9tICcuL1NoYXBlJztcbmltcG9ydCB7IFJOU1ZHSW1hZ2UgfSBmcm9tICcuL05hdGl2ZUNvbXBvbmVudHMnO1xuXG5jb25zdCBzcGFjZXNSZWdFeHAgPSAvXFxzKy87XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VQcm9wc1xuICBleHRlbmRzIFJlc3BvbmRlclByb3BzLFxuICAgIENvbW1vbk1hc2tQcm9wcyxcbiAgICBDbGlwUHJvcHMsXG4gICAgVG91Y2hhYmxlUHJvcHMsXG4gICAgTmF0aXZlUHJvcHMge1xuICB4PzogTnVtYmVyUHJvcDtcbiAgeT86IE51bWJlclByb3A7XG4gIHdpZHRoPzogTnVtYmVyUHJvcDtcbiAgaGVpZ2h0PzogTnVtYmVyUHJvcDtcbiAgeGxpbmtIcmVmPzogUk5JbWFnZVByb3BzWydzb3VyY2UnXTtcbiAgaHJlZj86IFJOSW1hZ2VQcm9wc1snc291cmNlJ107XG4gIHByZXNlcnZlQXNwZWN0UmF0aW8/OiBzdHJpbmc7XG4gIG9wYWNpdHk/OiBOdW1iZXJQcm9wO1xuICBjbGlwUGF0aD86IHN0cmluZztcbiAgaWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN2Z0ltYWdlIGV4dGVuZHMgU2hhcGU8SW1hZ2VQcm9wcz4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnSW1hZ2UnO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiAneE1pZFlNaWQgbWVldCcsXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbyxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICB4bGlua0hyZWYsXG4gICAgICBocmVmID0geGxpbmtIcmVmLFxuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCBtb2RlcyA9IHByZXNlcnZlQXNwZWN0UmF0aW9cbiAgICAgID8gcHJlc2VydmVBc3BlY3RSYXRpby50cmltKCkuc3BsaXQoc3BhY2VzUmVnRXhwKVxuICAgICAgOiBbXTtcbiAgICBjb25zdCBhbGlnbiA9IG1vZGVzWzBdO1xuICAgIGNvbnN0IG1lZXRPclNsaWNlOiAnbWVldCcgfCAnc2xpY2UnIHwgJ25vbmUnIHwgc3RyaW5nIHwgdW5kZWZpbmVkID1cbiAgICAgIG1vZGVzWzFdO1xuICAgIGNvbnN0IGltYWdlUHJvcHMgPSB7XG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgbWVldE9yU2xpY2U6IG1lZXRPclNsaWNlVHlwZXNbbWVldE9yU2xpY2VdIHx8IDAsXG4gICAgICBhbGlnbjogYWxpZ25FbnVtW2FsaWduXSB8fCAneE1pZFlNaWQnLFxuICAgICAgc3JjOiAhaHJlZlxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBJbWFnZS5yZXNvbHZlQXNzZXRTb3VyY2UoXG4gICAgICAgICAgICB0eXBlb2YgaHJlZiA9PT0gJ3N0cmluZycgPyB7IHVyaTogaHJlZiB9IDogaHJlZixcbiAgICAgICAgICApLFxuICAgIH07XG4gICAgcmV0dXJuIChcbiAgICAgIDxSTlNWR0ltYWdlXG4gICAgICAgIHJlZj17dGhpcy5yZWZNZXRob2R9XG4gICAgICAgIHsuLi53aXRob3V0WFkodGhpcywgcHJvcHMpfVxuICAgICAgICB7Li4uaW1hZ2VQcm9wc31cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGVBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGFBQUEsR0FBQUgsT0FBQTtBQVNBLElBQUFJLE9BQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLGlCQUFBLEdBQUFMLE9BQUE7QUFBZ0QsSUFBQU0sWUFBQTtBQUFBLFNBQUFDLGFBQUFDLE9BQUE7RUFBQSxJQUFBQyx5QkFBQSxHQUFBQyx5QkFBQTtFQUFBLGdCQUFBQyxxQkFBQTtJQUFBLElBQUFDLEtBQUEsT0FBQUMsZ0JBQUEsQ0FBQUMsT0FBQSxFQUFBTixPQUFBO01BQUFPLE1BQUE7SUFBQSxJQUFBTix5QkFBQTtNQUFBLElBQUFPLFNBQUEsT0FBQUgsZ0JBQUEsQ0FBQUMsT0FBQSxRQUFBRyxXQUFBO01BQUFGLE1BQUEsR0FBQUcsT0FBQSxDQUFBQyxTQUFBLENBQUFQLEtBQUEsRUFBQVEsU0FBQSxFQUFBSixTQUFBO0lBQUE7TUFBQUQsTUFBQSxHQUFBSCxLQUFBLENBQUFTLEtBQUEsT0FBQUQsU0FBQTtJQUFBO0lBQUEsV0FBQUUsMkJBQUEsQ0FBQVIsT0FBQSxRQUFBQyxNQUFB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