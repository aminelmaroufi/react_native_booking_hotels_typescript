364f3e36ba768cac45c08936de307439
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _actionTypes = _interopRequireDefault(require("../../utils/actionTypes"));
var _effects = require("redux-saga/effects");
var _api = require("../../api");
var RootNavigation = _interopRequireWildcard(require("../../navigation/rootNavigation"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _regeneratorRuntime() { "use strict"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
var _marked = _regeneratorRuntime().mark(get_hotels),
  _marked2 = _regeneratorRuntime().mark(get_more_hotels),
  _marked3 = _regeneratorRuntime().mark(add_card),
  _marked4 = _regeneratorRuntime().mark(create_booking),
  _marked5 = _regeneratorRuntime().mark(get_bookings),
  _marked6 = _regeneratorRuntime().mark(watchBookRequests);
function get_hotels(action) {
  var response, data;
  return _regeneratorRuntime().wrap(function get_hotels$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        _context.prev = 0;
        _context.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        _context.next = 5;
        return (0, _effects.call)(_api.getHotels, action.params);
      case 5:
        response = _context.sent;
        if (response) {
          _context.next = 11;
          break;
        }
        _context.next = 9;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        });
      case 9:
        _context.next = 19;
        break;
      case 11:
        data = response.data;
        if (!data.ok) {
          _context.next = 17;
          break;
        }
        _context.next = 15;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        }), (0, _effects.put)({
          type: _actionTypes.default.SET_HOTELS,
          payload: {
            hotels: data.result.hotels,
            total: data.result.total,
            pages: data.result.pages,
            page: data.result.page,
            limit: data.result.limit
          }
        })]);
      case 15:
        _context.next = 19;
        break;
      case 17:
        _context.next = 19;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 19:
        _context.next = 25;
        break;
      case 21:
        _context.prev = 21;
        _context.t0 = _context["catch"](0);
        _context.next = 25;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context.t0 === 'string' ? _context.t0 : _context.t0.message
          }
        });
      case 25:
      case "end":
        return _context.stop();
    }
  }, _marked, null, [[0, 21]]);
}
function get_more_hotels(action) {
  var response, data;
  return _regeneratorRuntime().wrap(function get_more_hotels$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        _context2.prev = 0;
        _context2.next = 3;
        return (0, _effects.call)(_api.getHotels, action.params);
      case 3:
        response = _context2.sent;
        data = response.data;
        if (!data.ok) {
          _context2.next = 10;
          break;
        }
        _context2.next = 8;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        }), (0, _effects.put)({
          type: _actionTypes.default.SET_HOTELS,
          payload: {
            hotels: data.result.hotels,
            total: data.result.total,
            pages: data.result.pages,
            page: data.result.page,
            limit: data.result.limit
          }
        })]);
      case 8:
        _context2.next = 12;
        break;
      case 10:
        _context2.next = 12;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 12:
        _context2.next = 18;
        break;
      case 14:
        _context2.prev = 14;
        _context2.t0 = _context2["catch"](0);
        _context2.next = 18;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context2.t0 === 'string' ? _context2.t0 : _context2.t0.message
          }
        });
      case 18:
      case "end":
        return _context2.stop();
    }
  }, _marked2, null, [[0, 14]]);
}
function add_card(action) {
  var response, data;
  return _regeneratorRuntime().wrap(function add_card$(_context3) {
    while (1) switch (_context3.prev = _context3.next) {
      case 0:
        _context3.prev = 0;
        _context3.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        _context3.next = 5;
        return (0, _effects.call)(_api.addCard, action.card);
      case 5:
        response = _context3.sent;
        data = response.data;
        if (!data.ok) {
          _context3.next = 12;
          break;
        }
        _context3.next = 10;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.SUCCESS_OPERATION,
          payload: {
            message: data.result.message
          }
        }), (0, _effects.put)({
          type: _actionTypes.default.ADD_CARD_SUCCESS,
          payload: {
            card: data.result.card
          }
        })]);
      case 10:
        _context3.next = 14;
        break;
      case 12:
        _context3.next = 14;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 14:
        _context3.next = 20;
        break;
      case 16:
        _context3.prev = 16;
        _context3.t0 = _context3["catch"](0);
        _context3.next = 20;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context3.t0 === 'string' ? _context3.t0 : _context3.t0.message
          }
        });
      case 20:
      case "end":
        return _context3.stop();
    }
  }, _marked3, null, [[0, 16]]);
}
function create_booking(action) {
  var response, data;
  return _regeneratorRuntime().wrap(function create_booking$(_context4) {
    while (1) switch (_context4.prev = _context4.next) {
      case 0:
        _context4.prev = 0;
        _context4.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        _context4.next = 5;
        return (0, _effects.call)(_api.createBooking, action.book);
      case 5:
        response = _context4.sent;
        data = response.data;
        if (!data.ok) {
          _context4.next = 14;
          break;
        }
        _context4.next = 10;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.SUCCESS_OPERATION,
          payload: {
            message: data.result.message
          }
        }), (0, _effects.put)({
          type: _actionTypes.default.CREATE_BOOKING_SUCCESS,
          payload: {
            book: data.result.booking
          }
        })]);
      case 10:
        action.navigation.popToTop();
        RootNavigation.navigate('Bookings', {});
        _context4.next = 16;
        break;
      case 14:
        _context4.next = 16;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 16:
        _context4.next = 22;
        break;
      case 18:
        _context4.prev = 18;
        _context4.t0 = _context4["catch"](0);
        _context4.next = 22;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context4.t0 === 'string' ? _context4.t0 : _context4.t0.message
          }
        });
      case 22:
      case "end":
        return _context4.stop();
    }
  }, _marked4, null, [[0, 18]]);
}
function get_bookings() {
  var response, data;
  return _regeneratorRuntime().wrap(function get_bookings$(_context5) {
    while (1) switch (_context5.prev = _context5.next) {
      case 0:
        _context5.prev = 0;
        _context5.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        _context5.next = 5;
        return (0, _effects.call)(_api.getBookings);
      case 5:
        response = _context5.sent;
        data = response.data;
        if (!data.ok) {
          _context5.next = 12;
          break;
        }
        _context5.next = 10;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        }), (0, _effects.put)({
          type: _actionTypes.default.SET_BOOKINGS,
          payload: {
            bookings: data.result.bookings
          }
        })]);
      case 10:
        _context5.next = 14;
        break;
      case 12:
        _context5.next = 14;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 14:
        _context5.next = 20;
        break;
      case 16:
        _context5.prev = 16;
        _context5.t0 = _context5["catch"](0);
        _context5.next = 20;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context5.t0 === 'string' ? _context5.t0 : _context5.t0.message
          }
        });
      case 20:
      case "end":
        return _context5.stop();
    }
  }, _marked5, null, [[0, 16]]);
}
function watchBookRequests() {
  return _regeneratorRuntime().wrap(function watchBookRequests$(_context6) {
    while (1) switch (_context6.prev = _context6.next) {
      case 0:
        _context6.next = 2;
        return (0, _effects.all)([(0, _effects.takeLatest)(_actionTypes.default.GET_HOTELS_REQUEST, get_hotels), (0, _effects.takeLatest)(_actionTypes.default.GET_MORE_HOTELS_REQUEST, get_more_hotels), (0, _effects.takeLatest)(_actionTypes.default.ADD_CARD_REQUEST, add_card), (0, _effects.takeLatest)(_actionTypes.default.CREATE_BOOKING_REQUEST, create_booking), (0, _effects.takeLatest)(_actionTypes.default.GET_BOOKINGS_REQUEST, get_bookings)]);
      case 2:
      case "end":
        return _context6.stop();
    }
  }, _marked6);
}
var _default = watchBookRequests;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,