a9d1c08e80c82d61197003415a6b8fd2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ListItemChevron = function ListItemChevron(_a) {
  var containerStyle = _a.containerStyle,
    props = __rest(_a, ["containerStyle"]);
  return _react.default.createElement(_Icon.default, (0, _extends2.default)({
    type: _reactNative.Platform.OS === 'ios' ? 'ionicon' : 'material',
    color: "#D1D1D6",
    name: _reactNative.Platform.OS === 'ios' ? 'chevron-forward-outline' : 'keyboard-arrow-right',
    size: 16,
    containerStyle: _reactNative.StyleSheet.flatten([{
      alignSelf: 'center'
    }, containerStyle])
  }, props));
};
var _default = (0, _config.withTheme)(ListItemChevron, 'ListItemChevron');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfSWNvbiIsIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTGlzdEl0ZW1DaGV2cm9uIiwiX2EiLCJjb250YWluZXJTdHlsZSIsInByb3BzIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJfZXh0ZW5kczIiLCJ0eXBlIiwiUGxhdGZvcm0iLCJPUyIsImNvbG9yIiwibmFtZSIsInNpemUiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsImFsaWduU2VsZiIsIl9kZWZhdWx0Iiwid2l0aFRoZW1lIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkxpc3RJdGVtQ2hldnJvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgUGxhdGZvcm0gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb25zL0ljb24nO1xuY29uc3QgTGlzdEl0ZW1DaGV2cm9uID0gKF9hKSA9PiB7XG4gICAgdmFyIHsgY29udGFpbmVyU3R5bGUgfSA9IF9hLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wiY29udGFpbmVyU3R5bGVcIl0pO1xuICAgIHJldHVybiAoPEljb24gdHlwZT17UGxhdGZvcm0uT1MgPT09ICdpb3MnID8gJ2lvbmljb24nIDogJ21hdGVyaWFsJ30gY29sb3I9XCIjRDFEMUQ2XCIgbmFtZT17UGxhdGZvcm0uT1MgPT09ICdpb3MnXG4gICAgICAgICAgICA/ICdjaGV2cm9uLWZvcndhcmQtb3V0bGluZSdcbiAgICAgICAgICAgIDogJ2tleWJvYXJkLWFycm93LXJpZ2h0J30gc2l6ZT17MTZ9IGNvbnRhaW5lclN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgeyBhbGlnblNlbGY6ICdjZW50ZXInIH0sXG4gICAgICAgICAgICBjb250YWluZXJTdHlsZSxcbiAgICAgICAgXSl9IHsuLi5wcm9wc30vPik7XG59O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKExpc3RJdGVtQ2hldnJvbiwgJ0xpc3RJdGVtQ2hldnJvbicpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLEtBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQWRBLElBQUlJLE1BQU0sR0FBSSxVQUFRLFNBQUtBLE1BQU0sSUFBSyxVQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJQyxDQUFDLElBQUlILENBQUMsRUFBRSxJQUFJSSxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDLElBQUlGLENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQy9FRCxDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHSCxDQUFDLENBQUNHLENBQUMsQ0FBQztFQUNmLElBQUlILENBQUMsSUFBSSxJQUFJLElBQUksT0FBT0ksTUFBTSxDQUFDSyxxQkFBcUIsS0FBSyxVQUFVLEVBQy9ELEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRVAsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFxQixDQUFDVCxDQUFDLENBQUMsRUFBRVUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDcEUsSUFBSVQsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUlOLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDTyxvQkFBb0IsQ0FBQ0wsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsRUFDMUVSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxHQUFHVixDQUFDLENBQUNHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUM7RUFDekI7RUFDSixPQUFPUixDQUFDO0FBQ1osQ0FBQztBQUtELElBQU1XLGVBQWUsR0FBRyxTQUFsQkEsZUFBZUEsQ0FBSUMsRUFBRSxFQUFLO0VBQ3hCLElBQUVDLGNBQWMsR0FBS0QsRUFBRSxDQUFyQkMsY0FBYztJQUFTQyxLQUFLLEdBQUdqQixNQUFNLENBQUNlLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUM7RUFDbkUsT0FBUXJCLE1BQUEsQ0FBQXdCLE9BQUEsQ0FBQUMsYUFBQSxDQUFDcEIsS0FBQSxDQUFBbUIsT0FBSSxNQUFBRSxTQUFBLENBQUFGLE9BQUE7SUFBQ0csSUFBSSxFQUFFQyxxQkFBUSxDQUFDQyxFQUFFLEtBQUssS0FBSyxHQUFHLFNBQVMsR0FBRyxVQUFXO0lBQUNDLEtBQUssRUFBQyxTQUFTO0lBQUNDLElBQUksRUFBRUgscUJBQVEsQ0FBQ0MsRUFBRSxLQUFLLEtBQUssR0FDckcseUJBQXlCLEdBQ3pCLHNCQUF1QjtJQUFDRyxJQUFJLEVBQUUsRUFBRztJQUFDVixjQUFjLEVBQUVXLHVCQUFVLENBQUNDLE9BQU8sQ0FBQyxDQUN2RTtNQUFFQyxTQUFTLEVBQUU7SUFBUyxDQUFDLEVBQ3ZCYixjQUFjLENBQ2pCO0VBQUUsR0FBS0MsS0FBSyxFQUFHO0FBQ3hCLENBQUM7QUFBQyxJQUFBYSxRQUFBLEdBQ2EsSUFBQUMsaUJBQVMsRUFBQ2pCLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQztBQUFBa0IsT0FBQSxDQUFBZCxPQUFBLEdBQUFZLFFBQUEifQ==