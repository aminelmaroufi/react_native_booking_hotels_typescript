73a8261954fde1db8791021734b23948
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Chip = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Button = _interopRequireDefault(require("./Button"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Chip = function Chip(props) {
  var titleStyle = props.titleStyle,
    buttonStyle = props.buttonStyle,
    rest = __rest(props, ["titleStyle", "buttonStyle"]);
  return _react.default.createElement(_Button.default, (0, _extends2.default)({
    titleStyle: _reactNative.StyleSheet.flatten([{
      fontSize: 14,
      paddingHorizontal: 2
    }, titleStyle]),
    buttonStyle: _reactNative.StyleSheet.flatten([{
      borderRadius: 30
    }, buttonStyle])
  }, props.onPress === undefined && {
    TouchableComponent: _reactNative.TouchableWithoutFeedback
  }, rest));
};
exports.Chip = Chip;
var _default = (0, _config.withTheme)(Chip, 'Chip');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfQnV0dG9uIiwiX19yZXN0IiwicyIsImUiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJDaGlwIiwicHJvcHMiLCJ0aXRsZVN0eWxlIiwiYnV0dG9uU3R5bGUiLCJyZXN0IiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJfZXh0ZW5kczIiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsImZvbnRTaXplIiwicGFkZGluZ0hvcml6b250YWwiLCJib3JkZXJSYWRpdXMiLCJvblByZXNzIiwidW5kZWZpbmVkIiwiVG91Y2hhYmxlQ29tcG9uZW50IiwiVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIiwiZXhwb3J0cyIsIl9kZWZhdWx0Iiwid2l0aFRoZW1lIl0sInNvdXJjZXMiOlsiQ2hpcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLCBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vQnV0dG9uJztcbmNvbnN0IENoaXAgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHRpdGxlU3R5bGUsIGJ1dHRvblN0eWxlIH0gPSBwcm9wcywgcmVzdCA9IF9fcmVzdChwcm9wcywgW1widGl0bGVTdHlsZVwiLCBcImJ1dHRvblN0eWxlXCJdKTtcbiAgICByZXR1cm4gKDxCdXR0b24gdGl0bGVTdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgeyBmb250U2l6ZTogMTQsIHBhZGRpbmdIb3Jpem9udGFsOiAyIH0sXG4gICAgICAgIHRpdGxlU3R5bGUsXG4gICAgXSl9IGJ1dHRvblN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW3sgYm9yZGVyUmFkaXVzOiAzMCB9LCBidXR0b25TdHlsZV0pfSB7Li4uKHByb3BzLm9uUHJlc3MgPT09IHVuZGVmaW5lZCAmJiB7XG4gICAgICAgIFRvdWNoYWJsZUNvbXBvbmVudDogVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLFxuICAgIH0pfSB7Li4ucmVzdH0vPik7XG59O1xuZXhwb3J0IHsgQ2hpcCB9O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKENoaXAsICdDaGlwJyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBV0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFB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