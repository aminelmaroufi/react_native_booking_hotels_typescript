b9b9f5c6bf959a12ea0dc549d46f84ad
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ListItemChevron = function ListItemChevron(_a) {
  var containerStyle = _a.containerStyle,
    props = __rest(_a, ["containerStyle"]);
  return _react.default.createElement(_Icon.default, (0, _extends2.default)({
    type: _reactNative.Platform.OS === 'ios' ? 'ionicon' : 'material',
    color: "#D1D1D6",
    name: _reactNative.Platform.OS === 'ios' ? 'chevron-forward-outline' : 'keyboard-arrow-right',
    size: 16,
    containerStyle: _reactNative.StyleSheet.flatten([{
      alignSelf: 'center'
    }, containerStyle])
  }, props));
};
var _default = (0, _config.withTheme)(ListItemChevron, 'ListItemChevron');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfSWNvbiIsIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTGlzdEl0ZW1DaGV2cm9uIiwiX2EiLCJjb250YWluZXJTdHlsZSIsInByb3BzIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJfZXh0ZW5kczIiLCJ0eXBlIiwiUGxhdGZvcm0iLCJPUyIsImNvbG9yIiwibmFtZSIsInNpemUiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsImFsaWduU2VsZiIsIl9kZWZhdWx0Iiwid2l0aFRoZW1lIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkxpc3RJdGVtQ2hldnJvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgUGxhdGZvcm0gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb25zL0ljb24nO1xuY29uc3QgTGlzdEl0ZW1DaGV2cm9uID0gKF9hKSA9PiB7XG4gICAgdmFyIHsgY29udGFpbmVyU3R5bGUgfSA9IF9hLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wiY29udGFpbmVyU3R5bGVcIl0pO1xuICAgIHJldHVybiAoPEljb24gdHlwZT17UGxhdGZvcm0uT1MgPT09ICdpb3MnID8gJ2lvbmljb24nIDogJ21hdGVyaWFsJ30gY29sb3I9XCIjRDFEMUQ2XCIgbmFtZT17UGxhdGZvcm0uT1MgPT09ICdpb3MnXG4gICAgICAgID8gJ2NoZXZyb24tZm9yd2FyZC1vdXRsaW5lJ1xuICAgICAgICA6ICdrZXlib2FyZC1hcnJvdy1yaWdodCd9IHNpemU9ezE2fSBjb250YWluZXJTdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgeyBhbGlnblNlbGY6ICdjZW50ZXInIH0sXG4gICAgICAgIGNvbnRhaW5lclN0eWxlLFxuICAgIF0pfSB7Li4ucHJvcHN9Lz4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShMaXN0SXRlbUNoZXZyb24sICdMaXN0SXRlbUNoZXZyb24nKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFXQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxLQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFkQSxJQUFJSSxNQUFNLEdBQUksVUFBUSxTQUFLQSxNQUFNLElBQUssVUFBVUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFDbEQsSUFBSUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNWLEtBQUssSUFBSUMsQ0FBQyxJQUFJSCxDQUFDLEVBQUUsSUFBSUksTUFBTSxDQUFDQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQyxJQUFJRixDQUFDLENBQUNPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUMvRUQsQ0FBQyxDQUFDQyxDQUFDLENBQUMsR0FBR0gsQ0FBQyxDQUFDRyxDQUFDLENBQUM7RUFDZixJQUFJSCxDQUFDLElBQUksSUFBSSxJQUFJLE9BQU9JLE1BQU0sQ0FBQ0sscUJBQXFCLEtBQUssVUFBVSxFQUMvRCxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVQLENBQUMsR0FBR0MsTUFBTSxDQUFDSyxxQkFBcUIsQ0FBQ1QsQ0FBQyxDQUFDLEVBQUVVLENBQUMsR0FBR1AsQ0FBQyxDQUFDUSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ3BFLElBQUlULENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJTixNQUFNLENBQUNDLFNBQVMsQ0FBQ08sb0JBQW9CLENBQUNMLElBQUksQ0FBQ1AsQ0FBQyxFQUFFRyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEVBQzFFUixDQUFDLENBQUNDLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBR1YsQ0FBQyxDQUFDRyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDO0VBQ3pCO0VBQ0osT0FBT1IsQ0FBQztBQUNaLENBQUM7QUFLRCxJQUFNVyxlQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQUlDLEVBQUUsRUFBSztFQUN4QixJQUFFQyxjQUFjLEdBQUtELEVBQUUsQ0FBckJDLGNBQWM7SUFBU0MsS0FBSyxHQUFHakIsTUFBTSxDQUFDZSxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ25FLE9BQVFyQixNQUFBLENBQUF3QixPQUFBLENBQUFDLGFBQUEsQ0FBQ3BCLEtBQUEsQ0FBQW1CLE9BQUksTUFBQUUsU0FBQSxDQUFBRixPQUFBO0lBQUNHLElBQUksRUFBRUMscUJBQVEsQ0FBQ0MsRUFBRSxLQUFLLEtBQUssR0FBRyxTQUFTLEdBQUcsVUFBVztJQUFDQyxLQUFLLEVBQUMsU0FBUztJQUFDQyxJQUFJLEVBQUVILHFCQUFRLENBQUNDLEVBQUUsS0FBSyxLQUFLLEdBQ3pHLHlCQUF5QixHQUN6QixzQkFBdUI7SUFBQ0csSUFBSSxFQUFFLEVBQUc7SUFBQ1YsY0FBYyxFQUFFVyx1QkFBVSxDQUFDQyxPQUFPLENBQUMsQ0FDdkU7TUFBRUMsU0FBUyxFQUFFO0lBQVMsQ0FBQyxFQUN2QmIsY0FBYyxDQUNqQjtFQUFFLEdBQUtDLEtBQUssRUFBRztBQUNwQixDQUFDO0FBQUMsSUFBQWEsUUFBQSxHQUNhLElBQUFDLGlCQUFTLEVBQUNqQixlQUFlLEVBQUUsaUJBQWlCLENBQUM7QUFBQWtCLE9BQUEsQ0FBQWQsT0FBQSxHQUFBWSxRQUFBIn0=