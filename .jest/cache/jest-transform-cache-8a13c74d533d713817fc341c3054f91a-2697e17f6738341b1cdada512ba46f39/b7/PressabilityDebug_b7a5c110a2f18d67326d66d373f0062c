75cb527e177e306d49f30117493ec465
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PressabilityDebugView = PressabilityDebugView;
exports.isEnabled = isEnabled;
exports.setEnabled = setEnabled;
var _normalizeColor = _interopRequireDefault(require("../StyleSheet/normalizeColor"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function PressabilityDebugView(_ref) {
  var color = _ref.color,
    hitSlop = _ref.hitSlop;
  if (__DEV__) {
    if (isEnabled()) {
      var _hitSlop$bottom, _hitSlop$left, _hitSlop$right, _hitSlop$top;
      var normalizedColor = (0, _normalizeColor.default)(color);
      if (typeof normalizedColor !== 'number') {
        return null;
      }
      var baseColor = '#' + (normalizedColor != null ? normalizedColor : 0).toString(16).padStart(8, '0');
      return React.createElement(_View.default, {
        pointerEvents: "none",
        style: {
          backgroundColor: baseColor.slice(0, -2) + '0F',
          borderColor: baseColor.slice(0, -2) + '55',
          borderStyle: 'dashed',
          borderWidth: 1,
          bottom: -((_hitSlop$bottom = hitSlop == null ? void 0 : hitSlop.bottom) != null ? _hitSlop$bottom : 0),
          left: -((_hitSlop$left = hitSlop == null ? void 0 : hitSlop.left) != null ? _hitSlop$left : 0),
          position: 'absolute',
          right: -((_hitSlop$right = hitSlop == null ? void 0 : hitSlop.right) != null ? _hitSlop$right : 0),
          top: -((_hitSlop$top = hitSlop == null ? void 0 : hitSlop.top) != null ? _hitSlop$top : 0)
        }
      });
    }
  }
  return null;
}
var isDebugEnabled = false;
function isEnabled() {
  if (__DEV__) {
    return isDebugEnabled;
  }
  return false;
}
function setEnabled(value) {
  if (__DEV__) {
    isDebugEnabled = value;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9ybWFsaXplQ29sb3IiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9WaWV3IiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJQcmVzc2FiaWxpdHlEZWJ1Z1ZpZXciLCJfcmVmIiwiY29sb3IiLCJoaXRTbG9wIiwiX19ERVZfXyIsImlzRW5hYmxlZCIsIl9oaXRTbG9wJGJvdHRvbSIsIl9oaXRTbG9wJGxlZnQiLCJfaGl0U2xvcCRyaWdodCIsIl9oaXRTbG9wJHRvcCIsIm5vcm1hbGl6ZWRDb2xvciIsIm5vcm1hbGl6ZUNvbG9yIiwiYmFzZUNvbG9yIiwidG9TdHJpbmciLCJwYWRTdGFydCIsImNyZWF0ZUVsZW1lbnQiLCJwb2ludGVyRXZlbnRzIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzbGljZSIsImJvcmRlckNvbG9yIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJvdHRvbSIsImxlZnQiLCJwb3NpdGlvbiIsInJpZ2h0IiwidG9wIiwiaXNEZWJ1Z0VuYWJsZWQiLCJzZXRFbmFibGVkIiwidmFsdWUiXSwic291cmNlcyI6WyJQcmVzc2FiaWxpdHlEZWJ1Zy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCBub3JtYWxpemVDb2xvciBmcm9tICcuLi9TdHlsZVNoZWV0L25vcm1hbGl6ZUNvbG9yJztcbmltcG9ydCB0eXBlIHtDb2xvclZhbHVlfSBmcm9tICcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuXG5pbXBvcnQgVmlldyBmcm9tICcuLi9Db21wb25lbnRzL1ZpZXcvVmlldyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgY29sb3I6IENvbG9yVmFsdWUsXG4gIGhpdFNsb3A6ID8kUmVhZE9ubHk8e3xcbiAgICBib3R0b20/OiA/bnVtYmVyLFxuICAgIGxlZnQ/OiA/bnVtYmVyLFxuICAgIHJpZ2h0PzogP251bWJlcixcbiAgICB0b3A/OiA/bnVtYmVyLFxuICB8fT4sXG58fT47XG5cbi8qKlxuICogRGlzcGxheXMgYSBkZWJ1ZyBvdmVybGF5IHRvIHZpc3VhbGl6ZSBwcmVzcyB0YXJnZXRzIHdoZW4gZW5hYmxlZCB2aWEgdGhlXG4gKiBSZWFjdCBOYXRpdmUgSW5zcGVjdG9yLiBDYWxscyB0byB0aGlzIG1vZHVsZSBzaG91bGQgYmUgZ3VhcmRlZCBieSBgX19ERVZfX2AsXG4gKiBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPFZpZXc+XG4gKiAgICAgICB7Y2hpbGRyZW59XG4gKiAgICAgICB7X19ERVZfXyA/IChcbiAqICAgICAgICAgPFByZXNzYWJpbGl0eURlYnVnVmlldyBjb2xvcj1cIi4uLlwiIGhpdFNsb3A9e3Byb3BzLmhpdFNsb3B9IC8+XG4gKiAgICAgICApIDogbnVsbH1cbiAqICAgICA8L1ZpZXc+XG4gKiAgICk7XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gUHJlc3NhYmlsaXR5RGVidWdWaWV3KHtjb2xvciwgaGl0U2xvcH06IFByb3BzKTogUmVhY3QuTm9kZSB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgaWYgKGlzRW5hYmxlZCgpKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkQ29sb3IgPSBub3JtYWxpemVDb2xvcihjb2xvcik7XG4gICAgICBpZiAodHlwZW9mIG5vcm1hbGl6ZWRDb2xvciAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBiYXNlQ29sb3IgPVxuICAgICAgICAnIycgKyAobm9ybWFsaXplZENvbG9yID8/IDApLnRvU3RyaW5nKDE2KS5wYWRTdGFydCg4LCAnMCcpO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Vmlld1xuICAgICAgICAgIHBvaW50ZXJFdmVudHM9XCJub25lXCJcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYXNlQ29sb3Iuc2xpY2UoMCwgLTIpICsgJzBGJywgLy8gMTUlXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogYmFzZUNvbG9yLnNsaWNlKDAsIC0yKSArICc1NScsIC8vIDg1JVxuICAgICAgICAgICAgYm9yZGVyU3R5bGU6ICdkYXNoZWQnLFxuICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICAgICAgICBib3R0b206IC0oaGl0U2xvcD8uYm90dG9tID8/IDApLFxuICAgICAgICAgICAgbGVmdDogLShoaXRTbG9wPy5sZWZ0ID8/IDApLFxuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICByaWdodDogLShoaXRTbG9wPy5yaWdodCA/PyAwKSxcbiAgICAgICAgICAgIHRvcDogLShoaXRTbG9wPy50b3AgPz8gMCksXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5sZXQgaXNEZWJ1Z0VuYWJsZWQgPSBmYWxzZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICByZXR1cm4gaXNEZWJ1Z0VuYWJsZWQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RW5hYmxlZCh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICBpZiAoX19ERVZfXykge1xuICAgIGlzRGVidWdFbmFibGVkID0gdmFsdWU7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBVUEsSUFBQUEsZUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBR0EsSUFBQUMsS0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsS0FBQSxHQUFBQyx1QkFBQSxDQUFBSCxPQUFBO0FBQStCLFNBQUFJLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBRix3QkFBQU0sR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBLDRCQUFBRSxPQUFBLEVBQUFGLEdBQUEsVUFBQUcsS0FBQSxHQUFBUix3QkFBQSxDQUFBQyxXQUFBLE9BQUFPLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFKLEdBQUEsWUFBQUcsS0FBQSxDQUFBRSxHQUFBLENBQUFMLEdBQUEsU0FBQU0sTUFBQSxXQUFBQyxxQkFBQSxHQUFBQyxNQUFBLENB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