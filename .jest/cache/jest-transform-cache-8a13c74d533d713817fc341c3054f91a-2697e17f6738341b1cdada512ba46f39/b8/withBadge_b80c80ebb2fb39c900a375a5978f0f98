e6d6ada495cdeb78e78b44b972657150
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _Badge = _interopRequireDefault(require("./Badge"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var withBadge = function withBadge(value) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function (WrappedComponent) {
    var WithBadge = function WithBadge(props) {
      var bottom = options.bottom,
        _options$hidden = options.hidden,
        hidden = _options$hidden === void 0 ? false : _options$hidden,
        left = options.left,
        containerStyle = options.containerStyle,
        badgeProps = __rest(options, ["bottom", "hidden", "left", "containerStyle"]);
      var _options$right = options.right,
        right = _options$right === void 0 ? -16 : _options$right,
        _options$top = options.top,
        top = _options$top === void 0 ? -1 : _options$top;
      if (!value) {
        right = -3;
        top = 3;
      }
      var badgeValue = typeof value === 'function' ? value(props) : value;
      return _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
      }, _react.default.createElement(WrappedComponent, props), !hidden && _react.default.createElement(_Badge.default, (0, _extends2.default)({
        value: badgeValue,
        status: "error",
        containerStyle: _reactNative.StyleSheet.flatten([styles.badgeContainer, {
          bottom: bottom,
          left: left,
          right: right,
          top: top
        }])
      }, badgeProps)));
    };
    WithBadge.displayName = "WithBadge(" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + ")";
    return WithBadge;
  };
};
var styles = _reactNative.StyleSheet.create({
  badgeContainer: {
    position: 'absolute'
  },
  container: {
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative'
  }
});
var _default = withBadge;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CYWRnZSIsIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwid2l0aEJhZGdlIiwidmFsdWUiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiV3JhcHBlZENvbXBvbmVudCIsIldpdGhCYWRnZSIsInByb3BzIiwiYm90dG9tIiwiX29wdGlvbnMkaGlkZGVuIiwiaGlkZGVuIiwibGVmdCIsImNvbnRhaW5lclN0eWxlIiwiYmFkZ2VQcm9wcyIsIl9vcHRpb25zJHJpZ2h0IiwicmlnaHQiLCJfb3B0aW9ucyR0b3AiLCJ0b3AiLCJiYWRnZVZhbHVlIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJWaWV3Iiwic3R5bGUiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlcyIsImNvbnRhaW5lciIsIl9leHRlbmRzMiIsInN0YXR1cyIsImJhZGdlQ29udGFpbmVyIiwiZGlzcGxheU5hbWUiLCJuYW1lIiwiY3JlYXRlIiwicG9zaXRpb24iLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ3aXRoQmFkZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN0eWxlU2hlZXQsIFZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEJhZGdlIGZyb20gJy4vQmFkZ2UnO1xuY29uc3Qgd2l0aEJhZGdlID0gKHZhbHVlLCBvcHRpb25zID0ge30pID0+IChXcmFwcGVkQ29tcG9uZW50KSA9PiB7XG4gICAgY29uc3QgV2l0aEJhZGdlID0gKHByb3BzKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgYm90dG9tLCBoaWRkZW4gPSBmYWxzZSwgbGVmdCwgY29udGFpbmVyU3R5bGUgfSA9IG9wdGlvbnMsIGJhZGdlUHJvcHMgPSBfX3Jlc3Qob3B0aW9ucywgW1wiYm90dG9tXCIsIFwiaGlkZGVuXCIsIFwibGVmdFwiLCBcImNvbnRhaW5lclN0eWxlXCJdKTtcbiAgICAgICAgbGV0IHsgcmlnaHQgPSAtMTYsIHRvcCA9IC0xIH0gPSBvcHRpb25zO1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICByaWdodCA9IC0zO1xuICAgICAgICAgICAgdG9wID0gMztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYWRnZVZhbHVlID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nID8gdmFsdWUocHJvcHMpIDogdmFsdWU7XG4gICAgICAgIHJldHVybiAoPFZpZXcgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLmNvbnRhaW5lciwgY29udGFpbmVyU3R5bGVdKX0+XG4gICAgICAgIDxXcmFwcGVkQ29tcG9uZW50IHsuLi5wcm9wc30vPlxuXG4gICAgICAgIHshaGlkZGVuICYmICg8QmFkZ2UgdmFsdWU9e2JhZGdlVmFsdWV9IHN0YXR1cz1cImVycm9yXCIgY29udGFpbmVyU3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgICBzdHlsZXMuYmFkZ2VDb250YWluZXIsXG4gICAgICAgICAgICB7IGJvdHRvbSwgbGVmdCwgcmlnaHQsIHRvcCB9LFxuICAgICAgICBdKX0gey4uLmJhZGdlUHJvcHN9Lz4pfVxuICAgICAgPC9WaWV3Pik7XG4gICAgfTtcbiAgICBXaXRoQmFkZ2UuZGlzcGxheU5hbWUgPSBgV2l0aEJhZGdlKCR7V3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCd9KWA7XG4gICAgcmV0dXJuIFdpdGhCYWRnZTtcbn07XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgYmFkZ2VDb250YWluZXI6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgfSxcbiAgICBjb250YWluZXI6IHtcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgfSxcbn0pO1xuZXhwb3J0IGRlZmF1bHQgd2l0aEJhZGdlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQWJB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