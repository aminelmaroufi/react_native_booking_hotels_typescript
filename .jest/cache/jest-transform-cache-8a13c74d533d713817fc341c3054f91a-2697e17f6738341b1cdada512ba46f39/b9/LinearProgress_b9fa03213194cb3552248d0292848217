31b5a4d2b186558947aa6e92ea5a4467
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var LinearProgress = function LinearProgress(_a) {
  var _b, _c;
  var _a$value = _a.value,
    value = _a$value === void 0 ? 0 : _a$value,
    _a$variant = _a.variant,
    variant = _a$variant === void 0 ? 'indeterminate' : _a$variant,
    _a$color = _a.color,
    color = _a$color === void 0 ? 'secondary' : _a$color,
    style = _a.style,
    theme = _a.theme,
    trackColor = _a.trackColor,
    props = __rest(_a, ["value", "variant", "color", "style", "theme", "trackColor"]);
  var _React$useState = _react.default.useState(0),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    width = _React$useState2[0],
    setWidth = _React$useState2[1];
  var _React$useRef = _react.default.useRef(new _reactNative.Animated.Value(0)),
    animation = _React$useRef.current;
  var intermediate = _react.default.useRef();
  var startAnimation = _react.default.useCallback(function () {
    if (variant === 'indeterminate') {
      intermediate.current = _reactNative.Animated.timing(animation, {
        duration: 2000,
        toValue: 1,
        useNativeDriver: true,
        isInteraction: false
      });
      animation.setValue(0);
      _reactNative.Animated.loop(intermediate.current).start();
    } else {
      _reactNative.Animated.timing(animation, {
        duration: 1000,
        toValue: value || 0,
        useNativeDriver: _reactNative.Platform.OS !== 'web',
        isInteraction: false
      }).start();
    }
  }, [animation, variant, value]);
  var tintColor = color === 'secondary' || color === 'primary' ? (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b[color] : (0, _color.default)(color).rgb().string() || ((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.secondary);
  var trackTintColor = trackColor || (0, _color.default)(tintColor).alpha(0.4).rgb().string();
  _react.default.useEffect(function () {
    startAnimation();
  }, [startAnimation, value]);
  return _react.default.createElement(_reactNative.View, (0, _extends2.default)({
    accessible: true,
    accessibilityRole: "progressbar",
    accessibilityValue: {
      now: value,
      min: 0,
      max: 1
    }
  }, props, {
    onLayout: function onLayout(e) {
      setWidth(e.nativeEvent.layout.width);
    },
    style: [{
      height: 4,
      overflow: 'hidden',
      width: '100%',
      backgroundColor: trackTintColor
    }, style]
  }), _react.default.createElement(_reactNative.Animated.View, {
    style: {
      transform: [{
        translateX: animation.interpolate(variant === 'indeterminate' ? {
          inputRange: [0, 1],
          outputRange: [-width, 0.5 * width]
        } : {
          inputRange: [0, 1],
          outputRange: [-0.5 * width, 0]
        })
      }, {
        scaleX: animation.interpolate(variant === 'indeterminate' ? {
          inputRange: [0, 0.5, 1],
          outputRange: [0.0001, 1, 0.001]
        } : {
          inputRange: [0, 1],
          outputRange: [0.0001, 1]
        })
      }],
      backgroundColor: tintColor,
      flex: 1
    }
  }));
};
var _default = LinearProgress;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb2xvciIsIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTGluZWFyUHJvZ3Jlc3MiLCJfYSIsIl9iIiwiX2MiLCJfYSR2YWx1ZSIsInZhbHVlIiwiX2EkdmFyaWFudCIsInZhcmlhbnQiLCJfYSRjb2xvciIsImNvbG9yIiwic3R5bGUiLCJ0aGVtZSIsInRyYWNrQ29sb3IiLCJwcm9wcyIsIl9SZWFjdCR1c2VTdGF0ZSIsIlJlYWN0IiwidXNlU3RhdGUiLCJfUmVhY3QkdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiZGVmYXVsdCIsIndpZHRoIiwic2V0V2lkdGgiLCJfUmVhY3QkdXNlUmVmIiwidXNlUmVmIiwiQW5pbWF0ZWQiLCJWYWx1ZSIsImFuaW1hdGlvbiIsImN1cnJlbnQiLCJpbnRlcm1lZGlhdGUiLCJzdGFydEFuaW1hdGlvbiIsInVzZUNhbGxiYWNrIiwidGltaW5nIiwiZHVyYXRpb24iLCJ0b1ZhbHVlIiwidXNlTmF0aXZlRHJpdmVyIiwiaXNJbnRlcmFjdGlvbiIsInNldFZhbHVlIiwibG9vcCIsInN0YXJ0IiwiUGxhdGZvcm0iLCJPUyIsInRpbnRDb2xvciIsImNvbG9ycyIsIkNvbG9yIiwicmdiIiwic3RyaW5nIiwic2Vjb25kYXJ5IiwidHJhY2tUaW50Q29sb3IiLCJhbHBoYSIsInVzZUVmZmVjdCIsImNyZWF0ZUVsZW1lbnQiLCJWaWV3IiwiX2V4dGVuZHMyIiwiYWNjZXNzaWJsZSIsImFjY2Vzc2liaWxpdHlSb2xlIiwiYWNjZXNzaWJpbGl0eVZhbHVlIiwibm93IiwibWluIiwibWF4Iiwib25MYXlvdXQiLCJuYXRpdmVFdmVudCIsImxheW91dCIsImhlaWdodCIsIm92ZXJmbG93IiwiYmFja2dyb3VuZENvbG9yIiwidHJhbnNmb3JtIiwidHJhbnNsYXRlWCIsImludGVycG9sYXRlIiwiaW5wdXRSYW5nZSIsIm91dHB1dFJhbmdlIiwic2NhbGVYIiwiZmxleCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkxpbmVhclByb2dyZXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBBbmltYXRlZCwgUGxhdGZvcm0sIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBDb2xvciBmcm9tICdjb2xvcic7XG5jb25zdCBMaW5lYXJQcm9ncmVzcyA9IChfYSkgPT4ge1xuICAgIHZhciBfYiwgX2M7XG4gICAgdmFyIHsgdmFsdWUgPSAwLCB2YXJpYW50ID0gJ2luZGV0ZXJtaW5hdGUnLCBjb2xvciA9ICdzZWNvbmRhcnknLCBzdHlsZSwgdGhlbWUsIHRyYWNrQ29sb3IgfSA9IF9hLCBwcm9wcyA9IF9fcmVzdChfYSwgW1widmFsdWVcIiwgXCJ2YXJpYW50XCIsIFwiY29sb3JcIiwgXCJzdHlsZVwiLCBcInRoZW1lXCIsIFwidHJhY2tDb2xvclwiXSk7XG4gICAgY29uc3QgW3dpZHRoLCBzZXRXaWR0aF0gPSBSZWFjdC51c2VTdGF0ZSgwKTtcbiAgICBjb25zdCB7IGN1cnJlbnQ6IGFuaW1hdGlvbiB9ID0gUmVhY3QudXNlUmVmKG5ldyBBbmltYXRlZC5WYWx1ZSgwKSk7XG4gICAgY29uc3QgaW50ZXJtZWRpYXRlID0gUmVhY3QudXNlUmVmKCk7XG4gICAgY29uc3Qgc3RhcnRBbmltYXRpb24gPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmICh2YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScpIHtcbiAgICAgICAgICAgIGludGVybWVkaWF0ZS5jdXJyZW50ID0gQW5pbWF0ZWQudGltaW5nKGFuaW1hdGlvbiwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAwLFxuICAgICAgICAgICAgICAgIHRvVmFsdWU6IDEsXG4gICAgICAgICAgICAgICAgdXNlTmF0aXZlRHJpdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIGlzSW50ZXJhY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhbmltYXRpb24uc2V0VmFsdWUoMCk7XG4gICAgICAgICAgICBBbmltYXRlZC5sb29wKGludGVybWVkaWF0ZS5jdXJyZW50KS5zdGFydCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgQW5pbWF0ZWQudGltaW5nKGFuaW1hdGlvbiwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAwLFxuICAgICAgICAgICAgICAgIHRvVmFsdWU6IHZhbHVlIHx8IDAsXG4gICAgICAgICAgICAgICAgdXNlTmF0aXZlRHJpdmVyOiBQbGF0Zm9ybS5PUyAhPT0gJ3dlYicsXG4gICAgICAgICAgICAgICAgaXNJbnRlcmFjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICB9KS5zdGFydCgpO1xuICAgICAgICB9XG4gICAgfSwgW2FuaW1hdGlvbiwgdmFyaWFudCwgdmFsdWVdKTtcbiAgICBjb25zdCB0aW50Q29sb3IgPSBjb2xvciA9PT0gJ3NlY29uZGFyeScgfHwgY29sb3IgPT09ICdwcmltYXJ5J1xuICAgICAgICA/IChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYltjb2xvcl0gOiBDb2xvcihjb2xvcikucmdiKCkuc3RyaW5nKCkgfHwgKChfYyA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5zZWNvbmRhcnkpO1xuICAgIGNvbnN0IHRyYWNrVGludENvbG9yID0gdHJhY2tDb2xvciB8fCBDb2xvcih0aW50Q29sb3IpLmFscGhhKDAuNCkucmdiKCkuc3RyaW5nKCk7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc3RhcnRBbmltYXRpb24oKTtcbiAgICB9LCBbc3RhcnRBbmltYXRpb24sIHZhbHVlXSk7XG4gICAgcmV0dXJuICg8VmlldyBhY2Nlc3NpYmxlIGFjY2Vzc2liaWxpdHlSb2xlPVwicHJvZ3Jlc3NiYXJcIiBhY2Nlc3NpYmlsaXR5VmFsdWU9e3tcbiAgICAgICAgbm93OiB2YWx1ZSxcbiAgICAgICAgbWluOiAwLFxuICAgICAgICBtYXg6IDEsXG4gICAgfX0gey4uLnByb3BzfSBvbkxheW91dD17KGUpID0+IHtcbiAgICAgICAgc2V0V2lkdGgoZS5uYXRpdmVFdmVudC5sYXlvdXQud2lkdGgpO1xuICAgIH19IHN0eWxlPXtbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGhlaWdodDogNCxcbiAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRyYWNrVGludENvbG9yLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZSxcbiAgICBdfT5cbiAgICAgIDxBbmltYXRlZC5WaWV3IHN0eWxlPXt7XG4gICAgICAgIHRyYW5zZm9ybTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVg6IGFuaW1hdGlvbi5pbnRlcnBvbGF0ZSh2YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZSdcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRSYW5nZTogWy13aWR0aCwgMC41ICogd2lkdGhdLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRSYW5nZTogWzAsIDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0UmFuZ2U6IFstMC41ICogd2lkdGgsIDBdLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2NhbGVYOiBhbmltYXRpb24uaW50ZXJwb2xhdGUodmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnXG4gICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRSYW5nZTogWzAsIDAuNSwgMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRSYW5nZTogWzAuMDAwMSwgMSwgMC4wMDFdLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRSYW5nZTogWzAsIDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0UmFuZ2U6IFswLjAwMDEsIDFdLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGludENvbG9yLFxuICAgICAgICBmbGV4OiAxLFxuICAgIH19Lz5cbiAgICA8L1ZpZXc+KTtcbn07XG5leHBvcnQgZGVmYXVsdCBMaW5lYXJQcm9ncmVzcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBV0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBYkEsSUFBSUcsTUFBTSxHQUFJLFVBQVEsU0FBS0EsTUFBTSxJQUFLLFVBQVVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ2xELElBQUlDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDVixLQUFLLElBQUlDLENBQUMsSUFBSUgsQ0FBQyxFQUFFLElBQUlJLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1AsQ0FBQyxFQUFFRyxDQUFDLENBQUMsSUFBSUYsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDL0VELENBQUMsQ0FBQ0MsQ0FBQyxDQUFDLEdBQUdILENBQUMsQ0FBQ0csQ0FBQyxDQUFDO0VBQ2YsSUFBSUgsQ0FBQyxJQUFJLElBQUksSUFBSSxPQUFPSSxNQUFNLENBQUNLLHFCQUFxQixLQUFLLFVBQVUsRUFDL0QsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFUCxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0sscUJBQXFCLENBQUNULENBQUMsQ0FB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