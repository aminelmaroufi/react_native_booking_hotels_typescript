b54645d096a5fea5f13a86d0c5e33e47
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Header = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _config = require("../config");
var _helpers = require("../helpers");
var _Text = _interopRequireDefault(require("../text/Text"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ALIGN_STYLE = {
  left: 'flex-start',
  right: 'flex-end',
  center: 'center'
};
var Children = function Children(_ref) {
  var style = _ref.style,
    placement = _ref.placement,
    children = _ref.children;
  return _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([{
      alignItems: ALIGN_STYLE[placement]
    }, style])
  }, children == null || children === false ? null : children.text ? (0, _helpers.renderNode)(_Text.default, children.text, (0, _extends2.default)({
    numberOfLines: 1
  }, children)) : children.icon ? (0, _helpers.renderNode)(_Icon.default, (0, _extends2.default)((0, _extends2.default)({}, children), {
    name: children.icon,
    containerStyle: _reactNative.StyleSheet.flatten([{
      alignItems: ALIGN_STYLE[placement]
    }, children.containerStyle])
  })) : (0, _helpers.renderNode)(_Text.default, children));
};
var Header = function Header(props) {
  var _a, _b;
  _react.default.useEffect(function () {
    var linearGradientProps = props.linearGradientProps,
      ViewComponent = props.ViewComponent;
    if (linearGradientProps && !ViewComponent) {
      console.error("You need to pass a ViewComponent to use linearGradientProps !\nExample: ViewComponent={require('react-native-linear-gradient')}");
    }
  });
  var statusBarProps = props.statusBarProps,
    leftComponent = props.leftComponent,
    centerComponent = props.centerComponent,
    rightComponent = props.rightComponent,
    leftContainerStyle = props.leftContainerStyle,
    centerContainerStyle = props.centerContainerStyle,
    rightContainerStyle = props.rightContainerStyle,
    backgroundColor = props.backgroundColor,
    backgroundImage = props.backgroundImage,
    backgroundImageStyle = props.backgroundImageStyle,
    containerStyle = props.containerStyle,
    _props$placement = props.placement,
    placement = _props$placement === void 0 ? 'center' : _props$placement,
    barStyle = props.barStyle,
    _props$children = props.children,
    children = _props$children === void 0 ? [] : _props$children,
    linearGradientProps = props.linearGradientProps,
    _props$ViewComponent = props.ViewComponent,
    ViewComponent = _props$ViewComponent === void 0 ? linearGradientProps || !backgroundImage ? _reactNative.View : _reactNative.ImageBackground : _props$ViewComponent,
    theme = props.theme,
    elevated = props.elevated,
    attributes = __rest(props, ["statusBarProps", "leftComponent", "centerComponent", "rightComponent", "leftContainerStyle", "centerContainerStyle", "rightContainerStyle", "backgroundColor", "backgroundImage", "backgroundImageStyle", "containerStyle", "placement", "barStyle", "children", "linearGradientProps", "ViewComponent", "theme", "elevated"]);
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.StatusBar, (0, _extends2.default)({
    barStyle: barStyle,
    translucent: true,
    backgroundColor: backgroundColor || ((_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.primary)
  }, statusBarProps)), _react.default.createElement(ViewComponent, (0, _extends2.default)({
    testID: "headerContainer"
  }, attributes, {
    style: _reactNative.StyleSheet.flatten([{
      borderBottomColor: '#f2f2f2',
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
      paddingHorizontal: 10,
      paddingVertical: 10,
      backgroundColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.primary,
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center'
    }, backgroundColor && {
      backgroundColor: backgroundColor
    }, elevated && styles.elevatedHeader, containerStyle]),
    source: backgroundImage,
    imageStyle: backgroundImageStyle
  }, linearGradientProps), _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaView, {
    edges: ['left', 'top', 'right'],
    style: styles.headerSafeView
  }, _react.default.createElement(Children, {
    style: _reactNative.StyleSheet.flatten([placement === 'center' && styles.rightLeftContainer, leftContainerStyle]),
    placement: "left"
  }, _react.default.isValidElement(children) && children || children[0] || leftComponent), _react.default.createElement(Children, {
    style: _reactNative.StyleSheet.flatten([styles.centerContainer, placement !== 'center' && {
      paddingHorizontal: _reactNative.Platform.select({
        android: 16,
        default: 15
      })
    }, centerContainerStyle]),
    placement: placement
  }, children[1] || centerComponent), _react.default.createElement(Children, {
    style: _reactNative.StyleSheet.flatten([placement === 'center' && styles.rightLeftContainer, rightContainerStyle]),
    placement: "right"
  }, children[2] || rightComponent))));
};
exports.Header = Header;
var styles = _reactNative.StyleSheet.create({
  headerSafeView: {
    width: '100%',
    flexDirection: 'row'
  },
  centerContainer: {
    flex: 3
  },
  rightLeftContainer: {
    flex: 1
  },
  elevatedHeader: {
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 6
    },
    shadowOpacity: 0.6,
    shadowRadius: 8.0,
    elevation: 24
  }
});
var _default = (0, _config.withTheme)(Header, 'Header');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,