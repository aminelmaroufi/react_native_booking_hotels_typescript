6d16871c9aaee60478d84f74712854c5
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _extractTransform = _interopRequireDefault(require("../lib/extract/extractTransform"));
var _extractProps = require("../lib/extract/extractProps");
var _extractText = _interopRequireDefault(require("../lib/extract/extractText"));
var _util = require("../lib/util");
var _Shape2 = _interopRequireDefault(require("./Shape"));
var _TSpan = _interopRequireDefault(require("./TSpan"));
var _NativeComponents = require("./NativeComponents");
var _jsxFileName = "/Users/wojciechlewicki/work/another/react-native-svg/src/elements/TextPath.tsx";
var _excluded = ["children", "xlinkHref", "href", "startOffset", "method", "spacing", "side", "alignmentBaseline", "midLine"];
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = (0, _getPrototypeOf2.default)(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return (0, _possibleConstructorReturn2.default)(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
var TextPath = function (_Shape) {
  (0, _inherits2.default)(TextPath, _Shape);
  var _super = _createSuper(TextPath);
  function TextPath() {
    var _this;
    (0, _classCallCheck2.default)(this, TextPath);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setNativeProps", function (props) {
      var matrix = !props.matrix && (0, _extractTransform.default)(props);
      if (matrix) {
        props.matrix = matrix;
      }
      (0, _extends3.default)(props, (0, _util.pickNotNil)((0, _extractText.default)(props, true)));
      _this.root && _this.root.setNativeProps(props);
    });
    return _this;
  }
  (0, _createClass2.default)(TextPath, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        children = _this$props.children,
        xlinkHref = _this$props.xlinkHref,
        _this$props$href = _this$props.href,
        href = _this$props$href === void 0 ? xlinkHref : _this$props$href,
        _this$props$startOffs = _this$props.startOffset,
        startOffset = _this$props$startOffs === void 0 ? 0 : _this$props$startOffs,
        method = _this$props.method,
        spacing = _this$props.spacing,
        side = _this$props.side,
        alignmentBaseline = _this$props.alignmentBaseline,
        midLine = _this$props.midLine,
        prop = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var matched = href && href.match(_util.idPattern);
      var match = matched && matched[1];
      if (match) {
        var props = (0, _extractProps.withoutXY)(this, prop);
        (0, _extends3.default)(props, (0, _extractText.default)({
          children: children
        }, true), {
          href: match,
          startOffset: startOffset,
          method: method,
          spacing: spacing,
          side: side,
          alignmentBaseline: alignmentBaseline,
          midLine: midLine
        });
        props.ref = this.refMethod;
        return _react.default.createElement(_NativeComponents.RNSVGTextPath, (0, _extends2.default)({}, props, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 82,
            columnNumber: 14
          }
        }));
      }
      console.warn('Invalid `href` prop for `TextPath` element, expected a href like "#id", but got: "' + href + '"');
      return _react.default.createElement(_TSpan.default, {
        ref: this.refMethod,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 91,
          columnNumber: 7
        }
      }, children);
    }
  }]);
  return TextPath;
}(_Shape2.default);
exports.default = TextPath;
(0, _defineProperty2.default)(TextPath, "displayName", 'TextPath');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,