03016f58a524eb536fb090bce518cc0d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Image = _interopRequireDefault(require("../image/Image"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Accessory = function Accessory(_a) {
  var _a$size = _a.size,
    size = _a$size === void 0 ? 10 : _a$size,
    style = _a.style,
    _a$underlayColor = _a.underlayColor,
    underlayColor = _a$underlayColor === void 0 ? '#000' : _a$underlayColor,
    onPress = _a.onPress,
    onLongPress = _a.onLongPress,
    source = _a.source,
    props = __rest(_a, ["size", "style", "underlayColor", "onPress", "onLongPress", "source"]);
  return _react.default.createElement(_reactNative.TouchableHighlight, {
    style: [styles.accessory, {
      width: size,
      height: size,
      borderRadius: size / 2
    }, style],
    underlayColor: underlayColor,
    onPress: onPress,
    onLongPress: onLongPress
  }, _react.default.createElement(_reactNative.View, null, source ? _react.default.createElement(_Image.default, (0, _extends2.default)({
    source: source,
    style: {
      width: size,
      height: size,
      borderRadius: size / 2
    }
  }, props)) : _react.default.createElement(_Icon.default, (0, _extends2.default)({
    name: "mode-edit",
    type: "material",
    color: "#fff",
    size: size * 0.8
  }, props))));
};
var styles = _reactNative.StyleSheet.create({
  accessory: (0, _extends2.default)({
    position: 'absolute',
    bottom: 0,
    right: 0,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#aaa'
  }, _reactNative.Platform.select({
    android: {
      elevation: 1
    },
    default: {
      shadowColor: '#000',
      shadowOffset: {
        width: 1,
        height: 1
      },
      shadowRadius: 2,
      shadowOpacity: 0.5
    }
  }))
});
var _default = (0, _config.withTheme)(Accessory, 'AvatarAccessory');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfSW1hZ2UiLCJfSWNvbiIsIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWNjZXNzb3J5IiwiX2EiLCJfYSRzaXplIiwic2l6ZSIsInN0eWxlIiwiX2EkdW5kZXJsYXlDb2xvciIsInVuZGVybGF5Q29sb3IiLCJvblByZXNzIiwib25Mb25nUHJlc3MiLCJzb3VyY2UiLCJwcm9wcyIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiVG91Y2hhYmxlSGlnaGxpZ2h0Iiwic3R5bGVzIiwiYWNjZXNzb3J5Iiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJWaWV3IiwiX2V4dGVuZHMyIiwibmFtZSIsInR5cGUiLCJjb2xvciIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJwb3NpdGlvbiIsImJvdHRvbSIsInJpZ2h0IiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwiYmFja2dyb3VuZENvbG9yIiwiUGxhdGZvcm0iLCJzZWxlY3QiLCJhbmRyb2lkIiwiZWxldmF0aW9uIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJzaGFkb3dSYWRpdXMiLCJzaGFkb3dPcGFjaXR5IiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQWNjZXNzb3J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUb3VjaGFibGVIaWdobGlnaHQsIFZpZXcsIFBsYXRmb3JtLCBTdHlsZVNoZWV0LCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IEltYWdlIGZyb20gJy4uL2ltYWdlL0ltYWdlJztcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb25zL0ljb24nO1xuY29uc3QgQWNjZXNzb3J5ID0gKF9hKSA9PiB7XG4gICAgdmFyIHsgc2l6ZSA9IDEwLCBzdHlsZSwgdW5kZXJsYXlDb2xvciA9ICcjMDAwJywgb25QcmVzcywgb25Mb25nUHJlc3MsIHNvdXJjZSB9ID0gX2EsIHByb3BzID0gX19yZXN0KF9hLCBbXCJzaXplXCIsIFwic3R5bGVcIiwgXCJ1bmRlcmxheUNvbG9yXCIsIFwib25QcmVzc1wiLCBcIm9uTG9uZ1ByZXNzXCIsIFwic291cmNlXCJdKTtcbiAgICByZXR1cm4gKDxUb3VjaGFibGVIaWdobGlnaHQgc3R5bGU9e1tcbiAgICAgICAgc3R5bGVzLmFjY2Vzc29yeSxcbiAgICAgICAge1xuICAgICAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IHNpemUgLyAyLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZSxcbiAgICBdfSB1bmRlcmxheUNvbG9yPXt1bmRlcmxheUNvbG9yfSBvblByZXNzPXtvblByZXNzfSBvbkxvbmdQcmVzcz17b25Mb25nUHJlc3N9PlxuICAgICAgPFZpZXc+XG4gICAgICAgIHtzb3VyY2UgPyAoPEltYWdlIHNvdXJjZT17c291cmNlfSBzdHlsZT17e1xuICAgICAgICB3aWR0aDogc2l6ZSxcbiAgICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgICBib3JkZXJSYWRpdXM6IHNpemUgLyAyLFxuICAgIH19IHsuLi5wcm9wc30vPikgOiAoPEljb24gbmFtZT1cIm1vZGUtZWRpdFwiIHR5cGU9XCJtYXRlcmlhbFwiIGNvbG9yPVwiI2ZmZlwiIHNpemU9e3NpemUgKiAwLjh9IHsuLi5wcm9wc30vPil9XG4gICAgICA8L1ZpZXc+XG4gICAgPC9Ub3VjaGFibGVIaWdobGlnaHQ+KTtcbn07XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgYWNjZXNzb3J5OiBPYmplY3QuYXNzaWduKHsgcG9zaXRpb246ICdhYnNvbHV0ZScsIGJvdHRvbTogMCwgcmlnaHQ6IDAsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsIGJhY2tncm91bmRDb2xvcjogJyNhYWEnIH0sIFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgIGFuZHJvaWQ6IHtcbiAgICAgICAgICAgIGVsZXZhdGlvbjogMSxcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgc2hhZG93Q29sb3I6ICcjMDAwJyxcbiAgICAgICAgICAgIHNoYWRvd09mZnNldDogeyB3aWR0aDogMSwgaGVpZ2h0OiAxIH0sXG4gICAgICAgICAgICBzaGFkb3dSYWRpdXM6IDIsXG4gICAgICAgICAgICBzaGFkb3dPcGFjaXR5OiAwLjUsXG4gICAgICAgIH0sXG4gICAgfSkpLFxufSk7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQWNjZXNzb3J5LCAnQXZhdGFyQWNjZXNzb3J5Jyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBV0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksS0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBZkEsSUFBSUssTUFBTSxHQUFJLFVBQVEsU0FBS0EsTUFBTSxJQUFLLFVBQVVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ2xELElBQUlDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDVixLQUFLLElBQUlDLENBQUMsSUFBSUgsQ0FBQyxFQUFFLElBQUlJLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1AsQ0FBQyxFQUFFRyxDQUFDLENBQUMsSUFBSUYsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDL0VELENBQUMsQ0FBQ0MsQ0FBQyxDQUFDLEdBQUdILENBQUMsQ0FBQ0csQ0FBQyxDQUFDO0VBQ2YsSUFBSUgsQ0FBQyxJQUFJLElBQUksSUFBSSxPQUFPSSxNQUFNLENBQUNLLHFCQUFxQixLQUFLLFVBQVUsRUFDL0QsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFUCxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0sscUJBQXFCLENBQUNULENBQUMsQ0FBQyxFQUFFVSxDQUFDLEdBQUdQLENBQUMsQ0FBQ1EsTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRTtJQUNwRSxJQUFJVCxDQUFDLENBQUNPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDTyxDQUFDLENB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