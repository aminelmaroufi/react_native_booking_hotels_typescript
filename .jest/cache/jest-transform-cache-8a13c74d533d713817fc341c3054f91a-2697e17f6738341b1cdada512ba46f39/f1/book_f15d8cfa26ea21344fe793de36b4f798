ab9b8a489bd95607a903f36230d13682
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _actionTypes = _interopRequireDefault(require("../../utils/actionTypes"));
var _effects = require("redux-saga/effects");
var _api = require("../../api");
var RootNavigation = _interopRequireWildcard(require("../../navigation/rootNavigation"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var _marked = _regenerator.default.mark(get_hotels),
  _marked2 = _regenerator.default.mark(get_more_hotels),
  _marked3 = _regenerator.default.mark(add_card),
  _marked4 = _regenerator.default.mark(create_booking),
  _marked5 = _regenerator.default.mark(get_bookings),
  _marked6 = _regenerator.default.mark(watchBookRequests);
function get_hotels(action) {
  var response, data;
  return _regenerator.default.wrap(function get_hotels$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        _context.prev = 0;
        _context.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        _context.next = 5;
        return (0, _effects.call)(_api.getHotels, action.params);
      case 5:
        response = _context.sent;
        if (response) {
          _context.next = 11;
          break;
        }
        _context.next = 9;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        });
      case 9:
        _context.next = 19;
        break;
      case 11:
        data = response.data;
        if (!data.ok) {
          _context.next = 17;
          break;
        }
        _context.next = 15;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        }), (0, _effects.put)({
          type: _actionTypes.default.SET_HOTELS,
          payload: {
            hotels: data.result.hotels,
            total: data.result.total,
            pages: data.result.pages,
            page: data.result.page,
            limit: data.result.limit
          }
        })]);
      case 15:
        _context.next = 19;
        break;
      case 17:
        _context.next = 19;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 19:
        _context.next = 25;
        break;
      case 21:
        _context.prev = 21;
        _context.t0 = _context["catch"](0);
        _context.next = 25;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context.t0 === 'string' ? _context.t0 : _context.t0.message
          }
        });
      case 25:
      case "end":
        return _context.stop();
    }
  }, _marked, null, [[0, 21]]);
}
function get_more_hotels(action) {
  var response, data;
  return _regenerator.default.wrap(function get_more_hotels$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        _context2.prev = 0;
        _context2.next = 3;
        return (0, _effects.call)(_api.getHotels, action.params);
      case 3:
        response = _context2.sent;
        data = response.data;
        if (!data.ok) {
          _context2.next = 10;
          break;
        }
        _context2.next = 8;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        }), (0, _effects.put)({
          type: _actionTypes.default.SET_HOTELS,
          payload: {
            hotels: data.result.hotels,
            total: data.result.total,
            pages: data.result.pages,
            page: data.result.page,
            limit: data.result.limit
          }
        })]);
      case 8:
        _context2.next = 12;
        break;
      case 10:
        _context2.next = 12;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 12:
        _context2.next = 18;
        break;
      case 14:
        _context2.prev = 14;
        _context2.t0 = _context2["catch"](0);
        _context2.next = 18;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context2.t0 === 'string' ? _context2.t0 : _context2.t0.message
          }
        });
      case 18:
      case "end":
        return _context2.stop();
    }
  }, _marked2, null, [[0, 14]]);
}
function add_card(action) {
  var response, data;
  return _regenerator.default.wrap(function add_card$(_context3) {
    while (1) switch (_context3.prev = _context3.next) {
      case 0:
        _context3.prev = 0;
        _context3.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        _context3.next = 5;
        return (0, _effects.call)(_api.addCard, action.card);
      case 5:
        response = _context3.sent;
        data = response.data;
        if (!data.ok) {
          _context3.next = 12;
          break;
        }
        _context3.next = 10;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.SUCCESS_OPERATION,
          payload: {
            message: data.result.message
          }
        }), (0, _effects.put)({
          type: _actionTypes.default.ADD_CARD_SUCCESS,
          payload: {
            card: data.result.card
          }
        })]);
      case 10:
        _context3.next = 14;
        break;
      case 12:
        _context3.next = 14;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 14:
        _context3.next = 20;
        break;
      case 16:
        _context3.prev = 16;
        _context3.t0 = _context3["catch"](0);
        _context3.next = 20;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context3.t0 === 'string' ? _context3.t0 : _context3.t0.message
          }
        });
      case 20:
      case "end":
        return _context3.stop();
    }
  }, _marked3, null, [[0, 16]]);
}
function create_booking(action) {
  var response, data;
  return _regenerator.default.wrap(function create_booking$(_context4) {
    while (1) switch (_context4.prev = _context4.next) {
      case 0:
        _context4.prev = 0;
        _context4.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        _context4.next = 5;
        return (0, _effects.call)(_api.createBooking, action.book);
      case 5:
        response = _context4.sent;
        data = response.data;
        if (!data.ok) {
          _context4.next = 14;
          break;
        }
        _context4.next = 10;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.SUCCESS_OPERATION,
          payload: {
            message: data.result.message
          }
        }), (0, _effects.put)({
          type: _actionTypes.default.CREATE_BOOKING_SUCCESS,
          payload: {
            book: data.result.booking
          }
        })]);
      case 10:
        action.navigation.popToTop();
        RootNavigation.navigate('Bookings', {});
        _context4.next = 16;
        break;
      case 14:
        _context4.next = 16;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 16:
        _context4.next = 22;
        break;
      case 18:
        _context4.prev = 18;
        _context4.t0 = _context4["catch"](0);
        _context4.next = 22;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context4.t0 === 'string' ? _context4.t0 : _context4.t0.message
          }
        });
      case 22:
      case "end":
        return _context4.stop();
    }
  }, _marked4, null, [[0, 18]]);
}
function get_bookings() {
  var response, data;
  return _regenerator.default.wrap(function get_bookings$(_context5) {
    while (1) switch (_context5.prev = _context5.next) {
      case 0:
        _context5.prev = 0;
        _context5.next = 3;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_REQUEST
        });
      case 3:
        _context5.next = 5;
        return (0, _effects.call)(_api.getBookings);
      case 5:
        response = _context5.sent;
        data = response.data;
        if (!data.ok) {
          _context5.next = 12;
          break;
        }
        _context5.next = 10;
        return (0, _effects.all)([(0, _effects.put)({
          type: _actionTypes.default.API_CALL_SUCCESS
        }), (0, _effects.put)({
          type: _actionTypes.default.SET_BOOKINGS,
          payload: {
            bookings: data.result.bookings
          }
        })]);
      case 10:
        _context5.next = 14;
        break;
      case 12:
        _context5.next = 14;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: data.result.message
          }
        });
      case 14:
        _context5.next = 20;
        break;
      case 16:
        _context5.prev = 16;
        _context5.t0 = _context5["catch"](0);
        _context5.next = 20;
        return (0, _effects.put)({
          type: _actionTypes.default.API_CALL_FAILURE,
          payload: {
            message: typeof _context5.t0 === 'string' ? _context5.t0 : _context5.t0.message
          }
        });
      case 20:
      case "end":
        return _context5.stop();
    }
  }, _marked5, null, [[0, 16]]);
}
function watchBookRequests() {
  return _regenerator.default.wrap(function watchBookRequests$(_context6) {
    while (1) switch (_context6.prev = _context6.next) {
      case 0:
        _context6.next = 2;
        return (0, _effects.all)([(0, _effects.takeLatest)(_actionTypes.default.GET_HOTELS_REQUEST, get_hotels), (0, _effects.takeLatest)(_actionTypes.default.GET_MORE_HOTELS_REQUEST, get_more_hotels), (0, _effects.takeLatest)(_actionTypes.default.ADD_CARD_REQUEST, add_card), (0, _effects.takeLatest)(_actionTypes.default.CREATE_BOOKING_REQUEST, create_booking), (0, _effects.takeLatest)(_actionTypes.default.GET_BOOKINGS_REQUEST, get_bookings)]);
      case 2:
      case "end":
        return _context6.stop();
    }
  }, _marked6);
}
var _default = watchBookRequests;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,