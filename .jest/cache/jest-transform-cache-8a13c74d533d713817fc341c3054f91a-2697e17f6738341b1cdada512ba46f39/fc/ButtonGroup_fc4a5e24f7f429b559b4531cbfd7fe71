edacab54aa806310b63928a6e7b2afab
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ButtonGroup = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var _Text = _interopRequireDefault(require("../text/Text"));
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ButtonGroup = function ButtonGroup(props) {
  var _a;
  var theme = props.theme,
    rest = __rest(props, ["theme"]);
  var _rest$Component = rest.Component,
    Component = _rest$Component === void 0 ? _reactNative.Platform.select({
      android: _reactNative.TouchableNativeFeedback,
      default: _reactNative.TouchableOpacity
    }) : _rest$Component,
    buttons = rest.buttons,
    _rest$onPress = rest.onPress,
    _onPress = _rest$onPress === void 0 ? function () {
      return null;
    } : _rest$onPress,
    _rest$selectedIndex = rest.selectedIndex,
    selectedIndex = _rest$selectedIndex === void 0 ? null : _rest$selectedIndex,
    _rest$selectedIndexes = rest.selectedIndexes,
    selectedIndexes = _rest$selectedIndexes === void 0 ? [] : _rest$selectedIndexes,
    _rest$selectMultiple = rest.selectMultiple,
    selectMultiple = _rest$selectMultiple === void 0 ? false : _rest$selectMultiple,
    containerStyle = rest.containerStyle,
    innerBorderStyle = rest.innerBorderStyle,
    buttonStyle = rest.buttonStyle,
    buttonContainerStyle = rest.buttonContainerStyle,
    textStyle = rest.textStyle,
    selectedTextStyle = rest.selectedTextStyle,
    selectedButtonStyle = rest.selectedButtonStyle,
    _rest$underlayColor = rest.underlayColor,
    underlayColor = _rest$underlayColor === void 0 ? (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.primary : _rest$underlayColor,
    activeOpacity = rest.activeOpacity,
    onHideUnderlay = rest.onHideUnderlay,
    onShowUnderlay = rest.onShowUnderlay,
    setOpacityTo = rest.setOpacityTo,
    _rest$disabled = rest.disabled,
    disabled = _rest$disabled === void 0 ? false : _rest$disabled,
    disabledStyle = rest.disabledStyle,
    disabledTextStyle = rest.disabledTextStyle,
    disabledSelectedStyle = rest.disabledSelectedStyle,
    disabledSelectedTextStyle = rest.disabledSelectedTextStyle,
    _rest$vertical = rest.vertical,
    vertical = _rest$vertical === void 0 ? false : _rest$vertical,
    attributes = __rest(rest, ["Component", "buttons", "onPress", "selectedIndex", "selectedIndexes", "selectMultiple", "containerStyle", "innerBorderStyle", "buttonStyle", "buttonContainerStyle", "textStyle", "selectedTextStyle", "selectedButtonStyle", "underlayColor", "activeOpacity", "onHideUnderlay", "onShowUnderlay", "setOpacityTo", "disabled", "disabledStyle", "disabledTextStyle", "disabledSelectedStyle", "disabledSelectedTextStyle", "vertical"]);
  var innerBorderWidth = 1;
  if (innerBorderStyle && Object.prototype.hasOwnProperty.call(innerBorderStyle, 'width')) {
    innerBorderWidth = innerBorderStyle.width;
  }
  return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([styles.container, vertical && styles.verticalContainer, containerStyle && containerStyle])
  }), buttons === null || buttons === void 0 ? void 0 : buttons.map(function (button, i) {
    var _a, _b, _c, _d, _e, _f;
    var isSelected = selectedIndex === i || selectedIndexes.includes(i);
    var isDisabled = disabled === true || Array.isArray(disabled) && disabled.includes(i);
    return _react.default.createElement(_reactNative.View, {
      key: i,
      style: _reactNative.StyleSheet.flatten([styles.button, vertical && styles.verticalComponent, i !== buttons.length - 1 && (vertical ? {
        borderBottomWidth: innerBorderWidth,
        borderBottomColor: innerBorderStyle && innerBorderStyle.color || ((_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.grey4)
      } : {
        borderRightWidth: innerBorderWidth,
        borderRightColor: innerBorderStyle && innerBorderStyle.color || ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey4)
      }), buttonContainerStyle])
    }, _react.default.createElement(Component, {
      testID: "buttonGroupItem",
      activeOpacity: activeOpacity,
      setOpacityTo: setOpacityTo,
      onHideUnderlay: onHideUnderlay,
      onShowUnderlay: onShowUnderlay,
      underlayColor: underlayColor,
      disabled: isDisabled,
      onPress: function onPress() {
        if (selectMultiple) {
          if (selectedIndexes.includes(i)) {
            _onPress(selectedIndexes.filter(function (index) {
              return index !== i;
            }));
          } else {
            _onPress([].concat((0, _toConsumableArray2.default)(selectedIndexes), [i]));
          }
        } else {
          _onPress(i);
        }
      },
      style: styles.button
    }, _react.default.createElement(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.textContainer, buttonStyle && buttonStyle, isSelected && {
        backgroundColor: (_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.primary
      }, isSelected && selectedButtonStyle && selectedButtonStyle, isDisabled && styles.disabled, isDisabled && disabledStyle, isDisabled && isSelected && {
        backgroundColor: (_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.disabled
      }, isDisabled && isSelected && disabledSelectedStyle])
    }, button.element ? _react.default.createElement(button.element, null) : _react.default.createElement(_Text.default, {
      testID: "buttonGroupItemText",
      style: _reactNative.StyleSheet.flatten([(0, _extends2.default)({
        fontSize: (0, _helpers.normalizeText)(13),
        color: (_e = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _e === void 0 ? void 0 : _e.grey2
      }, _reactNative.Platform.select({
        android: {},
        default: {
          fontWeight: '500'
        }
      })), textStyle && textStyle, isSelected && {
        color: '#fff'
      }, isSelected && selectedTextStyle, isDisabled && {
        color: (0, _helpers.color)((_f = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _f === void 0 ? void 0 : _f.disabled).darken(0.3).toString()
      }, isDisabled && disabledTextStyle, isDisabled && isSelected && disabledSelectedTextStyle])
    }, button))));
  }));
};
exports.ButtonGroup = ButtonGroup;
var styles = _reactNative.StyleSheet.create({
  button: {
    flex: 1
  },
  textContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  container: {
    marginHorizontal: 10,
    marginVertical: 5,
    borderColor: '#e3e3e3',
    borderWidth: 1,
    flexDirection: 'row',
    borderRadius: 3,
    overflow: 'hidden',
    backgroundColor: '#fff',
    height: 40
  },
  verticalContainer: {
    flexDirection: 'column',
    height: null
  },
  verticalComponent: {
    height: 40
  },
  disabled: {
    backgroundColor: 'transparent'
  }
});
var _default = (0, _config.withTheme)(ButtonGroup, 'ButtonGroup');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfaGVscGVycyIsIl9UZXh0IiwiX19yZXN0IiwicyIsImUiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJCdXR0b25Hcm91cCIsInByb3BzIiwiX2EiLCJ0aGVtZSIsInJlc3QiLCJfcmVzdCRDb21wb25lbnQiLCJDb21wb25lbnQiLCJQbGF0Zm9ybSIsInNlbGVjdCIsImFuZHJvaWQiLCJUb3VjaGFibGVOYXRpdmVGZWVkYmFjayIsImRlZmF1bHQiLCJUb3VjaGFibGVPcGFjaXR5IiwiYnV0dG9ucyIsIl9yZXN0JG9uUHJlc3MiLCJvblByZXNzIiwiX3Jlc3Qkc2VsZWN0ZWRJbmRleCIsInNlbGVjdGVkSW5kZXgiLCJfcmVzdCRzZWxlY3RlZEluZGV4ZXMiLCJzZWxlY3RlZEluZGV4ZXMiLCJfcmVzdCRzZWxlY3RNdWx0aXBsZSIsInNlbGVjdE11bHRpcGxlIiwiY29udGFpbmVyU3R5bGUiLCJpbm5lckJvcmRlclN0eWxlIiwiYnV0dG9uU3R5bGUiLCJidXR0b25Db250YWluZXJTdHlsZSIsInRleHRTdHlsZSIsInNlbGVjdGVkVGV4dFN0eWxlIiwic2VsZWN0ZWRCdXR0b25TdHlsZSIsIl9yZXN0JHVuZGVybGF5Q29sb3IiLCJ1bmRlcmxheUNvbG9yIiwiY29sb3JzIiwicHJpbWFyeSIsImFjdGl2ZU9wYWNpdHkiLCJvbkhpZGVVbmRlcmxheSIsIm9uU2hvd1VuZGVybGF5Iiwic2V0T3BhY2l0eVRvIiwiX3Jlc3QkZGlzYWJsZWQiLCJkaXNhYmxlZCIsImRpc2FibGVkU3R5bGUiLCJkaXNhYmxlZFRleHRTdHlsZSIsImRpc2FibGVkU2VsZWN0ZWRTdHlsZSIsImRpc2FibGVkU2VsZWN0ZWRUZXh0U3R5bGUiLCJfcmVzdCR2ZXJ0aWNhbCIsInZlcnRpY2FsIiwiYXR0cmlidXRlcyIsImlubmVyQm9yZGVyV2lkdGgiLCJ3aWR0aCIsImNyZWF0ZUVsZW1lbnQiLCJWaWV3IiwiX2V4dGVuZHMyIiwic3R5bGUiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlcyIsImNvbnRhaW5lciIsInZlcnRpY2FsQ29udGFpbmVyIiwibWFwIiwiYnV0dG9uIiwiX2IiLCJfYyIsIl9kIiwiX2UiLCJfZiIsImlzU2VsZWN0ZWQiLCJpbmNsdWRlcyIsImlzRGlzYWJsZWQiLCJBcnJheSIsImlzQXJyYXkiLCJrZXkiLCJ2ZXJ0aWNhbENvbXBvbmVudCIsImJvcmRlckJvdHRvbVdpZHRoIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJjb2xvciIsImdyZXk0IiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlclJpZ2h0Q29sb3IiLCJ0ZXN0SUQiLCJmaWx0ZXIiLCJpbmRleCIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJ0ZXh0Q29udGFpbmVyIiwiYmFja2dyb3VuZENvbG9yIiwiZWxlbWVudCIsImZvbnRTaXplIiwibm9ybWFsaXplVGV4dCIsImdyZXkyIiwiZm9udFdlaWdodCIsImRhcmtlbiIsInRvU3RyaW5nIiwiZXhwb3J0cyIsImNyZWF0ZSIsImZsZXgiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJtYXJnaW5Ib3Jpem9udGFsIiwibWFyZ2luVmVydGljYWwiLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwiZmxleERpcmVjdGlvbiIsImJvcmRlclJhZGl1cyIsIm92ZXJmbG93IiwiaGVpZ2h0IiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyJCdXR0b25Hcm91cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVmlldywgVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2ssIFRvdWNoYWJsZU9wYWNpdHksIFBsYXRmb3JtLCBTdHlsZVNoZWV0LCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgbm9ybWFsaXplVGV4dCwgY29sb3IgfSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCBUZXh0IGZyb20gJy4uL3RleHQvVGV4dCc7XG5jb25zdCBCdXR0b25Hcm91cCA9IChwcm9wcykgPT4ge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCB7IHRoZW1lIH0gPSBwcm9wcywgcmVzdCA9IF9fcmVzdChwcm9wcywgW1widGhlbWVcIl0pO1xuICAgIGNvbnN0IHsgQ29tcG9uZW50ID0gUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgYW5kcm9pZDogVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2ssXG4gICAgICAgIGRlZmF1bHQ6IFRvdWNoYWJsZU9wYWNpdHksXG4gICAgfSksIGJ1dHRvbnMsIG9uUHJlc3MgPSAoKSA9PiBudWxsLCBzZWxlY3RlZEluZGV4ID0gbnVsbCwgc2VsZWN0ZWRJbmRleGVzID0gW10sIHNlbGVjdE11bHRpcGxlID0gZmFsc2UsIGNvbnRhaW5lclN0eWxlLCBpbm5lckJvcmRlclN0eWxlLCBidXR0b25TdHlsZSwgYnV0dG9uQ29udGFpbmVyU3R5bGUsIHRleHRTdHlsZSwgc2VsZWN0ZWRUZXh0U3R5bGUsIHNlbGVjdGVkQnV0dG9uU3R5bGUsIHVuZGVybGF5Q29sb3IgPSAoX2EgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJpbWFyeSwgYWN0aXZlT3BhY2l0eSwgb25IaWRlVW5kZXJsYXksIG9uU2hvd1VuZGVybGF5LCBzZXRPcGFjaXR5VG8sIGRpc2FibGVkID0gZmFsc2UsIGRpc2FibGVkU3R5bGUsIGRpc2FibGVkVGV4dFN0eWxlLCBkaXNhYmxlZFNlbGVjdGVkU3R5bGUsIGRpc2FibGVkU2VsZWN0ZWRUZXh0U3R5bGUsIHZlcnRpY2FsID0gZmFsc2UgfSA9IHJlc3QsIGF0dHJpYnV0ZXMgPSBfX3Jlc3QocmVzdCwgW1wiQ29tcG9uZW50XCIsIFwiYnV0dG9uc1wiLCBcIm9uUHJlc3NcIiwgXCJzZWxlY3RlZEluZGV4XCIsIFwic2VsZWN0ZWRJbmRleGVzXCIsIFwic2VsZWN0TXVsdGlwbGVcIiwgXCJjb250YWluZXJTdHlsZVwiLCBcImlubmVyQm9yZGVyU3R5bGVcIiwgXCJidXR0b25TdHlsZVwiLCBcImJ1dHRvbkNvbnRhaW5lclN0eWxlXCIsIFwidGV4dFN0eWxlXCIsIFwic2VsZWN0ZWRUZXh0U3R5bGVcIiwgXCJzZWxlY3RlZEJ1dHRvblN0eWxlXCIsIFwidW5kZXJsYXlDb2xvclwiLCBcImFjdGl2ZU9wYWNpdHlcIiwgXCJvbkhpZGVVbmRlcmxheVwiLCBcIm9uU2hvd1VuZGVybGF5XCIsIFwic2V0T3BhY2l0eVRvXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFN0eWxlXCIsIFwiZGlzYWJsZWRUZXh0U3R5bGVcIiwgXCJkaXNhYmxlZFNlbGVjdGVkU3R5bGVcIiwgXCJkaXNhYmxlZFNlbGVjdGVkVGV4dFN0eWxlXCIsIFwidmVydGljYWxcIl0pO1xuICAgIGxldCBpbm5lckJvcmRlcldpZHRoID0gMTtcbiAgICBpZiAoaW5uZXJCb3JkZXJTdHlsZSAmJlxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW5uZXJCb3JkZXJTdHlsZSwgJ3dpZHRoJykpIHtcbiAgICAgICAgaW5uZXJCb3JkZXJXaWR0aCA9IGlubmVyQm9yZGVyU3R5bGUud2lkdGg7XG4gICAgfVxuICAgIHJldHVybiAoPFZpZXcgey4uLmF0dHJpYnV0ZXN9IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICBzdHlsZXMuY29udGFpbmVyLFxuICAgICAgICB2ZXJ0aWNhbCAmJiBzdHlsZXMudmVydGljYWxDb250YWluZXIsXG4gICAgICAgIGNvbnRhaW5lclN0eWxlICYmIGNvbnRhaW5lclN0eWxlLFxuICAgIF0pfT5cbiAgICAgIHtidXR0b25zID09PSBudWxsIHx8IGJ1dHRvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJ1dHRvbnMubWFwKChidXR0b24sIGkpID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSBzZWxlY3RlZEluZGV4ID09PSBpIHx8IHNlbGVjdGVkSW5kZXhlcy5pbmNsdWRlcyhpKTtcbiAgICAgICAgY29uc3QgaXNEaXNhYmxlZCA9IGRpc2FibGVkID09PSB0cnVlIHx8XG4gICAgICAgICAgICAoQXJyYXkuaXNBcnJheShkaXNhYmxlZCkgJiYgZGlzYWJsZWQuaW5jbHVkZXMoaSkpO1xuICAgICAgICByZXR1cm4gKDxWaWV3IGtleT17aX0gc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgICBzdHlsZXMuYnV0dG9uLFxuICAgICAgICAgICAgdmVydGljYWwgJiYgc3R5bGVzLnZlcnRpY2FsQ29tcG9uZW50LFxuICAgICAgICAgICAgaSAhPT0gYnV0dG9ucy5sZW5ndGggLSAxICYmXG4gICAgICAgICAgICAgICAgKHZlcnRpY2FsXG4gICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tV2lkdGg6IGlubmVyQm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogKGlubmVyQm9yZGVyU3R5bGUgJiYgaW5uZXJCb3JkZXJTdHlsZS5jb2xvcikgfHwgKChfYSA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ncmV5NCksXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSaWdodFdpZHRoOiBpbm5lckJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmlnaHRDb2xvcjogKGlubmVyQm9yZGVyU3R5bGUgJiYgaW5uZXJCb3JkZXJTdHlsZS5jb2xvcikgfHwgKChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5ncmV5NCksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYnV0dG9uQ29udGFpbmVyU3R5bGUsXG4gICAgICAgIF0pfT5cbiAgICAgICAgICAgIDxDb21wb25lbnQgdGVzdElEPVwiYnV0dG9uR3JvdXBJdGVtXCIgYWN0aXZlT3BhY2l0eT17YWN0aXZlT3BhY2l0eX0gc2V0T3BhY2l0eVRvPXtzZXRPcGFjaXR5VG99IG9uSGlkZVVuZGVybGF5PXtvbkhpZGVVbmRlcmxheX0gb25TaG93VW5kZXJsYXk9e29uU2hvd1VuZGVybGF5fSB1bmRlcmxheUNvbG9yPXt1bmRlcmxheUNvbG9yfSBkaXNhYmxlZD17aXNEaXNhYmxlZH0gb25QcmVzcz17KCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNlbGVjdE11bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXhlcy5pbmNsdWRlcyhpKSkge1xuICAgICAgICAgICAgICAgICAgICBvblByZXNzKHNlbGVjdGVkSW5kZXhlcy5maWx0ZXIoKGluZGV4KSA9PiBpbmRleCAhPT0gaSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb25QcmVzcyhbLi4uc2VsZWN0ZWRJbmRleGVzLCBpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb25QcmVzcyhpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfX0gc3R5bGU9e3N0eWxlcy5idXR0b259PlxuICAgICAgICAgICAgICA8VmlldyBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgIHN0eWxlcy50ZXh0Q29udGFpbmVyLFxuICAgICAgICAgICAgYnV0dG9uU3R5bGUgJiYgYnV0dG9uU3R5bGUsXG4gICAgICAgICAgICBpc1NlbGVjdGVkICYmIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IChfYyA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5wcmltYXJ5LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQgJiYgc2VsZWN0ZWRCdXR0b25TdHlsZSAmJiBzZWxlY3RlZEJ1dHRvblN0eWxlLFxuICAgICAgICAgICAgaXNEaXNhYmxlZCAmJiBzdHlsZXMuZGlzYWJsZWQsXG4gICAgICAgICAgICBpc0Rpc2FibGVkICYmIGRpc2FibGVkU3R5bGUsXG4gICAgICAgICAgICBpc0Rpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgaXNTZWxlY3RlZCAmJiB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoX2QgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuZGlzYWJsZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNEaXNhYmxlZCAmJiBpc1NlbGVjdGVkICYmIGRpc2FibGVkU2VsZWN0ZWRTdHlsZSxcbiAgICAgICAgXSl9PlxuICAgICAgICAgICAgICAgIHtidXR0b24uZWxlbWVudCA/ICg8YnV0dG9uLmVsZW1lbnQgLz4pIDogKDxUZXh0IHRlc3RJRD1cImJ1dHRvbkdyb3VwSXRlbVRleHRcIiBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oeyBmb250U2l6ZTogbm9ybWFsaXplVGV4dCgxMyksIGNvbG9yOiAoX2UgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuZ3JleTIgfSwgUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgICAgICAgICBhbmRyb2lkOiB7fSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc1MDAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICB0ZXh0U3R5bGUgJiYgdGV4dFN0eWxlLFxuICAgICAgICAgICAgaXNTZWxlY3RlZCAmJiB7IGNvbG9yOiAnI2ZmZicgfSxcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQgJiYgc2VsZWN0ZWRUZXh0U3R5bGUsXG4gICAgICAgICAgICBpc0Rpc2FibGVkICYmIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogY29sb3IoKF9mID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLmRpc2FibGVkKVxuICAgICAgICAgICAgICAgICAgICAuZGFya2VuKDAuMylcbiAgICAgICAgICAgICAgICAgICAgLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNEaXNhYmxlZCAmJiBkaXNhYmxlZFRleHRTdHlsZSxcbiAgICAgICAgICAgIGlzRGlzYWJsZWQgJiYgaXNTZWxlY3RlZCAmJiBkaXNhYmxlZFNlbGVjdGVkVGV4dFN0eWxlLFxuICAgICAgICBdKX0+XG4gICAgICAgICAgICAgICAgICAgIHtidXR0b259XG4gICAgICAgICAgICAgICAgICA8L1RleHQ+KX1cbiAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgPC9Db21wb25lbnQ+XG4gICAgICAgICAgPC9WaWV3Pik7XG4gICAgfSl9XG4gICAgPC9WaWV3Pik7XG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGJ1dHRvbjoge1xuICAgICAgICBmbGV4OiAxLFxuICAgIH0sXG4gICAgdGV4dENvbnRhaW5lcjoge1xuICAgICAgICBmbGV4OiAxLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIH0sXG4gICAgY29udGFpbmVyOiB7XG4gICAgICAgIG1hcmdpbkhvcml6b250YWw6IDEwLFxuICAgICAgICBtYXJnaW5WZXJ0aWNhbDogNSxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZTNlM2UzJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDMsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXG4gICAgICAgIGhlaWdodDogNDAsXG4gICAgfSxcbiAgICB2ZXJ0aWNhbENvbnRhaW5lcjoge1xuICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgaGVpZ2h0OiBudWxsLFxuICAgIH0sXG4gICAgdmVydGljYWxDb21wb25lbnQ6IHtcbiAgICAgICAgaGVpZ2h0OiA0MCxcbiAgICB9LFxuICAgIGRpc2FibGVkOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICB9LFxufSk7XG5leHBvcnQgeyBCdXR0b25Hcm91cCB9O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEJ1dHRvbkdyb3VwLCAnQnV0dG9uR3JvdXAnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBV0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsUUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksS0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBZkEsSUFBSUssTUFBTSxHQUFJLFVBQVEsU0FBS0EsTUFBTSxJQUFLLFVBQVVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ2xELElBQUlDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDVixLQUFLLElBQUlDLENBQUMsSUFBSUgs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