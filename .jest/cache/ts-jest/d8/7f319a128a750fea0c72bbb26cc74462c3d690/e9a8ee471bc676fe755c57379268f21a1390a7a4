[["/Users/Amine/Desktop/projects/BookingHotelsApp/src/screens/__tests__/login.test.tsx",{"fileContent":"import React from 'react';\n\nimport {cleanup, fireEvent, screen} from '@testing-library/react-native';\nimport configureStore from '../../redux/store';\nimport Login from '../Login';\nimport {loginRequest} from '../../redux/actions';\nimport Setup from '../Setup';\n\nlet store = configureStore();\n\nconst email = 'test@test.com';\nconst password = 'Azerty123@@';\n\ndescribe('Test Login Component', () => {\n  beforeEach(() => {\n    store.dispatch = jest.fn();\n    Setup(<Login />, store);\n  });\n\n  afterEach(cleanup);\n\n  it('should render all form element', () => {\n    expect(screen.getByTestId('logo')).toBeDefined();\n    expect(screen.getByTestId('email')).toBeDefined();\n    expect(screen.getByTestId('password')).toBeDefined();\n\n    const loginBtn = screen.getByTestId('login-btn');\n\n    expect(loginBtn).toBeDefined();\n  });\n\n  it('should enable login button after entereing valid email and password value', () => {\n    const emailInput = screen.getByTestId('email');\n    const passwordInput = screen.getByTestId('password');\n    const loginBtn = screen.getByTestId('login-btn');\n\n    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', true);\n\n    fireEvent.changeText(emailInput, email);\n    fireEvent.changeText(passwordInput, password);\n\n    expect(loginBtn.props.accessibilityState).toHaveProperty('disabled', false);\n    fireEvent.press(loginBtn);\n    expect(store.dispatch).toHaveBeenCalledTimes(1);\n    expect(store.dispatch).toHaveBeenCalledWith(loginRequest(email, password));\n  });\n});\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/store.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/screens/Login.tsx","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/screens/Setup.tsx","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/navigation.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/store.ts",{"fileContent":"import {createStore, applyMiddleware, compose} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './reducers';\nimport rootSaga from './sagas';\nimport {createLogger} from 'redux-logger';\n\ndeclare var window: any;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst loggerMiddleware = createLogger({predicate: () => __DEV__});\n\nconst configureStore = () => {\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n\n  const store = createStore(\n    rootReducer,\n    compose(\n      applyMiddleware(...middlewares),\n      window.devToolsExtension ? window.devToolsExtension() : (f: any) => f,\n    ),\n  );\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default configureStore;\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/hotel.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/book.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/index.ts",{"fileContent":"import {combineReducers} from 'redux';\nimport auth from './auth';\nimport hotel from './hotel';\nimport book from './book';\n\nconst rootReducer = combineReducers({\n  auth,\n  hotel,\n  book,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/hotel.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/user.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/card.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/auth.ts",{"fileContent":"import ActionTypes from '../../utils/actionTypes';\nimport {authActions, AuthState} from '../../types';\nimport {emptyUser} from '../../models/user';\n\nconst initialState: AuthState = {\n  fetching: false,\n  isLoggedIn: false,\n  message: '',\n  error: false,\n  user: emptyUser,\n  success: false,\n};\nexport default function reducer(state = initialState, action: authActions) {\n  switch (action.type) {\n    case ActionTypes.API_CALL_REQUEST:\n      return {\n        ...state,\n        fetching: true,\n        success: false,\n        error: false,\n        message: '',\n      };\n    case ActionTypes.API_CALL_SUCCESS:\n      return {\n        ...state,\n        fetching: false,\n        success: true,\n      };\n    case ActionTypes.API_CALL_FAILURE:\n      return {\n        ...state,\n        fetching: false,\n        error: true,\n        message: action.payload.message,\n      };\n    case ActionTypes.SUCCESS_OPERATION:\n      return {\n        ...state,\n        fetching: false,\n        success: true,\n        message: action.payload.message,\n      };\n    case ActionTypes.CHECK_USER_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user ? action.payload.user : emptyUser,\n        isLoggedIn: action.payload.user ? true : false,\n      };\n    case ActionTypes.CREATE_ACCOUNT_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n      };\n    case ActionTypes.LOGIN_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        isLoggedIn: true,\n      };\n    case ActionTypes.ADD_CARD_SUCCESS:\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          cards: [...state.user.cards, action.payload.card],\n        },\n      };\n    case ActionTypes.SET_DEFAULT_CARD:\n      let cards = state.user.cards.filter(c => c.id !== action.payload.card.id);\n      cards.unshift(action.payload.card);\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          cards: cards,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/user.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/hotel.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/card.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts",{"fileContent":"enum ActionTypes {\n  API_CALL_REQUEST = 'API_CALL_REQUEST',\n  API_CALL_FAILURE = 'API_CALL_FAILURE',\n  API_CALL_SUCCESS = 'API_CALL_SUCCESS',\n  SUCCESS_OPERATION = 'SUCCESS_OPERATION',\n  CHECK_USER_REQUEST = 'CHECK_USER_REQUEST',\n  CHECK_USER_SUCCESS = 'CHECK_USER_SUCCESS',\n  LOGIN_REQUEST = 'LOGIN_REQUEST',\n  LOGIN_SUCCESS = 'LOGIN_SUCCESS',\n  LOGOUT = 'LOGOUT',\n  LOGOUT_SUCCESS = 'LOGOUT_SUCCESS',\n  GET_HOTELS_REQUEST = 'GET_HOTELS_REQUEST',\n  GET_MORE_HOTELS_REQUEST = 'GET_MORE_HOTELS_REQUEST',\n  SET_HOTELS = 'SET_HOTELS',\n  SELECT_HOTEL = 'SELECT_HOTEL',\n  UPDATE_RESERVATION = 'UPDATE_RESERVATION',\n  UPDATE_USER = 'UPDATE_USER',\n  SAVE_ACCOUNT_REQUEST = 'SAVE_ACCOUNT_REQUEST',\n  CREATE_ACCOUNT_SUCCESS = 'CREATE_ACCOUNT_SUCCESS',\n  ADD_CARD_REQUEST = 'ADD_CARD_REQUEST',\n  ADD_CARD_SUCCESS = 'ADD_CARD_SUCCESS',\n  SET_DEFAULT_CARD = 'SET_DEFAULT_CARD',\n  CREATE_BOOKING_REQUEST = 'CREATE_BOOKING_REQUEST',\n  CREATE_BOOKING_SUCCESS = 'CREATE_BOOKING_SUCCESS',\n  GET_BOOKINGS_REQUEST = 'GET_BOOKINGS_REQUEST',\n  SET_BOOKINGS = 'SET_BOOKINGS',\n}\n\nexport enum messages {\n  ADD_CARD_SUCCESS = 'Credit card added successfully',\n}\n\nexport enum FormMessages {\n  firstname = 'First Name is required!',\n  lastname = 'Last Name is required!',\n  phone = 'Phone number is required!',\n  phoneNotValid = 'Phone number is not valid!',\n  email = 'Email adress is required!',\n  emailNotValid = 'Email adress is not valid!',\n  password = 'Password is required!',\n}\n\nexport enum LoginFormMessages {\n  email = 'Email adress is required!',\n  emailNotValid = 'Email adress is not valid!',\n  password = 'Password is required!',\n}\n\nexport enum CardFormMessages {\n  name = 'Card name is required!',\n  number = 'Card number is required',\n  number_not_valid = 'Card number value is not valid',\n  expire_date = 'Card expire date is required!',\n  expire_date_not_valid = 'Card expire date value not valid!',\n  cvc = 'Card secure number is required!',\n  cvcNotValid = 'Secure number value is not valid (max: 3 numbers)!',\n}\n\nexport default ActionTypes;\n","resolvedModuleNames":[]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/user.ts",{"fileContent":"import {ISecureCard, emptySecureCard} from './card';\n\nexport interface IUser {\n  _id: string;\n  firstname: string;\n  lastname: string;\n  fullname: string;\n  phone: string;\n  email: string;\n  password: string;\n  cards: Array<ISecureCard>;\n}\n\nexport const emptyUser: IUser = {\n  _id: '',\n  firstname: '',\n  lastname: '',\n  fullname: '',\n  phone: '',\n  email: '',\n  password: '',\n  cards: [emptySecureCard],\n};\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/card.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/card.ts",{"fileContent":"export interface ICard {\n  name: string;\n  number: string;\n  expire_date: string;\n  cvc: string;\n}\n\nexport interface ISecureCard {\n  id: string;\n  number: string;\n  brand: string;\n}\n\nexport const emptyCard: ICard = {\n  name: '',\n  number: '',\n  expire_date: '',\n  cvc: '',\n};\n\nexport const emptySecureCard: ISecureCard = {\n  id: '',\n  number: '',\n  brand: '',\n};\n","resolvedModuleNames":[]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/hotel.ts",{"fileContent":"import ActionTypes from '../../utils/actionTypes';\nimport {HotelState, hotelActions} from '../../types';\n\nconst initialState: HotelState = {\n  hotels: [],\n  total: 0,\n  pages: 1,\n  page: 1,\n  limit: 10,\n};\n\nexport default function reducer(state = initialState, action: hotelActions) {\n  switch (action.type) {\n    case ActionTypes.SET_HOTELS: {\n      let dataHotels = [];\n      if (action.payload.page === 1) {\n        dataHotels = action.payload.hotels;\n      } else {\n        dataHotels = [...state.hotels, ...action.payload.hotels];\n      }\n      return {\n        ...state,\n        hotels: dataHotels,\n        total: action.payload.total,\n        pages: action.payload.pages,\n        page: action.payload.page,\n        limit: action.payload.limit,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/hotel.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/book.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/book.ts",{"fileContent":"import ActionTypes from '../../utils/actionTypes';\nimport {IHotel, IRoom} from '../../models';\nimport {emptySecureCard} from '../../models/card';\nimport {BookState, bookActions} from '../../types';\n\nconst emptyHotel: IHotel = {\n  _id: '',\n  name: '',\n  short_address: '',\n  address: '',\n  rating: 0,\n  location: '',\n  type: '',\n  main_picture: '',\n  second_picture: '',\n  rooms: [],\n};\n\nconst emptyRoom: IRoom = {\n  _id: '',\n  title: '',\n  advantage: '',\n  price: 0,\n  room_picture: '',\n};\n\nconst initialState: BookState = {\n  book: {\n    _id: '',\n    hotel: emptyHotel,\n    room: emptyRoom,\n    check_in_date: null,\n    check_out_date: null,\n    night_numbers: 0,\n    price: 0,\n    card: emptySecureCard,\n  },\n  bookings: [],\n};\n\nexport default function reducer(state = initialState, action: bookActions) {\n  switch (action.type) {\n    case ActionTypes.SELECT_HOTEL:\n      return {\n        ...state,\n        book: {...state.book, hotel: action.payload.hotel},\n      };\n    case ActionTypes.CHECK_USER_SUCCESS:\n      return {\n        ...state,\n        book: {...state.book, card: action.payload.user.cards[0]},\n      };\n    case ActionTypes.UPDATE_RESERVATION:\n      return {\n        ...state,\n        book: action.payload.book,\n      };\n    case ActionTypes.ADD_CARD_SUCCESS:\n      return {\n        ...state,\n        book: {...state.book, card: action.payload.card},\n      };\n    case ActionTypes.SET_DEFAULT_CARD:\n      return {\n        ...state,\n        book: {...state.book, card: action.payload.card},\n      };\n    case ActionTypes.CREATE_BOOKING_SUCCESS:\n      let bookings = state.bookings;\n      bookings.unshift(action.payload.book);\n      return {\n        ...state,\n        book: initialState.book,\n        bookings: bookings,\n      };\n    case ActionTypes.SET_BOOKINGS:\n      return {\n        ...state,\n        bookings: action.payload.bookings,\n      };\n    default:\n      return state;\n  }\n}\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/card.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/user.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/hotel.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/room.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/hotel.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/book.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/index.ts",{"fileContent":"import {fork, all} from 'redux-saga/effects';\nimport watchAuthRequests from './auth';\nimport watchBookRequests from './book';\n\nexport default function* rootSaga() {\n  yield all([fork(watchAuthRequests), fork(watchBookRequests)]);\n}\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/navigation/rootNavigation.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/auth.ts",{"fileContent":"// import ActionTypes from '../utils/actionTypes';\nimport {put, call, all, takeLatest} from 'redux-saga/effects';\nimport ActionTypes from '../../utils/actionTypes';\nimport {CommonActions} from '@react-navigation/native';\nimport {checkUser, saveAccount, login} from '../../api';\nimport {AxiosResponse} from 'axios';\nimport {navigateToScreen} from '../../redux/actions';\nimport * as RootNavigation from '../../navigation/rootNavigation';\n\nexport function* check_user_request() {\n  try {\n    yield put({type: ActionTypes.API_CALL_REQUEST});\n    let response: AxiosResponse = yield call(checkUser);\n    const data = response.data;\n    if (data.ok) {\n      if (data.result.user) {\n        yield all([\n          put({\n            type: ActionTypes.API_CALL_SUCCESS,\n          }),\n          put({\n            type: ActionTypes.CHECK_USER_SUCCESS,\n            payload: {\n              user: data.result.user,\n            },\n          }),\n        ]);\n      } else {\n        yield put({\n          type: ActionTypes.API_CALL_SUCCESS,\n        });\n      }\n    } else {\n      yield put({\n        type: ActionTypes.API_CALL_FAILURE,\n        payload: {\n          message: data.result.message,\n        },\n      });\n    }\n  } catch (err: any) {\n    yield put({\n      type: ActionTypes.API_CALL_FAILURE,\n      payload: {\n        message: typeof err === 'string' ? err : err.message,\n      },\n    });\n  }\n}\n\nexport function* save_account(action: any) {\n  try {\n    yield put({type: ActionTypes.API_CALL_REQUEST});\n    let user = action.account;\n    delete user._id;\n    let response: AxiosResponse = yield call(saveAccount, action.account);\n    const data = response.data;\n\n    if (data.ok) {\n      yield all([\n        put({\n          type: ActionTypes.SUCCESS_OPERATION,\n          payload: {\n            message: data.result.message,\n          },\n        }),\n        put({\n          type: ActionTypes.CREATE_ACCOUNT_SUCCESS,\n          payload: {\n            user: data.result.user,\n          },\n        }),\n        put(CommonActions.goBack()),\n        put(CommonActions.navigate({name: 'Login'})),\n      ]);\n      // action.navigation.pop();\n      // RootNavigation.navigate('Login', {});\n    } else {\n      yield put({\n        type: ActionTypes.API_CALL_FAILURE,\n        payload: {\n          message: data.result.message,\n        },\n      });\n    }\n  } catch (err: any) {\n    yield put({\n      type: ActionTypes.API_CALL_FAILURE,\n      payload: {\n        message: typeof err === 'string' ? err : err.message,\n      },\n    });\n  }\n}\n\nexport function* login_request(action: any) {\n  try {\n    yield put({type: ActionTypes.API_CALL_REQUEST});\n    let response: AxiosResponse = yield call(\n      login,\n      action.email,\n      action.password,\n    );\n    const data = response.data;\n\n    if (data.ok) {\n      yield all([\n        put({\n          type: ActionTypes.API_CALL_SUCCESS,\n        }),\n        put({\n          type: ActionTypes.LOGIN_SUCCESS,\n          payload: {\n            user: data.result.user,\n          },\n        }),\n        put(navigateToScreen('Overview', {})),\n      ]);\n      // action.navigation.pop(2);\n      RootNavigation.navigate('Overview', {});\n    } else {\n      yield put({\n        type: ActionTypes.API_CALL_FAILURE,\n        payload: {\n          message: data.result.message,\n        },\n      });\n    }\n  } catch (err: any) {\n    yield put({\n      type: ActionTypes.API_CALL_FAILURE,\n      payload: {\n        message: typeof err === 'string' ? err : err.message,\n      },\n    });\n  }\n}\n\nexport default function* watchAuthRequest() {\n  yield all([\n    takeLatest(ActionTypes.SAVE_ACCOUNT_REQUEST, save_account),\n    takeLatest(ActionTypes.LOGIN_REQUEST, login_request),\n    takeLatest(ActionTypes.CHECK_USER_REQUEST, check_user_request),\n  ]);\n}\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/navigation/rootNavigation.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/auth.tsx","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/navigation.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/index.ts",{"fileContent":"export {getHotels, addCard, createBooking, getBookings} from './book';\nexport {saveAccount, login, checkUser} from './auth';\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/auth.tsx","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/adapter.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/book.ts",{"fileContent":"import {IBook, ICard} from '../models';\nimport adapter from '../utils/adapter';\n\nexport const getHotels = (params: any) => {\n  const query = `q=${params.q}&page=${params.page}`;\n  return adapter.get(`/hotels?${query}`).catch(err => {\n    return Promise.reject(err.response ? err.response.data.result : err);\n  });\n};\n\nexport const addCard = (card: ICard) => {\n  return adapter.post('/customers/cards', card).catch(err => {\n    let error: any;\n    if (typeof err === 'string') {\n      error.message = err;\n    } else {\n      error = err.response.data.message\n        ? err.response.data\n        : err.response.data.result;\n    }\n    return Promise.reject(error);\n  });\n};\n\nexport const createBooking = (book: IBook) => {\n  return adapter.post('/customers/bookings', book).catch(err => {\n    let error: any;\n    if (typeof err === 'string') {\n      error.message = err;\n    } else {\n      error = err.response.data.message\n        ? err.response.data\n        : err.response.data.result;\n    }\n    return Promise.reject(error);\n  });\n};\n\nexport const getBookings = () => {\n  return adapter.get('/customers/bookings').catch(err => {\n    let error: any;\n    if (typeof err === 'string') {\n      error.message = err;\n    } else {\n      error = err.response.data.message\n        ? err.response.data\n        : err.response.data.result;\n    }\n    return Promise.reject(error);\n  });\n};\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/adapter.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/user.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/hotel.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/room.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/card.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/config/config.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/adapter.ts",{"fileContent":"import axios from 'axios';\nimport {baseURL} from '../config/config';\n\nconst adapter = axios.create({\n  baseURL,\n  withCredentials: true,\n  headers: {\n    Accept: 'application/json',\n  },\n});\n\nexport default adapter;\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/config/config.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/config/config.ts",{"fileContent":"// export const API_URL = 'http://localhost:3000/api/v1';\n// export const baseURL = 'http://localhost:8000/api/v1';\n\n//PROD\nexport const baseURL = 'https://bookingapi-app.onrender.com/api/v1';\n","resolvedModuleNames":[]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/auth.tsx",{"fileContent":"import adapter from '../utils/adapter';\nimport {IUser} from '../models';\n\nexport const checkUser = () => {\n  return adapter.get('/me').catch(err => {\n    let error: any;\n    if (typeof err === 'string') {\n      error.message = err;\n    } else {\n      error = err.response.data.message\n        ? err.response.data\n        : err.response.data.result;\n    }\n    return Promise.reject(error);\n  });\n};\n\nexport const saveAccount = (user: IUser) => {\n  user.cards = [];\n  return adapter.post('/auth/signup', user).catch(err => {\n    let error: any;\n    if (typeof err === 'string') {\n      error.message = err;\n    } else {\n      error = err.response.data.message\n        ? err.response.data\n        : err.response.data.result;\n    }\n    return Promise.reject(error);\n  });\n};\n\nexport const login = (email: string, password: string) => {\n  const payload = {\n    username: email,\n    password: password,\n  };\n  return adapter.post('/auth/signin?scope=customer', payload).catch(err => {\n    let error: any;\n    if (typeof err === 'string') {\n      error.message = err;\n    } else {\n      error = err.response.data.message\n        ? err.response.data\n        : err.response.data.result;\n    }\n    return Promise.reject(error);\n  });\n};\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/adapter.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/config/config.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/user.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/hotel.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/room.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/card.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/index.ts",{"fileContent":"export {\n  getHotels,\n  getMoreHotels,\n  selectHotel,\n  updateReservation,\n  addCard,\n  setDefaultCard,\n  createBooking,\n  getBookings,\n} from './book';\nexport {checkUser, updateUserFields, saveAccount, loginRequest} from './auth';\nexport {navigateToScreen} from './navigation';\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/navigation.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/user.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/book.ts",{"fileContent":"import ActionTypes from '../../utils/actionTypes';\nimport {IHotel, IBook, ICard, ISecureCard} from '../../models';\n\nexport const getHotels = (params: any) => ({\n  type: ActionTypes.GET_HOTELS_REQUEST,\n  params,\n});\n\nexport const getMoreHotels = (params: any) => ({\n  type: ActionTypes.GET_MORE_HOTELS_REQUEST,\n  params,\n});\n\nexport const selectHotel = (hotel: IHotel) => ({\n  type: ActionTypes.SELECT_HOTEL,\n  payload: {\n    hotel,\n  },\n});\n\nexport const updateReservation = (book: IBook) => ({\n  type: ActionTypes.UPDATE_RESERVATION,\n  payload: {\n    book,\n  },\n});\n\nexport const addCard = (card: ICard) => ({\n  type: ActionTypes.ADD_CARD_REQUEST,\n  card,\n});\n\nexport const setDefaultCard = (card: ISecureCard) => ({\n  type: ActionTypes.SET_DEFAULT_CARD,\n  payload: {\n    card,\n  },\n});\n\nexport const createBooking = (book: IBook, navigation: any) => ({\n  type: ActionTypes.CREATE_BOOKING_REQUEST,\n  book,\n  navigation,\n});\n\nexport const getBookings = () => ({\n  type: ActionTypes.GET_BOOKINGS_REQUEST,\n});\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/user.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/hotel.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/room.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/card.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/auth.ts",{"fileContent":"import actionTypes from '../../utils/actionTypes';\nimport {IUser} from '../../models/user';\n// import {AuthState} from '../types';\n\nexport const checkUser = () => ({\n  type: actionTypes.CHECK_USER_REQUEST,\n});\n\nexport const updateUserFields = (user: IUser) => ({\n  type: actionTypes.UPDATE_USER,\n  payload: {\n    user: user,\n  },\n});\n\nexport const saveAccount = (account: IUser) => ({\n  type: actionTypes.SAVE_ACCOUNT_REQUEST,\n  account,\n});\n\nexport const loginRequest = (email: string, password: string) => ({\n  type: actionTypes.LOGIN_REQUEST,\n  email,\n  password,\n});\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/user.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/card.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/navigation.ts",{"fileContent":"import {CommonActions} from '@react-navigation/native';\n\nexport const navigateToScreen = (screenName: string, params: any) => {\n  return CommonActions.navigate({\n    name: screenName,\n    params,\n  });\n};\n","resolvedModuleNames":[]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/navigation/rootNavigation.ts",{"fileContent":"import * as React from 'react';\n\nexport const navigationRef: React.Ref<any> = React.createRef();\n\nexport const navigate = (name: string, params: object) => {\n  navigationRef.current?.navigate(name, params);\n};\n\nexport const pop = (n: number) => {\n  navigationRef.current?.pop(n);\n};\n","resolvedModuleNames":[]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/book.ts",{"fileContent":"import ActionTypes from '../../utils/actionTypes';\nimport {put, call, all, takeLatest} from 'redux-saga/effects';\nimport {getHotels, addCard, createBooking, getBookings} from '../../api';\nimport {AxiosResponse} from 'axios';\nimport * as RootNavigation from '../../navigation/rootNavigation';\n\nfunction* get_hotels(action: any) {\n  try {\n    yield put({type: ActionTypes.API_CALL_REQUEST});\n    let response: AxiosResponse = yield call(getHotels, action.params);\n\n    if (!response) {\n      yield put({\n        type: ActionTypes.API_CALL_SUCCESS,\n      });\n    } else {\n      const data = response.data;\n\n      if (data.ok) {\n        yield all([\n          put({\n            type: ActionTypes.API_CALL_SUCCESS,\n          }),\n          put({\n            type: ActionTypes.SET_HOTELS,\n            payload: {\n              hotels: data.result.hotels,\n              total: data.result.total,\n              pages: data.result.pages,\n              page: data.result.page,\n              limit: data.result.limit,\n            },\n          }),\n        ]);\n      } else {\n        yield put({\n          type: ActionTypes.API_CALL_FAILURE,\n          payload: {\n            message: data.result.message,\n          },\n        });\n      }\n    }\n  } catch (err: any) {\n    yield put({\n      type: ActionTypes.API_CALL_FAILURE,\n      payload: {\n        message: typeof err === 'string' ? err : err.message,\n      },\n    });\n  }\n}\n\nfunction* get_more_hotels(action: any) {\n  try {\n    let response: AxiosResponse = yield call(getHotels, action.params);\n    const data = response.data;\n\n    if (data.ok) {\n      yield all([\n        put({\n          type: ActionTypes.API_CALL_SUCCESS,\n        }),\n        put({\n          type: ActionTypes.SET_HOTELS,\n          payload: {\n            hotels: data.result.hotels,\n            total: data.result.total,\n            pages: data.result.pages,\n            page: data.result.page,\n            limit: data.result.limit,\n          },\n        }),\n      ]);\n    } else {\n      yield put({\n        type: ActionTypes.API_CALL_FAILURE,\n        payload: {\n          message: data.result.message,\n        },\n      });\n    }\n  } catch (err: any) {\n    yield put({\n      type: ActionTypes.API_CALL_FAILURE,\n      payload: {\n        message: typeof err === 'string' ? err : err.message,\n      },\n    });\n  }\n}\n\nfunction* add_card(action: any) {\n  try {\n    yield put({type: ActionTypes.API_CALL_REQUEST});\n    let response: AxiosResponse = yield call(addCard, action.card);\n    const data = response.data;\n\n    if (data.ok) {\n      yield all([\n        put({\n          type: ActionTypes.SUCCESS_OPERATION,\n          payload: {\n            message: data.result.message,\n          },\n        }),\n        put({\n          type: ActionTypes.ADD_CARD_SUCCESS,\n          payload: {\n            card: data.result.card,\n          },\n        }),\n      ]);\n    } else {\n      yield put({\n        type: ActionTypes.API_CALL_FAILURE,\n        payload: {\n          message: data.result.message,\n        },\n      });\n    }\n  } catch (err: any) {\n    yield put({\n      type: ActionTypes.API_CALL_FAILURE,\n      payload: {\n        message: typeof err === 'string' ? err : err.message,\n      },\n    });\n  }\n}\n\nfunction* create_booking(action: any) {\n  try {\n    yield put({type: ActionTypes.API_CALL_REQUEST});\n    let response: AxiosResponse = yield call(createBooking, action.book);\n    const data = response.data;\n\n    if (data.ok) {\n      yield all([\n        put({\n          type: ActionTypes.SUCCESS_OPERATION,\n          payload: {\n            message: data.result.message,\n          },\n        }),\n        put({\n          type: ActionTypes.CREATE_BOOKING_SUCCESS,\n          payload: {\n            book: data.result.booking,\n          },\n        }),\n      ]);\n      action.navigation.popToTop();\n      RootNavigation.navigate('Bookings', {});\n    } else {\n      yield put({\n        type: ActionTypes.API_CALL_FAILURE,\n        payload: {\n          message: data.result.message,\n        },\n      });\n    }\n  } catch (err: any) {\n    yield put({\n      type: ActionTypes.API_CALL_FAILURE,\n      payload: {\n        message: typeof err === 'string' ? err : err.message,\n      },\n    });\n  }\n}\n\nfunction* get_bookings() {\n  try {\n    yield put({type: ActionTypes.API_CALL_REQUEST});\n    let response: AxiosResponse = yield call(getBookings);\n    const data = response.data;\n\n    if (data.ok) {\n      yield all([\n        put({\n          type: ActionTypes.API_CALL_SUCCESS,\n        }),\n        put({\n          type: ActionTypes.SET_BOOKINGS,\n          payload: {\n            bookings: data.result.bookings,\n          },\n        }),\n      ]);\n    } else {\n      yield put({\n        type: ActionTypes.API_CALL_FAILURE,\n        payload: {\n          message: data.result.message,\n        },\n      });\n    }\n  } catch (err: any) {\n    yield put({\n      type: ActionTypes.API_CALL_FAILURE,\n      payload: {\n        message: typeof err === 'string' ? err : err.message,\n      },\n    });\n  }\n}\n\nfunction* watchBookRequests() {\n  yield all([\n    takeLatest(ActionTypes.GET_HOTELS_REQUEST, get_hotels),\n    takeLatest(ActionTypes.GET_MORE_HOTELS_REQUEST, get_more_hotels),\n    takeLatest(ActionTypes.ADD_CARD_REQUEST, add_card),\n    takeLatest(ActionTypes.CREATE_BOOKING_REQUEST, create_booking),\n    takeLatest(ActionTypes.GET_BOOKINGS_REQUEST, get_bookings),\n  ]);\n}\n\nexport default watchBookRequests;\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/navigation/rootNavigation.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/auth.tsx"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/screens/Login.tsx",{"fileContent":"import React, {useEffect, useState} from 'react';\nimport {\n  StyleSheet,\n  TouchableWithoutFeedback,\n  Text,\n  View,\n  Image,\n} from 'react-native';\nimport {Layout, Input} from '@ui-kitten/components';\nimport {Button} from 'react-native-elements';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport {NativeStackNavigationProp} from '@react-navigation/native-stack';\nimport {useDispatch} from 'react-redux';\nimport {RootState} from '../redux/reducers';\nimport {loginRequest} from '../redux/actions';\nimport {LoginFormMessages} from '../utils/actionTypes';\n\nconst Login: React.FC = () => {\n  let passwordRef: any = null;\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [selectedField, setSelectedField] = useState('');\n  const [secureTextEntry, setSecureTextEntry] = useState(true);\n  const [isValid, setIsValid] = useState(null);\n  const [emailIsValid, setEmailIsValid] = useState(null);\n  const [emailValueIsValid, setEmailValueIsValid] = useState(null);\n  const [pwdIsValid, setPwdIsValid] = useState(null);\n\n  const renderPasswordIcon = () => (\n    <TouchableWithoutFeedback onPress={toggleSecureEntry}>\n      <Icon name={secureTextEntry ? 'eye-slash' : 'eye'} size={20} />\n    </TouchableWithoutFeedback>\n  );\n\n  const renderValidInputIcon = () => (\n    <TouchableWithoutFeedback onPress={toggleSecureEntry}>\n      <Icon name={'check-circle'} size={20} color={'green'} />\n    </TouchableWithoutFeedback>\n  );\n\n  const renderInvalidInputIcon = () => (\n    <TouchableWithoutFeedback onPress={toggleSecureEntry}>\n      <Icon name={'exclamation-circle'} size={20} color={'#ff375d'} />\n    </TouchableWithoutFeedback>\n  );\n\n  const toggleSecureEntry = () => {\n    setSecureTextEntry(!secureTextEntry);\n  };\n\n  const updateFields = (field: string, value: string) => {\n    if (field === 'email') {\n      setEmail(value);\n    } else {\n      setPassword(value);\n    }\n    setSelectedField(field);\n  };\n\n  const validateFields = () => {\n    switch (selectedField) {\n      case 'email': {\n        const emailValid = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(\n          email,\n        );\n        if (email) {\n          setEmailIsValid(true);\n\n          if (email && !emailValid) {\n            setEmailValueIsValid(false);\n          } else if (emailValid) {\n            setEmailValueIsValid(true);\n          }\n        } else {\n          setEmailValueIsValid(null);\n          setEmailIsValid(false);\n        }\n        break;\n      }\n      case 'password': {\n        if (password) {\n          setPwdIsValid(true);\n        } else {\n          setPwdIsValid(false);\n        }\n        break;\n      }\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    validateFields();\n  }, [email, password]);\n\n  const login = () => {\n    dispatch(loginRequest(email, password));\n  };\n\n  useEffect(() => {\n    const validateForm = () => {\n      if (pwdIsValid && emailIsValid && emailValueIsValid) {\n        setIsValid(true);\n      } else {\n        setIsValid(false);\n      }\n    };\n    validateForm();\n  }, [emailIsValid, emailValueIsValid, pwdIsValid]);\n\n  return (\n    <Layout style={styles.container}>\n      <Image\n        testID=\"logo\"\n        source={require('../assets/logo.png')}\n        style={styles.logo}\n      />\n      <View style={styles.form}>\n        <View style={styles.inputContainer}>\n          <Input\n            testID=\"email\"\n            autoFocus\n            label=\"Email Address\"\n            placeholder=\"Place your email address\"\n            placeholderTextColor=\"#000\"\n            keyboardType=\"email-address\"\n            status={\n              emailIsValid && emailValueIsValid\n                ? 'success'\n                : emailIsValid === false || emailValueIsValid === false\n                ? 'danger'\n                : 'basic'\n            }\n            accessoryRight={\n              emailIsValid && emailValueIsValid\n                ? renderValidInputIcon\n                : emailIsValid === false || emailValueIsValid === false\n                ? renderInvalidInputIcon\n                : null\n            }\n            value={email}\n            onChangeText={text => updateFields('email', text)}\n            onSubmitEditing={() => passwordRef.focus()}\n          />\n          {emailIsValid === false && (\n            <View style={styles.errorContainer}>\n              <Icon\n                name=\"exclamation-triangle\"\n                color={'#ff375d'}\n                size={8}\n                style={styles.errorIcon}\n              />\n              <Text style={styles.errorStyle}>{LoginFormMessages.email}</Text>\n            </View>\n          )}\n          {emailValueIsValid === false && (\n            <View style={styles.errorContainer}>\n              <Icon\n                name=\"exclamation-triangle\"\n                color={'#ff375d'}\n                size={8}\n                style={styles.errorIcon}\n              />\n              <Text style={styles.errorStyle}>\n                {LoginFormMessages.emailNotValid}\n              </Text>\n            </View>\n          )}\n        </View>\n        <View style={styles.inputContainer}>\n          <Input\n            testID=\"password\"\n            ref={ref => (passwordRef = ref)}\n            label=\"Password\"\n            placeholder=\"Place your password\"\n            placeholderTextColor=\"#000\"\n            secureTextEntry={secureTextEntry}\n            accessoryRight={renderPasswordIcon}\n            value={password}\n            status={\n              pwdIsValid ? 'success' : pwdIsValid === false ? 'danger' : 'basic'\n            }\n            onChangeText={text => updateFields('password', text)}\n            onSubmitEditing={() => login()}\n          />\n          {pwdIsValid === false && (\n            <View style={styles.errorContainer}>\n              <Icon\n                name=\"exclamation-triangle\"\n                color={'#ff375d'}\n                size={8}\n                style={styles.errorIcon}\n              />\n              <Text style={styles.errorStyle}>\n                {LoginFormMessages.password}\n              </Text>\n            </View>\n          )}\n        </View>\n\n        <View style={styles.buttonContainer}>\n          <Button\n            testID=\"login-btn\"\n            title={'Login'}\n            containerStyle={{width: 'auto'}}\n            buttonStyle={styles.button}\n            titleStyle={styles.textButton}\n            type=\"solid\"\n            disabled={!isValid}\n            onPress={() => login()}\n          />\n        </View>\n      </View>\n    </Layout>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n    // padding: 10,\n    paddingTop: 40,\n  },\n  logo: {\n    height: 200,\n    width: 400,\n    marginBottom: 100,\n  },\n  form: {\n    flex: 1,\n  },\n  row: {\n    flexDirection: 'row',\n    padding: 10,\n  },\n  inputContainer: {\n    width: 300,\n    marginBottom: 25,\n  },\n  textInput: {\n    fontSize: 16,\n  },\n  buttonContainer: {marginTop: 10},\n  button: {\n    backgroundColor: '#2756a1',\n    borderRadius: 10,\n    width: '100%',\n    height: 50,\n  },\n  textButton: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  errorContainer: {\n    flexDirection: 'row',\n    marginTop: 5,\n    paddingLeft: 10,\n  },\n  errorIcon: {\n    paddingTop: 4,\n  },\n  errorStyle: {\n    fontSize: 12,\n    marginLeft: 3,\n    color: '#ff375d',\n  },\n});\n\nexport default Login;\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/hotel.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/navigation.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/__tests__/auth.test.ts",{"fileContent":"import ActionTypes from '../../../utils/actionTypes';\nimport {checkUser, loginRequest, saveAccount} from '..';\nimport {emptyUser} from '../../../models/user';\n\ndescribe('Test auth actions', () => {\n  it('should dispatch checkUser action', () => {\n    const expectedAction = {\n      type: ActionTypes.CHECK_USER_REQUEST,\n    };\n    expect(checkUser()).toEqual(expectedAction);\n  });\n  it('should dispatch loginRequest action with the correct params', () => {\n    const email = 'test@test.com';\n    const password = 'Azerty!@#@@';\n\n    const expectedAction = {\n      type: ActionTypes.LOGIN_REQUEST,\n      email,\n      password,\n    };\n    expect(loginRequest(email, password)).toEqual(expectedAction);\n  });\n\n  it('should dispatch saveAccount action with the correct params', () => {\n    const account = emptyUser;\n\n    const expectedAction = {\n      type: ActionTypes.SAVE_ACCOUNT_REQUEST,\n      account,\n    };\n    expect(saveAccount(account)).toEqual(expectedAction);\n  });\n});\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/user.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/navigation.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/card.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/__tests__/auth.test.ts",{"fileContent":"import ActionTypes from '../../../utils/actionTypes';\nimport {authActions, AuthState} from '../../../types';\nimport auth from '../auth';\nimport {emptyUser} from '../../../models/user';\n\nconst defaultState: AuthState = {\n  fetching: false,\n  isLoggedIn: false,\n  message: '',\n  error: false,\n  user: emptyUser,\n  success: false,\n};\nconst noAction: authActions = {\n  type: '',\n  payload: null,\n};\nconst error_message = 'Error from API';\nconst success_message = 'Succes message from API';\n\ndescribe('Test auth reducer', () => {\n  it('should return the initial state when state is undefined', () => {\n    expect(auth(undefined, noAction)).toEqual(defaultState);\n  });\n\n  it(\"should handle the 'API_CALL_REQUEST' action\", () => {\n    const expectedState = {...defaultState, fetching: true};\n    const fecthPayload: authActions = {\n      type: ActionTypes.API_CALL_REQUEST,\n      payload: {...defaultState, fetching: true},\n    };\n\n    expect(auth(undefined, fecthPayload)).toEqual(expectedState);\n  });\n\n  it(\"should handle the 'API_CALL_SUCCESS' action\", () => {\n    const expectedState = {...defaultState, success: true};\n    const fecthSuccessPayload: authActions = {\n      type: ActionTypes.API_CALL_SUCCESS,\n      payload: {fetching: false, success: true},\n    };\n\n    expect(auth(undefined, fecthSuccessPayload)).toEqual(expectedState);\n  });\n\n  it(\"should handle the 'API_CALL_FAILURE' action\", () => {\n    const expectedState = {\n      ...defaultState,\n      error: true,\n      message: error_message,\n    };\n    const fecthFailurePayload: authActions = {\n      type: ActionTypes.API_CALL_FAILURE,\n      payload: {fetching: false, error: true, message: error_message},\n    };\n\n    expect(auth(undefined, fecthFailurePayload)).toEqual(expectedState);\n  });\n\n  it(\"should handle the 'SUCCESS_OPERATION' action\", () => {\n    const expectedState = {\n      ...defaultState,\n      success: true,\n      message: success_message,\n    };\n    const fecthSuccessOperationPayload: authActions = {\n      type: ActionTypes.SUCCESS_OPERATION,\n      payload: {fetching: false, success: true, message: success_message},\n    };\n\n    expect(auth(undefined, fecthSuccessOperationPayload)).toEqual(\n      expectedState,\n    );\n  });\n\n  it(\"should handle the 'CHECK_USER_SUCCESS' action for logged user\", () => {\n    const expectedState = {\n      ...defaultState,\n      isLoggedIn: true,\n      user: emptyUser,\n    };\n    const checkUserSuccessPayload: authActions = {\n      type: ActionTypes.CHECK_USER_SUCCESS,\n      payload: {isLoggedIn: true, user: emptyUser},\n    };\n\n    expect(auth(undefined, checkUserSuccessPayload)).toEqual(expectedState);\n  });\n\n  it(\"should handle the 'CHECK_USER_SUCCESS' action for guest user\", () => {\n    const expectedState = {\n      ...defaultState,\n      isLoggedIn: false,\n      user: emptyUser,\n    };\n    const checkUserSuccessPayload: authActions = {\n      type: ActionTypes.CHECK_USER_SUCCESS,\n      payload: {isLoggedIn: false, user: null},\n    };\n\n    expect(auth(undefined, checkUserSuccessPayload)).toEqual(expectedState);\n  });\n\n  it(\"should handle the 'LOGIN_SUCCESS' action\", () => {\n    const expectedState = {\n      ...defaultState,\n      isLoggedIn: true,\n      user: emptyUser,\n    };\n    const loginSuccessPayload: authActions = {\n      type: ActionTypes.LOGIN_SUCCESS,\n      payload: {isLoggedIn: true, user: emptyUser},\n    };\n\n    expect(auth(undefined, loginSuccessPayload)).toEqual(expectedState);\n  });\n});\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/user.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/hotel.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/types/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/card.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/screens/__tests__/home.test.tsx",{"fileContent":"import React from 'react';\nimport configureStore from 'redux-mock-store';\nimport {cleanup, screen} from '@testing-library/react-native';\n\nimport Home from '../Home';\nimport {getHotels} from '../../redux/actions';\nimport hotels_response from './fixtures/hotels_response.json';\nimport Setup from '../Setup';\n\nlet mockStore = configureStore();\n\nconst store = mockStore({\n  hotel: {\n    hotels: hotels_response.hotels,\n  },\n});\n\ndescribe('Test homepage screen', () => {\n  beforeEach(() => {\n    store.dispatch = jest.fn();\n    Setup(<Home hotels={hotels_response.hotels} />, store);\n  });\n\n  afterEach(cleanup);\n\n  it('fetches the hotels on mount', () => {\n    const expectedAction = getHotels({q: '', page: 1});\n    expect(store.dispatch).toHaveBeenCalledTimes(1);\n    expect(store.dispatch).toHaveBeenCalledWith(expectedAction);\n  });\n\n  it('should display the list of hotels', () => {\n    expect(screen.getByTestId('search-box')).toBeDefined();\n  });\n\n  it('should render a list of hotels', () => {\n    hotels_response.hotels.forEach(hotel => {\n      const hotelName = screen.getByText(hotel.name);\n      const addressElement = screen.getByText(hotel.short_address);\n      expect(hotelName).toBeDefined();\n      expect(addressElement).toBeDefined();\n    });\n  });\n});\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/screens/Home.tsx","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/screens/__tests__/fixtures/hotels_response.json","/Users/Amine/Desktop/projects/BookingHotelsApp/src/screens/Setup.tsx","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/reducers/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/components/home/HotelItem.tsx","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/navigation.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/__tests__/auth.test.ts",{"fileContent":"import {takeLatest, all} from 'redux-saga/effects';\nimport {AxiosResponse} from 'axios';\nimport {CommonActions} from '@react-navigation/native';\nimport recordSaga from '../recordSaga';\nimport watchAuthRequest, {\n  check_user_request,\n  login_request,\n  save_account,\n} from '../auth';\nimport ActionTypes from '../../..//utils/actionTypes';\nimport * as api from '../../../api/auth';\nimport {IUser} from '../../../models';\nimport {navigateToScreen} from '../../../redux/actions';\n\nconst error_message = 'Error from API';\nconst success_message = 'SUCCESS_OPERATION';\n\ndescribe('Test watchAuthRequest sagas', () => {\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it(\"should call 'all' with the correct functions\", async () => {\n    const genObject = watchAuthRequest();\n    const effects = genObject.next().value;\n    expect(effects).toEqual(\n      all([\n        takeLatest(ActionTypes.SAVE_ACCOUNT_REQUEST, save_account),\n        takeLatest(ActionTypes.LOGIN_REQUEST, login_request),\n        takeLatest(ActionTypes.CHECK_USER_REQUEST, check_user_request),\n      ]),\n    );\n  });\n\n  //Test check_user_request saga\n  describe('Test check_user_request saga', () => {\n    it('should call api and dispatch success action', async () => {\n      const currUser: IUser = {\n        _id: '1',\n        firstname: 'test',\n        lastname: 'test',\n        fullname: 'test test',\n        email: 'test@test.com',\n        phone: '',\n        password: '',\n        cards: [],\n      };\n      const res: AxiosResponse<any> = {\n        data: {\n          ok: true,\n          result: {\n            user: currUser,\n          },\n        },\n        status: 200,\n        statusText: '',\n        headers: {},\n        config: {},\n      };\n\n      const checkUserRequest = jest\n        .spyOn(api, 'checkUser')\n        .mockImplementation(() => Promise.resolve(res));\n\n      const dispatched = await recordSaga(check_user_request, null);\n      expect(checkUserRequest).toHaveBeenCalledTimes(1);\n      const expectedDispatched = [\n        {\n          type: ActionTypes.API_CALL_REQUEST,\n        },\n        {\n          type: ActionTypes.API_CALL_SUCCESS,\n        },\n        {type: ActionTypes.CHECK_USER_SUCCESS, payload: {user: currUser}},\n      ];\n      expect(dispatched).toEqual(expectedDispatched);\n      checkUserRequest.mockClear();\n    });\n\n    it('should check_user_request saga disptach failure from the server', async () => {\n      const res: AxiosResponse<any> = {\n        data: {\n          ok: false,\n          result: {\n            message: error_message,\n            user: null,\n          },\n        },\n        status: 200,\n        statusText: '',\n        headers: {},\n        config: {},\n      };\n      const checkUserRequest = jest\n        .spyOn(api, 'checkUser')\n        .mockImplementation(() => Promise.resolve(res));\n\n      const dispatched = await recordSaga(check_user_request, null);\n      expect(checkUserRequest).toHaveBeenCalledTimes(1);\n\n      const expectedDispatched = [\n        {\n          type: ActionTypes.API_CALL_REQUEST,\n        },\n        {\n          type: ActionTypes.API_CALL_FAILURE,\n          payload: {message: error_message},\n        },\n      ];\n      expect(dispatched).toEqual(expectedDispatched);\n      checkUserRequest.mockClear();\n    });\n\n    it('should check_user_request saga disptach failure', async () => {\n      const checkUserRequest = jest\n        .spyOn(api, 'checkUser')\n        .mockImplementation(() => Promise.reject(new Error(error_message)));\n\n      const dispatched = await recordSaga(check_user_request, null);\n      expect(checkUserRequest).toHaveBeenCalledTimes(1);\n\n      const expectedDispatched = [\n        {\n          type: ActionTypes.API_CALL_REQUEST,\n        },\n        {\n          type: ActionTypes.API_CALL_FAILURE,\n          payload: {message: error_message},\n        },\n      ];\n      expect(dispatched).toEqual(expectedDispatched);\n      checkUserRequest.mockClear();\n    });\n  });\n\n  //Test login_request saga\n  describe('Test login_request saga', () => {\n    const action = {\n      email: 'test@test.com',\n      password: 'Azerty123@@',\n    };\n    it('should call api and dispatch success action', async () => {\n      const currUser: IUser = {\n        _id: '1',\n        firstname: 'test',\n        lastname: 'test',\n        fullname: 'test test',\n        email: 'test@test.com',\n        phone: '',\n        password: '',\n        cards: [],\n      };\n      const res: AxiosResponse<any> = {\n        data: {\n          ok: true,\n          result: {\n            user: currUser,\n          },\n        },\n        status: 200,\n        statusText: '',\n        headers: {},\n        config: {},\n      };\n      const loginRequest = jest\n        .spyOn(api, 'login')\n        .mockImplementation(() => Promise.resolve(res));\n\n      const dispatched = await recordSaga(login_request, action);\n      expect(loginRequest).toHaveBeenCalledTimes(1);\n\n      const expectedDispatched = [\n        {\n          type: ActionTypes.API_CALL_REQUEST,\n        },\n        {\n          type: ActionTypes.API_CALL_SUCCESS,\n        },\n        {type: ActionTypes.LOGIN_SUCCESS, payload: {user: currUser}},\n        navigateToScreen('Overview', {}),\n      ];\n      expect(dispatched).toEqual(expectedDispatched);\n      loginRequest.mockClear();\n    });\n\n    it('should login_request saga disptach failure from the server', async () => {\n      const res: AxiosResponse<any> = {\n        data: {\n          ok: false,\n          result: {\n            message: error_message,\n            user: null,\n          },\n        },\n        status: 200,\n        statusText: '',\n        headers: {},\n        config: {},\n      };\n      const loginRequest = jest\n        .spyOn(api, 'login')\n        .mockImplementation(() => Promise.resolve(res));\n\n      const dispatched = await recordSaga(login_request, action);\n      expect(loginRequest).toHaveBeenCalledTimes(1);\n\n      const expectedDispatched = [\n        {\n          type: ActionTypes.API_CALL_REQUEST,\n        },\n        {\n          type: ActionTypes.API_CALL_FAILURE,\n          payload: {message: error_message},\n        },\n      ];\n      expect(dispatched).toEqual(expectedDispatched);\n      loginRequest.mockClear();\n    });\n\n    it('should login_request saga disptach failure', async () => {\n      const loginRequest = jest\n        .spyOn(api, 'login')\n        .mockImplementation(() => Promise.reject(new Error(error_message)));\n\n      const dispatched = await recordSaga(login_request, action);\n      expect(loginRequest).toHaveBeenCalledTimes(1);\n\n      const expectedDispatched = [\n        {\n          type: ActionTypes.API_CALL_REQUEST,\n        },\n        {\n          type: ActionTypes.API_CALL_FAILURE,\n          payload: {message: error_message},\n        },\n      ];\n      expect(dispatched).toEqual(expectedDispatched);\n      loginRequest.mockClear();\n    });\n  });\n\n  //Test save_account saga\n  describe('Test save_account saga', () => {\n    const currUser: IUser = {\n      _id: '1',\n      firstname: 'test',\n      lastname: 'test',\n      fullname: 'test test',\n      email: 'test@test.com',\n      phone: '',\n      password: '',\n      cards: [],\n    };\n    const action = {\n      account: currUser,\n      navigation: {\n        pop: jest.fn(),\n      },\n    };\n    it('should call api and dispatch success action', async () => {\n      const res: AxiosResponse<any> = {\n        data: {\n          ok: true,\n          result: {\n            message: success_message,\n            user: currUser,\n          },\n        },\n        status: 200,\n        statusText: '',\n        headers: {},\n        config: {},\n      };\n      const saveAccountRequest = jest\n        .spyOn(api, 'saveAccount')\n        .mockImplementation(() => Promise.resolve(res));\n\n      const dispatched = await recordSaga(save_account, action);\n      expect(saveAccountRequest).toHaveBeenCalledTimes(1);\n\n      const expectedDispatched = [\n        {\n          type: ActionTypes.API_CALL_REQUEST,\n        },\n        {\n          type: ActionTypes.SUCCESS_OPERATION,\n          payload: {message: success_message},\n        },\n        {type: ActionTypes.CREATE_ACCOUNT_SUCCESS, payload: {user: currUser}},\n        CommonActions.goBack(),\n        CommonActions.navigate({name: 'Login'}),\n      ];\n      expect(dispatched).toEqual(expectedDispatched);\n      saveAccountRequest.mockClear();\n    });\n\n    it('should login_request saga disptach failure from the server', async () => {\n      const res: AxiosResponse<any> = {\n        data: {\n          ok: false,\n          result: {\n            message: error_message,\n            user: null,\n          },\n        },\n        status: 200,\n        statusText: '',\n        headers: {},\n        config: {},\n      };\n      const saveAccountRequest = jest\n        .spyOn(api, 'saveAccount')\n        .mockImplementation(() => Promise.resolve(res));\n\n      const dispatched = await recordSaga(save_account, action);\n      expect(saveAccountRequest).toHaveBeenCalledTimes(1);\n\n      const expectedDispatched = [\n        {\n          type: ActionTypes.API_CALL_REQUEST,\n        },\n        {\n          type: ActionTypes.API_CALL_FAILURE,\n          payload: {message: error_message},\n        },\n      ];\n      expect(dispatched).toEqual(expectedDispatched);\n      saveAccountRequest.mockClear();\n    });\n\n    it('should login_request saga disptach failure', async () => {\n      const saveAccountRequest = jest\n        .spyOn(api, 'saveAccount')\n        .mockImplementation(() => Promise.reject(new Error(error_message)));\n\n      const dispatched = await recordSaga(save_account, action);\n      expect(saveAccountRequest).toHaveBeenCalledTimes(1);\n\n      const expectedDispatched = [\n        {\n          type: ActionTypes.API_CALL_REQUEST,\n        },\n        {\n          type: ActionTypes.API_CALL_FAILURE,\n          payload: {message: error_message},\n        },\n      ];\n      expect(dispatched).toEqual(expectedDispatched);\n      saveAccountRequest.mockClear();\n    });\n  });\n});\n","resolvedModuleNames":["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/recordSaga.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/actionTypes.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/auth.tsx","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/api/index.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/navigation/rootNavigation.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/utils/adapter.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/user.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/hotel.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/room.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/models/card.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/book.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/auth.ts","/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/actions/navigation.ts"]}],["/Users/Amine/Desktop/projects/BookingHotelsApp/src/redux/sagas/recordSaga.ts",{"fileContent":"import {runSaga} from 'redux-saga';\n\nasync function recordSaga(saga: any, initialAction: any) {\n  const dispatched: Array<any> = [];\n\n  await runSaga(\n    {\n      dispatch: action => dispatched.push(action),\n    },\n    saga,\n    initialAction,\n  );\n\n  return dispatched;\n}\n\nexport default recordSaga;\n","resolvedModuleNames":[]}]]